
Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce88  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00015e94  0800d018  0800d018  0000e018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022eac  08022eac  000241d4  2**0
                  CONTENTS
  4 .ARM          00000008  08022eac  08022eac  00023eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022eb4  08022eb4  000241d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08022eb4  08022eb4  00023eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08022eb8  08022eb8  00023eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08022ebc  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000034ec  200001d4  08023090  000241d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200036c0  08023090  000246c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000241d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001afc4  00000000  00000000  00024204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e19  00000000  00000000  0003f1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001660  00000000  00000000  00042fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000115b  00000000  00000000  00044648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a673  00000000  00000000  000457a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e18c  00000000  00000000  0006fe16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f99c6  00000000  00000000  0008dfa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00187968  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f44  00000000  00000000  001879ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0018e8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d000 	.word	0x0800d000

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800d000 	.word	0x0800d000

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <InitCommunication>:
volatile uint8_t Rx_data;
char messageBuffer[MAX_MSG_LEN];
int bufferIndex = 0;
int isReceiving = 0;

void InitCommunication(void) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
    HAL_UART_Transmit(&huart2, (uint8_t*)"UART Initialized\r\n", 17, 100);
 8000e9c:	2364      	movs	r3, #100	@ 0x64
 8000e9e:	2211      	movs	r2, #17
 8000ea0:	4905      	ldr	r1, [pc, #20]	@ (8000eb8 <InitCommunication+0x20>)
 8000ea2:	4806      	ldr	r0, [pc, #24]	@ (8000ebc <InitCommunication+0x24>)
 8000ea4:	f005 feb4 	bl	8006c10 <HAL_UART_Transmit>
    HAL_UART_Receive_IT(&huart2, (uint8_t*)&Rx_data, 1);
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	4905      	ldr	r1, [pc, #20]	@ (8000ec0 <InitCommunication+0x28>)
 8000eac:	4803      	ldr	r0, [pc, #12]	@ (8000ebc <InitCommunication+0x24>)
 8000eae:	f005 ff39 	bl	8006d24 <HAL_UART_Receive_IT>
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	0800d018 	.word	0x0800d018
 8000ebc:	200034e8 	.word	0x200034e8
 8000ec0:	200001f0 	.word	0x200001f0

08000ec4 <ParseCommand>:

void ParseCommand(char* msg, char* cmd, int* speed) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
    char* token = strtok(msg, ",");
 8000ed0:	490e      	ldr	r1, [pc, #56]	@ (8000f0c <ParseCommand+0x48>)
 8000ed2:	68f8      	ldr	r0, [r7, #12]
 8000ed4:	f009 ff2a 	bl	800ad2c <strtok>
 8000ed8:	6178      	str	r0, [r7, #20]
    if (token != NULL) {
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d011      	beq.n	8000f04 <ParseCommand+0x40>
        *cmd = token[0];  // Zapisz pierwszy znak jako komendę
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	781a      	ldrb	r2, [r3, #0]
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	701a      	strb	r2, [r3, #0]
        token = strtok(NULL, "#");  // Użyj # jako delimiter, nie kolejnego przecinka
 8000ee8:	4909      	ldr	r1, [pc, #36]	@ (8000f10 <ParseCommand+0x4c>)
 8000eea:	2000      	movs	r0, #0
 8000eec:	f009 ff1e 	bl	800ad2c <strtok>
 8000ef0:	6178      	str	r0, [r7, #20]
        if (token != NULL) {
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d005      	beq.n	8000f04 <ParseCommand+0x40>
            *speed = atoi(token);
 8000ef8:	6978      	ldr	r0, [r7, #20]
 8000efa:	f009 f8e5 	bl	800a0c8 <atoi>
 8000efe:	4602      	mov	r2, r0
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	601a      	str	r2, [r3, #0]
        }
    }
}
 8000f04:	bf00      	nop
 8000f06:	3718      	adds	r7, #24
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	0800d02c 	.word	0x0800d02c
 8000f10:	0800d030 	.word	0x0800d030

08000f14 <ProcessCommand>:

void ProcessCommand(char* msg) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b0a4      	sub	sp, #144	@ 0x90
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
    char cmd;
    int speed = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    ParseCommand(msg, &cmd, &speed);  // Przekaż adresy zmiennych
 8000f22:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 8000f26:	f107 038f 	add.w	r3, r7, #143	@ 0x8f
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f7ff ffc9 	bl	8000ec4 <ParseCommand>

    // Debug - wyświetl otrzymaną komendę
    char debug_msg[64];
    sprintf(debug_msg, "Received: CMD=%c, Speed=%d\r\n", cmd, speed);
 8000f32:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8000f36:	461a      	mov	r2, r3
 8000f38:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000f3c:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8000f40:	4949      	ldr	r1, [pc, #292]	@ (8001068 <ProcessCommand+0x154>)
 8000f42:	f009 fd1d 	bl	800a980 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)debug_msg, strlen(debug_msg), 100);
 8000f46:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff f990 	bl	8000270 <strlen>
 8000f50:	4603      	mov	r3, r0
 8000f52:	b29a      	uxth	r2, r3
 8000f54:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8000f58:	2364      	movs	r3, #100	@ 0x64
 8000f5a:	4844      	ldr	r0, [pc, #272]	@ (800106c <ProcessCommand+0x158>)
 8000f5c:	f005 fe58 	bl	8006c10 <HAL_UART_Transmit>

    // Przed wykonaniem komendy, wyświetl wartości PWM
    char debug_pwm[64];
    sprintf(debug_pwm, "Setting PWM to: %d\r\n", speed);
 8000f60:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8000f64:	f107 0308 	add.w	r3, r7, #8
 8000f68:	4941      	ldr	r1, [pc, #260]	@ (8001070 <ProcessCommand+0x15c>)
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f009 fd08 	bl	800a980 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)debug_pwm, strlen(debug_pwm), 100);
 8000f70:	f107 0308 	add.w	r3, r7, #8
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff f97b 	bl	8000270 <strlen>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	b29a      	uxth	r2, r3
 8000f7e:	f107 0108 	add.w	r1, r7, #8
 8000f82:	2364      	movs	r3, #100	@ 0x64
 8000f84:	4839      	ldr	r0, [pc, #228]	@ (800106c <ProcessCommand+0x158>)
 8000f86:	f005 fe43 	bl	8006c10 <HAL_UART_Transmit>

    switch(cmd) {
 8000f8a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8000f8e:	3b42      	subs	r3, #66	@ 0x42
 8000f90:	2b11      	cmp	r3, #17
 8000f92:	d864      	bhi.n	800105e <ProcessCommand+0x14a>
 8000f94:	a201      	add	r2, pc, #4	@ (adr r2, 8000f9c <ProcessCommand+0x88>)
 8000f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f9a:	bf00      	nop
 8000f9c:	08001001 	.word	0x08001001
 8000fa0:	0800105f 	.word	0x0800105f
 8000fa4:	0800105f 	.word	0x0800105f
 8000fa8:	0800105f 	.word	0x0800105f
 8000fac:	08000fe5 	.word	0x08000fe5
 8000fb0:	0800105f 	.word	0x0800105f
 8000fb4:	0800105f 	.word	0x0800105f
 8000fb8:	0800105f 	.word	0x0800105f
 8000fbc:	0800105f 	.word	0x0800105f
 8000fc0:	0800105f 	.word	0x0800105f
 8000fc4:	0800101d 	.word	0x0800101d
 8000fc8:	0800105f 	.word	0x0800105f
 8000fcc:	0800105f 	.word	0x0800105f
 8000fd0:	0800105f 	.word	0x0800105f
 8000fd4:	0800105f 	.word	0x0800105f
 8000fd8:	0800105f 	.word	0x0800105f
 8000fdc:	08001039 	.word	0x08001039
 8000fe0:	08001055 	.word	0x08001055
        case CMD_FORWARD:
            SetMotorDirection(1, 1);
 8000fe4:	2101      	movs	r1, #1
 8000fe6:	2001      	movs	r0, #1
 8000fe8:	f000 fc68 	bl	80018bc <SetMotorDirection>
            SetMotorsPWM(speed, speed);
 8000fec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	f000 fc9f 	bl	800193c <SetMotorsPWM>
            break;
 8000ffe:	e02e      	b.n	800105e <ProcessCommand+0x14a>

        case CMD_BACKWARD:
            SetMotorDirection(0, 0);
 8001000:	2100      	movs	r1, #0
 8001002:	2000      	movs	r0, #0
 8001004:	f000 fc5a 	bl	80018bc <SetMotorDirection>
            SetMotorsPWM(speed, speed);
 8001008:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800100c:	461a      	mov	r2, r3
 800100e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001012:	4619      	mov	r1, r3
 8001014:	4610      	mov	r0, r2
 8001016:	f000 fc91 	bl	800193c <SetMotorsPWM>
            break;
 800101a:	e020      	b.n	800105e <ProcessCommand+0x14a>

        case CMD_LEFT:
            SetMotorDirection(1, 0);
 800101c:	2100      	movs	r1, #0
 800101e:	2001      	movs	r0, #1
 8001020:	f000 fc4c 	bl	80018bc <SetMotorDirection>
            SetMotorsPWM(speed, speed);
 8001024:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001028:	461a      	mov	r2, r3
 800102a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800102e:	4619      	mov	r1, r3
 8001030:	4610      	mov	r0, r2
 8001032:	f000 fc83 	bl	800193c <SetMotorsPWM>
            break;
 8001036:	e012      	b.n	800105e <ProcessCommand+0x14a>

        case CMD_RIGHT:
            SetMotorDirection(0, 1);
 8001038:	2101      	movs	r1, #1
 800103a:	2000      	movs	r0, #0
 800103c:	f000 fc3e 	bl	80018bc <SetMotorDirection>
            SetMotorsPWM(speed, speed);
 8001040:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001044:	461a      	mov	r2, r3
 8001046:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800104a:	4619      	mov	r1, r3
 800104c:	4610      	mov	r0, r2
 800104e:	f000 fc75 	bl	800193c <SetMotorsPWM>
            break;
 8001052:	e004      	b.n	800105e <ProcessCommand+0x14a>

        case CMD_STOP:
            SetMotorsPWM(0, 0);
 8001054:	2100      	movs	r1, #0
 8001056:	2000      	movs	r0, #0
 8001058:	f000 fc70 	bl	800193c <SetMotorsPWM>
            break;
 800105c:	bf00      	nop
    }
}
 800105e:	bf00      	nop
 8001060:	3790      	adds	r7, #144	@ 0x90
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	0800d034 	.word	0x0800d034
 800106c:	200034e8 	.word	0x200034e8
 8001070:	0800d054 	.word	0x0800d054

08001074 <SendPWMFeedback>:
void SendPWMFeedback(float pwmL, float pwmR) {
 8001074:	b5b0      	push	{r4, r5, r7, lr}
 8001076:	b08c      	sub	sp, #48	@ 0x30
 8001078:	af02      	add	r7, sp, #8
 800107a:	ed87 0a01 	vstr	s0, [r7, #4]
 800107e:	edc7 0a00 	vstr	s1, [r7]
    char buffer[32];
    // Dodaj qDebug do sprawdzenia wartości przed wysłaniem
    sprintf(buffer, "$PWM,%.2f,%.2f#\r\n", pwm_L, pwm_R);
 8001082:	4b14      	ldr	r3, [pc, #80]	@ (80010d4 <SendPWMFeedback+0x60>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff fa5e 	bl	8000548 <__aeabi_f2d>
 800108c:	4604      	mov	r4, r0
 800108e:	460d      	mov	r5, r1
 8001090:	4b11      	ldr	r3, [pc, #68]	@ (80010d8 <SendPWMFeedback+0x64>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fa57 	bl	8000548 <__aeabi_f2d>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	f107 0008 	add.w	r0, r7, #8
 80010a2:	e9cd 2300 	strd	r2, r3, [sp]
 80010a6:	4622      	mov	r2, r4
 80010a8:	462b      	mov	r3, r5
 80010aa:	490c      	ldr	r1, [pc, #48]	@ (80010dc <SendPWMFeedback+0x68>)
 80010ac:	f009 fc68 	bl	800a980 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 80010b0:	f107 0308 	add.w	r3, r7, #8
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff f8db 	bl	8000270 <strlen>
 80010ba:	4603      	mov	r3, r0
 80010bc:	b29a      	uxth	r2, r3
 80010be:	f107 0108 	add.w	r1, r7, #8
 80010c2:	2364      	movs	r3, #100	@ 0x64
 80010c4:	4806      	ldr	r0, [pc, #24]	@ (80010e0 <SendPWMFeedback+0x6c>)
 80010c6:	f005 fda3 	bl	8006c10 <HAL_UART_Transmit>
}
 80010ca:	bf00      	nop
 80010cc:	3728      	adds	r7, #40	@ 0x28
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bdb0      	pop	{r4, r5, r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000318 	.word	0x20000318
 80010d8:	2000031c 	.word	0x2000031c
 80010dc:	0800d06c 	.word	0x0800d06c
 80010e0:	200034e8 	.word	0x200034e8

080010e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08a      	sub	sp, #40	@ 0x28
 80010e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ea:	f107 0314 	add.w	r3, r7, #20
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	60da      	str	r2, [r3, #12]
 80010f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010fa:	4b3c      	ldr	r3, [pc, #240]	@ (80011ec <MX_GPIO_Init+0x108>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010fe:	4a3b      	ldr	r2, [pc, #236]	@ (80011ec <MX_GPIO_Init+0x108>)
 8001100:	f043 0304 	orr.w	r3, r3, #4
 8001104:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001106:	4b39      	ldr	r3, [pc, #228]	@ (80011ec <MX_GPIO_Init+0x108>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110a:	f003 0304 	and.w	r3, r3, #4
 800110e:	613b      	str	r3, [r7, #16]
 8001110:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001112:	4b36      	ldr	r3, [pc, #216]	@ (80011ec <MX_GPIO_Init+0x108>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001116:	4a35      	ldr	r2, [pc, #212]	@ (80011ec <MX_GPIO_Init+0x108>)
 8001118:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800111c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800111e:	4b33      	ldr	r3, [pc, #204]	@ (80011ec <MX_GPIO_Init+0x108>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001122:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800112a:	4b30      	ldr	r3, [pc, #192]	@ (80011ec <MX_GPIO_Init+0x108>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112e:	4a2f      	ldr	r2, [pc, #188]	@ (80011ec <MX_GPIO_Init+0x108>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001136:	4b2d      	ldr	r3, [pc, #180]	@ (80011ec <MX_GPIO_Init+0x108>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	60bb      	str	r3, [r7, #8]
 8001140:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001142:	4b2a      	ldr	r3, [pc, #168]	@ (80011ec <MX_GPIO_Init+0x108>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001146:	4a29      	ldr	r2, [pc, #164]	@ (80011ec <MX_GPIO_Init+0x108>)
 8001148:	f043 0302 	orr.w	r3, r3, #2
 800114c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800114e:	4b27      	ldr	r3, [pc, #156]	@ (80011ec <MX_GPIO_Init+0x108>)
 8001150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	607b      	str	r3, [r7, #4]
 8001158:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800115a:	2200      	movs	r2, #0
 800115c:	2120      	movs	r1, #32
 800115e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001162:	f002 f85b 	bl	800321c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001166:	2200      	movs	r2, #0
 8001168:	f44f 7158 	mov.w	r1, #864	@ 0x360
 800116c:	4820      	ldr	r0, [pc, #128]	@ (80011f0 <MX_GPIO_Init+0x10c>)
 800116e:	f002 f855 	bl	800321c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001172:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001176:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001178:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800117c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	4619      	mov	r1, r3
 8001188:	4819      	ldr	r0, [pc, #100]	@ (80011f0 <MX_GPIO_Init+0x10c>)
 800118a:	f001 fe9d 	bl	8002ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800118e:	2320      	movs	r3, #32
 8001190:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001192:	2301      	movs	r3, #1
 8001194:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119a:	2300      	movs	r3, #0
 800119c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800119e:	f107 0314 	add.w	r3, r7, #20
 80011a2:	4619      	mov	r1, r3
 80011a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011a8:	f001 fe8e 	bl	8002ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 80011ac:	f44f 7358 	mov.w	r3, #864	@ 0x360
 80011b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b2:	2301      	movs	r3, #1
 80011b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ba:	2300      	movs	r3, #0
 80011bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	4619      	mov	r1, r3
 80011c4:	480a      	ldr	r0, [pc, #40]	@ (80011f0 <MX_GPIO_Init+0x10c>)
 80011c6:	f001 fe7f 	bl	8002ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011ca:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	4619      	mov	r1, r3
 80011de:	4805      	ldr	r0, [pc, #20]	@ (80011f4 <MX_GPIO_Init+0x110>)
 80011e0:	f001 fe72 	bl	8002ec8 <HAL_GPIO_Init>

}
 80011e4:	bf00      	nop
 80011e6:	3728      	adds	r7, #40	@ 0x28
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40021000 	.word	0x40021000
 80011f0:	48000800 	.word	0x48000800
 80011f4:	48000400 	.word	0x48000400

080011f8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011fc:	4b1b      	ldr	r3, [pc, #108]	@ (800126c <MX_I2C1_Init+0x74>)
 80011fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001270 <MX_I2C1_Init+0x78>)
 8001200:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8001202:	4b1a      	ldr	r3, [pc, #104]	@ (800126c <MX_I2C1_Init+0x74>)
 8001204:	4a1b      	ldr	r2, [pc, #108]	@ (8001274 <MX_I2C1_Init+0x7c>)
 8001206:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001208:	4b18      	ldr	r3, [pc, #96]	@ (800126c <MX_I2C1_Init+0x74>)
 800120a:	2200      	movs	r2, #0
 800120c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800120e:	4b17      	ldr	r3, [pc, #92]	@ (800126c <MX_I2C1_Init+0x74>)
 8001210:	2201      	movs	r2, #1
 8001212:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001214:	4b15      	ldr	r3, [pc, #84]	@ (800126c <MX_I2C1_Init+0x74>)
 8001216:	2200      	movs	r2, #0
 8001218:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800121a:	4b14      	ldr	r3, [pc, #80]	@ (800126c <MX_I2C1_Init+0x74>)
 800121c:	2200      	movs	r2, #0
 800121e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001220:	4b12      	ldr	r3, [pc, #72]	@ (800126c <MX_I2C1_Init+0x74>)
 8001222:	2200      	movs	r2, #0
 8001224:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001226:	4b11      	ldr	r3, [pc, #68]	@ (800126c <MX_I2C1_Init+0x74>)
 8001228:	2200      	movs	r2, #0
 800122a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800122c:	4b0f      	ldr	r3, [pc, #60]	@ (800126c <MX_I2C1_Init+0x74>)
 800122e:	2200      	movs	r2, #0
 8001230:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001232:	480e      	ldr	r0, [pc, #56]	@ (800126c <MX_I2C1_Init+0x74>)
 8001234:	f002 f80a 	bl	800324c <HAL_I2C_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800123e:	f000 fb36 	bl	80018ae <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001242:	2100      	movs	r1, #0
 8001244:	4809      	ldr	r0, [pc, #36]	@ (800126c <MX_I2C1_Init+0x74>)
 8001246:	f002 fe79 	bl	8003f3c <HAL_I2CEx_ConfigAnalogFilter>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001250:	f000 fb2d 	bl	80018ae <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001254:	2100      	movs	r1, #0
 8001256:	4805      	ldr	r0, [pc, #20]	@ (800126c <MX_I2C1_Init+0x74>)
 8001258:	f002 febb 	bl	8003fd2 <HAL_I2CEx_ConfigDigitalFilter>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001262:	f000 fb24 	bl	80018ae <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	2000020c 	.word	0x2000020c
 8001270:	40005400 	.word	0x40005400
 8001274:	10d19ce4 	.word	0x10d19ce4

08001278 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800127c:	4b1b      	ldr	r3, [pc, #108]	@ (80012ec <MX_I2C2_Init+0x74>)
 800127e:	4a1c      	ldr	r2, [pc, #112]	@ (80012f0 <MX_I2C2_Init+0x78>)
 8001280:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 8001282:	4b1a      	ldr	r3, [pc, #104]	@ (80012ec <MX_I2C2_Init+0x74>)
 8001284:	4a1b      	ldr	r2, [pc, #108]	@ (80012f4 <MX_I2C2_Init+0x7c>)
 8001286:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001288:	4b18      	ldr	r3, [pc, #96]	@ (80012ec <MX_I2C2_Init+0x74>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800128e:	4b17      	ldr	r3, [pc, #92]	@ (80012ec <MX_I2C2_Init+0x74>)
 8001290:	2201      	movs	r2, #1
 8001292:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001294:	4b15      	ldr	r3, [pc, #84]	@ (80012ec <MX_I2C2_Init+0x74>)
 8001296:	2200      	movs	r2, #0
 8001298:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800129a:	4b14      	ldr	r3, [pc, #80]	@ (80012ec <MX_I2C2_Init+0x74>)
 800129c:	2200      	movs	r2, #0
 800129e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012a0:	4b12      	ldr	r3, [pc, #72]	@ (80012ec <MX_I2C2_Init+0x74>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012a6:	4b11      	ldr	r3, [pc, #68]	@ (80012ec <MX_I2C2_Init+0x74>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012ac:	4b0f      	ldr	r3, [pc, #60]	@ (80012ec <MX_I2C2_Init+0x74>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80012b2:	480e      	ldr	r0, [pc, #56]	@ (80012ec <MX_I2C2_Init+0x74>)
 80012b4:	f001 ffca 	bl	800324c <HAL_I2C_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80012be:	f000 faf6 	bl	80018ae <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012c2:	2100      	movs	r1, #0
 80012c4:	4809      	ldr	r0, [pc, #36]	@ (80012ec <MX_I2C2_Init+0x74>)
 80012c6:	f002 fe39 	bl	8003f3c <HAL_I2CEx_ConfigAnalogFilter>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80012d0:	f000 faed 	bl	80018ae <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80012d4:	2100      	movs	r1, #0
 80012d6:	4805      	ldr	r0, [pc, #20]	@ (80012ec <MX_I2C2_Init+0x74>)
 80012d8:	f002 fe7b 	bl	8003fd2 <HAL_I2CEx_ConfigDigitalFilter>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80012e2:	f000 fae4 	bl	80018ae <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000260 	.word	0x20000260
 80012f0:	40005800 	.word	0x40005800
 80012f4:	10d19ce4 	.word	0x10d19ce4

080012f8 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80012fc:	4b1b      	ldr	r3, [pc, #108]	@ (800136c <MX_I2C3_Init+0x74>)
 80012fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001370 <MX_I2C3_Init+0x78>)
 8001300:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00F12981;
 8001302:	4b1a      	ldr	r3, [pc, #104]	@ (800136c <MX_I2C3_Init+0x74>)
 8001304:	4a1b      	ldr	r2, [pc, #108]	@ (8001374 <MX_I2C3_Init+0x7c>)
 8001306:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001308:	4b18      	ldr	r3, [pc, #96]	@ (800136c <MX_I2C3_Init+0x74>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800130e:	4b17      	ldr	r3, [pc, #92]	@ (800136c <MX_I2C3_Init+0x74>)
 8001310:	2201      	movs	r2, #1
 8001312:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001314:	4b15      	ldr	r3, [pc, #84]	@ (800136c <MX_I2C3_Init+0x74>)
 8001316:	2200      	movs	r2, #0
 8001318:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800131a:	4b14      	ldr	r3, [pc, #80]	@ (800136c <MX_I2C3_Init+0x74>)
 800131c:	2200      	movs	r2, #0
 800131e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001320:	4b12      	ldr	r3, [pc, #72]	@ (800136c <MX_I2C3_Init+0x74>)
 8001322:	2200      	movs	r2, #0
 8001324:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001326:	4b11      	ldr	r3, [pc, #68]	@ (800136c <MX_I2C3_Init+0x74>)
 8001328:	2200      	movs	r2, #0
 800132a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800132c:	4b0f      	ldr	r3, [pc, #60]	@ (800136c <MX_I2C3_Init+0x74>)
 800132e:	2200      	movs	r2, #0
 8001330:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001332:	480e      	ldr	r0, [pc, #56]	@ (800136c <MX_I2C3_Init+0x74>)
 8001334:	f001 ff8a 	bl	800324c <HAL_I2C_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800133e:	f000 fab6 	bl	80018ae <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001342:	2100      	movs	r1, #0
 8001344:	4809      	ldr	r0, [pc, #36]	@ (800136c <MX_I2C3_Init+0x74>)
 8001346:	f002 fdf9 	bl	8003f3c <HAL_I2CEx_ConfigAnalogFilter>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001350:	f000 faad 	bl	80018ae <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001354:	2100      	movs	r1, #0
 8001356:	4805      	ldr	r0, [pc, #20]	@ (800136c <MX_I2C3_Init+0x74>)
 8001358:	f002 fe3b 	bl	8003fd2 <HAL_I2CEx_ConfigDigitalFilter>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001362:	f000 faa4 	bl	80018ae <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	200002b4 	.word	0x200002b4
 8001370:	40005c00 	.word	0x40005c00
 8001374:	00f12981 	.word	0x00f12981

08001378 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b0b0      	sub	sp, #192	@ 0xc0
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001380:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001390:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001394:	2288      	movs	r2, #136	@ 0x88
 8001396:	2100      	movs	r1, #0
 8001398:	4618      	mov	r0, r3
 800139a:	f009 fd23 	bl	800ade4 <memset>
  if(i2cHandle->Instance==I2C1)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a63      	ldr	r2, [pc, #396]	@ (8001530 <HAL_I2C_MspInit+0x1b8>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d13b      	bne.n	8001420 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013a8:	2340      	movs	r3, #64	@ 0x40
 80013aa:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80013ac:	2300      	movs	r3, #0
 80013ae:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013b4:	4618      	mov	r0, r3
 80013b6:	f003 fcbd 	bl	8004d34 <HAL_RCCEx_PeriphCLKConfig>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80013c0:	f000 fa75 	bl	80018ae <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c4:	4b5b      	ldr	r3, [pc, #364]	@ (8001534 <HAL_I2C_MspInit+0x1bc>)
 80013c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c8:	4a5a      	ldr	r2, [pc, #360]	@ (8001534 <HAL_I2C_MspInit+0x1bc>)
 80013ca:	f043 0302 	orr.w	r3, r3, #2
 80013ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013d0:	4b58      	ldr	r3, [pc, #352]	@ (8001534 <HAL_I2C_MspInit+0x1bc>)
 80013d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d4:	f003 0302 	and.w	r3, r3, #2
 80013d8:	623b      	str	r3, [r7, #32]
 80013da:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013dc:	23c0      	movs	r3, #192	@ 0xc0
 80013de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013e2:	2312      	movs	r3, #18
 80013e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ee:	2303      	movs	r3, #3
 80013f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013f4:	2304      	movs	r3, #4
 80013f6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013fa:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80013fe:	4619      	mov	r1, r3
 8001400:	484d      	ldr	r0, [pc, #308]	@ (8001538 <HAL_I2C_MspInit+0x1c0>)
 8001402:	f001 fd61 	bl	8002ec8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001406:	4b4b      	ldr	r3, [pc, #300]	@ (8001534 <HAL_I2C_MspInit+0x1bc>)
 8001408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800140a:	4a4a      	ldr	r2, [pc, #296]	@ (8001534 <HAL_I2C_MspInit+0x1bc>)
 800140c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001410:	6593      	str	r3, [r2, #88]	@ 0x58
 8001412:	4b48      	ldr	r3, [pc, #288]	@ (8001534 <HAL_I2C_MspInit+0x1bc>)
 8001414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001416:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800141a:	61fb      	str	r3, [r7, #28]
 800141c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800141e:	e082      	b.n	8001526 <HAL_I2C_MspInit+0x1ae>
  else if(i2cHandle->Instance==I2C2)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a45      	ldr	r2, [pc, #276]	@ (800153c <HAL_I2C_MspInit+0x1c4>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d13c      	bne.n	80014a4 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800142a:	2380      	movs	r3, #128	@ 0x80
 800142c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800142e:	2300      	movs	r3, #0
 8001430:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001432:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001436:	4618      	mov	r0, r3
 8001438:	f003 fc7c 	bl	8004d34 <HAL_RCCEx_PeriphCLKConfig>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <HAL_I2C_MspInit+0xce>
      Error_Handler();
 8001442:	f000 fa34 	bl	80018ae <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001446:	4b3b      	ldr	r3, [pc, #236]	@ (8001534 <HAL_I2C_MspInit+0x1bc>)
 8001448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800144a:	4a3a      	ldr	r2, [pc, #232]	@ (8001534 <HAL_I2C_MspInit+0x1bc>)
 800144c:	f043 0302 	orr.w	r3, r3, #2
 8001450:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001452:	4b38      	ldr	r3, [pc, #224]	@ (8001534 <HAL_I2C_MspInit+0x1bc>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	61bb      	str	r3, [r7, #24]
 800145c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800145e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001462:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001466:	2312      	movs	r3, #18
 8001468:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001472:	2303      	movs	r3, #3
 8001474:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001478:	2304      	movs	r3, #4
 800147a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001482:	4619      	mov	r1, r3
 8001484:	482c      	ldr	r0, [pc, #176]	@ (8001538 <HAL_I2C_MspInit+0x1c0>)
 8001486:	f001 fd1f 	bl	8002ec8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800148a:	4b2a      	ldr	r3, [pc, #168]	@ (8001534 <HAL_I2C_MspInit+0x1bc>)
 800148c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800148e:	4a29      	ldr	r2, [pc, #164]	@ (8001534 <HAL_I2C_MspInit+0x1bc>)
 8001490:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001494:	6593      	str	r3, [r2, #88]	@ 0x58
 8001496:	4b27      	ldr	r3, [pc, #156]	@ (8001534 <HAL_I2C_MspInit+0x1bc>)
 8001498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800149a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800149e:	617b      	str	r3, [r7, #20]
 80014a0:	697b      	ldr	r3, [r7, #20]
}
 80014a2:	e040      	b.n	8001526 <HAL_I2C_MspInit+0x1ae>
  else if(i2cHandle->Instance==I2C3)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a25      	ldr	r2, [pc, #148]	@ (8001540 <HAL_I2C_MspInit+0x1c8>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d13b      	bne.n	8001526 <HAL_I2C_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80014ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014b2:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80014b4:	2300      	movs	r3, #0
 80014b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014bc:	4618      	mov	r0, r3
 80014be:	f003 fc39 	bl	8004d34 <HAL_RCCEx_PeriphCLKConfig>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <HAL_I2C_MspInit+0x154>
      Error_Handler();
 80014c8:	f000 f9f1 	bl	80018ae <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014cc:	4b19      	ldr	r3, [pc, #100]	@ (8001534 <HAL_I2C_MspInit+0x1bc>)
 80014ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d0:	4a18      	ldr	r2, [pc, #96]	@ (8001534 <HAL_I2C_MspInit+0x1bc>)
 80014d2:	f043 0304 	orr.w	r3, r3, #4
 80014d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014d8:	4b16      	ldr	r3, [pc, #88]	@ (8001534 <HAL_I2C_MspInit+0x1bc>)
 80014da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014dc:	f003 0304 	and.w	r3, r3, #4
 80014e0:	613b      	str	r3, [r7, #16]
 80014e2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80014e4:	2303      	movs	r3, #3
 80014e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014ea:	2312      	movs	r3, #18
 80014ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f6:	2303      	movs	r3, #3
 80014f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80014fc:	2304      	movs	r3, #4
 80014fe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001502:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001506:	4619      	mov	r1, r3
 8001508:	480e      	ldr	r0, [pc, #56]	@ (8001544 <HAL_I2C_MspInit+0x1cc>)
 800150a:	f001 fcdd 	bl	8002ec8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800150e:	4b09      	ldr	r3, [pc, #36]	@ (8001534 <HAL_I2C_MspInit+0x1bc>)
 8001510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001512:	4a08      	ldr	r2, [pc, #32]	@ (8001534 <HAL_I2C_MspInit+0x1bc>)
 8001514:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001518:	6593      	str	r3, [r2, #88]	@ 0x58
 800151a:	4b06      	ldr	r3, [pc, #24]	@ (8001534 <HAL_I2C_MspInit+0x1bc>)
 800151c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800151e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]
}
 8001526:	bf00      	nop
 8001528:	37c0      	adds	r7, #192	@ 0xc0
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40005400 	.word	0x40005400
 8001534:	40021000 	.word	0x40021000
 8001538:	48000400 	.word	0x48000400
 800153c:	40005800 	.word	0x40005800
 8001540:	40005c00 	.word	0x40005c00
 8001544:	48000800 	.word	0x48000800

08001548 <_write>:
    HAL_Delay(100);  // Krótkie mignięcie
    HAL_GPIO_TogglePin(LED_GPIO_PORT, LED_PIN);
}


int _write(int file, char* ptr, int len){
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	b29a      	uxth	r2, r3
 8001558:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800155c:	68b9      	ldr	r1, [r7, #8]
 800155e:	4804      	ldr	r0, [pc, #16]	@ (8001570 <_write+0x28>)
 8001560:	f005 fb56 	bl	8006c10 <HAL_UART_Transmit>
    return len;
 8001564:	687b      	ldr	r3, [r7, #4]
}
 8001566:	4618      	mov	r0, r3
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	200034e8 	.word	0x200034e8

08001574 <HAL_TIM_PeriodElapsedCallback>:

// Funkcja wywoływana przy przepełnieniu timera
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
    if (htim == &htim6) {
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4a11      	ldr	r2, [pc, #68]	@ (80015c4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d119      	bne.n	80015b8 <HAL_TIM_PeriodElapsedCallback+0x44>

        count = __HAL_TIM_GET_COUNTER(&htim2);
 8001584:	4b10      	ldr	r3, [pc, #64]	@ (80015c8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800158a:	4a10      	ldr	r2, [pc, #64]	@ (80015cc <HAL_TIM_PeriodElapsedCallback+0x58>)
 800158c:	6013      	str	r3, [r2, #0]
        count1 = __HAL_TIM_GET_COUNTER(&htim3);
 800158e:	4b10      	ldr	r3, [pc, #64]	@ (80015d0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001594:	4a0f      	ldr	r2, [pc, #60]	@ (80015d4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001596:	6013      	str	r3, [r2, #0]

        __HAL_TIM_SET_COUNTER(&htim2, 0);
 8001598:	4b0b      	ldr	r3, [pc, #44]	@ (80015c8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2200      	movs	r2, #0
 800159e:	625a      	str	r2, [r3, #36]	@ 0x24
        __HAL_TIM_SET_COUNTER(&htim3, 0);
 80015a0:	4b0b      	ldr	r3, [pc, #44]	@ (80015d0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2200      	movs	r2, #0
 80015a6:	625a      	str	r2, [r3, #36]	@ 0x24

        speed_L = count;
 80015a8:	4b08      	ldr	r3, [pc, #32]	@ (80015cc <HAL_TIM_PeriodElapsedCallback+0x58>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a0a      	ldr	r2, [pc, #40]	@ (80015d8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80015ae:	6013      	str	r3, [r2, #0]
        speed_R = count1;
 80015b0:	4b08      	ldr	r3, [pc, #32]	@ (80015d4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a09      	ldr	r2, [pc, #36]	@ (80015dc <HAL_TIM_PeriodElapsedCallback+0x68>)
 80015b6:	6013      	str	r3, [r2, #0]

    }
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	2000349c 	.word	0x2000349c
 80015c8:	20003404 	.word	0x20003404
 80015cc:	20000310 	.word	0x20000310
 80015d0:	20003450 	.word	0x20003450
 80015d4:	20000314 	.word	0x20000314
 80015d8:	20000308 	.word	0x20000308
 80015dc:	2000030c 	.word	0x2000030c

080015e0 <HAL_UART_RxCpltCallback>:

// Funkcja do przetwarzania danych odebranych przez UART


// Callback dla przerwania UART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a1d      	ldr	r2, [pc, #116]	@ (8001664 <HAL_UART_RxCpltCallback+0x84>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d133      	bne.n	800165a <HAL_UART_RxCpltCallback+0x7a>
        if (Rx_data == MSG_HEADER) {
 80015f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001668 <HAL_UART_RxCpltCallback+0x88>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	2b24      	cmp	r3, #36	@ 0x24
 80015fa:	d106      	bne.n	800160a <HAL_UART_RxCpltCallback+0x2a>
            isReceiving = 1;
 80015fc:	4b1b      	ldr	r3, [pc, #108]	@ (800166c <HAL_UART_RxCpltCallback+0x8c>)
 80015fe:	2201      	movs	r2, #1
 8001600:	601a      	str	r2, [r3, #0]
            bufferIndex = 0;
 8001602:	4b1b      	ldr	r3, [pc, #108]	@ (8001670 <HAL_UART_RxCpltCallback+0x90>)
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	e022      	b.n	8001650 <HAL_UART_RxCpltCallback+0x70>
        }
        else if (isReceiving) {
 800160a:	4b18      	ldr	r3, [pc, #96]	@ (800166c <HAL_UART_RxCpltCallback+0x8c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d01e      	beq.n	8001650 <HAL_UART_RxCpltCallback+0x70>
            if (Rx_data == MSG_FOOTER) {
 8001612:	4b15      	ldr	r3, [pc, #84]	@ (8001668 <HAL_UART_RxCpltCallback+0x88>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	b2db      	uxtb	r3, r3
 8001618:	2b23      	cmp	r3, #35	@ 0x23
 800161a:	d10b      	bne.n	8001634 <HAL_UART_RxCpltCallback+0x54>
                messageBuffer[bufferIndex] = '\0';
 800161c:	4b14      	ldr	r3, [pc, #80]	@ (8001670 <HAL_UART_RxCpltCallback+0x90>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a14      	ldr	r2, [pc, #80]	@ (8001674 <HAL_UART_RxCpltCallback+0x94>)
 8001622:	2100      	movs	r1, #0
 8001624:	54d1      	strb	r1, [r2, r3]
                ProcessCommand(messageBuffer);
 8001626:	4813      	ldr	r0, [pc, #76]	@ (8001674 <HAL_UART_RxCpltCallback+0x94>)
 8001628:	f7ff fc74 	bl	8000f14 <ProcessCommand>
                isReceiving = 0;
 800162c:	4b0f      	ldr	r3, [pc, #60]	@ (800166c <HAL_UART_RxCpltCallback+0x8c>)
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	e00d      	b.n	8001650 <HAL_UART_RxCpltCallback+0x70>
            }
            else if (bufferIndex < MAX_MSG_LEN - 1) {
 8001634:	4b0e      	ldr	r3, [pc, #56]	@ (8001670 <HAL_UART_RxCpltCallback+0x90>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2b0e      	cmp	r3, #14
 800163a:	dc09      	bgt.n	8001650 <HAL_UART_RxCpltCallback+0x70>
                messageBuffer[bufferIndex++] = Rx_data;
 800163c:	4b0c      	ldr	r3, [pc, #48]	@ (8001670 <HAL_UART_RxCpltCallback+0x90>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	1c5a      	adds	r2, r3, #1
 8001642:	490b      	ldr	r1, [pc, #44]	@ (8001670 <HAL_UART_RxCpltCallback+0x90>)
 8001644:	600a      	str	r2, [r1, #0]
 8001646:	4a08      	ldr	r2, [pc, #32]	@ (8001668 <HAL_UART_RxCpltCallback+0x88>)
 8001648:	7812      	ldrb	r2, [r2, #0]
 800164a:	b2d1      	uxtb	r1, r2
 800164c:	4a09      	ldr	r2, [pc, #36]	@ (8001674 <HAL_UART_RxCpltCallback+0x94>)
 800164e:	54d1      	strb	r1, [r2, r3]
            }
        }

        HAL_UART_Receive_IT(&huart2, (uint8_t*)&Rx_data, 1);
 8001650:	2201      	movs	r2, #1
 8001652:	4905      	ldr	r1, [pc, #20]	@ (8001668 <HAL_UART_RxCpltCallback+0x88>)
 8001654:	4808      	ldr	r0, [pc, #32]	@ (8001678 <HAL_UART_RxCpltCallback+0x98>)
 8001656:	f005 fb65 	bl	8006d24 <HAL_UART_Receive_IT>
    }
}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40004400 	.word	0x40004400
 8001668:	200001f0 	.word	0x200001f0
 800166c:	20000208 	.word	0x20000208
 8001670:	20000204 	.word	0x20000204
 8001674:	200001f4 	.word	0x200001f4
 8001678:	200034e8 	.word	0x200034e8

0800167c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b088      	sub	sp, #32
 8001680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  // Inicjalizacja zmiennych, struktur, PID itd.
  Odometry_Init(&odom);
 8001682:	4850      	ldr	r0, [pc, #320]	@ (80017c4 <main+0x148>)
 8001684:	f000 f9a8 	bl	80019d8 <Odometry_Init>
  PID_Init(&pid_L, 6, 1.5, 0.1, 1);
 8001688:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 800168c:	ed9f 1a4e 	vldr	s2, [pc, #312]	@ 80017c8 <main+0x14c>
 8001690:	eef7 0a08 	vmov.f32	s1, #120	@ 0x3fc00000  1.5
 8001694:	eeb1 0a08 	vmov.f32	s0, #24	@ 0x40c00000  6.0
 8001698:	484c      	ldr	r0, [pc, #304]	@ (80017cc <main+0x150>)
 800169a:	f000 f9c7 	bl	8001a2c <PID_Init>
  PID_Init(&pid_R, 6, 1.5, 0.3, 1);
 800169e:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 80016a2:	ed9f 1a4b 	vldr	s2, [pc, #300]	@ 80017d0 <main+0x154>
 80016a6:	eef7 0a08 	vmov.f32	s1, #120	@ 0x3fc00000  1.5
 80016aa:	eeb1 0a08 	vmov.f32	s0, #24	@ 0x40c00000  6.0
 80016ae:	4849      	ldr	r0, [pc, #292]	@ (80017d4 <main+0x158>)
 80016b0:	f000 f9bc 	bl	8001a2c <PID_Init>
  SetTarget(&target, 0.5f, 0);
 80016b4:	eddf 0a48 	vldr	s1, [pc, #288]	@ 80017d8 <main+0x15c>
 80016b8:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 80016bc:	4847      	ldr	r0, [pc, #284]	@ (80017dc <main+0x160>)
 80016be:	f000 f9a1 	bl	8001a04 <SetTarget>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016c2:	f001 f9d1 	bl	8002a68 <HAL_Init>

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c6:	463b      	mov	r3, r7
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
 80016d2:	611a      	str	r2, [r3, #16]
   GPIO_InitStruct.Pin = LED_PIN;
 80016d4:	2320      	movs	r3, #32
 80016d6:	603b      	str	r3, [r7, #0]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d8:	2301      	movs	r3, #1
 80016da:	607b      	str	r3, [r7, #4]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	60bb      	str	r3, [r7, #8]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e0:	2300      	movs	r3, #0
 80016e2:	60fb      	str	r3, [r7, #12]
   HAL_GPIO_Init(LED_GPIO_PORT, &GPIO_InitStruct);
 80016e4:	463b      	mov	r3, r7
 80016e6:	4619      	mov	r1, r3
 80016e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016ec:	f001 fbec 	bl	8002ec8 <HAL_GPIO_Init>
  /* USER CODE BEGIN Init */
  // Twoja inicjalizacja
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016f0:	f000 f88c 	bl	800180c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  // Dodatkowa konfiguracja systemu, jeśli potrzebna
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016f4:	f7ff fcf6 	bl	80010e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80016f8:	f001 f8f8 	bl	80028ec <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80016fc:	f000 fe88 	bl	8002410 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001700:	f000 ff22 	bl	8002548 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001704:	f000 ff74 	bl	80025f0 <MX_TIM3_Init>
  MX_TIM6_Init();
 8001708:	f000 ffc8 	bl	800269c <MX_TIM6_Init>
  MX_I2C3_Init();
 800170c:	f7ff fdf4 	bl	80012f8 <MX_I2C3_Init>
  MX_I2C1_Init();
 8001710:	f7ff fd72 	bl	80011f8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001714:	f7ff fdb0 	bl	8001278 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  uint8_t* rx_ptr = (uint8_t*)&Rx_data;
 8001718:	4b31      	ldr	r3, [pc, #196]	@ (80017e0 <main+0x164>)
 800171a:	61bb      	str	r3, [r7, #24]
  HAL_UART_Receive_IT(&huart2, rx_ptr, 1);
 800171c:	2201      	movs	r2, #1
 800171e:	69b9      	ldr	r1, [r7, #24]
 8001720:	4830      	ldr	r0, [pc, #192]	@ (80017e4 <main+0x168>)
 8001722:	f005 faff 	bl	8006d24 <HAL_UART_Receive_IT>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001726:	2100      	movs	r1, #0
 8001728:	482f      	ldr	r0, [pc, #188]	@ (80017e8 <main+0x16c>)
 800172a:	f004 f8df 	bl	80058ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800172e:	2104      	movs	r1, #4
 8001730:	482d      	ldr	r0, [pc, #180]	@ (80017e8 <main+0x16c>)
 8001732:	f004 f8db 	bl	80058ec <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001736:	213c      	movs	r1, #60	@ 0x3c
 8001738:	482c      	ldr	r0, [pc, #176]	@ (80017ec <main+0x170>)
 800173a:	f004 fa83 	bl	8005c44 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800173e:	213c      	movs	r1, #60	@ 0x3c
 8001740:	482b      	ldr	r0, [pc, #172]	@ (80017f0 <main+0x174>)
 8001742:	f004 fa7f 	bl	8005c44 <HAL_TIM_Encoder_Start>

  HAL_UART_Receive_IT(&huart2, (uint8_t*)&Rx_data, 1);
 8001746:	2201      	movs	r2, #1
 8001748:	4925      	ldr	r1, [pc, #148]	@ (80017e0 <main+0x164>)
 800174a:	4826      	ldr	r0, [pc, #152]	@ (80017e4 <main+0x168>)
 800174c:	f005 faea 	bl	8006d24 <HAL_UART_Receive_IT>

 // __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 200);
 // __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 200);

  HAL_TIM_Base_Start_IT(&htim6);
 8001750:	4828      	ldr	r0, [pc, #160]	@ (80017f4 <main+0x178>)
 8001752:	f004 f803 	bl	800575c <HAL_TIM_Base_Start_IT>

  // Skanowanie urządzeń I2C
  Scan_I2C_Devices();
 8001756:	f000 fc75 	bl	8002044 <Scan_I2C_Devices>

  // Inicjalizacja czujników
  init_sensors();
 800175a:	f000 fbc7 	bl	8001eec <init_sensors>
  sensorHandles[0].i2c_handle = &hi2c1;
  sensorHandles[1].i2c_handle = &hi2c2;
  sensorHandles[2].i2c_handle = &hi2c3;
  */

  InitCommunication();
 800175e:	f7ff fb9b 	bl	8000e98 <InitCommunication>

  // Informacja o starcie systemu
  HAL_UART_Transmit(&huart2, (uint8_t*)"System Ready\r\n", 13, 100);
 8001762:	2364      	movs	r3, #100	@ 0x64
 8001764:	220d      	movs	r2, #13
 8001766:	4924      	ldr	r1, [pc, #144]	@ (80017f8 <main+0x17c>)
 8001768:	481e      	ldr	r0, [pc, #120]	@ (80017e4 <main+0x168>)
 800176a:	f005 fa51 	bl	8006c10 <HAL_UART_Transmit>


  //SetMotorDirection(0,0);

  uint32_t prev_time = HAL_GetTick();
 800176e:	f001 f9eb 	bl	8002b48 <HAL_GetTick>
 8001772:	61f8      	str	r0, [r7, #28]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

      read_sensors();
 8001774:	f000 fa70 	bl	8001c58 <read_sensors>
 //     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 200);
 //     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 200);
      //printf("jaminkkkk \r\n");

      // Aktualizacja odometrii
      uint32_t current_time = HAL_GetTick();
 8001778:	f001 f9e6 	bl	8002b48 <HAL_GetTick>
 800177c:	6178      	str	r0, [r7, #20]
      dt = (current_time - prev_time) / 1000.0f; // Konwersja ms na s
 800177e:	697a      	ldr	r2, [r7, #20]
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	ee07 3a90 	vmov	s15, r3
 8001788:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800178c:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 80017fc <main+0x180>
 8001790:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001794:	4b1a      	ldr	r3, [pc, #104]	@ (8001800 <main+0x184>)
 8001796:	edc3 7a00 	vstr	s15, [r3]
      prev_time = current_time;
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	61fb      	str	r3, [r7, #28]

 //     Update_Odometry(&odom, speed_L, speed_R, dt);


      SendPWMFeedback(pwm_L, pwm_R);
 800179e:	4b19      	ldr	r3, [pc, #100]	@ (8001804 <main+0x188>)
 80017a0:	edd3 7a00 	vldr	s15, [r3]
 80017a4:	4b18      	ldr	r3, [pc, #96]	@ (8001808 <main+0x18c>)
 80017a6:	ed93 7a00 	vldr	s14, [r3]
 80017aa:	eef0 0a47 	vmov.f32	s1, s14
 80017ae:	eeb0 0a67 	vmov.f32	s0, s15
 80017b2:	f7ff fc5f 	bl	8001074 <SendPWMFeedback>
      //__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, (uint32_t)pwm_R);

      // Wysyłanie danych do aplikacji Qt
      //SendDataToQt(&odom, &target, pwm_L, pwm_R, speed_L, speed_R);

      HAL_Delay(1000); // Odpowiedni delay, aby nie przeciążać magistrali I2C
 80017b6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017ba:	f001 f9d1 	bl	8002b60 <HAL_Delay>
  {
 80017be:	bf00      	nop
 80017c0:	e7d8      	b.n	8001774 <main+0xf8>
 80017c2:	bf00      	nop
 80017c4:	20000320 	.word	0x20000320
 80017c8:	3dcccccd 	.word	0x3dcccccd
 80017cc:	20000340 	.word	0x20000340
 80017d0:	3e99999a 	.word	0x3e99999a
 80017d4:	20000360 	.word	0x20000360
 80017d8:	00000000 	.word	0x00000000
 80017dc:	20000334 	.word	0x20000334
 80017e0:	200001f0 	.word	0x200001f0
 80017e4:	200034e8 	.word	0x200034e8
 80017e8:	200033b8 	.word	0x200033b8
 80017ec:	20003404 	.word	0x20003404
 80017f0:	20003450 	.word	0x20003450
 80017f4:	2000349c 	.word	0x2000349c
 80017f8:	0800d080 	.word	0x0800d080
 80017fc:	447a0000 	.word	0x447a0000
 8001800:	2000033c 	.word	0x2000033c
 8001804:	20000318 	.word	0x20000318
 8001808:	2000031c 	.word	0x2000031c

0800180c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b096      	sub	sp, #88	@ 0x58
 8001810:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001812:	f107 0314 	add.w	r3, r7, #20
 8001816:	2244      	movs	r2, #68	@ 0x44
 8001818:	2100      	movs	r1, #0
 800181a:	4618      	mov	r0, r3
 800181c:	f009 fae2 	bl	800ade4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001820:	463b      	mov	r3, r7
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	605a      	str	r2, [r3, #4]
 8001828:	609a      	str	r2, [r3, #8]
 800182a:	60da      	str	r2, [r3, #12]
 800182c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800182e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001832:	f002 fc29 	bl	8004088 <HAL_PWREx_ControlVoltageScaling>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800183c:	f000 f837 	bl	80018ae <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001840:	2302      	movs	r3, #2
 8001842:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001844:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001848:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800184a:	2310      	movs	r3, #16
 800184c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800184e:	2302      	movs	r3, #2
 8001850:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001852:	2302      	movs	r3, #2
 8001854:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001856:	2301      	movs	r3, #1
 8001858:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800185a:	230a      	movs	r3, #10
 800185c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800185e:	2307      	movs	r3, #7
 8001860:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001862:	2302      	movs	r3, #2
 8001864:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001866:	2302      	movs	r3, #2
 8001868:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800186a:	f107 0314 	add.w	r3, r7, #20
 800186e:	4618      	mov	r0, r3
 8001870:	f002 fc60 	bl	8004134 <HAL_RCC_OscConfig>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800187a:	f000 f818 	bl	80018ae <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800187e:	230f      	movs	r3, #15
 8001880:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001882:	2303      	movs	r3, #3
 8001884:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001886:	2300      	movs	r3, #0
 8001888:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800188a:	2300      	movs	r3, #0
 800188c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800188e:	2300      	movs	r3, #0
 8001890:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001892:	463b      	mov	r3, r7
 8001894:	2104      	movs	r1, #4
 8001896:	4618      	mov	r0, r3
 8001898:	f003 f828 	bl	80048ec <HAL_RCC_ClockConfig>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80018a2:	f000 f804 	bl	80018ae <Error_Handler>
  }
}
 80018a6:	bf00      	nop
 80018a8:	3758      	adds	r7, #88	@ 0x58
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018b2:	b672      	cpsid	i
}
 80018b4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018b6:	bf00      	nop
 80018b8:	e7fd      	b.n	80018b6 <Error_Handler+0x8>
	...

080018bc <SetMotorDirection>:

    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
}

void SetMotorDirection(int direction_L, int direction_R) {
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
    if (direction_L == 1) {
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d10b      	bne.n	80018e4 <SetMotorDirection+0x28>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80018cc:	2201      	movs	r2, #1
 80018ce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018d2:	4819      	ldr	r0, [pc, #100]	@ (8001938 <SetMotorDirection+0x7c>)
 80018d4:	f001 fca2 	bl	800321c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 80018d8:	2200      	movs	r2, #0
 80018da:	2120      	movs	r1, #32
 80018dc:	4816      	ldr	r0, [pc, #88]	@ (8001938 <SetMotorDirection+0x7c>)
 80018de:	f001 fc9d 	bl	800321c <HAL_GPIO_WritePin>
 80018e2:	e00a      	b.n	80018fa <SetMotorDirection+0x3e>
    } else {
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80018e4:	2200      	movs	r2, #0
 80018e6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018ea:	4813      	ldr	r0, [pc, #76]	@ (8001938 <SetMotorDirection+0x7c>)
 80018ec:	f001 fc96 	bl	800321c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 80018f0:	2201      	movs	r2, #1
 80018f2:	2120      	movs	r1, #32
 80018f4:	4810      	ldr	r0, [pc, #64]	@ (8001938 <SetMotorDirection+0x7c>)
 80018f6:	f001 fc91 	bl	800321c <HAL_GPIO_WritePin>
    }

    if (direction_R == 1) {
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d10b      	bne.n	8001918 <SetMotorDirection+0x5c>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001900:	2200      	movs	r2, #0
 8001902:	2140      	movs	r1, #64	@ 0x40
 8001904:	480c      	ldr	r0, [pc, #48]	@ (8001938 <SetMotorDirection+0x7c>)
 8001906:	f001 fc89 	bl	800321c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800190a:	2201      	movs	r2, #1
 800190c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001910:	4809      	ldr	r0, [pc, #36]	@ (8001938 <SetMotorDirection+0x7c>)
 8001912:	f001 fc83 	bl	800321c <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
    }
}
 8001916:	e00a      	b.n	800192e <SetMotorDirection+0x72>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8001918:	2201      	movs	r2, #1
 800191a:	2140      	movs	r1, #64	@ 0x40
 800191c:	4806      	ldr	r0, [pc, #24]	@ (8001938 <SetMotorDirection+0x7c>)
 800191e:	f001 fc7d 	bl	800321c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8001922:	2200      	movs	r2, #0
 8001924:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001928:	4803      	ldr	r0, [pc, #12]	@ (8001938 <SetMotorDirection+0x7c>)
 800192a:	f001 fc77 	bl	800321c <HAL_GPIO_WritePin>
}
 800192e:	bf00      	nop
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	48000800 	.word	0x48000800

0800193c <SetMotorsPWM>:

void SetMotorsPWM(uint32_t pwm_left, uint32_t pwm_right) {
 800193c:	b580      	push	{r7, lr}
 800193e:	b092      	sub	sp, #72	@ 0x48
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
    // Aktualizacja globalnych zmiennych PWM
    pwm_L = pwm_left;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	ee07 3a90 	vmov	s15, r3
 800194c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001950:	4b1c      	ldr	r3, [pc, #112]	@ (80019c4 <SetMotorsPWM+0x88>)
 8001952:	edc3 7a00 	vstr	s15, [r3]
    pwm_R = pwm_right;
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	ee07 3a90 	vmov	s15, r3
 800195c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001960:	4b19      	ldr	r3, [pc, #100]	@ (80019c8 <SetMotorsPWM+0x8c>)
 8001962:	edc3 7a00 	vstr	s15, [r3]

    // Ograniczenie wartości PWM do bezpiecznego zakresu
    if (pwm_left > MAX_PWM) pwm_left = MAX_PWM;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800196c:	d902      	bls.n	8001974 <SetMotorsPWM+0x38>
 800196e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001972:	607b      	str	r3, [r7, #4]
    if (pwm_right > MAX_PWM) pwm_right = MAX_PWM;
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800197a:	d902      	bls.n	8001982 <SetMotorsPWM+0x46>
 800197c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001980:	603b      	str	r3, [r7, #0]
    if (pwm_left < MIN_PWM) pwm_left = MIN_PWM;
    if (pwm_right < MIN_PWM) pwm_right = MIN_PWM;

    // Debug
    char debug_msg[64];
    sprintf(debug_msg, "Setting PWM: L=%lu, R=%lu\r\n", pwm_left, pwm_right);
 8001982:	f107 0008 	add.w	r0, r7, #8
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	4910      	ldr	r1, [pc, #64]	@ (80019cc <SetMotorsPWM+0x90>)
 800198c:	f008 fff8 	bl	800a980 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)debug_msg, strlen(debug_msg), 100);
 8001990:	f107 0308 	add.w	r3, r7, #8
 8001994:	4618      	mov	r0, r3
 8001996:	f7fe fc6b 	bl	8000270 <strlen>
 800199a:	4603      	mov	r3, r0
 800199c:	b29a      	uxth	r2, r3
 800199e:	f107 0108 	add.w	r1, r7, #8
 80019a2:	2364      	movs	r3, #100	@ 0x64
 80019a4:	480a      	ldr	r0, [pc, #40]	@ (80019d0 <SetMotorsPWM+0x94>)
 80019a6:	f005 f933 	bl	8006c10 <HAL_UART_Transmit>

    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_left);
 80019aa:	4b0a      	ldr	r3, [pc, #40]	@ (80019d4 <SetMotorsPWM+0x98>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwm_right);
 80019b2:	4b08      	ldr	r3, [pc, #32]	@ (80019d4 <SetMotorsPWM+0x98>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	683a      	ldr	r2, [r7, #0]
 80019b8:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80019ba:	bf00      	nop
 80019bc:	3748      	adds	r7, #72	@ 0x48
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000318 	.word	0x20000318
 80019c8:	2000031c 	.word	0x2000031c
 80019cc:	0800d090 	.word	0x0800d090
 80019d0:	200034e8 	.word	0x200034e8
 80019d4:	200033b8 	.word	0x200033b8

080019d8 <Odometry_Init>:
#define ENCODER_1_RESOLUTION    14
#define MOTOR_1_GEAR            48
#define ENCODER_2_RESOLUTION    14
#define MOTOR_2_GEAR            48

void Odometry_Init(Odometry_TypeDef *odom) {
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
    odom->x = 0.0f;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f04f 0200 	mov.w	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
    odom->y = 0.0f;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f04f 0200 	mov.w	r2, #0
 80019ee:	605a      	str	r2, [r3, #4]
    odom->theta = 0.0f;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f04f 0200 	mov.w	r2, #0
 80019f6:	609a      	str	r2, [r3, #8]
}
 80019f8:	bf00      	nop
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <SetTarget>:
    odom->theta += omega * dt;
    odom->x += v * cos(odom->theta) * dt;
    odom->y += v * sin(odom->theta) * dt;
}

void SetTarget(Target_TypeDef *target, float x, float y) {
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001a10:	edc7 0a01 	vstr	s1, [r7, #4]
    target->x = x;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	68ba      	ldr	r2, [r7, #8]
 8001a18:	601a      	str	r2, [r3, #0]
    target->y = y;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	605a      	str	r2, [r3, #4]
}
 8001a20:	bf00      	nop
 8001a22:	3714      	adds	r7, #20
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <PID_Init>:

volatile int pid_iterations = 0;
PID_TypeDef pid_L, pid_R;
float speed_L_target, speed_R_target;

void PID_Init(PID_TypeDef *pid, float Kp, float Ki, float Kd, float setpoint) {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6178      	str	r0, [r7, #20]
 8001a34:	ed87 0a04 	vstr	s0, [r7, #16]
 8001a38:	edc7 0a03 	vstr	s1, [r7, #12]
 8001a3c:	ed87 1a02 	vstr	s2, [r7, #8]
 8001a40:	edc7 1a01 	vstr	s3, [r7, #4]
    pid->Kp = Kp;
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	601a      	str	r2, [r3, #0]
    pid->Ki = Ki;
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	68fa      	ldr	r2, [r7, #12]
 8001a4e:	605a      	str	r2, [r3, #4]
    pid->Kd = Kd;
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	68ba      	ldr	r2, [r7, #8]
 8001a54:	609a      	str	r2, [r3, #8]
    pid->setpoint = setpoint;
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	60da      	str	r2, [r3, #12]
    pid->prev_error = 0;
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	f04f 0200 	mov.w	r2, #0
 8001a62:	611a      	str	r2, [r3, #16]
    pid->integral = 0;
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	f04f 0200 	mov.w	r2, #0
 8001a6a:	615a      	str	r2, [r3, #20]
    pid->output = 0;
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	f04f 0200 	mov.w	r2, #0
 8001a72:	619a      	str	r2, [r3, #24]
    pid->prev_time = HAL_GetTick();
 8001a74:	f001 f868 	bl	8002b48 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	61da      	str	r2, [r3, #28]
}
 8001a7e:	bf00      	nop
 8001a80:	3718      	adds	r7, #24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <VL53L5CX_RdByte>:

uint8_t VL53L5CX_RdByte(
    VL53L5CX_Platform *p_platform,
    uint16_t RegisterAddress,
    uint8_t *p_value)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b08a      	sub	sp, #40	@ 0x28
 8001a8a:	af04      	add	r7, sp, #16
 8001a8c:	60f8      	str	r0, [r7, #12]
 8001a8e:	460b      	mov	r3, r1
 8001a90:	607a      	str	r2, [r7, #4]
 8001a92:	817b      	strh	r3, [r7, #10]
    // Upewnij się, że p_platform->i2c_handle i p_platform->address są ustawione
    if (p_platform->i2c_handle == NULL) return 1; // Błąd, brak uchwytu I2C
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <VL53L5CX_RdByte+0x1a>
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e016      	b.n	8001ace <VL53L5CX_RdByte+0x48>

    uint8_t status;
    status = HAL_I2C_Mem_Read(p_platform->i2c_handle, p_platform->address, RegisterAddress,
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	6818      	ldr	r0, [r3, #0]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	8899      	ldrh	r1, [r3, #4]
 8001aa8:	897a      	ldrh	r2, [r7, #10]
 8001aaa:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001aae:	9302      	str	r3, [sp, #8]
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	9301      	str	r3, [sp, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	2302      	movs	r3, #2
 8001aba:	f001 fd77 	bl	80035ac <HAL_I2C_Mem_Read>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	75fb      	strb	r3, [r7, #23]
                              I2C_MEMADD_SIZE_16BIT, p_value, 1, I2C_TIMEOUT);
    return (status == HAL_OK) ? 0 : 1;
 8001ac2:	7dfb      	ldrb	r3, [r7, #23]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	bf14      	ite	ne
 8001ac8:	2301      	movne	r3, #1
 8001aca:	2300      	moveq	r3, #0
 8001acc:	b2db      	uxtb	r3, r3
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3718      	adds	r7, #24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <VL53L5CX_WrByte>:

uint8_t VL53L5CX_WrByte(
    VL53L5CX_Platform *p_platform,
    uint16_t RegisterAddress,
    uint8_t value)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b088      	sub	sp, #32
 8001ada:	af04      	add	r7, sp, #16
 8001adc:	6078      	str	r0, [r7, #4]
 8001ade:	460b      	mov	r3, r1
 8001ae0:	807b      	strh	r3, [r7, #2]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	707b      	strb	r3, [r7, #1]
    if (p_platform->i2c_handle == NULL) return 1;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <VL53L5CX_WrByte+0x1c>
 8001aee:	2301      	movs	r3, #1
 8001af0:	e016      	b.n	8001b20 <VL53L5CX_WrByte+0x4a>

    uint8_t status;
    status = HAL_I2C_Mem_Write(p_platform->i2c_handle, p_platform->address, RegisterAddress,
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6818      	ldr	r0, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	8899      	ldrh	r1, [r3, #4]
 8001afa:	887a      	ldrh	r2, [r7, #2]
 8001afc:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001b00:	9302      	str	r3, [sp, #8]
 8001b02:	2301      	movs	r3, #1
 8001b04:	9301      	str	r3, [sp, #4]
 8001b06:	1c7b      	adds	r3, r7, #1
 8001b08:	9300      	str	r3, [sp, #0]
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	f001 fc3a 	bl	8003384 <HAL_I2C_Mem_Write>
 8001b10:	4603      	mov	r3, r0
 8001b12:	73fb      	strb	r3, [r7, #15]
                               I2C_MEMADD_SIZE_16BIT, &value, 1, I2C_TIMEOUT);
    return (status == HAL_OK) ? 0 : 1;
 8001b14:	7bfb      	ldrb	r3, [r7, #15]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	bf14      	ite	ne
 8001b1a:	2301      	movne	r3, #1
 8001b1c:	2300      	moveq	r3, #0
 8001b1e:	b2db      	uxtb	r3, r3
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3710      	adds	r7, #16
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <VL53L5CX_WrMulti>:
uint8_t VL53L5CX_WrMulti(
    VL53L5CX_Platform *p_platform,
    uint16_t RegisterAddress,
    uint8_t *p_values,
    uint32_t size)
{
 8001b28:	b590      	push	{r4, r7, lr}
 8001b2a:	b08b      	sub	sp, #44	@ 0x2c
 8001b2c:	af04      	add	r7, sp, #16
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	607a      	str	r2, [r7, #4]
 8001b32:	603b      	str	r3, [r7, #0]
 8001b34:	460b      	mov	r3, r1
 8001b36:	817b      	strh	r3, [r7, #10]
    if (p_platform->i2c_handle == NULL) return 1;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d101      	bne.n	8001b44 <VL53L5CX_WrMulti+0x1c>
 8001b40:	2301      	movs	r3, #1
 8001b42:	e017      	b.n	8001b74 <VL53L5CX_WrMulti+0x4c>

    uint8_t status;
    status = HAL_I2C_Mem_Write(p_platform->i2c_handle, p_platform->address, RegisterAddress,
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	6818      	ldr	r0, [r3, #0]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	8899      	ldrh	r1, [r3, #4]
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	897a      	ldrh	r2, [r7, #10]
 8001b52:	f241 3488 	movw	r4, #5000	@ 0x1388
 8001b56:	9402      	str	r4, [sp, #8]
 8001b58:	9301      	str	r3, [sp, #4]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	2302      	movs	r3, #2
 8001b60:	f001 fc10 	bl	8003384 <HAL_I2C_Mem_Write>
 8001b64:	4603      	mov	r3, r0
 8001b66:	75fb      	strb	r3, [r7, #23]
                               I2C_MEMADD_SIZE_16BIT, p_values, size, I2C_TIMEOUT);
    return (status == HAL_OK) ? 0 : 1;
 8001b68:	7dfb      	ldrb	r3, [r7, #23]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	bf14      	ite	ne
 8001b6e:	2301      	movne	r3, #1
 8001b70:	2300      	moveq	r3, #0
 8001b72:	b2db      	uxtb	r3, r3
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	371c      	adds	r7, #28
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd90      	pop	{r4, r7, pc}

08001b7c <VL53L5CX_RdMulti>:
uint8_t VL53L5CX_RdMulti(
    VL53L5CX_Platform *p_platform,
    uint16_t RegisterAddress,
    uint8_t *p_values,
    uint32_t size)
{
 8001b7c:	b590      	push	{r4, r7, lr}
 8001b7e:	b08b      	sub	sp, #44	@ 0x2c
 8001b80:	af04      	add	r7, sp, #16
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	607a      	str	r2, [r7, #4]
 8001b86:	603b      	str	r3, [r7, #0]
 8001b88:	460b      	mov	r3, r1
 8001b8a:	817b      	strh	r3, [r7, #10]
    if (p_platform->i2c_handle == NULL) return 1;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d101      	bne.n	8001b98 <VL53L5CX_RdMulti+0x1c>
 8001b94:	2301      	movs	r3, #1
 8001b96:	e017      	b.n	8001bc8 <VL53L5CX_RdMulti+0x4c>

    uint8_t status;
    status = HAL_I2C_Mem_Read(p_platform->i2c_handle, p_platform->address, RegisterAddress,
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6818      	ldr	r0, [r3, #0]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	8899      	ldrh	r1, [r3, #4]
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	897a      	ldrh	r2, [r7, #10]
 8001ba6:	f241 3488 	movw	r4, #5000	@ 0x1388
 8001baa:	9402      	str	r4, [sp, #8]
 8001bac:	9301      	str	r3, [sp, #4]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	9300      	str	r3, [sp, #0]
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	f001 fcfa 	bl	80035ac <HAL_I2C_Mem_Read>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	75fb      	strb	r3, [r7, #23]
                              I2C_MEMADD_SIZE_16BIT, p_values, size, I2C_TIMEOUT);
    return (status == HAL_OK) ? 0 : 1;
 8001bbc:	7dfb      	ldrb	r3, [r7, #23]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	bf14      	ite	ne
 8001bc2:	2301      	movne	r3, #1
 8001bc4:	2300      	moveq	r3, #0
 8001bc6:	b2db      	uxtb	r3, r3
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	371c      	adds	r7, #28
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd90      	pop	{r4, r7, pc}

08001bd0 <VL53L5CX_SwapBuffer>:
}

void VL53L5CX_SwapBuffer(
    uint8_t         *buffer,
    uint16_t          size)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	460b      	mov	r3, r1
 8001bda:	807b      	strh	r3, [r7, #2]
    uint32_t i, tmp;

    for(i = 0; i < size; i = i + 4)
 8001bdc:	2300      	movs	r3, #0
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	e021      	b.n	8001c26 <VL53L5CX_SwapBuffer+0x56>
    {
        tmp = (
          buffer[i]<<24)
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	4413      	add	r3, r2
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	061a      	lsls	r2, r3, #24
        |(buffer[i+1]<<16)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	6879      	ldr	r1, [r7, #4]
 8001bf2:	440b      	add	r3, r1
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	041b      	lsls	r3, r3, #16
 8001bf8:	431a      	orrs	r2, r3
        |(buffer[i+2]<<8)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	3302      	adds	r3, #2
 8001bfe:	6879      	ldr	r1, [r7, #4]
 8001c00:	440b      	add	r3, r1
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	021b      	lsls	r3, r3, #8
 8001c06:	4313      	orrs	r3, r2
        |(buffer[i+3]);
 8001c08:	68fa      	ldr	r2, [r7, #12]
 8001c0a:	3203      	adds	r2, #3
 8001c0c:	6879      	ldr	r1, [r7, #4]
 8001c0e:	440a      	add	r2, r1
 8001c10:	7812      	ldrb	r2, [r2, #0]
 8001c12:	4313      	orrs	r3, r2
        tmp = (
 8001c14:	60bb      	str	r3, [r7, #8]

        memcpy(&(buffer[i]), &tmp, 4);
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	68ba      	ldr	r2, [r7, #8]
 8001c1e:	601a      	str	r2, [r3, #0]
    for(i = 0; i < size; i = i + 4)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	3304      	adds	r3, #4
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	887b      	ldrh	r3, [r7, #2]
 8001c28:	68fa      	ldr	r2, [r7, #12]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d3d9      	bcc.n	8001be2 <VL53L5CX_SwapBuffer+0x12>
    }
}
 8001c2e:	bf00      	nop
 8001c30:	bf00      	nop
 8001c32:	3714      	adds	r7, #20
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <VL53L5CX_WaitMs>:

uint8_t VL53L5CX_WaitMs(
    VL53L5CX_Platform *p_platform,
    uint32_t TimeMs)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
    HAL_Delay(TimeMs);
 8001c46:	6838      	ldr	r0, [r7, #0]
 8001c48:	f000 ff8a 	bl	8002b60 <HAL_Delay>
    return 0;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
	...

08001c58 <read_sensors>:
extern UART_HandleTypeDef huart2;



// Funkcja odczytu danych z czujników
void read_sensors(void) {
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8001c5e:	af00      	add	r7, sp, #0
    uint8_t isReady;
    char buffer[512];
    int offset;

    // Odczyt z czujnika 1 (oznaczenie "A")
    isReady = 0;
 8001c60:	2300      	movs	r3, #0
 8001c62:	f887 3206 	strb.w	r3, [r7, #518]	@ 0x206
    status = vl53l5cx_check_data_ready(&dev1, &isReady);
 8001c66:	f207 2306 	addw	r3, r7, #518	@ 0x206
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4893      	ldr	r0, [pc, #588]	@ (8001ebc <read_sensors+0x264>)
 8001c6e:	f007 fcfb 	bl	8009668 <vl53l5cx_check_data_ready>
 8001c72:	4603      	mov	r3, r0
 8001c74:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    if (isReady) {
 8001c78:	f897 3206 	ldrb.w	r3, [r7, #518]	@ 0x206
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d052      	beq.n	8001d26 <read_sensors+0xce>
        status = vl53l5cx_get_ranging_data(&dev1, &results1);
 8001c80:	498f      	ldr	r1, [pc, #572]	@ (8001ec0 <read_sensors+0x268>)
 8001c82:	488e      	ldr	r0, [pc, #568]	@ (8001ebc <read_sensors+0x264>)
 8001c84:	f007 fd40 	bl	8009708 <vl53l5cx_get_ranging_data>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
        if (status == VL53L5CX_STATUS_OK) {
 8001c8e:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d147      	bne.n	8001d26 <read_sensors+0xce>
            // Wysyłamy literę 'A' i nową linię
            HAL_UART_Transmit(&huart2, (uint8_t *)"A\n", 2, HAL_MAX_DELAY);
 8001c96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	4989      	ldr	r1, [pc, #548]	@ (8001ec4 <read_sensors+0x26c>)
 8001c9e:	488a      	ldr	r0, [pc, #552]	@ (8001ec8 <read_sensors+0x270>)
 8001ca0:	f004 ffb6 	bl	8006c10 <HAL_UART_Transmit>

            offset = 0;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
            for (int i = 0; i < 64; i++) {
 8001caa:	2300      	movs	r3, #0
 8001cac:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 8001cb0:	e01b      	b.n	8001cea <read_sensors+0x92>
                offset += sprintf(buffer + offset, "%d ", results1.distance_mm[i]);
 8001cb2:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8001cb6:	1d3a      	adds	r2, r7, #4
 8001cb8:	18d0      	adds	r0, r2, r3
 8001cba:	4a81      	ldr	r2, [pc, #516]	@ (8001ec0 <read_sensors+0x268>)
 8001cbc:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8001cc0:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	4413      	add	r3, r2
 8001cc8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	497f      	ldr	r1, [pc, #508]	@ (8001ecc <read_sensors+0x274>)
 8001cd0:	f008 fe56 	bl	800a980 <siprintf>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8001cda:	4413      	add	r3, r2
 8001cdc:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
            for (int i = 0; i < 64; i++) {
 8001ce0:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 8001cea:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8001cee:	2b3f      	cmp	r3, #63	@ 0x3f
 8001cf0:	dddf      	ble.n	8001cb2 <read_sensors+0x5a>
            }
            offset += sprintf(buffer + offset, "\r\n");
 8001cf2:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8001cf6:	1d3a      	adds	r2, r7, #4
 8001cf8:	4413      	add	r3, r2
 8001cfa:	4975      	ldr	r1, [pc, #468]	@ (8001ed0 <read_sensors+0x278>)
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f008 fe3f 	bl	800a980 <siprintf>
 8001d02:	4602      	mov	r2, r0
 8001d04:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8001d08:	4413      	add	r3, r2
 8001d0a:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
            HAL_UART_Transmit(&huart2, (uint8_t *)buffer, offset, HAL_MAX_DELAY);
 8001d0e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	1d39      	adds	r1, r7, #4
 8001d16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d1a:	486b      	ldr	r0, [pc, #428]	@ (8001ec8 <read_sensors+0x270>)
 8001d1c:	f004 ff78 	bl	8006c10 <HAL_UART_Transmit>

            // Ponowne uruchomienie pomiaru
            vl53l5cx_start_ranging(&dev1);
 8001d20:	4866      	ldr	r0, [pc, #408]	@ (8001ebc <read_sensors+0x264>)
 8001d22:	f007 fb27 	bl	8009374 <vl53l5cx_start_ranging>
        }
    }

    // Odczyt z czujnika 2 (oznaczenie "B")
    isReady = 0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	f887 3206 	strb.w	r3, [r7, #518]	@ 0x206
    status = vl53l5cx_check_data_ready(&dev2, &isReady);
 8001d2c:	f207 2306 	addw	r3, r7, #518	@ 0x206
 8001d30:	4619      	mov	r1, r3
 8001d32:	4868      	ldr	r0, [pc, #416]	@ (8001ed4 <read_sensors+0x27c>)
 8001d34:	f007 fc98 	bl	8009668 <vl53l5cx_check_data_ready>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    if (isReady) {
 8001d3e:	f897 3206 	ldrb.w	r3, [r7, #518]	@ 0x206
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d052      	beq.n	8001dec <read_sensors+0x194>
        status = vl53l5cx_get_ranging_data(&dev2, &results2);
 8001d46:	4964      	ldr	r1, [pc, #400]	@ (8001ed8 <read_sensors+0x280>)
 8001d48:	4862      	ldr	r0, [pc, #392]	@ (8001ed4 <read_sensors+0x27c>)
 8001d4a:	f007 fcdd 	bl	8009708 <vl53l5cx_get_ranging_data>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
        if (status == VL53L5CX_STATUS_OK) {
 8001d54:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d147      	bne.n	8001dec <read_sensors+0x194>
            // Wysyłamy literę 'B' i nową linię
            HAL_UART_Transmit(&huart2, (uint8_t *)"B\n", 2, HAL_MAX_DELAY);
 8001d5c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d60:	2202      	movs	r2, #2
 8001d62:	495e      	ldr	r1, [pc, #376]	@ (8001edc <read_sensors+0x284>)
 8001d64:	4858      	ldr	r0, [pc, #352]	@ (8001ec8 <read_sensors+0x270>)
 8001d66:	f004 ff53 	bl	8006c10 <HAL_UART_Transmit>

            offset = 0;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
            for (int i = 0; i < 64; i++) {
 8001d70:	2300      	movs	r3, #0
 8001d72:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 8001d76:	e01b      	b.n	8001db0 <read_sensors+0x158>
                offset += sprintf(buffer + offset, "%d ", results2.distance_mm[i]);
 8001d78:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8001d7c:	1d3a      	adds	r2, r7, #4
 8001d7e:	18d0      	adds	r0, r2, r3
 8001d80:	4a55      	ldr	r2, [pc, #340]	@ (8001ed8 <read_sensors+0x280>)
 8001d82:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8001d86:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	4413      	add	r3, r2
 8001d8e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d92:	461a      	mov	r2, r3
 8001d94:	494d      	ldr	r1, [pc, #308]	@ (8001ecc <read_sensors+0x274>)
 8001d96:	f008 fdf3 	bl	800a980 <siprintf>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8001da0:	4413      	add	r3, r2
 8001da2:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
            for (int i = 0; i < 64; i++) {
 8001da6:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8001daa:	3301      	adds	r3, #1
 8001dac:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 8001db0:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8001db4:	2b3f      	cmp	r3, #63	@ 0x3f
 8001db6:	dddf      	ble.n	8001d78 <read_sensors+0x120>
            }
            offset += sprintf(buffer + offset, "\r\n");
 8001db8:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8001dbc:	1d3a      	adds	r2, r7, #4
 8001dbe:	4413      	add	r3, r2
 8001dc0:	4943      	ldr	r1, [pc, #268]	@ (8001ed0 <read_sensors+0x278>)
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f008 fddc 	bl	800a980 <siprintf>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8001dce:	4413      	add	r3, r2
 8001dd0:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
            HAL_UART_Transmit(&huart2, (uint8_t *)buffer, offset, HAL_MAX_DELAY);
 8001dd4:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	1d39      	adds	r1, r7, #4
 8001ddc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001de0:	4839      	ldr	r0, [pc, #228]	@ (8001ec8 <read_sensors+0x270>)
 8001de2:	f004 ff15 	bl	8006c10 <HAL_UART_Transmit>

            // Ponowne uruchomienie pomiaru
            vl53l5cx_start_ranging(&dev2);
 8001de6:	483b      	ldr	r0, [pc, #236]	@ (8001ed4 <read_sensors+0x27c>)
 8001de8:	f007 fac4 	bl	8009374 <vl53l5cx_start_ranging>
        }
    }

    // Odczyt z czujnika 3 (oznaczenie "C")
    isReady = 0;
 8001dec:	2300      	movs	r3, #0
 8001dee:	f887 3206 	strb.w	r3, [r7, #518]	@ 0x206
    status = vl53l5cx_check_data_ready(&dev3, &isReady);
 8001df2:	f207 2306 	addw	r3, r7, #518	@ 0x206
 8001df6:	4619      	mov	r1, r3
 8001df8:	4839      	ldr	r0, [pc, #228]	@ (8001ee0 <read_sensors+0x288>)
 8001dfa:	f007 fc35 	bl	8009668 <vl53l5cx_check_data_ready>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    if (isReady) {
 8001e04:	f897 3206 	ldrb.w	r3, [r7, #518]	@ 0x206
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d052      	beq.n	8001eb2 <read_sensors+0x25a>
        status = vl53l5cx_get_ranging_data(&dev3, &results3);
 8001e0c:	4935      	ldr	r1, [pc, #212]	@ (8001ee4 <read_sensors+0x28c>)
 8001e0e:	4834      	ldr	r0, [pc, #208]	@ (8001ee0 <read_sensors+0x288>)
 8001e10:	f007 fc7a 	bl	8009708 <vl53l5cx_get_ranging_data>
 8001e14:	4603      	mov	r3, r0
 8001e16:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
        if (status == VL53L5CX_STATUS_OK) {
 8001e1a:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d147      	bne.n	8001eb2 <read_sensors+0x25a>
            // Wysyłamy literę 'C' i nową linię
            HAL_UART_Transmit(&huart2, (uint8_t *)"C\n", 2, HAL_MAX_DELAY);
 8001e22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e26:	2202      	movs	r2, #2
 8001e28:	492f      	ldr	r1, [pc, #188]	@ (8001ee8 <read_sensors+0x290>)
 8001e2a:	4827      	ldr	r0, [pc, #156]	@ (8001ec8 <read_sensors+0x270>)
 8001e2c:	f004 fef0 	bl	8006c10 <HAL_UART_Transmit>

            offset = 0;
 8001e30:	2300      	movs	r3, #0
 8001e32:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
            for (int i = 0; i < 64; i++) {
 8001e36:	2300      	movs	r3, #0
 8001e38:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
 8001e3c:	e01b      	b.n	8001e76 <read_sensors+0x21e>
                offset += sprintf(buffer + offset, "%d ", results3.distance_mm[i]);
 8001e3e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8001e42:	1d3a      	adds	r2, r7, #4
 8001e44:	18d0      	adds	r0, r2, r3
 8001e46:	4a27      	ldr	r2, [pc, #156]	@ (8001ee4 <read_sensors+0x28c>)
 8001e48:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8001e4c:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	4413      	add	r3, r2
 8001e54:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e58:	461a      	mov	r2, r3
 8001e5a:	491c      	ldr	r1, [pc, #112]	@ (8001ecc <read_sensors+0x274>)
 8001e5c:	f008 fd90 	bl	800a980 <siprintf>
 8001e60:	4602      	mov	r2, r0
 8001e62:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8001e66:	4413      	add	r3, r2
 8001e68:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
            for (int i = 0; i < 64; i++) {
 8001e6c:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8001e70:	3301      	adds	r3, #1
 8001e72:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
 8001e76:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8001e7a:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e7c:	dddf      	ble.n	8001e3e <read_sensors+0x1e6>
            }
            offset += sprintf(buffer + offset, "\r\n");
 8001e7e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8001e82:	1d3a      	adds	r2, r7, #4
 8001e84:	4413      	add	r3, r2
 8001e86:	4912      	ldr	r1, [pc, #72]	@ (8001ed0 <read_sensors+0x278>)
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f008 fd79 	bl	800a980 <siprintf>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8001e94:	4413      	add	r3, r2
 8001e96:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
            HAL_UART_Transmit(&huart2, (uint8_t *)buffer, offset, HAL_MAX_DELAY);
 8001e9a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	1d39      	adds	r1, r7, #4
 8001ea2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ea6:	4808      	ldr	r0, [pc, #32]	@ (8001ec8 <read_sensors+0x270>)
 8001ea8:	f004 feb2 	bl	8006c10 <HAL_UART_Transmit>

            // Ponowne uruchomienie pomiaru
            vl53l5cx_start_ranging(&dev3);
 8001eac:	480c      	ldr	r0, [pc, #48]	@ (8001ee0 <read_sensors+0x288>)
 8001eae:	f007 fa61 	bl	8009374 <vl53l5cx_start_ranging>
        }
    }
}
 8001eb2:	bf00      	nop
 8001eb4:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	20000380 	.word	0x20000380
 8001ec0:	200023a8 	.word	0x200023a8
 8001ec4:	0800d0ac 	.word	0x0800d0ac
 8001ec8:	200034e8 	.word	0x200034e8
 8001ecc:	0800d0b0 	.word	0x0800d0b0
 8001ed0:	0800d0b4 	.word	0x0800d0b4
 8001ed4:	20000e38 	.word	0x20000e38
 8001ed8:	200028f8 	.word	0x200028f8
 8001edc:	0800d0b8 	.word	0x0800d0b8
 8001ee0:	200018f0 	.word	0x200018f0
 8001ee4:	20002e48 	.word	0x20002e48
 8001ee8:	0800d0bc 	.word	0x0800d0bc

08001eec <init_sensors>:
    offset += sprintf(buffer + offset, "\r \n");
    HAL_UART_Transmit(&huart2, (uint8_t *)buffer, offset, HAL_MAX_DELAY);
}


void init_sensors(void) {
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
    uint8_t status;

    if (g_num_sensors_found == 0) {
 8001ef2:	4b49      	ldr	r3, [pc, #292]	@ (8002018 <init_sensors+0x12c>)
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d103      	bne.n	8001f02 <init_sensors+0x16>
        printf("Brak wykrytych czujników do inicjalizacji.\r\n");
 8001efa:	4848      	ldr	r0, [pc, #288]	@ (800201c <init_sensors+0x130>)
 8001efc:	f008 ff0e 	bl	800ad1c <puts>
        return;
 8001f00:	e086      	b.n	8002010 <init_sensors+0x124>
    }

    for (int i = 0; i < g_num_sensors_found && i < 3; i++) {
 8001f02:	2300      	movs	r3, #0
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	e079      	b.n	8001ffc <init_sensors+0x110>
        if (g_sensors[i].found == 1) {
 8001f08:	4a45      	ldr	r2, [pc, #276]	@ (8002020 <init_sensors+0x134>)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	4413      	add	r3, r2
 8001f10:	799b      	ldrb	r3, [r3, #6]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d16f      	bne.n	8001ff6 <init_sensors+0x10a>
            VL53L5CX_Configuration* current_dev;

            // Przydział devX w zależności od indexu
            if (i == 0) {
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d102      	bne.n	8001f22 <init_sensors+0x36>
                current_dev = &dev1;
 8001f1c:	4b41      	ldr	r3, [pc, #260]	@ (8002024 <init_sensors+0x138>)
 8001f1e:	60bb      	str	r3, [r7, #8]
 8001f20:	e007      	b.n	8001f32 <init_sensors+0x46>
            } else if (i == 1) {
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d102      	bne.n	8001f2e <init_sensors+0x42>
                current_dev = &dev2;
 8001f28:	4b3f      	ldr	r3, [pc, #252]	@ (8002028 <init_sensors+0x13c>)
 8001f2a:	60bb      	str	r3, [r7, #8]
 8001f2c:	e001      	b.n	8001f32 <init_sensors+0x46>
            } else {
                current_dev = &dev3;
 8001f2e:	4b3f      	ldr	r3, [pc, #252]	@ (800202c <init_sensors+0x140>)
 8001f30:	60bb      	str	r3, [r7, #8]
            }

            // Ustaw platformę
            current_dev->platform.i2c_handle = g_sensors[i].i2c_handle;
 8001f32:	4a3b      	ldr	r2, [pc, #236]	@ (8002020 <init_sensors+0x134>)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	601a      	str	r2, [r3, #0]
            current_dev->platform.address = g_sensors[i].address;
 8001f3e:	4a38      	ldr	r2, [pc, #224]	@ (8002020 <init_sensors+0x134>)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	4413      	add	r3, r2
 8001f46:	889a      	ldrh	r2, [r3, #4]
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	809a      	strh	r2, [r3, #4]

            // Dodatkowa weryfikacja przed inicjalizacją:
            if (HAL_I2C_IsDeviceReady(current_dev->platform.i2c_handle, current_dev->platform.address, 1, 100) != HAL_OK) {
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	6818      	ldr	r0, [r3, #0]
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	8899      	ldrh	r1, [r3, #4]
 8001f54:	2364      	movs	r3, #100	@ 0x64
 8001f56:	2201      	movs	r2, #1
 8001f58:	f001 fc42 	bl	80037e0 <HAL_I2C_IsDeviceReady>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00e      	beq.n	8001f80 <init_sensors+0x94>
                printf("Czujnik %d: urządzenie na adresie 0x%X nie odpowiada przed init.\r\n", i+1, current_dev->platform.address);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	1c59      	adds	r1, r3, #1
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	889b      	ldrh	r3, [r3, #4]
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	4830      	ldr	r0, [pc, #192]	@ (8002030 <init_sensors+0x144>)
 8001f6e:	f008 fe6d 	bl	800ac4c <iprintf>
                g_sensors[i].found = 0; // Oznacz jako niewykryty, skoro nie odpowiada
 8001f72:	4a2b      	ldr	r2, [pc, #172]	@ (8002020 <init_sensors+0x134>)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	4413      	add	r3, r2
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	719a      	strb	r2, [r3, #6]
                continue;
 8001f7e:	e03a      	b.n	8001ff6 <init_sensors+0x10a>
            }

            printf("Inicjalizacja czujnika %d na magistrali %p, adres 0x%X...\r\n", i+1, (void*)current_dev->platform.i2c_handle, current_dev->platform.address);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	1c59      	adds	r1, r3, #1
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	889b      	ldrh	r3, [r3, #4]
 8001f8c:	4829      	ldr	r0, [pc, #164]	@ (8002034 <init_sensors+0x148>)
 8001f8e:	f008 fe5d 	bl	800ac4c <iprintf>

            // Inicjalizuj czujnik
            status = vl53l5cx_init(current_dev);
 8001f92:	68b8      	ldr	r0, [r7, #8]
 8001f94:	f006 fd82 	bl	8008a9c <vl53l5cx_init>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	71fb      	strb	r3, [r7, #7]
            printf("Inicjalizacja czujnika %d, status: %d\r\n", i+1, status);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	79fa      	ldrb	r2, [r7, #7]
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4824      	ldr	r0, [pc, #144]	@ (8002038 <init_sensors+0x14c>)
 8001fa6:	f008 fe51 	bl	800ac4c <iprintf>

            if (status == VL53L5CX_STATUS_OK) {
 8001faa:	79fb      	ldrb	r3, [r7, #7]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d115      	bne.n	8001fdc <init_sensors+0xf0>
                printf("Czujnik %d zainicjalizowany poprawnie.\r\n", i+1);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4821      	ldr	r0, [pc, #132]	@ (800203c <init_sensors+0x150>)
 8001fb8:	f008 fe48 	bl	800ac4c <iprintf>
                vl53l5cx_set_resolution(current_dev, VL53L5CX_RESOLUTION_8X8);
 8001fbc:	2140      	movs	r1, #64	@ 0x40
 8001fbe:	68b8      	ldr	r0, [r7, #8]
 8001fc0:	f007 fde1 	bl	8009b86 <vl53l5cx_set_resolution>
                vl53l5cx_set_ranging_frequency_hz(current_dev, 15);
 8001fc4:	210f      	movs	r1, #15
 8001fc6:	68b8      	ldr	r0, [r7, #8]
 8001fc8:	f007 feb1 	bl	8009d2e <vl53l5cx_set_ranging_frequency_hz>
                vl53l5cx_set_ranging_mode(current_dev, VL53L5CX_RANGING_MODE_CONTINUOUS);
 8001fcc:	2101      	movs	r1, #1
 8001fce:	68b8      	ldr	r0, [r7, #8]
 8001fd0:	f007 fece 	bl	8009d70 <vl53l5cx_set_ranging_mode>
                vl53l5cx_start_ranging(current_dev);
 8001fd4:	68b8      	ldr	r0, [r7, #8]
 8001fd6:	f007 f9cd 	bl	8009374 <vl53l5cx_start_ranging>
 8001fda:	e00c      	b.n	8001ff6 <init_sensors+0x10a>
            } else {
                printf("Błąd inicjalizacji czujnika %d, kod błędu: %d\r\n", i+1, status);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	79fa      	ldrb	r2, [r7, #7]
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4816      	ldr	r0, [pc, #88]	@ (8002040 <init_sensors+0x154>)
 8001fe6:	f008 fe31 	bl	800ac4c <iprintf>
                g_sensors[i].found = 0; // Nie udało się zainicjalizować, oznacz jako niewykryty
 8001fea:	4a0d      	ldr	r2, [pc, #52]	@ (8002020 <init_sensors+0x134>)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	4413      	add	r3, r2
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	719a      	strb	r2, [r3, #6]
    for (int i = 0; i < g_num_sensors_found && i < 3; i++) {
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	4b06      	ldr	r3, [pc, #24]	@ (8002018 <init_sensors+0x12c>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	461a      	mov	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	4293      	cmp	r3, r2
 8002006:	da03      	bge.n	8002010 <init_sensors+0x124>
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2b02      	cmp	r3, #2
 800200c:	f77f af7c 	ble.w	8001f08 <init_sensors+0x1c>
            }
        }
    }
}
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	200033b0 	.word	0x200033b0
 800201c:	0800d0c4 	.word	0x0800d0c4
 8002020:	20003398 	.word	0x20003398
 8002024:	20000380 	.word	0x20000380
 8002028:	20000e38 	.word	0x20000e38
 800202c:	200018f0 	.word	0x200018f0
 8002030:	0800d0f4 	.word	0x0800d0f4
 8002034:	0800d138 	.word	0x0800d138
 8002038:	0800d174 	.word	0x0800d174
 800203c:	0800d19c 	.word	0x0800d19c
 8002040:	0800d1c8 	.word	0x0800d1c8

08002044 <Scan_I2C_Devices>:




// Funkcja do skanowania magistrali I2C
void Scan_I2C_Devices() {
 8002044:	b580      	push	{r7, lr}
 8002046:	b08c      	sub	sp, #48	@ 0x30
 8002048:	af00      	add	r7, sp, #0
    printf("Rozpoczynanie skanowania urządzeń I2C...\r\n");
 800204a:	4856      	ldr	r0, [pc, #344]	@ (80021a4 <Scan_I2C_Devices+0x160>)
 800204c:	f008 fe66 	bl	800ad1c <puts>

    I2C_HandleTypeDef* i2c_handles[] = {&hi2c1, &hi2c2, &hi2c3};
 8002050:	4a55      	ldr	r2, [pc, #340]	@ (80021a8 <Scan_I2C_Devices+0x164>)
 8002052:	f107 0310 	add.w	r3, r7, #16
 8002056:	ca07      	ldmia	r2, {r0, r1, r2}
 8002058:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    const char* i2c_names[] = {"I2C1", "I2C2", "I2C3"};
 800205c:	4a53      	ldr	r2, [pc, #332]	@ (80021ac <Scan_I2C_Devices+0x168>)
 800205e:	1d3b      	adds	r3, r7, #4
 8002060:	ca07      	ldmia	r2, {r0, r1, r2}
 8002062:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    g_num_sensors_found = 0;
 8002066:	4b52      	ldr	r3, [pc, #328]	@ (80021b0 <Scan_I2C_Devices+0x16c>)
 8002068:	2200      	movs	r2, #0
 800206a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < MAX_SENSORS; i++) {
 800206c:	2300      	movs	r3, #0
 800206e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002070:	e008      	b.n	8002084 <Scan_I2C_Devices+0x40>
        g_sensors[i].found = 0;
 8002072:	4a50      	ldr	r2, [pc, #320]	@ (80021b4 <Scan_I2C_Devices+0x170>)
 8002074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	4413      	add	r3, r2
 800207a:	2200      	movs	r2, #0
 800207c:	719a      	strb	r2, [r3, #6]
    for (int i = 0; i < MAX_SENSORS; i++) {
 800207e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002080:	3301      	adds	r3, #1
 8002082:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002086:	2b02      	cmp	r3, #2
 8002088:	ddf3      	ble.n	8002072 <Scan_I2C_Devices+0x2e>
    }

    for (int i = 0; i < 3; i++) {
 800208a:	2300      	movs	r3, #0
 800208c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800208e:	e064      	b.n	800215a <Scan_I2C_Devices+0x116>
        printf("Skanowanie magistrali %s...\r\n", i2c_names[i]);
 8002090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	3330      	adds	r3, #48	@ 0x30
 8002096:	443b      	add	r3, r7
 8002098:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800209c:	4619      	mov	r1, r3
 800209e:	4846      	ldr	r0, [pc, #280]	@ (80021b8 <Scan_I2C_Devices+0x174>)
 80020a0:	f008 fdd4 	bl	800ac4c <iprintf>

        for (uint8_t addr = 1; addr < 128; addr++) {
 80020a4:	2301      	movs	r3, #1
 80020a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80020aa:	e04f      	b.n	800214c <Scan_I2C_Devices+0x108>
            HAL_StatusTypeDef result = HAL_I2C_IsDeviceReady(i2c_handles[i], (uint16_t)(addr << 1), 1, 10);
 80020ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	3330      	adds	r3, #48	@ 0x30
 80020b2:	443b      	add	r3, r7
 80020b4:	f853 0c20 	ldr.w	r0, [r3, #-32]
 80020b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80020bc:	b29b      	uxth	r3, r3
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	b299      	uxth	r1, r3
 80020c2:	230a      	movs	r3, #10
 80020c4:	2201      	movs	r2, #1
 80020c6:	f001 fb8b 	bl	80037e0 <HAL_I2C_IsDeviceReady>
 80020ca:	4603      	mov	r3, r0
 80020cc:	77fb      	strb	r3, [r7, #31]
            if (result == HAL_OK) {
 80020ce:	7ffb      	ldrb	r3, [r7, #31]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d136      	bne.n	8002142 <Scan_I2C_Devices+0xfe>
                printf("Urządzenie znalezione na magistrali %s pod adresem: 0x%02X\r\n", i2c_names[i], addr);
 80020d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	3330      	adds	r3, #48	@ 0x30
 80020da:	443b      	add	r3, r7
 80020dc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80020e0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80020e4:	4619      	mov	r1, r3
 80020e6:	4835      	ldr	r0, [pc, #212]	@ (80021bc <Scan_I2C_Devices+0x178>)
 80020e8:	f008 fdb0 	bl	800ac4c <iprintf>

                // Sprawdź, czy to adres czujnika VL53L5CX
                // Domyślny adres: 0x29 (7-bit) -> (0x29 << 1) = 0x52 (8-bit)
                if (addr == 0x29 && g_num_sensors_found < MAX_SENSORS) {
 80020ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80020f0:	2b29      	cmp	r3, #41	@ 0x29
 80020f2:	d123      	bne.n	800213c <Scan_I2C_Devices+0xf8>
 80020f4:	4b2e      	ldr	r3, [pc, #184]	@ (80021b0 <Scan_I2C_Devices+0x16c>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d81f      	bhi.n	800213c <Scan_I2C_Devices+0xf8>
                    g_sensors[g_num_sensors_found].i2c_handle = i2c_handles[i];
 80020fc:	4b2c      	ldr	r3, [pc, #176]	@ (80021b0 <Scan_I2C_Devices+0x16c>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	4619      	mov	r1, r3
 8002102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	3330      	adds	r3, #48	@ 0x30
 8002108:	443b      	add	r3, r7
 800210a:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800210e:	4a29      	ldr	r2, [pc, #164]	@ (80021b4 <Scan_I2C_Devices+0x170>)
 8002110:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
                    g_sensors[g_num_sensors_found].address = (uint16_t)(0x52); // 8-bitowy adres
 8002114:	4b26      	ldr	r3, [pc, #152]	@ (80021b0 <Scan_I2C_Devices+0x16c>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	4a26      	ldr	r2, [pc, #152]	@ (80021b4 <Scan_I2C_Devices+0x170>)
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	4413      	add	r3, r2
 800211e:	2252      	movs	r2, #82	@ 0x52
 8002120:	809a      	strh	r2, [r3, #4]
                    g_sensors[g_num_sensors_found].found = 1;
 8002122:	4b23      	ldr	r3, [pc, #140]	@ (80021b0 <Scan_I2C_Devices+0x16c>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	4a23      	ldr	r2, [pc, #140]	@ (80021b4 <Scan_I2C_Devices+0x170>)
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	4413      	add	r3, r2
 800212c:	2201      	movs	r2, #1
 800212e:	719a      	strb	r2, [r3, #6]
                    g_num_sensors_found++;
 8002130:	4b1f      	ldr	r3, [pc, #124]	@ (80021b0 <Scan_I2C_Devices+0x16c>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	3301      	adds	r3, #1
 8002136:	b2da      	uxtb	r2, r3
 8002138:	4b1d      	ldr	r3, [pc, #116]	@ (80021b0 <Scan_I2C_Devices+0x16c>)
 800213a:	701a      	strb	r2, [r3, #0]
                }

                HAL_Delay(100); // mały delay
 800213c:	2064      	movs	r0, #100	@ 0x64
 800213e:	f000 fd0f 	bl	8002b60 <HAL_Delay>
        for (uint8_t addr = 1; addr < 128; addr++) {
 8002142:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002146:	3301      	adds	r3, #1
 8002148:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800214c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002150:	2b00      	cmp	r3, #0
 8002152:	daab      	bge.n	80020ac <Scan_I2C_Devices+0x68>
    for (int i = 0; i < 3; i++) {
 8002154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002156:	3301      	adds	r3, #1
 8002158:	62bb      	str	r3, [r7, #40]	@ 0x28
 800215a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800215c:	2b02      	cmp	r3, #2
 800215e:	dd97      	ble.n	8002090 <Scan_I2C_Devices+0x4c>
            }
        }
    }

    printf("Skanowanie zakończone na wszystkich magistralach.\r\n");
 8002160:	4817      	ldr	r0, [pc, #92]	@ (80021c0 <Scan_I2C_Devices+0x17c>)
 8002162:	f008 fddb 	bl	800ad1c <puts>

    // Debug: Wyświetl które czujniki znaleziono
    for (int i = 0; i < g_num_sensors_found; i++) {
 8002166:	2300      	movs	r3, #0
 8002168:	623b      	str	r3, [r7, #32]
 800216a:	e010      	b.n	800218e <Scan_I2C_Devices+0x14a>
        printf("Czujnik %d znaleziony na magistrali z handle: %p, adres: 0x%02X\r\n",
 800216c:	6a3b      	ldr	r3, [r7, #32]
 800216e:	1c59      	adds	r1, r3, #1
               i+1, (void*)g_sensors[i].i2c_handle, g_sensors[i].address);
 8002170:	4a10      	ldr	r2, [pc, #64]	@ (80021b4 <Scan_I2C_Devices+0x170>)
 8002172:	6a3b      	ldr	r3, [r7, #32]
 8002174:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002178:	480e      	ldr	r0, [pc, #56]	@ (80021b4 <Scan_I2C_Devices+0x170>)
 800217a:	6a3b      	ldr	r3, [r7, #32]
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	4403      	add	r3, r0
 8002180:	889b      	ldrh	r3, [r3, #4]
        printf("Czujnik %d znaleziony na magistrali z handle: %p, adres: 0x%02X\r\n",
 8002182:	4810      	ldr	r0, [pc, #64]	@ (80021c4 <Scan_I2C_Devices+0x180>)
 8002184:	f008 fd62 	bl	800ac4c <iprintf>
    for (int i = 0; i < g_num_sensors_found; i++) {
 8002188:	6a3b      	ldr	r3, [r7, #32]
 800218a:	3301      	adds	r3, #1
 800218c:	623b      	str	r3, [r7, #32]
 800218e:	4b08      	ldr	r3, [pc, #32]	@ (80021b0 <Scan_I2C_Devices+0x16c>)
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	461a      	mov	r2, r3
 8002194:	6a3b      	ldr	r3, [r7, #32]
 8002196:	4293      	cmp	r3, r2
 8002198:	dbe8      	blt.n	800216c <Scan_I2C_Devices+0x128>
    }
}
 800219a:	bf00      	nop
 800219c:	bf00      	nop
 800219e:	3730      	adds	r7, #48	@ 0x30
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	0800d1fc 	.word	0x0800d1fc
 80021a8:	0800d300 	.word	0x0800d300
 80021ac:	0800d324 	.word	0x0800d324
 80021b0:	200033b0 	.word	0x200033b0
 80021b4:	20003398 	.word	0x20003398
 80021b8:	0800d228 	.word	0x0800d228
 80021bc:	0800d248 	.word	0x0800d248
 80021c0:	0800d288 	.word	0x0800d288
 80021c4:	0800d2bc 	.word	0x0800d2bc

080021c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ce:	4b0f      	ldr	r3, [pc, #60]	@ (800220c <HAL_MspInit+0x44>)
 80021d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021d2:	4a0e      	ldr	r2, [pc, #56]	@ (800220c <HAL_MspInit+0x44>)
 80021d4:	f043 0301 	orr.w	r3, r3, #1
 80021d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80021da:	4b0c      	ldr	r3, [pc, #48]	@ (800220c <HAL_MspInit+0x44>)
 80021dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	607b      	str	r3, [r7, #4]
 80021e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021e6:	4b09      	ldr	r3, [pc, #36]	@ (800220c <HAL_MspInit+0x44>)
 80021e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ea:	4a08      	ldr	r2, [pc, #32]	@ (800220c <HAL_MspInit+0x44>)
 80021ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80021f2:	4b06      	ldr	r3, [pc, #24]	@ (800220c <HAL_MspInit+0x44>)
 80021f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021fa:	603b      	str	r3, [r7, #0]
 80021fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021fe:	bf00      	nop
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	40021000 	.word	0x40021000

08002210 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002214:	bf00      	nop
 8002216:	e7fd      	b.n	8002214 <NMI_Handler+0x4>

08002218 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800221c:	bf00      	nop
 800221e:	e7fd      	b.n	800221c <HardFault_Handler+0x4>

08002220 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002224:	bf00      	nop
 8002226:	e7fd      	b.n	8002224 <MemManage_Handler+0x4>

08002228 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800222c:	bf00      	nop
 800222e:	e7fd      	b.n	800222c <BusFault_Handler+0x4>

08002230 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002234:	bf00      	nop
 8002236:	e7fd      	b.n	8002234 <UsageFault_Handler+0x4>

08002238 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800223c:	bf00      	nop
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002246:	b480      	push	{r7}
 8002248:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800224a:	bf00      	nop
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002258:	bf00      	nop
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002266:	f000 fc5b 	bl	8002b20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800226a:	bf00      	nop
 800226c:	bd80      	pop	{r7, pc}
	...

08002270 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002274:	4802      	ldr	r0, [pc, #8]	@ (8002280 <USART2_IRQHandler+0x10>)
 8002276:	f004 fda1 	bl	8006dbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	200034e8 	.word	0x200034e8

08002284 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002288:	4802      	ldr	r0, [pc, #8]	@ (8002294 <TIM6_DAC_IRQHandler+0x10>)
 800228a:	f003 fd69 	bl	8005d60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	2000349c 	.word	0x2000349c

08002298 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  return 1;
 800229c:	2301      	movs	r3, #1
}
 800229e:	4618      	mov	r0, r3
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <_kill>:

int _kill(int pid, int sig)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80022b2:	f008 fda3 	bl	800adfc <__errno>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2216      	movs	r2, #22
 80022ba:	601a      	str	r2, [r3, #0]
  return -1;
 80022bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3708      	adds	r7, #8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <_exit>:

void _exit (int status)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80022d0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f7ff ffe7 	bl	80022a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80022da:	bf00      	nop
 80022dc:	e7fd      	b.n	80022da <_exit+0x12>

080022de <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b086      	sub	sp, #24
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	60f8      	str	r0, [r7, #12]
 80022e6:	60b9      	str	r1, [r7, #8]
 80022e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ea:	2300      	movs	r3, #0
 80022ec:	617b      	str	r3, [r7, #20]
 80022ee:	e00a      	b.n	8002306 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022f0:	f3af 8000 	nop.w
 80022f4:	4601      	mov	r1, r0
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	1c5a      	adds	r2, r3, #1
 80022fa:	60ba      	str	r2, [r7, #8]
 80022fc:	b2ca      	uxtb	r2, r1
 80022fe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	3301      	adds	r3, #1
 8002304:	617b      	str	r3, [r7, #20]
 8002306:	697a      	ldr	r2, [r7, #20]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	429a      	cmp	r2, r3
 800230c:	dbf0      	blt.n	80022f0 <_read+0x12>
  }

  return len;
 800230e:	687b      	ldr	r3, [r7, #4]
}
 8002310:	4618      	mov	r0, r3
 8002312:	3718      	adds	r7, #24
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002320:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002324:	4618      	mov	r0, r3
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002340:	605a      	str	r2, [r3, #4]
  return 0;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <_isatty>:

int _isatty(int file)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002358:	2301      	movs	r3, #1
}
 800235a:	4618      	mov	r0, r3
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr

08002366 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002366:	b480      	push	{r7}
 8002368:	b085      	sub	sp, #20
 800236a:	af00      	add	r7, sp, #0
 800236c:	60f8      	str	r0, [r7, #12]
 800236e:	60b9      	str	r1, [r7, #8]
 8002370:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3714      	adds	r7, #20
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002388:	4a14      	ldr	r2, [pc, #80]	@ (80023dc <_sbrk+0x5c>)
 800238a:	4b15      	ldr	r3, [pc, #84]	@ (80023e0 <_sbrk+0x60>)
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002394:	4b13      	ldr	r3, [pc, #76]	@ (80023e4 <_sbrk+0x64>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d102      	bne.n	80023a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800239c:	4b11      	ldr	r3, [pc, #68]	@ (80023e4 <_sbrk+0x64>)
 800239e:	4a12      	ldr	r2, [pc, #72]	@ (80023e8 <_sbrk+0x68>)
 80023a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023a2:	4b10      	ldr	r3, [pc, #64]	@ (80023e4 <_sbrk+0x64>)
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4413      	add	r3, r2
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d207      	bcs.n	80023c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023b0:	f008 fd24 	bl	800adfc <__errno>
 80023b4:	4603      	mov	r3, r0
 80023b6:	220c      	movs	r2, #12
 80023b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80023be:	e009      	b.n	80023d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023c0:	4b08      	ldr	r3, [pc, #32]	@ (80023e4 <_sbrk+0x64>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023c6:	4b07      	ldr	r3, [pc, #28]	@ (80023e4 <_sbrk+0x64>)
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4413      	add	r3, r2
 80023ce:	4a05      	ldr	r2, [pc, #20]	@ (80023e4 <_sbrk+0x64>)
 80023d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023d2:	68fb      	ldr	r3, [r7, #12]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3718      	adds	r7, #24
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	20018000 	.word	0x20018000
 80023e0:	00000400 	.word	0x00000400
 80023e4:	200033b4 	.word	0x200033b4
 80023e8:	200036c0 	.word	0x200036c0

080023ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80023f0:	4b06      	ldr	r3, [pc, #24]	@ (800240c <SystemInit+0x20>)
 80023f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023f6:	4a05      	ldr	r2, [pc, #20]	@ (800240c <SystemInit+0x20>)
 80023f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80023fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002400:	bf00      	nop
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	e000ed00 	.word	0xe000ed00

08002410 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b096      	sub	sp, #88	@ 0x58
 8002414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002416:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800241a:	2200      	movs	r2, #0
 800241c:	601a      	str	r2, [r3, #0]
 800241e:	605a      	str	r2, [r3, #4]
 8002420:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002422:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002426:	2200      	movs	r2, #0
 8002428:	601a      	str	r2, [r3, #0]
 800242a:	605a      	str	r2, [r3, #4]
 800242c:	609a      	str	r2, [r3, #8]
 800242e:	60da      	str	r2, [r3, #12]
 8002430:	611a      	str	r2, [r3, #16]
 8002432:	615a      	str	r2, [r3, #20]
 8002434:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002436:	1d3b      	adds	r3, r7, #4
 8002438:	222c      	movs	r2, #44	@ 0x2c
 800243a:	2100      	movs	r1, #0
 800243c:	4618      	mov	r0, r3
 800243e:	f008 fcd1 	bl	800ade4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002442:	4b3f      	ldr	r3, [pc, #252]	@ (8002540 <MX_TIM1_Init+0x130>)
 8002444:	4a3f      	ldr	r2, [pc, #252]	@ (8002544 <MX_TIM1_Init+0x134>)
 8002446:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7999;
 8002448:	4b3d      	ldr	r3, [pc, #244]	@ (8002540 <MX_TIM1_Init+0x130>)
 800244a:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800244e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002450:	4b3b      	ldr	r3, [pc, #236]	@ (8002540 <MX_TIM1_Init+0x130>)
 8002452:	2200      	movs	r2, #0
 8002454:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8002456:	4b3a      	ldr	r3, [pc, #232]	@ (8002540 <MX_TIM1_Init+0x130>)
 8002458:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800245c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800245e:	4b38      	ldr	r3, [pc, #224]	@ (8002540 <MX_TIM1_Init+0x130>)
 8002460:	2200      	movs	r2, #0
 8002462:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002464:	4b36      	ldr	r3, [pc, #216]	@ (8002540 <MX_TIM1_Init+0x130>)
 8002466:	2200      	movs	r2, #0
 8002468:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800246a:	4b35      	ldr	r3, [pc, #212]	@ (8002540 <MX_TIM1_Init+0x130>)
 800246c:	2200      	movs	r2, #0
 800246e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002470:	4833      	ldr	r0, [pc, #204]	@ (8002540 <MX_TIM1_Init+0x130>)
 8002472:	f003 f9e3 	bl	800583c <HAL_TIM_PWM_Init>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 800247c:	f7ff fa17 	bl	80018ae <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002480:	2300      	movs	r3, #0
 8002482:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002484:	2300      	movs	r3, #0
 8002486:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002488:	2300      	movs	r3, #0
 800248a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800248c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002490:	4619      	mov	r1, r3
 8002492:	482b      	ldr	r0, [pc, #172]	@ (8002540 <MX_TIM1_Init+0x130>)
 8002494:	f004 fa4a 	bl	800692c <HAL_TIMEx_MasterConfigSynchronization>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800249e:	f7ff fa06 	bl	80018ae <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024a2:	2360      	movs	r3, #96	@ 0x60
 80024a4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80024a6:	2300      	movs	r3, #0
 80024a8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024aa:	2300      	movs	r3, #0
 80024ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80024ae:	2300      	movs	r3, #0
 80024b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024b2:	2300      	movs	r3, #0
 80024b4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80024b6:	2300      	movs	r3, #0
 80024b8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80024ba:	2300      	movs	r3, #0
 80024bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024be:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80024c2:	2200      	movs	r2, #0
 80024c4:	4619      	mov	r1, r3
 80024c6:	481e      	ldr	r0, [pc, #120]	@ (8002540 <MX_TIM1_Init+0x130>)
 80024c8:	f003 fd52 	bl	8005f70 <HAL_TIM_PWM_ConfigChannel>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80024d2:	f7ff f9ec 	bl	80018ae <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80024d6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80024da:	2204      	movs	r2, #4
 80024dc:	4619      	mov	r1, r3
 80024de:	4818      	ldr	r0, [pc, #96]	@ (8002540 <MX_TIM1_Init+0x130>)
 80024e0:	f003 fd46 	bl	8005f70 <HAL_TIM_PWM_ConfigChannel>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 80024ea:	f7ff f9e0 	bl	80018ae <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80024ee:	2300      	movs	r3, #0
 80024f0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80024f2:	2300      	movs	r3, #0
 80024f4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80024f6:	2300      	movs	r3, #0
 80024f8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80024fa:	2300      	movs	r3, #0
 80024fc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80024fe:	2300      	movs	r3, #0
 8002500:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002502:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002506:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002508:	2300      	movs	r3, #0
 800250a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800250c:	2300      	movs	r3, #0
 800250e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002510:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002514:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002516:	2300      	movs	r3, #0
 8002518:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800251a:	2300      	movs	r3, #0
 800251c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800251e:	1d3b      	adds	r3, r7, #4
 8002520:	4619      	mov	r1, r3
 8002522:	4807      	ldr	r0, [pc, #28]	@ (8002540 <MX_TIM1_Init+0x130>)
 8002524:	f004 fa8a 	bl	8006a3c <HAL_TIMEx_ConfigBreakDeadTime>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <MX_TIM1_Init+0x122>
  {
    Error_Handler();
 800252e:	f7ff f9be 	bl	80018ae <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002532:	4803      	ldr	r0, [pc, #12]	@ (8002540 <MX_TIM1_Init+0x130>)
 8002534:	f000 f9a2 	bl	800287c <HAL_TIM_MspPostInit>

}
 8002538:	bf00      	nop
 800253a:	3758      	adds	r7, #88	@ 0x58
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	200033b8 	.word	0x200033b8
 8002544:	40012c00 	.word	0x40012c00

08002548 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b08c      	sub	sp, #48	@ 0x30
 800254c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800254e:	f107 030c 	add.w	r3, r7, #12
 8002552:	2224      	movs	r2, #36	@ 0x24
 8002554:	2100      	movs	r1, #0
 8002556:	4618      	mov	r0, r3
 8002558:	f008 fc44 	bl	800ade4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800255c:	463b      	mov	r3, r7
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	605a      	str	r2, [r3, #4]
 8002564:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002566:	4b21      	ldr	r3, [pc, #132]	@ (80025ec <MX_TIM2_Init+0xa4>)
 8002568:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800256c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800256e:	4b1f      	ldr	r3, [pc, #124]	@ (80025ec <MX_TIM2_Init+0xa4>)
 8002570:	2200      	movs	r2, #0
 8002572:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002574:	4b1d      	ldr	r3, [pc, #116]	@ (80025ec <MX_TIM2_Init+0xa4>)
 8002576:	2200      	movs	r2, #0
 8002578:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800257a:	4b1c      	ldr	r3, [pc, #112]	@ (80025ec <MX_TIM2_Init+0xa4>)
 800257c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002580:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002582:	4b1a      	ldr	r3, [pc, #104]	@ (80025ec <MX_TIM2_Init+0xa4>)
 8002584:	2200      	movs	r2, #0
 8002586:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002588:	4b18      	ldr	r3, [pc, #96]	@ (80025ec <MX_TIM2_Init+0xa4>)
 800258a:	2200      	movs	r2, #0
 800258c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800258e:	2303      	movs	r3, #3
 8002590:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002592:	2300      	movs	r3, #0
 8002594:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002596:	2301      	movs	r3, #1
 8002598:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV8;
 800259a:	230c      	movs	r3, #12
 800259c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800259e:	230f      	movs	r3, #15
 80025a0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80025a2:	2300      	movs	r3, #0
 80025a4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80025a6:	2301      	movs	r3, #1
 80025a8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80025aa:	2300      	movs	r3, #0
 80025ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80025ae:	2300      	movs	r3, #0
 80025b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80025b2:	f107 030c 	add.w	r3, r7, #12
 80025b6:	4619      	mov	r1, r3
 80025b8:	480c      	ldr	r0, [pc, #48]	@ (80025ec <MX_TIM2_Init+0xa4>)
 80025ba:	f003 fa9d 	bl	8005af8 <HAL_TIM_Encoder_Init>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80025c4:	f7ff f973 	bl	80018ae <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025c8:	2300      	movs	r3, #0
 80025ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025cc:	2300      	movs	r3, #0
 80025ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025d0:	463b      	mov	r3, r7
 80025d2:	4619      	mov	r1, r3
 80025d4:	4805      	ldr	r0, [pc, #20]	@ (80025ec <MX_TIM2_Init+0xa4>)
 80025d6:	f004 f9a9 	bl	800692c <HAL_TIMEx_MasterConfigSynchronization>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80025e0:	f7ff f965 	bl	80018ae <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80025e4:	bf00      	nop
 80025e6:	3730      	adds	r7, #48	@ 0x30
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	20003404 	.word	0x20003404

080025f0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b08c      	sub	sp, #48	@ 0x30
 80025f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80025f6:	f107 030c 	add.w	r3, r7, #12
 80025fa:	2224      	movs	r2, #36	@ 0x24
 80025fc:	2100      	movs	r1, #0
 80025fe:	4618      	mov	r0, r3
 8002600:	f008 fbf0 	bl	800ade4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002604:	463b      	mov	r3, r7
 8002606:	2200      	movs	r2, #0
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	605a      	str	r2, [r3, #4]
 800260c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800260e:	4b21      	ldr	r3, [pc, #132]	@ (8002694 <MX_TIM3_Init+0xa4>)
 8002610:	4a21      	ldr	r2, [pc, #132]	@ (8002698 <MX_TIM3_Init+0xa8>)
 8002612:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002614:	4b1f      	ldr	r3, [pc, #124]	@ (8002694 <MX_TIM3_Init+0xa4>)
 8002616:	2200      	movs	r2, #0
 8002618:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800261a:	4b1e      	ldr	r3, [pc, #120]	@ (8002694 <MX_TIM3_Init+0xa4>)
 800261c:	2200      	movs	r2, #0
 800261e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002620:	4b1c      	ldr	r3, [pc, #112]	@ (8002694 <MX_TIM3_Init+0xa4>)
 8002622:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002626:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002628:	4b1a      	ldr	r3, [pc, #104]	@ (8002694 <MX_TIM3_Init+0xa4>)
 800262a:	2200      	movs	r2, #0
 800262c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800262e:	4b19      	ldr	r3, [pc, #100]	@ (8002694 <MX_TIM3_Init+0xa4>)
 8002630:	2200      	movs	r2, #0
 8002632:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002634:	2303      	movs	r3, #3
 8002636:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002638:	2300      	movs	r3, #0
 800263a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800263c:	2301      	movs	r3, #1
 800263e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV8;
 8002640:	230c      	movs	r3, #12
 8002642:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8002644:	230f      	movs	r3, #15
 8002646:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002648:	2300      	movs	r3, #0
 800264a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800264c:	2301      	movs	r3, #1
 800264e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002650:	2300      	movs	r3, #0
 8002652:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002654:	2300      	movs	r3, #0
 8002656:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002658:	f107 030c 	add.w	r3, r7, #12
 800265c:	4619      	mov	r1, r3
 800265e:	480d      	ldr	r0, [pc, #52]	@ (8002694 <MX_TIM3_Init+0xa4>)
 8002660:	f003 fa4a 	bl	8005af8 <HAL_TIM_Encoder_Init>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800266a:	f7ff f920 	bl	80018ae <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800266e:	2300      	movs	r3, #0
 8002670:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002672:	2300      	movs	r3, #0
 8002674:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002676:	463b      	mov	r3, r7
 8002678:	4619      	mov	r1, r3
 800267a:	4806      	ldr	r0, [pc, #24]	@ (8002694 <MX_TIM3_Init+0xa4>)
 800267c:	f004 f956 	bl	800692c <HAL_TIMEx_MasterConfigSynchronization>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002686:	f7ff f912 	bl	80018ae <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800268a:	bf00      	nop
 800268c:	3730      	adds	r7, #48	@ 0x30
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	20003450 	.word	0x20003450
 8002698:	40000400 	.word	0x40000400

0800269c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026a2:	1d3b      	adds	r3, r7, #4
 80026a4:	2200      	movs	r2, #0
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	605a      	str	r2, [r3, #4]
 80026aa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80026ac:	4b15      	ldr	r3, [pc, #84]	@ (8002704 <MX_TIM6_Init+0x68>)
 80026ae:	4a16      	ldr	r2, [pc, #88]	@ (8002708 <MX_TIM6_Init+0x6c>)
 80026b0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 80026b2:	4b14      	ldr	r3, [pc, #80]	@ (8002704 <MX_TIM6_Init+0x68>)
 80026b4:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80026b8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026ba:	4b12      	ldr	r3, [pc, #72]	@ (8002704 <MX_TIM6_Init+0x68>)
 80026bc:	2200      	movs	r2, #0
 80026be:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 80026c0:	4b10      	ldr	r3, [pc, #64]	@ (8002704 <MX_TIM6_Init+0x68>)
 80026c2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80026c6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026c8:	4b0e      	ldr	r3, [pc, #56]	@ (8002704 <MX_TIM6_Init+0x68>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80026ce:	480d      	ldr	r0, [pc, #52]	@ (8002704 <MX_TIM6_Init+0x68>)
 80026d0:	f002 ffec 	bl	80056ac <HAL_TIM_Base_Init>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80026da:	f7ff f8e8 	bl	80018ae <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026de:	2300      	movs	r3, #0
 80026e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026e2:	2300      	movs	r3, #0
 80026e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80026e6:	1d3b      	adds	r3, r7, #4
 80026e8:	4619      	mov	r1, r3
 80026ea:	4806      	ldr	r0, [pc, #24]	@ (8002704 <MX_TIM6_Init+0x68>)
 80026ec:	f004 f91e 	bl	800692c <HAL_TIMEx_MasterConfigSynchronization>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80026f6:	f7ff f8da 	bl	80018ae <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80026fa:	bf00      	nop
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	2000349c 	.word	0x2000349c
 8002708:	40001000 	.word	0x40001000

0800270c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a0a      	ldr	r2, [pc, #40]	@ (8002744 <HAL_TIM_PWM_MspInit+0x38>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d10b      	bne.n	8002736 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800271e:	4b0a      	ldr	r3, [pc, #40]	@ (8002748 <HAL_TIM_PWM_MspInit+0x3c>)
 8002720:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002722:	4a09      	ldr	r2, [pc, #36]	@ (8002748 <HAL_TIM_PWM_MspInit+0x3c>)
 8002724:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002728:	6613      	str	r3, [r2, #96]	@ 0x60
 800272a:	4b07      	ldr	r3, [pc, #28]	@ (8002748 <HAL_TIM_PWM_MspInit+0x3c>)
 800272c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800272e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002736:	bf00      	nop
 8002738:	3714      	adds	r7, #20
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	40012c00 	.word	0x40012c00
 8002748:	40021000 	.word	0x40021000

0800274c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b08c      	sub	sp, #48	@ 0x30
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002754:	f107 031c 	add.w	r3, r7, #28
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	605a      	str	r2, [r3, #4]
 800275e:	609a      	str	r2, [r3, #8]
 8002760:	60da      	str	r2, [r3, #12]
 8002762:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800276c:	d129      	bne.n	80027c2 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800276e:	4b2e      	ldr	r3, [pc, #184]	@ (8002828 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002770:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002772:	4a2d      	ldr	r2, [pc, #180]	@ (8002828 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002774:	f043 0301 	orr.w	r3, r3, #1
 8002778:	6593      	str	r3, [r2, #88]	@ 0x58
 800277a:	4b2b      	ldr	r3, [pc, #172]	@ (8002828 <HAL_TIM_Encoder_MspInit+0xdc>)
 800277c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	61bb      	str	r3, [r7, #24]
 8002784:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002786:	4b28      	ldr	r3, [pc, #160]	@ (8002828 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800278a:	4a27      	ldr	r2, [pc, #156]	@ (8002828 <HAL_TIM_Encoder_MspInit+0xdc>)
 800278c:	f043 0301 	orr.w	r3, r3, #1
 8002790:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002792:	4b25      	ldr	r3, [pc, #148]	@ (8002828 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	617b      	str	r3, [r7, #20]
 800279c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800279e:	2303      	movs	r3, #3
 80027a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a2:	2302      	movs	r3, #2
 80027a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a6:	2300      	movs	r3, #0
 80027a8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027aa:	2300      	movs	r3, #0
 80027ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80027ae:	2301      	movs	r3, #1
 80027b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b2:	f107 031c 	add.w	r3, r7, #28
 80027b6:	4619      	mov	r1, r3
 80027b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027bc:	f000 fb84 	bl	8002ec8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80027c0:	e02d      	b.n	800281e <HAL_TIM_Encoder_MspInit+0xd2>
  else if(tim_encoderHandle->Instance==TIM3)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a19      	ldr	r2, [pc, #100]	@ (800282c <HAL_TIM_Encoder_MspInit+0xe0>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d128      	bne.n	800281e <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027cc:	4b16      	ldr	r3, [pc, #88]	@ (8002828 <HAL_TIM_Encoder_MspInit+0xdc>)
 80027ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027d0:	4a15      	ldr	r2, [pc, #84]	@ (8002828 <HAL_TIM_Encoder_MspInit+0xdc>)
 80027d2:	f043 0302 	orr.w	r3, r3, #2
 80027d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80027d8:	4b13      	ldr	r3, [pc, #76]	@ (8002828 <HAL_TIM_Encoder_MspInit+0xdc>)
 80027da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	613b      	str	r3, [r7, #16]
 80027e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027e4:	4b10      	ldr	r3, [pc, #64]	@ (8002828 <HAL_TIM_Encoder_MspInit+0xdc>)
 80027e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027e8:	4a0f      	ldr	r2, [pc, #60]	@ (8002828 <HAL_TIM_Encoder_MspInit+0xdc>)
 80027ea:	f043 0301 	orr.w	r3, r3, #1
 80027ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027f0:	4b0d      	ldr	r3, [pc, #52]	@ (8002828 <HAL_TIM_Encoder_MspInit+0xdc>)
 80027f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	60fb      	str	r3, [r7, #12]
 80027fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027fc:	23c0      	movs	r3, #192	@ 0xc0
 80027fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002800:	2302      	movs	r3, #2
 8002802:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002804:	2300      	movs	r3, #0
 8002806:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002808:	2300      	movs	r3, #0
 800280a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800280c:	2302      	movs	r3, #2
 800280e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002810:	f107 031c 	add.w	r3, r7, #28
 8002814:	4619      	mov	r1, r3
 8002816:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800281a:	f000 fb55 	bl	8002ec8 <HAL_GPIO_Init>
}
 800281e:	bf00      	nop
 8002820:	3730      	adds	r7, #48	@ 0x30
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	40021000 	.word	0x40021000
 800282c:	40000400 	.word	0x40000400

08002830 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a0d      	ldr	r2, [pc, #52]	@ (8002874 <HAL_TIM_Base_MspInit+0x44>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d113      	bne.n	800286a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002842:	4b0d      	ldr	r3, [pc, #52]	@ (8002878 <HAL_TIM_Base_MspInit+0x48>)
 8002844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002846:	4a0c      	ldr	r2, [pc, #48]	@ (8002878 <HAL_TIM_Base_MspInit+0x48>)
 8002848:	f043 0310 	orr.w	r3, r3, #16
 800284c:	6593      	str	r3, [r2, #88]	@ 0x58
 800284e:	4b0a      	ldr	r3, [pc, #40]	@ (8002878 <HAL_TIM_Base_MspInit+0x48>)
 8002850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002852:	f003 0310 	and.w	r3, r3, #16
 8002856:	60fb      	str	r3, [r7, #12]
 8002858:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800285a:	2200      	movs	r2, #0
 800285c:	2100      	movs	r1, #0
 800285e:	2036      	movs	r0, #54	@ 0x36
 8002860:	f000 fa7d 	bl	8002d5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002864:	2036      	movs	r0, #54	@ 0x36
 8002866:	f000 fa96 	bl	8002d96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800286a:	bf00      	nop
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	40001000 	.word	0x40001000
 8002878:	40021000 	.word	0x40021000

0800287c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b088      	sub	sp, #32
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002884:	f107 030c 	add.w	r3, r7, #12
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	605a      	str	r2, [r3, #4]
 800288e:	609a      	str	r2, [r3, #8]
 8002890:	60da      	str	r2, [r3, #12]
 8002892:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a12      	ldr	r2, [pc, #72]	@ (80028e4 <HAL_TIM_MspPostInit+0x68>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d11d      	bne.n	80028da <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800289e:	4b12      	ldr	r3, [pc, #72]	@ (80028e8 <HAL_TIM_MspPostInit+0x6c>)
 80028a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028a2:	4a11      	ldr	r2, [pc, #68]	@ (80028e8 <HAL_TIM_MspPostInit+0x6c>)
 80028a4:	f043 0301 	orr.w	r3, r3, #1
 80028a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028aa:	4b0f      	ldr	r3, [pc, #60]	@ (80028e8 <HAL_TIM_MspPostInit+0x6c>)
 80028ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	60bb      	str	r3, [r7, #8]
 80028b4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80028b6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80028ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028bc:	2302      	movs	r3, #2
 80028be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c4:	2300      	movs	r3, #0
 80028c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80028c8:	2301      	movs	r3, #1
 80028ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028cc:	f107 030c 	add.w	r3, r7, #12
 80028d0:	4619      	mov	r1, r3
 80028d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028d6:	f000 faf7 	bl	8002ec8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80028da:	bf00      	nop
 80028dc:	3720      	adds	r7, #32
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	40012c00 	.word	0x40012c00
 80028e8:	40021000 	.word	0x40021000

080028ec <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80028f0:	4b14      	ldr	r3, [pc, #80]	@ (8002944 <MX_USART2_UART_Init+0x58>)
 80028f2:	4a15      	ldr	r2, [pc, #84]	@ (8002948 <MX_USART2_UART_Init+0x5c>)
 80028f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80028f6:	4b13      	ldr	r3, [pc, #76]	@ (8002944 <MX_USART2_UART_Init+0x58>)
 80028f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80028fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80028fe:	4b11      	ldr	r3, [pc, #68]	@ (8002944 <MX_USART2_UART_Init+0x58>)
 8002900:	2200      	movs	r2, #0
 8002902:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002904:	4b0f      	ldr	r3, [pc, #60]	@ (8002944 <MX_USART2_UART_Init+0x58>)
 8002906:	2200      	movs	r2, #0
 8002908:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800290a:	4b0e      	ldr	r3, [pc, #56]	@ (8002944 <MX_USART2_UART_Init+0x58>)
 800290c:	2200      	movs	r2, #0
 800290e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002910:	4b0c      	ldr	r3, [pc, #48]	@ (8002944 <MX_USART2_UART_Init+0x58>)
 8002912:	220c      	movs	r2, #12
 8002914:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002916:	4b0b      	ldr	r3, [pc, #44]	@ (8002944 <MX_USART2_UART_Init+0x58>)
 8002918:	2200      	movs	r2, #0
 800291a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800291c:	4b09      	ldr	r3, [pc, #36]	@ (8002944 <MX_USART2_UART_Init+0x58>)
 800291e:	2200      	movs	r2, #0
 8002920:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002922:	4b08      	ldr	r3, [pc, #32]	@ (8002944 <MX_USART2_UART_Init+0x58>)
 8002924:	2200      	movs	r2, #0
 8002926:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002928:	4b06      	ldr	r3, [pc, #24]	@ (8002944 <MX_USART2_UART_Init+0x58>)
 800292a:	2200      	movs	r2, #0
 800292c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800292e:	4805      	ldr	r0, [pc, #20]	@ (8002944 <MX_USART2_UART_Init+0x58>)
 8002930:	f004 f920 	bl	8006b74 <HAL_UART_Init>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800293a:	f7fe ffb8 	bl	80018ae <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800293e:	bf00      	nop
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	200034e8 	.word	0x200034e8
 8002948:	40004400 	.word	0x40004400

0800294c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b0ac      	sub	sp, #176	@ 0xb0
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002954:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]
 800295c:	605a      	str	r2, [r3, #4]
 800295e:	609a      	str	r2, [r3, #8]
 8002960:	60da      	str	r2, [r3, #12]
 8002962:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002964:	f107 0314 	add.w	r3, r7, #20
 8002968:	2288      	movs	r2, #136	@ 0x88
 800296a:	2100      	movs	r1, #0
 800296c:	4618      	mov	r0, r3
 800296e:	f008 fa39 	bl	800ade4 <memset>
  if(uartHandle->Instance==USART2)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a25      	ldr	r2, [pc, #148]	@ (8002a0c <HAL_UART_MspInit+0xc0>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d143      	bne.n	8002a04 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800297c:	2302      	movs	r3, #2
 800297e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002980:	2300      	movs	r3, #0
 8002982:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002984:	f107 0314 	add.w	r3, r7, #20
 8002988:	4618      	mov	r0, r3
 800298a:	f002 f9d3 	bl	8004d34 <HAL_RCCEx_PeriphCLKConfig>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002994:	f7fe ff8b 	bl	80018ae <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002998:	4b1d      	ldr	r3, [pc, #116]	@ (8002a10 <HAL_UART_MspInit+0xc4>)
 800299a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800299c:	4a1c      	ldr	r2, [pc, #112]	@ (8002a10 <HAL_UART_MspInit+0xc4>)
 800299e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80029a4:	4b1a      	ldr	r3, [pc, #104]	@ (8002a10 <HAL_UART_MspInit+0xc4>)
 80029a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ac:	613b      	str	r3, [r7, #16]
 80029ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b0:	4b17      	ldr	r3, [pc, #92]	@ (8002a10 <HAL_UART_MspInit+0xc4>)
 80029b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029b4:	4a16      	ldr	r2, [pc, #88]	@ (8002a10 <HAL_UART_MspInit+0xc4>)
 80029b6:	f043 0301 	orr.w	r3, r3, #1
 80029ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029bc:	4b14      	ldr	r3, [pc, #80]	@ (8002a10 <HAL_UART_MspInit+0xc4>)
 80029be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029c0:	f003 0301 	and.w	r3, r3, #1
 80029c4:	60fb      	str	r3, [r7, #12]
 80029c6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80029c8:	230c      	movs	r3, #12
 80029ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ce:	2302      	movs	r3, #2
 80029d0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d4:	2300      	movs	r3, #0
 80029d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029da:	2303      	movs	r3, #3
 80029dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029e0:	2307      	movs	r3, #7
 80029e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029e6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80029ea:	4619      	mov	r1, r3
 80029ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029f0:	f000 fa6a 	bl	8002ec8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80029f4:	2200      	movs	r2, #0
 80029f6:	2100      	movs	r1, #0
 80029f8:	2026      	movs	r0, #38	@ 0x26
 80029fa:	f000 f9b0 	bl	8002d5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80029fe:	2026      	movs	r0, #38	@ 0x26
 8002a00:	f000 f9c9 	bl	8002d96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002a04:	bf00      	nop
 8002a06:	37b0      	adds	r7, #176	@ 0xb0
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	40004400 	.word	0x40004400
 8002a10:	40021000 	.word	0x40021000

08002a14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002a14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002a4c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a18:	f7ff fce8 	bl	80023ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a1c:	480c      	ldr	r0, [pc, #48]	@ (8002a50 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a1e:	490d      	ldr	r1, [pc, #52]	@ (8002a54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a20:	4a0d      	ldr	r2, [pc, #52]	@ (8002a58 <LoopForever+0xe>)
  movs r3, #0
 8002a22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a24:	e002      	b.n	8002a2c <LoopCopyDataInit>

08002a26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a2a:	3304      	adds	r3, #4

08002a2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a30:	d3f9      	bcc.n	8002a26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a32:	4a0a      	ldr	r2, [pc, #40]	@ (8002a5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a34:	4c0a      	ldr	r4, [pc, #40]	@ (8002a60 <LoopForever+0x16>)
  movs r3, #0
 8002a36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a38:	e001      	b.n	8002a3e <LoopFillZerobss>

08002a3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a3c:	3204      	adds	r2, #4

08002a3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a40:	d3fb      	bcc.n	8002a3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a42:	f008 f9e1 	bl	800ae08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a46:	f7fe fe19 	bl	800167c <main>

08002a4a <LoopForever>:

LoopForever:
    b LoopForever
 8002a4a:	e7fe      	b.n	8002a4a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002a4c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002a50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a54:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002a58:	08022ebc 	.word	0x08022ebc
  ldr r2, =_sbss
 8002a5c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002a60:	200036c0 	.word	0x200036c0

08002a64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a64:	e7fe      	b.n	8002a64 <ADC1_2_IRQHandler>
	...

08002a68 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a72:	4b0c      	ldr	r3, [pc, #48]	@ (8002aa4 <HAL_Init+0x3c>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a0b      	ldr	r2, [pc, #44]	@ (8002aa4 <HAL_Init+0x3c>)
 8002a78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a7c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a7e:	2003      	movs	r0, #3
 8002a80:	f000 f962 	bl	8002d48 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a84:	2000      	movs	r0, #0
 8002a86:	f000 f80f 	bl	8002aa8 <HAL_InitTick>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d002      	beq.n	8002a96 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	71fb      	strb	r3, [r7, #7]
 8002a94:	e001      	b.n	8002a9a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a96:	f7ff fb97 	bl	80021c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a9a:	79fb      	ldrb	r3, [r7, #7]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3708      	adds	r7, #8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	40022000 	.word	0x40022000

08002aa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002ab4:	4b17      	ldr	r3, [pc, #92]	@ (8002b14 <HAL_InitTick+0x6c>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d023      	beq.n	8002b04 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002abc:	4b16      	ldr	r3, [pc, #88]	@ (8002b18 <HAL_InitTick+0x70>)
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	4b14      	ldr	r3, [pc, #80]	@ (8002b14 <HAL_InitTick+0x6c>)
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002aca:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f000 f96d 	bl	8002db2 <HAL_SYSTICK_Config>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10f      	bne.n	8002afe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2b0f      	cmp	r3, #15
 8002ae2:	d809      	bhi.n	8002af8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	6879      	ldr	r1, [r7, #4]
 8002ae8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002aec:	f000 f937 	bl	8002d5e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002af0:	4a0a      	ldr	r2, [pc, #40]	@ (8002b1c <HAL_InitTick+0x74>)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6013      	str	r3, [r2, #0]
 8002af6:	e007      	b.n	8002b08 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	73fb      	strb	r3, [r7, #15]
 8002afc:	e004      	b.n	8002b08 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	73fb      	strb	r3, [r7, #15]
 8002b02:	e001      	b.n	8002b08 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	20000008 	.word	0x20000008
 8002b18:	20000000 	.word	0x20000000
 8002b1c:	20000004 	.word	0x20000004

08002b20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b24:	4b06      	ldr	r3, [pc, #24]	@ (8002b40 <HAL_IncTick+0x20>)
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	461a      	mov	r2, r3
 8002b2a:	4b06      	ldr	r3, [pc, #24]	@ (8002b44 <HAL_IncTick+0x24>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4413      	add	r3, r2
 8002b30:	4a04      	ldr	r2, [pc, #16]	@ (8002b44 <HAL_IncTick+0x24>)
 8002b32:	6013      	str	r3, [r2, #0]
}
 8002b34:	bf00      	nop
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	20000008 	.word	0x20000008
 8002b44:	20003570 	.word	0x20003570

08002b48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b4c:	4b03      	ldr	r3, [pc, #12]	@ (8002b5c <HAL_GetTick+0x14>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	20003570 	.word	0x20003570

08002b60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b68:	f7ff ffee 	bl	8002b48 <HAL_GetTick>
 8002b6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b78:	d005      	beq.n	8002b86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8002ba4 <HAL_Delay+0x44>)
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	461a      	mov	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	4413      	add	r3, r2
 8002b84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b86:	bf00      	nop
 8002b88:	f7ff ffde 	bl	8002b48 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d8f7      	bhi.n	8002b88 <HAL_Delay+0x28>
  {
  }
}
 8002b98:	bf00      	nop
 8002b9a:	bf00      	nop
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	20000008 	.word	0x20000008

08002ba8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f003 0307 	and.w	r3, r3, #7
 8002bb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8002bec <__NVIC_SetPriorityGrouping+0x44>)
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bbe:	68ba      	ldr	r2, [r7, #8]
 8002bc0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bd0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002bd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bda:	4a04      	ldr	r2, [pc, #16]	@ (8002bec <__NVIC_SetPriorityGrouping+0x44>)
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	60d3      	str	r3, [r2, #12]
}
 8002be0:	bf00      	nop
 8002be2:	3714      	adds	r7, #20
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	e000ed00 	.word	0xe000ed00

08002bf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bf4:	4b04      	ldr	r3, [pc, #16]	@ (8002c08 <__NVIC_GetPriorityGrouping+0x18>)
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	0a1b      	lsrs	r3, r3, #8
 8002bfa:	f003 0307 	and.w	r3, r3, #7
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr
 8002c08:	e000ed00 	.word	0xe000ed00

08002c0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	4603      	mov	r3, r0
 8002c14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	db0b      	blt.n	8002c36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c1e:	79fb      	ldrb	r3, [r7, #7]
 8002c20:	f003 021f 	and.w	r2, r3, #31
 8002c24:	4907      	ldr	r1, [pc, #28]	@ (8002c44 <__NVIC_EnableIRQ+0x38>)
 8002c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c2a:	095b      	lsrs	r3, r3, #5
 8002c2c:	2001      	movs	r0, #1
 8002c2e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c36:	bf00      	nop
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	e000e100 	.word	0xe000e100

08002c48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	4603      	mov	r3, r0
 8002c50:	6039      	str	r1, [r7, #0]
 8002c52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	db0a      	blt.n	8002c72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	b2da      	uxtb	r2, r3
 8002c60:	490c      	ldr	r1, [pc, #48]	@ (8002c94 <__NVIC_SetPriority+0x4c>)
 8002c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c66:	0112      	lsls	r2, r2, #4
 8002c68:	b2d2      	uxtb	r2, r2
 8002c6a:	440b      	add	r3, r1
 8002c6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c70:	e00a      	b.n	8002c88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	b2da      	uxtb	r2, r3
 8002c76:	4908      	ldr	r1, [pc, #32]	@ (8002c98 <__NVIC_SetPriority+0x50>)
 8002c78:	79fb      	ldrb	r3, [r7, #7]
 8002c7a:	f003 030f 	and.w	r3, r3, #15
 8002c7e:	3b04      	subs	r3, #4
 8002c80:	0112      	lsls	r2, r2, #4
 8002c82:	b2d2      	uxtb	r2, r2
 8002c84:	440b      	add	r3, r1
 8002c86:	761a      	strb	r2, [r3, #24]
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	e000e100 	.word	0xe000e100
 8002c98:	e000ed00 	.word	0xe000ed00

08002c9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b089      	sub	sp, #36	@ 0x24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f003 0307 	and.w	r3, r3, #7
 8002cae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	f1c3 0307 	rsb	r3, r3, #7
 8002cb6:	2b04      	cmp	r3, #4
 8002cb8:	bf28      	it	cs
 8002cba:	2304      	movcs	r3, #4
 8002cbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	3304      	adds	r3, #4
 8002cc2:	2b06      	cmp	r3, #6
 8002cc4:	d902      	bls.n	8002ccc <NVIC_EncodePriority+0x30>
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	3b03      	subs	r3, #3
 8002cca:	e000      	b.n	8002cce <NVIC_EncodePriority+0x32>
 8002ccc:	2300      	movs	r3, #0
 8002cce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cd0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cda:	43da      	mvns	r2, r3
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	401a      	ands	r2, r3
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ce4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	fa01 f303 	lsl.w	r3, r1, r3
 8002cee:	43d9      	mvns	r1, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cf4:	4313      	orrs	r3, r2
         );
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3724      	adds	r7, #36	@ 0x24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
	...

08002d04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d14:	d301      	bcc.n	8002d1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d16:	2301      	movs	r3, #1
 8002d18:	e00f      	b.n	8002d3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d1a:	4a0a      	ldr	r2, [pc, #40]	@ (8002d44 <SysTick_Config+0x40>)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d22:	210f      	movs	r1, #15
 8002d24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002d28:	f7ff ff8e 	bl	8002c48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d2c:	4b05      	ldr	r3, [pc, #20]	@ (8002d44 <SysTick_Config+0x40>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d32:	4b04      	ldr	r3, [pc, #16]	@ (8002d44 <SysTick_Config+0x40>)
 8002d34:	2207      	movs	r2, #7
 8002d36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	e000e010 	.word	0xe000e010

08002d48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f7ff ff29 	bl	8002ba8 <__NVIC_SetPriorityGrouping>
}
 8002d56:	bf00      	nop
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b086      	sub	sp, #24
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	4603      	mov	r3, r0
 8002d66:	60b9      	str	r1, [r7, #8]
 8002d68:	607a      	str	r2, [r7, #4]
 8002d6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d70:	f7ff ff3e 	bl	8002bf0 <__NVIC_GetPriorityGrouping>
 8002d74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	68b9      	ldr	r1, [r7, #8]
 8002d7a:	6978      	ldr	r0, [r7, #20]
 8002d7c:	f7ff ff8e 	bl	8002c9c <NVIC_EncodePriority>
 8002d80:	4602      	mov	r2, r0
 8002d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d86:	4611      	mov	r1, r2
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff ff5d 	bl	8002c48 <__NVIC_SetPriority>
}
 8002d8e:	bf00      	nop
 8002d90:	3718      	adds	r7, #24
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b082      	sub	sp, #8
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff ff31 	bl	8002c0c <__NVIC_EnableIRQ>
}
 8002daa:	bf00      	nop
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b082      	sub	sp, #8
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7ff ffa2 	bl	8002d04 <SysTick_Config>
 8002dc0:	4603      	mov	r3, r0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b085      	sub	sp, #20
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d008      	beq.n	8002df4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2204      	movs	r2, #4
 8002de6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e022      	b.n	8002e3a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 020e 	bic.w	r2, r2, #14
 8002e02:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f022 0201 	bic.w	r2, r2, #1
 8002e12:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e18:	f003 021c 	and.w	r2, r3, #28
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e20:	2101      	movs	r1, #1
 8002e22:	fa01 f202 	lsl.w	r2, r1, r2
 8002e26:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002e38:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3714      	adds	r7, #20
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr

08002e46 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b084      	sub	sp, #16
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d005      	beq.n	8002e6a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2204      	movs	r2, #4
 8002e62:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	73fb      	strb	r3, [r7, #15]
 8002e68:	e029      	b.n	8002ebe <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f022 020e 	bic.w	r2, r2, #14
 8002e78:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 0201 	bic.w	r2, r2, #1
 8002e88:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e8e:	f003 021c 	and.w	r2, r3, #28
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e96:	2101      	movs	r1, #1
 8002e98:	fa01 f202 	lsl.w	r2, r1, r2
 8002e9c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d003      	beq.n	8002ebe <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	4798      	blx	r3
    }
  }
  return status;
 8002ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b087      	sub	sp, #28
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ed6:	e17f      	b.n	80031d8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	2101      	movs	r1, #1
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f000 8171 	beq.w	80031d2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f003 0303 	and.w	r3, r3, #3
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d005      	beq.n	8002f08 <HAL_GPIO_Init+0x40>
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f003 0303 	and.w	r3, r3, #3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d130      	bne.n	8002f6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	2203      	movs	r2, #3
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	43db      	mvns	r3, r3
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	68da      	ldr	r2, [r3, #12]
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	693a      	ldr	r2, [r7, #16]
 8002f36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f3e:	2201      	movs	r2, #1
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	fa02 f303 	lsl.w	r3, r2, r3
 8002f46:	43db      	mvns	r3, r3
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	091b      	lsrs	r3, r3, #4
 8002f54:	f003 0201 	and.w	r2, r3, #1
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f003 0303 	and.w	r3, r3, #3
 8002f72:	2b03      	cmp	r3, #3
 8002f74:	d118      	bne.n	8002fa8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	43db      	mvns	r3, r3
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	08db      	lsrs	r3, r3, #3
 8002f92:	f003 0201 	and.w	r2, r3, #1
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f003 0303 	and.w	r3, r3, #3
 8002fb0:	2b03      	cmp	r3, #3
 8002fb2:	d017      	beq.n	8002fe4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	2203      	movs	r2, #3
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	43db      	mvns	r3, r3
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	689a      	ldr	r2, [r3, #8]
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f003 0303 	and.w	r3, r3, #3
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d123      	bne.n	8003038 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	08da      	lsrs	r2, r3, #3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	3208      	adds	r2, #8
 8002ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	f003 0307 	and.w	r3, r3, #7
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	220f      	movs	r2, #15
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	43db      	mvns	r3, r3
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	4013      	ands	r3, r2
 8003012:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	691a      	ldr	r2, [r3, #16]
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	f003 0307 	and.w	r3, r3, #7
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	4313      	orrs	r3, r2
 8003028:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	08da      	lsrs	r2, r3, #3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	3208      	adds	r2, #8
 8003032:	6939      	ldr	r1, [r7, #16]
 8003034:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	2203      	movs	r2, #3
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	43db      	mvns	r3, r3
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	4013      	ands	r3, r2
 800304e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f003 0203 	and.w	r2, r3, #3
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	4313      	orrs	r3, r2
 8003064:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 80ac 	beq.w	80031d2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800307a:	4b5f      	ldr	r3, [pc, #380]	@ (80031f8 <HAL_GPIO_Init+0x330>)
 800307c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800307e:	4a5e      	ldr	r2, [pc, #376]	@ (80031f8 <HAL_GPIO_Init+0x330>)
 8003080:	f043 0301 	orr.w	r3, r3, #1
 8003084:	6613      	str	r3, [r2, #96]	@ 0x60
 8003086:	4b5c      	ldr	r3, [pc, #368]	@ (80031f8 <HAL_GPIO_Init+0x330>)
 8003088:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	60bb      	str	r3, [r7, #8]
 8003090:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003092:	4a5a      	ldr	r2, [pc, #360]	@ (80031fc <HAL_GPIO_Init+0x334>)
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	089b      	lsrs	r3, r3, #2
 8003098:	3302      	adds	r3, #2
 800309a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800309e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	f003 0303 	and.w	r3, r3, #3
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	220f      	movs	r2, #15
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	43db      	mvns	r3, r3
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	4013      	ands	r3, r2
 80030b4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80030bc:	d025      	beq.n	800310a <HAL_GPIO_Init+0x242>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a4f      	ldr	r2, [pc, #316]	@ (8003200 <HAL_GPIO_Init+0x338>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d01f      	beq.n	8003106 <HAL_GPIO_Init+0x23e>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a4e      	ldr	r2, [pc, #312]	@ (8003204 <HAL_GPIO_Init+0x33c>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d019      	beq.n	8003102 <HAL_GPIO_Init+0x23a>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a4d      	ldr	r2, [pc, #308]	@ (8003208 <HAL_GPIO_Init+0x340>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d013      	beq.n	80030fe <HAL_GPIO_Init+0x236>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a4c      	ldr	r2, [pc, #304]	@ (800320c <HAL_GPIO_Init+0x344>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d00d      	beq.n	80030fa <HAL_GPIO_Init+0x232>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a4b      	ldr	r2, [pc, #300]	@ (8003210 <HAL_GPIO_Init+0x348>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d007      	beq.n	80030f6 <HAL_GPIO_Init+0x22e>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a4a      	ldr	r2, [pc, #296]	@ (8003214 <HAL_GPIO_Init+0x34c>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d101      	bne.n	80030f2 <HAL_GPIO_Init+0x22a>
 80030ee:	2306      	movs	r3, #6
 80030f0:	e00c      	b.n	800310c <HAL_GPIO_Init+0x244>
 80030f2:	2307      	movs	r3, #7
 80030f4:	e00a      	b.n	800310c <HAL_GPIO_Init+0x244>
 80030f6:	2305      	movs	r3, #5
 80030f8:	e008      	b.n	800310c <HAL_GPIO_Init+0x244>
 80030fa:	2304      	movs	r3, #4
 80030fc:	e006      	b.n	800310c <HAL_GPIO_Init+0x244>
 80030fe:	2303      	movs	r3, #3
 8003100:	e004      	b.n	800310c <HAL_GPIO_Init+0x244>
 8003102:	2302      	movs	r3, #2
 8003104:	e002      	b.n	800310c <HAL_GPIO_Init+0x244>
 8003106:	2301      	movs	r3, #1
 8003108:	e000      	b.n	800310c <HAL_GPIO_Init+0x244>
 800310a:	2300      	movs	r3, #0
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	f002 0203 	and.w	r2, r2, #3
 8003112:	0092      	lsls	r2, r2, #2
 8003114:	4093      	lsls	r3, r2
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	4313      	orrs	r3, r2
 800311a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800311c:	4937      	ldr	r1, [pc, #220]	@ (80031fc <HAL_GPIO_Init+0x334>)
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	089b      	lsrs	r3, r3, #2
 8003122:	3302      	adds	r3, #2
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800312a:	4b3b      	ldr	r3, [pc, #236]	@ (8003218 <HAL_GPIO_Init+0x350>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	43db      	mvns	r3, r3
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	4013      	ands	r3, r2
 8003138:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	4313      	orrs	r3, r2
 800314c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800314e:	4a32      	ldr	r2, [pc, #200]	@ (8003218 <HAL_GPIO_Init+0x350>)
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003154:	4b30      	ldr	r3, [pc, #192]	@ (8003218 <HAL_GPIO_Init+0x350>)
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	43db      	mvns	r3, r3
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	4013      	ands	r3, r2
 8003162:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d003      	beq.n	8003178 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	4313      	orrs	r3, r2
 8003176:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003178:	4a27      	ldr	r2, [pc, #156]	@ (8003218 <HAL_GPIO_Init+0x350>)
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800317e:	4b26      	ldr	r3, [pc, #152]	@ (8003218 <HAL_GPIO_Init+0x350>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	43db      	mvns	r3, r3
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	4013      	ands	r3, r2
 800318c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	4313      	orrs	r3, r2
 80031a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80031a2:	4a1d      	ldr	r2, [pc, #116]	@ (8003218 <HAL_GPIO_Init+0x350>)
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80031a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003218 <HAL_GPIO_Init+0x350>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	43db      	mvns	r3, r3
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	4013      	ands	r3, r2
 80031b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d003      	beq.n	80031cc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80031c4:	693a      	ldr	r2, [r7, #16]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80031cc:	4a12      	ldr	r2, [pc, #72]	@ (8003218 <HAL_GPIO_Init+0x350>)
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	3301      	adds	r3, #1
 80031d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	fa22 f303 	lsr.w	r3, r2, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f47f ae78 	bne.w	8002ed8 <HAL_GPIO_Init+0x10>
  }
}
 80031e8:	bf00      	nop
 80031ea:	bf00      	nop
 80031ec:	371c      	adds	r7, #28
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	40021000 	.word	0x40021000
 80031fc:	40010000 	.word	0x40010000
 8003200:	48000400 	.word	0x48000400
 8003204:	48000800 	.word	0x48000800
 8003208:	48000c00 	.word	0x48000c00
 800320c:	48001000 	.word	0x48001000
 8003210:	48001400 	.word	0x48001400
 8003214:	48001800 	.word	0x48001800
 8003218:	40010400 	.word	0x40010400

0800321c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	460b      	mov	r3, r1
 8003226:	807b      	strh	r3, [r7, #2]
 8003228:	4613      	mov	r3, r2
 800322a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800322c:	787b      	ldrb	r3, [r7, #1]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d003      	beq.n	800323a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003232:	887a      	ldrh	r2, [r7, #2]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003238:	e002      	b.n	8003240 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800323a:	887a      	ldrh	r2, [r7, #2]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e08d      	b.n	800337a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d106      	bne.n	8003278 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f7fe f880 	bl	8001378 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2224      	movs	r2, #36	@ 0x24
 800327c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 0201 	bic.w	r2, r2, #1
 800328e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800329c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	689a      	ldr	r2, [r3, #8]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80032ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d107      	bne.n	80032c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689a      	ldr	r2, [r3, #8]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032c2:	609a      	str	r2, [r3, #8]
 80032c4:	e006      	b.n	80032d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	689a      	ldr	r2, [r3, #8]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80032d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d108      	bne.n	80032ee <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	685a      	ldr	r2, [r3, #4]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032ea:	605a      	str	r2, [r3, #4]
 80032ec:	e007      	b.n	80032fe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	685a      	ldr	r2, [r3, #4]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	6812      	ldr	r2, [r2, #0]
 8003308:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800330c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003310:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68da      	ldr	r2, [r3, #12]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003320:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	691a      	ldr	r2, [r3, #16]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	430a      	orrs	r2, r1
 800333a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	69d9      	ldr	r1, [r3, #28]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a1a      	ldr	r2, [r3, #32]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	430a      	orrs	r2, r1
 800334a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f042 0201 	orr.w	r2, r2, #1
 800335a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2220      	movs	r2, #32
 8003366:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
	...

08003384 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b088      	sub	sp, #32
 8003388:	af02      	add	r7, sp, #8
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	4608      	mov	r0, r1
 800338e:	4611      	mov	r1, r2
 8003390:	461a      	mov	r2, r3
 8003392:	4603      	mov	r3, r0
 8003394:	817b      	strh	r3, [r7, #10]
 8003396:	460b      	mov	r3, r1
 8003398:	813b      	strh	r3, [r7, #8]
 800339a:	4613      	mov	r3, r2
 800339c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b20      	cmp	r3, #32
 80033a8:	f040 80f9 	bne.w	800359e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80033ac:	6a3b      	ldr	r3, [r7, #32]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d002      	beq.n	80033b8 <HAL_I2C_Mem_Write+0x34>
 80033b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d105      	bne.n	80033c4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033be:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e0ed      	b.n	80035a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d101      	bne.n	80033d2 <HAL_I2C_Mem_Write+0x4e>
 80033ce:	2302      	movs	r3, #2
 80033d0:	e0e6      	b.n	80035a0 <HAL_I2C_Mem_Write+0x21c>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80033da:	f7ff fbb5 	bl	8002b48 <HAL_GetTick>
 80033de:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	9300      	str	r3, [sp, #0]
 80033e4:	2319      	movs	r3, #25
 80033e6:	2201      	movs	r2, #1
 80033e8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f000 fbaf 	bl	8003b50 <I2C_WaitOnFlagUntilTimeout>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e0d1      	b.n	80035a0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2221      	movs	r2, #33	@ 0x21
 8003400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2240      	movs	r2, #64	@ 0x40
 8003408:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6a3a      	ldr	r2, [r7, #32]
 8003416:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800341c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003424:	88f8      	ldrh	r0, [r7, #6]
 8003426:	893a      	ldrh	r2, [r7, #8]
 8003428:	8979      	ldrh	r1, [r7, #10]
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	9301      	str	r3, [sp, #4]
 800342e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003430:	9300      	str	r3, [sp, #0]
 8003432:	4603      	mov	r3, r0
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f000 fabf 	bl	80039b8 <I2C_RequestMemoryWrite>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d005      	beq.n	800344c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e0a9      	b.n	80035a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003450:	b29b      	uxth	r3, r3
 8003452:	2bff      	cmp	r3, #255	@ 0xff
 8003454:	d90e      	bls.n	8003474 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	22ff      	movs	r2, #255	@ 0xff
 800345a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003460:	b2da      	uxtb	r2, r3
 8003462:	8979      	ldrh	r1, [r7, #10]
 8003464:	2300      	movs	r3, #0
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	f000 fd33 	bl	8003ed8 <I2C_TransferConfig>
 8003472:	e00f      	b.n	8003494 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003478:	b29a      	uxth	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003482:	b2da      	uxtb	r2, r3
 8003484:	8979      	ldrh	r1, [r7, #10]
 8003486:	2300      	movs	r3, #0
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800348e:	68f8      	ldr	r0, [r7, #12]
 8003490:	f000 fd22 	bl	8003ed8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f000 fbb2 	bl	8003c02 <I2C_WaitOnTXISFlagUntilTimeout>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d001      	beq.n	80034a8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e07b      	b.n	80035a0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ac:	781a      	ldrb	r2, [r3, #0]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b8:	1c5a      	adds	r2, r3, #1
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	3b01      	subs	r3, #1
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034d0:	3b01      	subs	r3, #1
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034dc:	b29b      	uxth	r3, r3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d034      	beq.n	800354c <HAL_I2C_Mem_Write+0x1c8>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d130      	bne.n	800354c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034f0:	2200      	movs	r2, #0
 80034f2:	2180      	movs	r1, #128	@ 0x80
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f000 fb2b 	bl	8003b50 <I2C_WaitOnFlagUntilTimeout>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d001      	beq.n	8003504 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e04d      	b.n	80035a0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003508:	b29b      	uxth	r3, r3
 800350a:	2bff      	cmp	r3, #255	@ 0xff
 800350c:	d90e      	bls.n	800352c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	22ff      	movs	r2, #255	@ 0xff
 8003512:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003518:	b2da      	uxtb	r2, r3
 800351a:	8979      	ldrh	r1, [r7, #10]
 800351c:	2300      	movs	r3, #0
 800351e:	9300      	str	r3, [sp, #0]
 8003520:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f000 fcd7 	bl	8003ed8 <I2C_TransferConfig>
 800352a:	e00f      	b.n	800354c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003530:	b29a      	uxth	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800353a:	b2da      	uxtb	r2, r3
 800353c:	8979      	ldrh	r1, [r7, #10]
 800353e:	2300      	movs	r3, #0
 8003540:	9300      	str	r3, [sp, #0]
 8003542:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f000 fcc6 	bl	8003ed8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003550:	b29b      	uxth	r3, r3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d19e      	bne.n	8003494 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f000 fb98 	bl	8003c90 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e01a      	b.n	80035a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2220      	movs	r2, #32
 8003570:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	6859      	ldr	r1, [r3, #4]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	4b0a      	ldr	r3, [pc, #40]	@ (80035a8 <HAL_I2C_Mem_Write+0x224>)
 800357e:	400b      	ands	r3, r1
 8003580:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2220      	movs	r2, #32
 8003586:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800359a:	2300      	movs	r3, #0
 800359c:	e000      	b.n	80035a0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800359e:	2302      	movs	r3, #2
  }
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3718      	adds	r7, #24
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	fe00e800 	.word	0xfe00e800

080035ac <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b088      	sub	sp, #32
 80035b0:	af02      	add	r7, sp, #8
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	4608      	mov	r0, r1
 80035b6:	4611      	mov	r1, r2
 80035b8:	461a      	mov	r2, r3
 80035ba:	4603      	mov	r3, r0
 80035bc:	817b      	strh	r3, [r7, #10]
 80035be:	460b      	mov	r3, r1
 80035c0:	813b      	strh	r3, [r7, #8]
 80035c2:	4613      	mov	r3, r2
 80035c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b20      	cmp	r3, #32
 80035d0:	f040 80fd 	bne.w	80037ce <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80035d4:	6a3b      	ldr	r3, [r7, #32]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d002      	beq.n	80035e0 <HAL_I2C_Mem_Read+0x34>
 80035da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d105      	bne.n	80035ec <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035e6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e0f1      	b.n	80037d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d101      	bne.n	80035fa <HAL_I2C_Mem_Read+0x4e>
 80035f6:	2302      	movs	r3, #2
 80035f8:	e0ea      	b.n	80037d0 <HAL_I2C_Mem_Read+0x224>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003602:	f7ff faa1 	bl	8002b48 <HAL_GetTick>
 8003606:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	9300      	str	r3, [sp, #0]
 800360c:	2319      	movs	r3, #25
 800360e:	2201      	movs	r2, #1
 8003610:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f000 fa9b 	bl	8003b50 <I2C_WaitOnFlagUntilTimeout>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d001      	beq.n	8003624 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e0d5      	b.n	80037d0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2222      	movs	r2, #34	@ 0x22
 8003628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2240      	movs	r2, #64	@ 0x40
 8003630:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6a3a      	ldr	r2, [r7, #32]
 800363e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003644:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800364c:	88f8      	ldrh	r0, [r7, #6]
 800364e:	893a      	ldrh	r2, [r7, #8]
 8003650:	8979      	ldrh	r1, [r7, #10]
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	9301      	str	r3, [sp, #4]
 8003656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	4603      	mov	r3, r0
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f000 f9ff 	bl	8003a60 <I2C_RequestMemoryRead>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d005      	beq.n	8003674 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e0ad      	b.n	80037d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003678:	b29b      	uxth	r3, r3
 800367a:	2bff      	cmp	r3, #255	@ 0xff
 800367c:	d90e      	bls.n	800369c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2201      	movs	r2, #1
 8003682:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003688:	b2da      	uxtb	r2, r3
 800368a:	8979      	ldrh	r1, [r7, #10]
 800368c:	4b52      	ldr	r3, [pc, #328]	@ (80037d8 <HAL_I2C_Mem_Read+0x22c>)
 800368e:	9300      	str	r3, [sp, #0]
 8003690:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f000 fc1f 	bl	8003ed8 <I2C_TransferConfig>
 800369a:	e00f      	b.n	80036bc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036a0:	b29a      	uxth	r2, r3
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036aa:	b2da      	uxtb	r2, r3
 80036ac:	8979      	ldrh	r1, [r7, #10]
 80036ae:	4b4a      	ldr	r3, [pc, #296]	@ (80037d8 <HAL_I2C_Mem_Read+0x22c>)
 80036b0:	9300      	str	r3, [sp, #0]
 80036b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f000 fc0e 	bl	8003ed8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	9300      	str	r3, [sp, #0]
 80036c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036c2:	2200      	movs	r2, #0
 80036c4:	2104      	movs	r1, #4
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f000 fa42 	bl	8003b50 <I2C_WaitOnFlagUntilTimeout>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e07c      	b.n	80037d0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e0:	b2d2      	uxtb	r2, r2
 80036e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e8:	1c5a      	adds	r2, r3, #1
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036f2:	3b01      	subs	r3, #1
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036fe:	b29b      	uxth	r3, r3
 8003700:	3b01      	subs	r3, #1
 8003702:	b29a      	uxth	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800370c:	b29b      	uxth	r3, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d034      	beq.n	800377c <HAL_I2C_Mem_Read+0x1d0>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003716:	2b00      	cmp	r3, #0
 8003718:	d130      	bne.n	800377c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	9300      	str	r3, [sp, #0]
 800371e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003720:	2200      	movs	r2, #0
 8003722:	2180      	movs	r1, #128	@ 0x80
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f000 fa13 	bl	8003b50 <I2C_WaitOnFlagUntilTimeout>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d001      	beq.n	8003734 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e04d      	b.n	80037d0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003738:	b29b      	uxth	r3, r3
 800373a:	2bff      	cmp	r3, #255	@ 0xff
 800373c:	d90e      	bls.n	800375c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2201      	movs	r2, #1
 8003742:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003748:	b2da      	uxtb	r2, r3
 800374a:	8979      	ldrh	r1, [r7, #10]
 800374c:	2300      	movs	r3, #0
 800374e:	9300      	str	r3, [sp, #0]
 8003750:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f000 fbbf 	bl	8003ed8 <I2C_TransferConfig>
 800375a:	e00f      	b.n	800377c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003760:	b29a      	uxth	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800376a:	b2da      	uxtb	r2, r3
 800376c:	8979      	ldrh	r1, [r7, #10]
 800376e:	2300      	movs	r3, #0
 8003770:	9300      	str	r3, [sp, #0]
 8003772:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	f000 fbae 	bl	8003ed8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003780:	b29b      	uxth	r3, r3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d19a      	bne.n	80036bc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800378a:	68f8      	ldr	r0, [r7, #12]
 800378c:	f000 fa80 	bl	8003c90 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e01a      	b.n	80037d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2220      	movs	r2, #32
 80037a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	6859      	ldr	r1, [r3, #4]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	4b0b      	ldr	r3, [pc, #44]	@ (80037dc <HAL_I2C_Mem_Read+0x230>)
 80037ae:	400b      	ands	r3, r1
 80037b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2220      	movs	r2, #32
 80037b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80037ca:	2300      	movs	r3, #0
 80037cc:	e000      	b.n	80037d0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80037ce:	2302      	movs	r3, #2
  }
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3718      	adds	r7, #24
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	80002400 	.word	0x80002400
 80037dc:	fe00e800 	.word	0xfe00e800

080037e0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b08a      	sub	sp, #40	@ 0x28
 80037e4:	af02      	add	r7, sp, #8
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	607a      	str	r2, [r7, #4]
 80037ea:	603b      	str	r3, [r7, #0]
 80037ec:	460b      	mov	r3, r1
 80037ee:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80037f0:	2300      	movs	r3, #0
 80037f2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	2b20      	cmp	r3, #32
 80037fe:	f040 80d6 	bne.w	80039ae <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800380c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003810:	d101      	bne.n	8003816 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8003812:	2302      	movs	r3, #2
 8003814:	e0cc      	b.n	80039b0 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800381c:	2b01      	cmp	r3, #1
 800381e:	d101      	bne.n	8003824 <HAL_I2C_IsDeviceReady+0x44>
 8003820:	2302      	movs	r3, #2
 8003822:	e0c5      	b.n	80039b0 <HAL_I2C_IsDeviceReady+0x1d0>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2224      	movs	r2, #36	@ 0x24
 8003830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d107      	bne.n	8003852 <HAL_I2C_IsDeviceReady+0x72>
 8003842:	897b      	ldrh	r3, [r7, #10]
 8003844:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003848:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800384c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003850:	e006      	b.n	8003860 <HAL_I2C_IsDeviceReady+0x80>
 8003852:	897b      	ldrh	r3, [r7, #10]
 8003854:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003858:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800385c:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	6812      	ldr	r2, [r2, #0]
 8003864:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003866:	f7ff f96f 	bl	8002b48 <HAL_GetTick>
 800386a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	f003 0320 	and.w	r3, r3, #32
 8003876:	2b20      	cmp	r3, #32
 8003878:	bf0c      	ite	eq
 800387a:	2301      	moveq	r3, #1
 800387c:	2300      	movne	r3, #0
 800387e:	b2db      	uxtb	r3, r3
 8003880:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	f003 0310 	and.w	r3, r3, #16
 800388c:	2b10      	cmp	r3, #16
 800388e:	bf0c      	ite	eq
 8003890:	2301      	moveq	r3, #1
 8003892:	2300      	movne	r3, #0
 8003894:	b2db      	uxtb	r3, r3
 8003896:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003898:	e034      	b.n	8003904 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038a0:	d01a      	beq.n	80038d8 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80038a2:	f7ff f951 	bl	8002b48 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	683a      	ldr	r2, [r7, #0]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d302      	bcc.n	80038b8 <HAL_I2C_IsDeviceReady+0xd8>
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d10f      	bne.n	80038d8 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2220      	movs	r2, #32
 80038bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038c4:	f043 0220 	orr.w	r2, r3, #32
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e06b      	b.n	80039b0 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	f003 0320 	and.w	r3, r3, #32
 80038e2:	2b20      	cmp	r3, #32
 80038e4:	bf0c      	ite	eq
 80038e6:	2301      	moveq	r3, #1
 80038e8:	2300      	movne	r3, #0
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	f003 0310 	and.w	r3, r3, #16
 80038f8:	2b10      	cmp	r3, #16
 80038fa:	bf0c      	ite	eq
 80038fc:	2301      	moveq	r3, #1
 80038fe:	2300      	movne	r3, #0
 8003900:	b2db      	uxtb	r3, r3
 8003902:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003904:	7ffb      	ldrb	r3, [r7, #31]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d102      	bne.n	8003910 <HAL_I2C_IsDeviceReady+0x130>
 800390a:	7fbb      	ldrb	r3, [r7, #30]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d0c4      	beq.n	800389a <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	f003 0310 	and.w	r3, r3, #16
 800391a:	2b10      	cmp	r3, #16
 800391c:	d01a      	beq.n	8003954 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	9300      	str	r3, [sp, #0]
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	2200      	movs	r2, #0
 8003926:	2120      	movs	r1, #32
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f000 f911 	bl	8003b50 <I2C_WaitOnFlagUntilTimeout>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e03b      	b.n	80039b0 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2220      	movs	r2, #32
 800393e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2220      	movs	r2, #32
 8003944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8003950:	2300      	movs	r3, #0
 8003952:	e02d      	b.n	80039b0 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	9300      	str	r3, [sp, #0]
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	2200      	movs	r2, #0
 800395c:	2120      	movs	r1, #32
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f000 f8f6 	bl	8003b50 <I2C_WaitOnFlagUntilTimeout>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e020      	b.n	80039b0 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2210      	movs	r2, #16
 8003974:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2220      	movs	r2, #32
 800397c:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	3301      	adds	r3, #1
 8003982:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	429a      	cmp	r2, r3
 800398a:	f63f af56 	bhi.w	800383a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2220      	movs	r2, #32
 8003992:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800399a:	f043 0220 	orr.w	r2, r3, #32
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e000      	b.n	80039b0 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 80039ae:	2302      	movs	r3, #2
  }
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3720      	adds	r7, #32
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af02      	add	r7, sp, #8
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	4608      	mov	r0, r1
 80039c2:	4611      	mov	r1, r2
 80039c4:	461a      	mov	r2, r3
 80039c6:	4603      	mov	r3, r0
 80039c8:	817b      	strh	r3, [r7, #10]
 80039ca:	460b      	mov	r3, r1
 80039cc:	813b      	strh	r3, [r7, #8]
 80039ce:	4613      	mov	r3, r2
 80039d0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80039d2:	88fb      	ldrh	r3, [r7, #6]
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	8979      	ldrh	r1, [r7, #10]
 80039d8:	4b20      	ldr	r3, [pc, #128]	@ (8003a5c <I2C_RequestMemoryWrite+0xa4>)
 80039da:	9300      	str	r3, [sp, #0]
 80039dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80039e0:	68f8      	ldr	r0, [r7, #12]
 80039e2:	f000 fa79 	bl	8003ed8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039e6:	69fa      	ldr	r2, [r7, #28]
 80039e8:	69b9      	ldr	r1, [r7, #24]
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f000 f909 	bl	8003c02 <I2C_WaitOnTXISFlagUntilTimeout>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e02c      	b.n	8003a54 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039fa:	88fb      	ldrh	r3, [r7, #6]
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d105      	bne.n	8003a0c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a00:	893b      	ldrh	r3, [r7, #8]
 8003a02:	b2da      	uxtb	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a0a:	e015      	b.n	8003a38 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003a0c:	893b      	ldrh	r3, [r7, #8]
 8003a0e:	0a1b      	lsrs	r3, r3, #8
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	b2da      	uxtb	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a1a:	69fa      	ldr	r2, [r7, #28]
 8003a1c:	69b9      	ldr	r1, [r7, #24]
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f000 f8ef 	bl	8003c02 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e012      	b.n	8003a54 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a2e:	893b      	ldrh	r3, [r7, #8]
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	9300      	str	r3, [sp, #0]
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	2180      	movs	r1, #128	@ 0x80
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	f000 f884 	bl	8003b50 <I2C_WaitOnFlagUntilTimeout>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e000      	b.n	8003a54 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	80002000 	.word	0x80002000

08003a60 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af02      	add	r7, sp, #8
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	4608      	mov	r0, r1
 8003a6a:	4611      	mov	r1, r2
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	4603      	mov	r3, r0
 8003a70:	817b      	strh	r3, [r7, #10]
 8003a72:	460b      	mov	r3, r1
 8003a74:	813b      	strh	r3, [r7, #8]
 8003a76:	4613      	mov	r3, r2
 8003a78:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003a7a:	88fb      	ldrh	r3, [r7, #6]
 8003a7c:	b2da      	uxtb	r2, r3
 8003a7e:	8979      	ldrh	r1, [r7, #10]
 8003a80:	4b20      	ldr	r3, [pc, #128]	@ (8003b04 <I2C_RequestMemoryRead+0xa4>)
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	2300      	movs	r3, #0
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f000 fa26 	bl	8003ed8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a8c:	69fa      	ldr	r2, [r7, #28]
 8003a8e:	69b9      	ldr	r1, [r7, #24]
 8003a90:	68f8      	ldr	r0, [r7, #12]
 8003a92:	f000 f8b6 	bl	8003c02 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d001      	beq.n	8003aa0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e02c      	b.n	8003afa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003aa0:	88fb      	ldrh	r3, [r7, #6]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d105      	bne.n	8003ab2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003aa6:	893b      	ldrh	r3, [r7, #8]
 8003aa8:	b2da      	uxtb	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ab0:	e015      	b.n	8003ade <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003ab2:	893b      	ldrh	r3, [r7, #8]
 8003ab4:	0a1b      	lsrs	r3, r3, #8
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	b2da      	uxtb	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ac0:	69fa      	ldr	r2, [r7, #28]
 8003ac2:	69b9      	ldr	r1, [r7, #24]
 8003ac4:	68f8      	ldr	r0, [r7, #12]
 8003ac6:	f000 f89c 	bl	8003c02 <I2C_WaitOnTXISFlagUntilTimeout>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d001      	beq.n	8003ad4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e012      	b.n	8003afa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ad4:	893b      	ldrh	r3, [r7, #8]
 8003ad6:	b2da      	uxtb	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	9300      	str	r3, [sp, #0]
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	2140      	movs	r1, #64	@ 0x40
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f000 f831 	bl	8003b50 <I2C_WaitOnFlagUntilTimeout>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d001      	beq.n	8003af8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e000      	b.n	8003afa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	80002000 	.word	0x80002000

08003b08 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d103      	bne.n	8003b26 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2200      	movs	r2, #0
 8003b24:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	f003 0301 	and.w	r3, r3, #1
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d007      	beq.n	8003b44 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	699a      	ldr	r2, [r3, #24]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f042 0201 	orr.w	r2, r2, #1
 8003b42:	619a      	str	r2, [r3, #24]
  }
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	603b      	str	r3, [r7, #0]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b60:	e03b      	b.n	8003bda <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	6839      	ldr	r1, [r7, #0]
 8003b66:	68f8      	ldr	r0, [r7, #12]
 8003b68:	f000 f8d6 	bl	8003d18 <I2C_IsErrorOccurred>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d001      	beq.n	8003b76 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e041      	b.n	8003bfa <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b7c:	d02d      	beq.n	8003bda <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b7e:	f7fe ffe3 	bl	8002b48 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	683a      	ldr	r2, [r7, #0]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d302      	bcc.n	8003b94 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d122      	bne.n	8003bda <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	699a      	ldr	r2, [r3, #24]
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	68ba      	ldr	r2, [r7, #8]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	bf0c      	ite	eq
 8003ba4:	2301      	moveq	r3, #1
 8003ba6:	2300      	movne	r3, #0
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	461a      	mov	r2, r3
 8003bac:	79fb      	ldrb	r3, [r7, #7]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d113      	bne.n	8003bda <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bb6:	f043 0220 	orr.w	r2, r3, #32
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e00f      	b.n	8003bfa <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	699a      	ldr	r2, [r3, #24]
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	4013      	ands	r3, r2
 8003be4:	68ba      	ldr	r2, [r7, #8]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	bf0c      	ite	eq
 8003bea:	2301      	moveq	r3, #1
 8003bec:	2300      	movne	r3, #0
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	79fb      	ldrb	r3, [r7, #7]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d0b4      	beq.n	8003b62 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b084      	sub	sp, #16
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	60f8      	str	r0, [r7, #12]
 8003c0a:	60b9      	str	r1, [r7, #8]
 8003c0c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c0e:	e033      	b.n	8003c78 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	68b9      	ldr	r1, [r7, #8]
 8003c14:	68f8      	ldr	r0, [r7, #12]
 8003c16:	f000 f87f 	bl	8003d18 <I2C_IsErrorOccurred>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d001      	beq.n	8003c24 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e031      	b.n	8003c88 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c2a:	d025      	beq.n	8003c78 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c2c:	f7fe ff8c 	bl	8002b48 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d302      	bcc.n	8003c42 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d11a      	bne.n	8003c78 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	699b      	ldr	r3, [r3, #24]
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d013      	beq.n	8003c78 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c54:	f043 0220 	orr.w	r2, r3, #32
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2220      	movs	r2, #32
 8003c60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e007      	b.n	8003c88 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d1c4      	bne.n	8003c10 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3710      	adds	r7, #16
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c9c:	e02f      	b.n	8003cfe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	68b9      	ldr	r1, [r7, #8]
 8003ca2:	68f8      	ldr	r0, [r7, #12]
 8003ca4:	f000 f838 	bl	8003d18 <I2C_IsErrorOccurred>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e02d      	b.n	8003d0e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cb2:	f7fe ff49 	bl	8002b48 <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	68ba      	ldr	r2, [r7, #8]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d302      	bcc.n	8003cc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d11a      	bne.n	8003cfe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	f003 0320 	and.w	r3, r3, #32
 8003cd2:	2b20      	cmp	r3, #32
 8003cd4:	d013      	beq.n	8003cfe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cda:	f043 0220 	orr.w	r2, r3, #32
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2220      	movs	r2, #32
 8003ce6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e007      	b.n	8003d0e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	f003 0320 	and.w	r3, r3, #32
 8003d08:	2b20      	cmp	r3, #32
 8003d0a:	d1c8      	bne.n	8003c9e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
	...

08003d18 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b08a      	sub	sp, #40	@ 0x28
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d24:	2300      	movs	r3, #0
 8003d26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003d32:	2300      	movs	r3, #0
 8003d34:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	f003 0310 	and.w	r3, r3, #16
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d068      	beq.n	8003e16 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2210      	movs	r2, #16
 8003d4a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d4c:	e049      	b.n	8003de2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d54:	d045      	beq.n	8003de2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d56:	f7fe fef7 	bl	8002b48 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	68ba      	ldr	r2, [r7, #8]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d302      	bcc.n	8003d6c <I2C_IsErrorOccurred+0x54>
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d13a      	bne.n	8003de2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d76:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d7e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d8e:	d121      	bne.n	8003dd4 <I2C_IsErrorOccurred+0xbc>
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d96:	d01d      	beq.n	8003dd4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003d98:	7cfb      	ldrb	r3, [r7, #19]
 8003d9a:	2b20      	cmp	r3, #32
 8003d9c:	d01a      	beq.n	8003dd4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	685a      	ldr	r2, [r3, #4]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003dac:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003dae:	f7fe fecb 	bl	8002b48 <HAL_GetTick>
 8003db2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003db4:	e00e      	b.n	8003dd4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003db6:	f7fe fec7 	bl	8002b48 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b19      	cmp	r3, #25
 8003dc2:	d907      	bls.n	8003dd4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003dc4:	6a3b      	ldr	r3, [r7, #32]
 8003dc6:	f043 0320 	orr.w	r3, r3, #32
 8003dca:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003dd2:	e006      	b.n	8003de2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	f003 0320 	and.w	r3, r3, #32
 8003dde:	2b20      	cmp	r3, #32
 8003de0:	d1e9      	bne.n	8003db6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	f003 0320 	and.w	r3, r3, #32
 8003dec:	2b20      	cmp	r3, #32
 8003dee:	d003      	beq.n	8003df8 <I2C_IsErrorOccurred+0xe0>
 8003df0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d0aa      	beq.n	8003d4e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003df8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d103      	bne.n	8003e08 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2220      	movs	r2, #32
 8003e06:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003e08:	6a3b      	ldr	r3, [r7, #32]
 8003e0a:	f043 0304 	orr.w	r3, r3, #4
 8003e0e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00b      	beq.n	8003e40 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003e28:	6a3b      	ldr	r3, [r7, #32]
 8003e2a:	f043 0301 	orr.w	r3, r3, #1
 8003e2e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003e38:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00b      	beq.n	8003e62 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003e4a:	6a3b      	ldr	r3, [r7, #32]
 8003e4c:	f043 0308 	orr.w	r3, r3, #8
 8003e50:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003e5a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d00b      	beq.n	8003e84 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003e6c:	6a3b      	ldr	r3, [r7, #32]
 8003e6e:	f043 0302 	orr.w	r3, r3, #2
 8003e72:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e7c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003e84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d01c      	beq.n	8003ec6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	f7ff fe3b 	bl	8003b08 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	6859      	ldr	r1, [r3, #4]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	4b0d      	ldr	r3, [pc, #52]	@ (8003ed4 <I2C_IsErrorOccurred+0x1bc>)
 8003e9e:	400b      	ands	r3, r1
 8003ea0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ea6:	6a3b      	ldr	r3, [r7, #32]
 8003ea8:	431a      	orrs	r2, r3
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2220      	movs	r2, #32
 8003eb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003ec6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3728      	adds	r7, #40	@ 0x28
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	fe00e800 	.word	0xfe00e800

08003ed8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b087      	sub	sp, #28
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	607b      	str	r3, [r7, #4]
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	817b      	strh	r3, [r7, #10]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003eea:	897b      	ldrh	r3, [r7, #10]
 8003eec:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003ef0:	7a7b      	ldrb	r3, [r7, #9]
 8003ef2:	041b      	lsls	r3, r3, #16
 8003ef4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ef8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003efe:	6a3b      	ldr	r3, [r7, #32]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003f06:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	685a      	ldr	r2, [r3, #4]
 8003f0e:	6a3b      	ldr	r3, [r7, #32]
 8003f10:	0d5b      	lsrs	r3, r3, #21
 8003f12:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003f16:	4b08      	ldr	r3, [pc, #32]	@ (8003f38 <I2C_TransferConfig+0x60>)
 8003f18:	430b      	orrs	r3, r1
 8003f1a:	43db      	mvns	r3, r3
 8003f1c:	ea02 0103 	and.w	r1, r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	697a      	ldr	r2, [r7, #20]
 8003f26:	430a      	orrs	r2, r1
 8003f28:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003f2a:	bf00      	nop
 8003f2c:	371c      	adds	r7, #28
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	03ff63ff 	.word	0x03ff63ff

08003f3c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b20      	cmp	r3, #32
 8003f50:	d138      	bne.n	8003fc4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d101      	bne.n	8003f60 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	e032      	b.n	8003fc6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2224      	movs	r2, #36	@ 0x24
 8003f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f022 0201 	bic.w	r2, r2, #1
 8003f7e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003f8e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	6819      	ldr	r1, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	683a      	ldr	r2, [r7, #0]
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f042 0201 	orr.w	r2, r2, #1
 8003fae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	e000      	b.n	8003fc6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003fc4:	2302      	movs	r3, #2
  }
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	370c      	adds	r7, #12
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr

08003fd2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b085      	sub	sp, #20
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
 8003fda:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	2b20      	cmp	r3, #32
 8003fe6:	d139      	bne.n	800405c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d101      	bne.n	8003ff6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003ff2:	2302      	movs	r3, #2
 8003ff4:	e033      	b.n	800405e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2224      	movs	r2, #36	@ 0x24
 8004002:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f022 0201 	bic.w	r2, r2, #1
 8004014:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004024:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	021b      	lsls	r3, r3, #8
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	4313      	orrs	r3, r2
 800402e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f042 0201 	orr.w	r2, r2, #1
 8004046:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2220      	movs	r2, #32
 800404c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004058:	2300      	movs	r3, #0
 800405a:	e000      	b.n	800405e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800405c:	2302      	movs	r3, #2
  }
}
 800405e:	4618      	mov	r0, r3
 8004060:	3714      	adds	r7, #20
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
	...

0800406c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800406c:	b480      	push	{r7}
 800406e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004070:	4b04      	ldr	r3, [pc, #16]	@ (8004084 <HAL_PWREx_GetVoltageRange+0x18>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004078:	4618      	mov	r0, r3
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	40007000 	.word	0x40007000

08004088 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004096:	d130      	bne.n	80040fa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004098:	4b23      	ldr	r3, [pc, #140]	@ (8004128 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80040a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040a4:	d038      	beq.n	8004118 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80040a6:	4b20      	ldr	r3, [pc, #128]	@ (8004128 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80040ae:	4a1e      	ldr	r2, [pc, #120]	@ (8004128 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040b0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80040b4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80040b6:	4b1d      	ldr	r3, [pc, #116]	@ (800412c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2232      	movs	r2, #50	@ 0x32
 80040bc:	fb02 f303 	mul.w	r3, r2, r3
 80040c0:	4a1b      	ldr	r2, [pc, #108]	@ (8004130 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80040c2:	fba2 2303 	umull	r2, r3, r2, r3
 80040c6:	0c9b      	lsrs	r3, r3, #18
 80040c8:	3301      	adds	r3, #1
 80040ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040cc:	e002      	b.n	80040d4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	3b01      	subs	r3, #1
 80040d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040d4:	4b14      	ldr	r3, [pc, #80]	@ (8004128 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040d6:	695b      	ldr	r3, [r3, #20]
 80040d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040e0:	d102      	bne.n	80040e8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1f2      	bne.n	80040ce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040e8:	4b0f      	ldr	r3, [pc, #60]	@ (8004128 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040ea:	695b      	ldr	r3, [r3, #20]
 80040ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040f4:	d110      	bne.n	8004118 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e00f      	b.n	800411a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80040fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004128 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004102:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004106:	d007      	beq.n	8004118 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004108:	4b07      	ldr	r3, [pc, #28]	@ (8004128 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004110:	4a05      	ldr	r2, [pc, #20]	@ (8004128 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004112:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004116:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3714      	adds	r7, #20
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	40007000 	.word	0x40007000
 800412c:	20000000 	.word	0x20000000
 8004130:	431bde83 	.word	0x431bde83

08004134 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b088      	sub	sp, #32
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d101      	bne.n	8004146 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e3ca      	b.n	80048dc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004146:	4b97      	ldr	r3, [pc, #604]	@ (80043a4 <HAL_RCC_OscConfig+0x270>)
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f003 030c 	and.w	r3, r3, #12
 800414e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004150:	4b94      	ldr	r3, [pc, #592]	@ (80043a4 <HAL_RCC_OscConfig+0x270>)
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	f003 0303 	and.w	r3, r3, #3
 8004158:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0310 	and.w	r3, r3, #16
 8004162:	2b00      	cmp	r3, #0
 8004164:	f000 80e4 	beq.w	8004330 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d007      	beq.n	800417e <HAL_RCC_OscConfig+0x4a>
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	2b0c      	cmp	r3, #12
 8004172:	f040 808b 	bne.w	800428c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	2b01      	cmp	r3, #1
 800417a:	f040 8087 	bne.w	800428c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800417e:	4b89      	ldr	r3, [pc, #548]	@ (80043a4 <HAL_RCC_OscConfig+0x270>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0302 	and.w	r3, r3, #2
 8004186:	2b00      	cmp	r3, #0
 8004188:	d005      	beq.n	8004196 <HAL_RCC_OscConfig+0x62>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e3a2      	b.n	80048dc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a1a      	ldr	r2, [r3, #32]
 800419a:	4b82      	ldr	r3, [pc, #520]	@ (80043a4 <HAL_RCC_OscConfig+0x270>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0308 	and.w	r3, r3, #8
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d004      	beq.n	80041b0 <HAL_RCC_OscConfig+0x7c>
 80041a6:	4b7f      	ldr	r3, [pc, #508]	@ (80043a4 <HAL_RCC_OscConfig+0x270>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041ae:	e005      	b.n	80041bc <HAL_RCC_OscConfig+0x88>
 80041b0:	4b7c      	ldr	r3, [pc, #496]	@ (80043a4 <HAL_RCC_OscConfig+0x270>)
 80041b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041b6:	091b      	lsrs	r3, r3, #4
 80041b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041bc:	4293      	cmp	r3, r2
 80041be:	d223      	bcs.n	8004208 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a1b      	ldr	r3, [r3, #32]
 80041c4:	4618      	mov	r0, r3
 80041c6:	f000 fd55 	bl	8004c74 <RCC_SetFlashLatencyFromMSIRange>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d001      	beq.n	80041d4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e383      	b.n	80048dc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041d4:	4b73      	ldr	r3, [pc, #460]	@ (80043a4 <HAL_RCC_OscConfig+0x270>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a72      	ldr	r2, [pc, #456]	@ (80043a4 <HAL_RCC_OscConfig+0x270>)
 80041da:	f043 0308 	orr.w	r3, r3, #8
 80041de:	6013      	str	r3, [r2, #0]
 80041e0:	4b70      	ldr	r3, [pc, #448]	@ (80043a4 <HAL_RCC_OscConfig+0x270>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a1b      	ldr	r3, [r3, #32]
 80041ec:	496d      	ldr	r1, [pc, #436]	@ (80043a4 <HAL_RCC_OscConfig+0x270>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041f2:	4b6c      	ldr	r3, [pc, #432]	@ (80043a4 <HAL_RCC_OscConfig+0x270>)
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	69db      	ldr	r3, [r3, #28]
 80041fe:	021b      	lsls	r3, r3, #8
 8004200:	4968      	ldr	r1, [pc, #416]	@ (80043a4 <HAL_RCC_OscConfig+0x270>)
 8004202:	4313      	orrs	r3, r2
 8004204:	604b      	str	r3, [r1, #4]
 8004206:	e025      	b.n	8004254 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004208:	4b66      	ldr	r3, [pc, #408]	@ (80043a4 <HAL_RCC_OscConfig+0x270>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a65      	ldr	r2, [pc, #404]	@ (80043a4 <HAL_RCC_OscConfig+0x270>)
 800420e:	f043 0308 	orr.w	r3, r3, #8
 8004212:	6013      	str	r3, [r2, #0]
 8004214:	4b63      	ldr	r3, [pc, #396]	@ (80043a4 <HAL_RCC_OscConfig+0x270>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a1b      	ldr	r3, [r3, #32]
 8004220:	4960      	ldr	r1, [pc, #384]	@ (80043a4 <HAL_RCC_OscConfig+0x270>)
 8004222:	4313      	orrs	r3, r2
 8004224:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004226:	4b5f      	ldr	r3, [pc, #380]	@ (80043a4 <HAL_RCC_OscConfig+0x270>)
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	69db      	ldr	r3, [r3, #28]
 8004232:	021b      	lsls	r3, r3, #8
 8004234:	495b      	ldr	r1, [pc, #364]	@ (80043a4 <HAL_RCC_OscConfig+0x270>)
 8004236:	4313      	orrs	r3, r2
 8004238:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d109      	bne.n	8004254 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	4618      	mov	r0, r3
 8004246:	f000 fd15 	bl	8004c74 <RCC_SetFlashLatencyFromMSIRange>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d001      	beq.n	8004254 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e343      	b.n	80048dc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004254:	f000 fc4a 	bl	8004aec <HAL_RCC_GetSysClockFreq>
 8004258:	4602      	mov	r2, r0
 800425a:	4b52      	ldr	r3, [pc, #328]	@ (80043a4 <HAL_RCC_OscConfig+0x270>)
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	091b      	lsrs	r3, r3, #4
 8004260:	f003 030f 	and.w	r3, r3, #15
 8004264:	4950      	ldr	r1, [pc, #320]	@ (80043a8 <HAL_RCC_OscConfig+0x274>)
 8004266:	5ccb      	ldrb	r3, [r1, r3]
 8004268:	f003 031f 	and.w	r3, r3, #31
 800426c:	fa22 f303 	lsr.w	r3, r2, r3
 8004270:	4a4e      	ldr	r2, [pc, #312]	@ (80043ac <HAL_RCC_OscConfig+0x278>)
 8004272:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004274:	4b4e      	ldr	r3, [pc, #312]	@ (80043b0 <HAL_RCC_OscConfig+0x27c>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4618      	mov	r0, r3
 800427a:	f7fe fc15 	bl	8002aa8 <HAL_InitTick>
 800427e:	4603      	mov	r3, r0
 8004280:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004282:	7bfb      	ldrb	r3, [r7, #15]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d052      	beq.n	800432e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004288:	7bfb      	ldrb	r3, [r7, #15]
 800428a:	e327      	b.n	80048dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d032      	beq.n	80042fa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004294:	4b43      	ldr	r3, [pc, #268]	@ (80043a4 <HAL_RCC_OscConfig+0x270>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a42      	ldr	r2, [pc, #264]	@ (80043a4 <HAL_RCC_OscConfig+0x270>)
 800429a:	f043 0301 	orr.w	r3, r3, #1
 800429e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80042a0:	f7fe fc52 	bl	8002b48 <HAL_GetTick>
 80042a4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042a6:	e008      	b.n	80042ba <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042a8:	f7fe fc4e 	bl	8002b48 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e310      	b.n	80048dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042ba:	4b3a      	ldr	r3, [pc, #232]	@ (80043a4 <HAL_RCC_OscConfig+0x270>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d0f0      	beq.n	80042a8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042c6:	4b37      	ldr	r3, [pc, #220]	@ (80043a4 <HAL_RCC_OscConfig+0x270>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a36      	ldr	r2, [pc, #216]	@ (80043a4 <HAL_RCC_OscConfig+0x270>)
 80042cc:	f043 0308 	orr.w	r3, r3, #8
 80042d0:	6013      	str	r3, [r2, #0]
 80042d2:	4b34      	ldr	r3, [pc, #208]	@ (80043a4 <HAL_RCC_OscConfig+0x270>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a1b      	ldr	r3, [r3, #32]
 80042de:	4931      	ldr	r1, [pc, #196]	@ (80043a4 <HAL_RCC_OscConfig+0x270>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042e4:	4b2f      	ldr	r3, [pc, #188]	@ (80043a4 <HAL_RCC_OscConfig+0x270>)
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	69db      	ldr	r3, [r3, #28]
 80042f0:	021b      	lsls	r3, r3, #8
 80042f2:	492c      	ldr	r1, [pc, #176]	@ (80043a4 <HAL_RCC_OscConfig+0x270>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	604b      	str	r3, [r1, #4]
 80042f8:	e01a      	b.n	8004330 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80042fa:	4b2a      	ldr	r3, [pc, #168]	@ (80043a4 <HAL_RCC_OscConfig+0x270>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a29      	ldr	r2, [pc, #164]	@ (80043a4 <HAL_RCC_OscConfig+0x270>)
 8004300:	f023 0301 	bic.w	r3, r3, #1
 8004304:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004306:	f7fe fc1f 	bl	8002b48 <HAL_GetTick>
 800430a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800430c:	e008      	b.n	8004320 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800430e:	f7fe fc1b 	bl	8002b48 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	2b02      	cmp	r3, #2
 800431a:	d901      	bls.n	8004320 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e2dd      	b.n	80048dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004320:	4b20      	ldr	r3, [pc, #128]	@ (80043a4 <HAL_RCC_OscConfig+0x270>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1f0      	bne.n	800430e <HAL_RCC_OscConfig+0x1da>
 800432c:	e000      	b.n	8004330 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800432e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0301 	and.w	r3, r3, #1
 8004338:	2b00      	cmp	r3, #0
 800433a:	d074      	beq.n	8004426 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	2b08      	cmp	r3, #8
 8004340:	d005      	beq.n	800434e <HAL_RCC_OscConfig+0x21a>
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	2b0c      	cmp	r3, #12
 8004346:	d10e      	bne.n	8004366 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	2b03      	cmp	r3, #3
 800434c:	d10b      	bne.n	8004366 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800434e:	4b15      	ldr	r3, [pc, #84]	@ (80043a4 <HAL_RCC_OscConfig+0x270>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d064      	beq.n	8004424 <HAL_RCC_OscConfig+0x2f0>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d160      	bne.n	8004424 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e2ba      	b.n	80048dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800436e:	d106      	bne.n	800437e <HAL_RCC_OscConfig+0x24a>
 8004370:	4b0c      	ldr	r3, [pc, #48]	@ (80043a4 <HAL_RCC_OscConfig+0x270>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a0b      	ldr	r2, [pc, #44]	@ (80043a4 <HAL_RCC_OscConfig+0x270>)
 8004376:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800437a:	6013      	str	r3, [r2, #0]
 800437c:	e026      	b.n	80043cc <HAL_RCC_OscConfig+0x298>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004386:	d115      	bne.n	80043b4 <HAL_RCC_OscConfig+0x280>
 8004388:	4b06      	ldr	r3, [pc, #24]	@ (80043a4 <HAL_RCC_OscConfig+0x270>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a05      	ldr	r2, [pc, #20]	@ (80043a4 <HAL_RCC_OscConfig+0x270>)
 800438e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004392:	6013      	str	r3, [r2, #0]
 8004394:	4b03      	ldr	r3, [pc, #12]	@ (80043a4 <HAL_RCC_OscConfig+0x270>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a02      	ldr	r2, [pc, #8]	@ (80043a4 <HAL_RCC_OscConfig+0x270>)
 800439a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800439e:	6013      	str	r3, [r2, #0]
 80043a0:	e014      	b.n	80043cc <HAL_RCC_OscConfig+0x298>
 80043a2:	bf00      	nop
 80043a4:	40021000 	.word	0x40021000
 80043a8:	0800d39c 	.word	0x0800d39c
 80043ac:	20000000 	.word	0x20000000
 80043b0:	20000004 	.word	0x20000004
 80043b4:	4ba0      	ldr	r3, [pc, #640]	@ (8004638 <HAL_RCC_OscConfig+0x504>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a9f      	ldr	r2, [pc, #636]	@ (8004638 <HAL_RCC_OscConfig+0x504>)
 80043ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043be:	6013      	str	r3, [r2, #0]
 80043c0:	4b9d      	ldr	r3, [pc, #628]	@ (8004638 <HAL_RCC_OscConfig+0x504>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a9c      	ldr	r2, [pc, #624]	@ (8004638 <HAL_RCC_OscConfig+0x504>)
 80043c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d013      	beq.n	80043fc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d4:	f7fe fbb8 	bl	8002b48 <HAL_GetTick>
 80043d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043da:	e008      	b.n	80043ee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043dc:	f7fe fbb4 	bl	8002b48 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	2b64      	cmp	r3, #100	@ 0x64
 80043e8:	d901      	bls.n	80043ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e276      	b.n	80048dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043ee:	4b92      	ldr	r3, [pc, #584]	@ (8004638 <HAL_RCC_OscConfig+0x504>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d0f0      	beq.n	80043dc <HAL_RCC_OscConfig+0x2a8>
 80043fa:	e014      	b.n	8004426 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043fc:	f7fe fba4 	bl	8002b48 <HAL_GetTick>
 8004400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004402:	e008      	b.n	8004416 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004404:	f7fe fba0 	bl	8002b48 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b64      	cmp	r3, #100	@ 0x64
 8004410:	d901      	bls.n	8004416 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e262      	b.n	80048dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004416:	4b88      	ldr	r3, [pc, #544]	@ (8004638 <HAL_RCC_OscConfig+0x504>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1f0      	bne.n	8004404 <HAL_RCC_OscConfig+0x2d0>
 8004422:	e000      	b.n	8004426 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004424:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d060      	beq.n	80044f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	2b04      	cmp	r3, #4
 8004436:	d005      	beq.n	8004444 <HAL_RCC_OscConfig+0x310>
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	2b0c      	cmp	r3, #12
 800443c:	d119      	bne.n	8004472 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	2b02      	cmp	r3, #2
 8004442:	d116      	bne.n	8004472 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004444:	4b7c      	ldr	r3, [pc, #496]	@ (8004638 <HAL_RCC_OscConfig+0x504>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800444c:	2b00      	cmp	r3, #0
 800444e:	d005      	beq.n	800445c <HAL_RCC_OscConfig+0x328>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d101      	bne.n	800445c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e23f      	b.n	80048dc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800445c:	4b76      	ldr	r3, [pc, #472]	@ (8004638 <HAL_RCC_OscConfig+0x504>)
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	061b      	lsls	r3, r3, #24
 800446a:	4973      	ldr	r1, [pc, #460]	@ (8004638 <HAL_RCC_OscConfig+0x504>)
 800446c:	4313      	orrs	r3, r2
 800446e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004470:	e040      	b.n	80044f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d023      	beq.n	80044c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800447a:	4b6f      	ldr	r3, [pc, #444]	@ (8004638 <HAL_RCC_OscConfig+0x504>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a6e      	ldr	r2, [pc, #440]	@ (8004638 <HAL_RCC_OscConfig+0x504>)
 8004480:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004484:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004486:	f7fe fb5f 	bl	8002b48 <HAL_GetTick>
 800448a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800448c:	e008      	b.n	80044a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800448e:	f7fe fb5b 	bl	8002b48 <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	2b02      	cmp	r3, #2
 800449a:	d901      	bls.n	80044a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e21d      	b.n	80048dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044a0:	4b65      	ldr	r3, [pc, #404]	@ (8004638 <HAL_RCC_OscConfig+0x504>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d0f0      	beq.n	800448e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ac:	4b62      	ldr	r3, [pc, #392]	@ (8004638 <HAL_RCC_OscConfig+0x504>)
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	061b      	lsls	r3, r3, #24
 80044ba:	495f      	ldr	r1, [pc, #380]	@ (8004638 <HAL_RCC_OscConfig+0x504>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	604b      	str	r3, [r1, #4]
 80044c0:	e018      	b.n	80044f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044c2:	4b5d      	ldr	r3, [pc, #372]	@ (8004638 <HAL_RCC_OscConfig+0x504>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a5c      	ldr	r2, [pc, #368]	@ (8004638 <HAL_RCC_OscConfig+0x504>)
 80044c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ce:	f7fe fb3b 	bl	8002b48 <HAL_GetTick>
 80044d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044d4:	e008      	b.n	80044e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044d6:	f7fe fb37 	bl	8002b48 <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d901      	bls.n	80044e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e1f9      	b.n	80048dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044e8:	4b53      	ldr	r3, [pc, #332]	@ (8004638 <HAL_RCC_OscConfig+0x504>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d1f0      	bne.n	80044d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0308 	and.w	r3, r3, #8
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d03c      	beq.n	800457a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	695b      	ldr	r3, [r3, #20]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d01c      	beq.n	8004542 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004508:	4b4b      	ldr	r3, [pc, #300]	@ (8004638 <HAL_RCC_OscConfig+0x504>)
 800450a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800450e:	4a4a      	ldr	r2, [pc, #296]	@ (8004638 <HAL_RCC_OscConfig+0x504>)
 8004510:	f043 0301 	orr.w	r3, r3, #1
 8004514:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004518:	f7fe fb16 	bl	8002b48 <HAL_GetTick>
 800451c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800451e:	e008      	b.n	8004532 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004520:	f7fe fb12 	bl	8002b48 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b02      	cmp	r3, #2
 800452c:	d901      	bls.n	8004532 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e1d4      	b.n	80048dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004532:	4b41      	ldr	r3, [pc, #260]	@ (8004638 <HAL_RCC_OscConfig+0x504>)
 8004534:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004538:	f003 0302 	and.w	r3, r3, #2
 800453c:	2b00      	cmp	r3, #0
 800453e:	d0ef      	beq.n	8004520 <HAL_RCC_OscConfig+0x3ec>
 8004540:	e01b      	b.n	800457a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004542:	4b3d      	ldr	r3, [pc, #244]	@ (8004638 <HAL_RCC_OscConfig+0x504>)
 8004544:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004548:	4a3b      	ldr	r2, [pc, #236]	@ (8004638 <HAL_RCC_OscConfig+0x504>)
 800454a:	f023 0301 	bic.w	r3, r3, #1
 800454e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004552:	f7fe faf9 	bl	8002b48 <HAL_GetTick>
 8004556:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004558:	e008      	b.n	800456c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800455a:	f7fe faf5 	bl	8002b48 <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	2b02      	cmp	r3, #2
 8004566:	d901      	bls.n	800456c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e1b7      	b.n	80048dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800456c:	4b32      	ldr	r3, [pc, #200]	@ (8004638 <HAL_RCC_OscConfig+0x504>)
 800456e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1ef      	bne.n	800455a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0304 	and.w	r3, r3, #4
 8004582:	2b00      	cmp	r3, #0
 8004584:	f000 80a6 	beq.w	80046d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004588:	2300      	movs	r3, #0
 800458a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800458c:	4b2a      	ldr	r3, [pc, #168]	@ (8004638 <HAL_RCC_OscConfig+0x504>)
 800458e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004590:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d10d      	bne.n	80045b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004598:	4b27      	ldr	r3, [pc, #156]	@ (8004638 <HAL_RCC_OscConfig+0x504>)
 800459a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800459c:	4a26      	ldr	r2, [pc, #152]	@ (8004638 <HAL_RCC_OscConfig+0x504>)
 800459e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80045a4:	4b24      	ldr	r3, [pc, #144]	@ (8004638 <HAL_RCC_OscConfig+0x504>)
 80045a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045ac:	60bb      	str	r3, [r7, #8]
 80045ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045b0:	2301      	movs	r3, #1
 80045b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045b4:	4b21      	ldr	r3, [pc, #132]	@ (800463c <HAL_RCC_OscConfig+0x508>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d118      	bne.n	80045f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045c0:	4b1e      	ldr	r3, [pc, #120]	@ (800463c <HAL_RCC_OscConfig+0x508>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a1d      	ldr	r2, [pc, #116]	@ (800463c <HAL_RCC_OscConfig+0x508>)
 80045c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045cc:	f7fe fabc 	bl	8002b48 <HAL_GetTick>
 80045d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045d2:	e008      	b.n	80045e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045d4:	f7fe fab8 	bl	8002b48 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d901      	bls.n	80045e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e17a      	b.n	80048dc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045e6:	4b15      	ldr	r3, [pc, #84]	@ (800463c <HAL_RCC_OscConfig+0x508>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d0f0      	beq.n	80045d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d108      	bne.n	800460c <HAL_RCC_OscConfig+0x4d8>
 80045fa:	4b0f      	ldr	r3, [pc, #60]	@ (8004638 <HAL_RCC_OscConfig+0x504>)
 80045fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004600:	4a0d      	ldr	r2, [pc, #52]	@ (8004638 <HAL_RCC_OscConfig+0x504>)
 8004602:	f043 0301 	orr.w	r3, r3, #1
 8004606:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800460a:	e029      	b.n	8004660 <HAL_RCC_OscConfig+0x52c>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	2b05      	cmp	r3, #5
 8004612:	d115      	bne.n	8004640 <HAL_RCC_OscConfig+0x50c>
 8004614:	4b08      	ldr	r3, [pc, #32]	@ (8004638 <HAL_RCC_OscConfig+0x504>)
 8004616:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800461a:	4a07      	ldr	r2, [pc, #28]	@ (8004638 <HAL_RCC_OscConfig+0x504>)
 800461c:	f043 0304 	orr.w	r3, r3, #4
 8004620:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004624:	4b04      	ldr	r3, [pc, #16]	@ (8004638 <HAL_RCC_OscConfig+0x504>)
 8004626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800462a:	4a03      	ldr	r2, [pc, #12]	@ (8004638 <HAL_RCC_OscConfig+0x504>)
 800462c:	f043 0301 	orr.w	r3, r3, #1
 8004630:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004634:	e014      	b.n	8004660 <HAL_RCC_OscConfig+0x52c>
 8004636:	bf00      	nop
 8004638:	40021000 	.word	0x40021000
 800463c:	40007000 	.word	0x40007000
 8004640:	4b9c      	ldr	r3, [pc, #624]	@ (80048b4 <HAL_RCC_OscConfig+0x780>)
 8004642:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004646:	4a9b      	ldr	r2, [pc, #620]	@ (80048b4 <HAL_RCC_OscConfig+0x780>)
 8004648:	f023 0301 	bic.w	r3, r3, #1
 800464c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004650:	4b98      	ldr	r3, [pc, #608]	@ (80048b4 <HAL_RCC_OscConfig+0x780>)
 8004652:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004656:	4a97      	ldr	r2, [pc, #604]	@ (80048b4 <HAL_RCC_OscConfig+0x780>)
 8004658:	f023 0304 	bic.w	r3, r3, #4
 800465c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d016      	beq.n	8004696 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004668:	f7fe fa6e 	bl	8002b48 <HAL_GetTick>
 800466c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800466e:	e00a      	b.n	8004686 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004670:	f7fe fa6a 	bl	8002b48 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800467e:	4293      	cmp	r3, r2
 8004680:	d901      	bls.n	8004686 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e12a      	b.n	80048dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004686:	4b8b      	ldr	r3, [pc, #556]	@ (80048b4 <HAL_RCC_OscConfig+0x780>)
 8004688:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800468c:	f003 0302 	and.w	r3, r3, #2
 8004690:	2b00      	cmp	r3, #0
 8004692:	d0ed      	beq.n	8004670 <HAL_RCC_OscConfig+0x53c>
 8004694:	e015      	b.n	80046c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004696:	f7fe fa57 	bl	8002b48 <HAL_GetTick>
 800469a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800469c:	e00a      	b.n	80046b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800469e:	f7fe fa53 	bl	8002b48 <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d901      	bls.n	80046b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e113      	b.n	80048dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046b4:	4b7f      	ldr	r3, [pc, #508]	@ (80048b4 <HAL_RCC_OscConfig+0x780>)
 80046b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046ba:	f003 0302 	and.w	r3, r3, #2
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1ed      	bne.n	800469e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046c2:	7ffb      	ldrb	r3, [r7, #31]
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d105      	bne.n	80046d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046c8:	4b7a      	ldr	r3, [pc, #488]	@ (80048b4 <HAL_RCC_OscConfig+0x780>)
 80046ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046cc:	4a79      	ldr	r2, [pc, #484]	@ (80048b4 <HAL_RCC_OscConfig+0x780>)
 80046ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046d2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f000 80fe 	beq.w	80048da <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	f040 80d0 	bne.w	8004888 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80046e8:	4b72      	ldr	r3, [pc, #456]	@ (80048b4 <HAL_RCC_OscConfig+0x780>)
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	f003 0203 	and.w	r2, r3, #3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d130      	bne.n	800475e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004706:	3b01      	subs	r3, #1
 8004708:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800470a:	429a      	cmp	r2, r3
 800470c:	d127      	bne.n	800475e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004718:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800471a:	429a      	cmp	r2, r3
 800471c:	d11f      	bne.n	800475e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004728:	2a07      	cmp	r2, #7
 800472a:	bf14      	ite	ne
 800472c:	2201      	movne	r2, #1
 800472e:	2200      	moveq	r2, #0
 8004730:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004732:	4293      	cmp	r3, r2
 8004734:	d113      	bne.n	800475e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004740:	085b      	lsrs	r3, r3, #1
 8004742:	3b01      	subs	r3, #1
 8004744:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004746:	429a      	cmp	r2, r3
 8004748:	d109      	bne.n	800475e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004754:	085b      	lsrs	r3, r3, #1
 8004756:	3b01      	subs	r3, #1
 8004758:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800475a:	429a      	cmp	r2, r3
 800475c:	d06e      	beq.n	800483c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	2b0c      	cmp	r3, #12
 8004762:	d069      	beq.n	8004838 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004764:	4b53      	ldr	r3, [pc, #332]	@ (80048b4 <HAL_RCC_OscConfig+0x780>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d105      	bne.n	800477c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004770:	4b50      	ldr	r3, [pc, #320]	@ (80048b4 <HAL_RCC_OscConfig+0x780>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d001      	beq.n	8004780 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e0ad      	b.n	80048dc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004780:	4b4c      	ldr	r3, [pc, #304]	@ (80048b4 <HAL_RCC_OscConfig+0x780>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a4b      	ldr	r2, [pc, #300]	@ (80048b4 <HAL_RCC_OscConfig+0x780>)
 8004786:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800478a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800478c:	f7fe f9dc 	bl	8002b48 <HAL_GetTick>
 8004790:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004792:	e008      	b.n	80047a6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004794:	f7fe f9d8 	bl	8002b48 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e09a      	b.n	80048dc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047a6:	4b43      	ldr	r3, [pc, #268]	@ (80048b4 <HAL_RCC_OscConfig+0x780>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1f0      	bne.n	8004794 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047b2:	4b40      	ldr	r3, [pc, #256]	@ (80048b4 <HAL_RCC_OscConfig+0x780>)
 80047b4:	68da      	ldr	r2, [r3, #12]
 80047b6:	4b40      	ldr	r3, [pc, #256]	@ (80048b8 <HAL_RCC_OscConfig+0x784>)
 80047b8:	4013      	ands	r3, r2
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80047c2:	3a01      	subs	r2, #1
 80047c4:	0112      	lsls	r2, r2, #4
 80047c6:	4311      	orrs	r1, r2
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80047cc:	0212      	lsls	r2, r2, #8
 80047ce:	4311      	orrs	r1, r2
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80047d4:	0852      	lsrs	r2, r2, #1
 80047d6:	3a01      	subs	r2, #1
 80047d8:	0552      	lsls	r2, r2, #21
 80047da:	4311      	orrs	r1, r2
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80047e0:	0852      	lsrs	r2, r2, #1
 80047e2:	3a01      	subs	r2, #1
 80047e4:	0652      	lsls	r2, r2, #25
 80047e6:	4311      	orrs	r1, r2
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80047ec:	0912      	lsrs	r2, r2, #4
 80047ee:	0452      	lsls	r2, r2, #17
 80047f0:	430a      	orrs	r2, r1
 80047f2:	4930      	ldr	r1, [pc, #192]	@ (80048b4 <HAL_RCC_OscConfig+0x780>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80047f8:	4b2e      	ldr	r3, [pc, #184]	@ (80048b4 <HAL_RCC_OscConfig+0x780>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a2d      	ldr	r2, [pc, #180]	@ (80048b4 <HAL_RCC_OscConfig+0x780>)
 80047fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004802:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004804:	4b2b      	ldr	r3, [pc, #172]	@ (80048b4 <HAL_RCC_OscConfig+0x780>)
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	4a2a      	ldr	r2, [pc, #168]	@ (80048b4 <HAL_RCC_OscConfig+0x780>)
 800480a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800480e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004810:	f7fe f99a 	bl	8002b48 <HAL_GetTick>
 8004814:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004816:	e008      	b.n	800482a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004818:	f7fe f996 	bl	8002b48 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	2b02      	cmp	r3, #2
 8004824:	d901      	bls.n	800482a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e058      	b.n	80048dc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800482a:	4b22      	ldr	r3, [pc, #136]	@ (80048b4 <HAL_RCC_OscConfig+0x780>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d0f0      	beq.n	8004818 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004836:	e050      	b.n	80048da <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e04f      	b.n	80048dc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800483c:	4b1d      	ldr	r3, [pc, #116]	@ (80048b4 <HAL_RCC_OscConfig+0x780>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d148      	bne.n	80048da <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004848:	4b1a      	ldr	r3, [pc, #104]	@ (80048b4 <HAL_RCC_OscConfig+0x780>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a19      	ldr	r2, [pc, #100]	@ (80048b4 <HAL_RCC_OscConfig+0x780>)
 800484e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004852:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004854:	4b17      	ldr	r3, [pc, #92]	@ (80048b4 <HAL_RCC_OscConfig+0x780>)
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	4a16      	ldr	r2, [pc, #88]	@ (80048b4 <HAL_RCC_OscConfig+0x780>)
 800485a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800485e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004860:	f7fe f972 	bl	8002b48 <HAL_GetTick>
 8004864:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004866:	e008      	b.n	800487a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004868:	f7fe f96e 	bl	8002b48 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b02      	cmp	r3, #2
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e030      	b.n	80048dc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800487a:	4b0e      	ldr	r3, [pc, #56]	@ (80048b4 <HAL_RCC_OscConfig+0x780>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d0f0      	beq.n	8004868 <HAL_RCC_OscConfig+0x734>
 8004886:	e028      	b.n	80048da <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	2b0c      	cmp	r3, #12
 800488c:	d023      	beq.n	80048d6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800488e:	4b09      	ldr	r3, [pc, #36]	@ (80048b4 <HAL_RCC_OscConfig+0x780>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a08      	ldr	r2, [pc, #32]	@ (80048b4 <HAL_RCC_OscConfig+0x780>)
 8004894:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004898:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800489a:	f7fe f955 	bl	8002b48 <HAL_GetTick>
 800489e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048a0:	e00c      	b.n	80048bc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048a2:	f7fe f951 	bl	8002b48 <HAL_GetTick>
 80048a6:	4602      	mov	r2, r0
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d905      	bls.n	80048bc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e013      	b.n	80048dc <HAL_RCC_OscConfig+0x7a8>
 80048b4:	40021000 	.word	0x40021000
 80048b8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048bc:	4b09      	ldr	r3, [pc, #36]	@ (80048e4 <HAL_RCC_OscConfig+0x7b0>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d1ec      	bne.n	80048a2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80048c8:	4b06      	ldr	r3, [pc, #24]	@ (80048e4 <HAL_RCC_OscConfig+0x7b0>)
 80048ca:	68da      	ldr	r2, [r3, #12]
 80048cc:	4905      	ldr	r1, [pc, #20]	@ (80048e4 <HAL_RCC_OscConfig+0x7b0>)
 80048ce:	4b06      	ldr	r3, [pc, #24]	@ (80048e8 <HAL_RCC_OscConfig+0x7b4>)
 80048d0:	4013      	ands	r3, r2
 80048d2:	60cb      	str	r3, [r1, #12]
 80048d4:	e001      	b.n	80048da <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e000      	b.n	80048dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3720      	adds	r7, #32
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	40021000 	.word	0x40021000
 80048e8:	feeefffc 	.word	0xfeeefffc

080048ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d101      	bne.n	8004900 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e0e7      	b.n	8004ad0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004900:	4b75      	ldr	r3, [pc, #468]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1ec>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0307 	and.w	r3, r3, #7
 8004908:	683a      	ldr	r2, [r7, #0]
 800490a:	429a      	cmp	r2, r3
 800490c:	d910      	bls.n	8004930 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800490e:	4b72      	ldr	r3, [pc, #456]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1ec>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f023 0207 	bic.w	r2, r3, #7
 8004916:	4970      	ldr	r1, [pc, #448]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1ec>)
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	4313      	orrs	r3, r2
 800491c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800491e:	4b6e      	ldr	r3, [pc, #440]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1ec>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0307 	and.w	r3, r3, #7
 8004926:	683a      	ldr	r2, [r7, #0]
 8004928:	429a      	cmp	r2, r3
 800492a:	d001      	beq.n	8004930 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e0cf      	b.n	8004ad0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0302 	and.w	r3, r3, #2
 8004938:	2b00      	cmp	r3, #0
 800493a:	d010      	beq.n	800495e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689a      	ldr	r2, [r3, #8]
 8004940:	4b66      	ldr	r3, [pc, #408]	@ (8004adc <HAL_RCC_ClockConfig+0x1f0>)
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004948:	429a      	cmp	r2, r3
 800494a:	d908      	bls.n	800495e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800494c:	4b63      	ldr	r3, [pc, #396]	@ (8004adc <HAL_RCC_ClockConfig+0x1f0>)
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	4960      	ldr	r1, [pc, #384]	@ (8004adc <HAL_RCC_ClockConfig+0x1f0>)
 800495a:	4313      	orrs	r3, r2
 800495c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	2b00      	cmp	r3, #0
 8004968:	d04c      	beq.n	8004a04 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	2b03      	cmp	r3, #3
 8004970:	d107      	bne.n	8004982 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004972:	4b5a      	ldr	r3, [pc, #360]	@ (8004adc <HAL_RCC_ClockConfig+0x1f0>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d121      	bne.n	80049c2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e0a6      	b.n	8004ad0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	2b02      	cmp	r3, #2
 8004988:	d107      	bne.n	800499a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800498a:	4b54      	ldr	r3, [pc, #336]	@ (8004adc <HAL_RCC_ClockConfig+0x1f0>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d115      	bne.n	80049c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e09a      	b.n	8004ad0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d107      	bne.n	80049b2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049a2:	4b4e      	ldr	r3, [pc, #312]	@ (8004adc <HAL_RCC_ClockConfig+0x1f0>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d109      	bne.n	80049c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e08e      	b.n	8004ad0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049b2:	4b4a      	ldr	r3, [pc, #296]	@ (8004adc <HAL_RCC_ClockConfig+0x1f0>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d101      	bne.n	80049c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e086      	b.n	8004ad0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80049c2:	4b46      	ldr	r3, [pc, #280]	@ (8004adc <HAL_RCC_ClockConfig+0x1f0>)
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f023 0203 	bic.w	r2, r3, #3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	4943      	ldr	r1, [pc, #268]	@ (8004adc <HAL_RCC_ClockConfig+0x1f0>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049d4:	f7fe f8b8 	bl	8002b48 <HAL_GetTick>
 80049d8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049da:	e00a      	b.n	80049f2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049dc:	f7fe f8b4 	bl	8002b48 <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d901      	bls.n	80049f2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e06e      	b.n	8004ad0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049f2:	4b3a      	ldr	r3, [pc, #232]	@ (8004adc <HAL_RCC_ClockConfig+0x1f0>)
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f003 020c 	and.w	r2, r3, #12
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d1eb      	bne.n	80049dc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0302 	and.w	r3, r3, #2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d010      	beq.n	8004a32 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	689a      	ldr	r2, [r3, #8]
 8004a14:	4b31      	ldr	r3, [pc, #196]	@ (8004adc <HAL_RCC_ClockConfig+0x1f0>)
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d208      	bcs.n	8004a32 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a20:	4b2e      	ldr	r3, [pc, #184]	@ (8004adc <HAL_RCC_ClockConfig+0x1f0>)
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	492b      	ldr	r1, [pc, #172]	@ (8004adc <HAL_RCC_ClockConfig+0x1f0>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a32:	4b29      	ldr	r3, [pc, #164]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1ec>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0307 	and.w	r3, r3, #7
 8004a3a:	683a      	ldr	r2, [r7, #0]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d210      	bcs.n	8004a62 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a40:	4b25      	ldr	r3, [pc, #148]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1ec>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f023 0207 	bic.w	r2, r3, #7
 8004a48:	4923      	ldr	r1, [pc, #140]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1ec>)
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a50:	4b21      	ldr	r3, [pc, #132]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1ec>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0307 	and.w	r3, r3, #7
 8004a58:	683a      	ldr	r2, [r7, #0]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d001      	beq.n	8004a62 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e036      	b.n	8004ad0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0304 	and.w	r3, r3, #4
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d008      	beq.n	8004a80 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a6e:	4b1b      	ldr	r3, [pc, #108]	@ (8004adc <HAL_RCC_ClockConfig+0x1f0>)
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	4918      	ldr	r1, [pc, #96]	@ (8004adc <HAL_RCC_ClockConfig+0x1f0>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0308 	and.w	r3, r3, #8
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d009      	beq.n	8004aa0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a8c:	4b13      	ldr	r3, [pc, #76]	@ (8004adc <HAL_RCC_ClockConfig+0x1f0>)
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	00db      	lsls	r3, r3, #3
 8004a9a:	4910      	ldr	r1, [pc, #64]	@ (8004adc <HAL_RCC_ClockConfig+0x1f0>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004aa0:	f000 f824 	bl	8004aec <HAL_RCC_GetSysClockFreq>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8004adc <HAL_RCC_ClockConfig+0x1f0>)
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	091b      	lsrs	r3, r3, #4
 8004aac:	f003 030f 	and.w	r3, r3, #15
 8004ab0:	490b      	ldr	r1, [pc, #44]	@ (8004ae0 <HAL_RCC_ClockConfig+0x1f4>)
 8004ab2:	5ccb      	ldrb	r3, [r1, r3]
 8004ab4:	f003 031f 	and.w	r3, r3, #31
 8004ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8004abc:	4a09      	ldr	r2, [pc, #36]	@ (8004ae4 <HAL_RCC_ClockConfig+0x1f8>)
 8004abe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004ac0:	4b09      	ldr	r3, [pc, #36]	@ (8004ae8 <HAL_RCC_ClockConfig+0x1fc>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f7fd ffef 	bl	8002aa8 <HAL_InitTick>
 8004aca:	4603      	mov	r3, r0
 8004acc:	72fb      	strb	r3, [r7, #11]

  return status;
 8004ace:	7afb      	ldrb	r3, [r7, #11]
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3710      	adds	r7, #16
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	40022000 	.word	0x40022000
 8004adc:	40021000 	.word	0x40021000
 8004ae0:	0800d39c 	.word	0x0800d39c
 8004ae4:	20000000 	.word	0x20000000
 8004ae8:	20000004 	.word	0x20000004

08004aec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b089      	sub	sp, #36	@ 0x24
 8004af0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004af2:	2300      	movs	r3, #0
 8004af4:	61fb      	str	r3, [r7, #28]
 8004af6:	2300      	movs	r3, #0
 8004af8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004afa:	4b3e      	ldr	r3, [pc, #248]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f003 030c 	and.w	r3, r3, #12
 8004b02:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b04:	4b3b      	ldr	r3, [pc, #236]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	f003 0303 	and.w	r3, r3, #3
 8004b0c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d005      	beq.n	8004b20 <HAL_RCC_GetSysClockFreq+0x34>
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	2b0c      	cmp	r3, #12
 8004b18:	d121      	bne.n	8004b5e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d11e      	bne.n	8004b5e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004b20:	4b34      	ldr	r3, [pc, #208]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0308 	and.w	r3, r3, #8
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d107      	bne.n	8004b3c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004b2c:	4b31      	ldr	r3, [pc, #196]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b32:	0a1b      	lsrs	r3, r3, #8
 8004b34:	f003 030f 	and.w	r3, r3, #15
 8004b38:	61fb      	str	r3, [r7, #28]
 8004b3a:	e005      	b.n	8004b48 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004b3c:	4b2d      	ldr	r3, [pc, #180]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	091b      	lsrs	r3, r3, #4
 8004b42:	f003 030f 	and.w	r3, r3, #15
 8004b46:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004b48:	4a2b      	ldr	r2, [pc, #172]	@ (8004bf8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b50:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d10d      	bne.n	8004b74 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b5c:	e00a      	b.n	8004b74 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	2b04      	cmp	r3, #4
 8004b62:	d102      	bne.n	8004b6a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b64:	4b25      	ldr	r3, [pc, #148]	@ (8004bfc <HAL_RCC_GetSysClockFreq+0x110>)
 8004b66:	61bb      	str	r3, [r7, #24]
 8004b68:	e004      	b.n	8004b74 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	2b08      	cmp	r3, #8
 8004b6e:	d101      	bne.n	8004b74 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b70:	4b23      	ldr	r3, [pc, #140]	@ (8004c00 <HAL_RCC_GetSysClockFreq+0x114>)
 8004b72:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	2b0c      	cmp	r3, #12
 8004b78:	d134      	bne.n	8004be4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b7a:	4b1e      	ldr	r3, [pc, #120]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	f003 0303 	and.w	r3, r3, #3
 8004b82:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d003      	beq.n	8004b92 <HAL_RCC_GetSysClockFreq+0xa6>
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	2b03      	cmp	r3, #3
 8004b8e:	d003      	beq.n	8004b98 <HAL_RCC_GetSysClockFreq+0xac>
 8004b90:	e005      	b.n	8004b9e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004b92:	4b1a      	ldr	r3, [pc, #104]	@ (8004bfc <HAL_RCC_GetSysClockFreq+0x110>)
 8004b94:	617b      	str	r3, [r7, #20]
      break;
 8004b96:	e005      	b.n	8004ba4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004b98:	4b19      	ldr	r3, [pc, #100]	@ (8004c00 <HAL_RCC_GetSysClockFreq+0x114>)
 8004b9a:	617b      	str	r3, [r7, #20]
      break;
 8004b9c:	e002      	b.n	8004ba4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	617b      	str	r3, [r7, #20]
      break;
 8004ba2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ba4:	4b13      	ldr	r3, [pc, #76]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	091b      	lsrs	r3, r3, #4
 8004baa:	f003 0307 	and.w	r3, r3, #7
 8004bae:	3301      	adds	r3, #1
 8004bb0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004bb2:	4b10      	ldr	r3, [pc, #64]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	0a1b      	lsrs	r3, r3, #8
 8004bb8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	fb03 f202 	mul.w	r2, r3, r2
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004bca:	4b0a      	ldr	r3, [pc, #40]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	0e5b      	lsrs	r3, r3, #25
 8004bd0:	f003 0303 	and.w	r3, r3, #3
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	005b      	lsls	r3, r3, #1
 8004bd8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004bda:	697a      	ldr	r2, [r7, #20]
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004be4:	69bb      	ldr	r3, [r7, #24]
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3724      	adds	r7, #36	@ 0x24
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	40021000 	.word	0x40021000
 8004bf8:	0800d3b4 	.word	0x0800d3b4
 8004bfc:	00f42400 	.word	0x00f42400
 8004c00:	007a1200 	.word	0x007a1200

08004c04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c04:	b480      	push	{r7}
 8004c06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c08:	4b03      	ldr	r3, [pc, #12]	@ (8004c18 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	20000000 	.word	0x20000000

08004c1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004c20:	f7ff fff0 	bl	8004c04 <HAL_RCC_GetHCLKFreq>
 8004c24:	4602      	mov	r2, r0
 8004c26:	4b06      	ldr	r3, [pc, #24]	@ (8004c40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	0a1b      	lsrs	r3, r3, #8
 8004c2c:	f003 0307 	and.w	r3, r3, #7
 8004c30:	4904      	ldr	r1, [pc, #16]	@ (8004c44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c32:	5ccb      	ldrb	r3, [r1, r3]
 8004c34:	f003 031f 	and.w	r3, r3, #31
 8004c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	40021000 	.word	0x40021000
 8004c44:	0800d3ac 	.word	0x0800d3ac

08004c48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004c4c:	f7ff ffda 	bl	8004c04 <HAL_RCC_GetHCLKFreq>
 8004c50:	4602      	mov	r2, r0
 8004c52:	4b06      	ldr	r3, [pc, #24]	@ (8004c6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	0adb      	lsrs	r3, r3, #11
 8004c58:	f003 0307 	and.w	r3, r3, #7
 8004c5c:	4904      	ldr	r1, [pc, #16]	@ (8004c70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c5e:	5ccb      	ldrb	r3, [r1, r3]
 8004c60:	f003 031f 	and.w	r3, r3, #31
 8004c64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	40021000 	.word	0x40021000
 8004c70:	0800d3ac 	.word	0x0800d3ac

08004c74 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b086      	sub	sp, #24
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004c80:	4b2a      	ldr	r3, [pc, #168]	@ (8004d2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d003      	beq.n	8004c94 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004c8c:	f7ff f9ee 	bl	800406c <HAL_PWREx_GetVoltageRange>
 8004c90:	6178      	str	r0, [r7, #20]
 8004c92:	e014      	b.n	8004cbe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c94:	4b25      	ldr	r3, [pc, #148]	@ (8004d2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c98:	4a24      	ldr	r2, [pc, #144]	@ (8004d2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ca0:	4b22      	ldr	r3, [pc, #136]	@ (8004d2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ca4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ca8:	60fb      	str	r3, [r7, #12]
 8004caa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004cac:	f7ff f9de 	bl	800406c <HAL_PWREx_GetVoltageRange>
 8004cb0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004cb2:	4b1e      	ldr	r3, [pc, #120]	@ (8004d2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cb6:	4a1d      	ldr	r2, [pc, #116]	@ (8004d2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cb8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cbc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cc4:	d10b      	bne.n	8004cde <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2b80      	cmp	r3, #128	@ 0x80
 8004cca:	d919      	bls.n	8004d00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2ba0      	cmp	r3, #160	@ 0xa0
 8004cd0:	d902      	bls.n	8004cd8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004cd2:	2302      	movs	r3, #2
 8004cd4:	613b      	str	r3, [r7, #16]
 8004cd6:	e013      	b.n	8004d00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004cd8:	2301      	movs	r3, #1
 8004cda:	613b      	str	r3, [r7, #16]
 8004cdc:	e010      	b.n	8004d00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2b80      	cmp	r3, #128	@ 0x80
 8004ce2:	d902      	bls.n	8004cea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	613b      	str	r3, [r7, #16]
 8004ce8:	e00a      	b.n	8004d00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2b80      	cmp	r3, #128	@ 0x80
 8004cee:	d102      	bne.n	8004cf6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	613b      	str	r3, [r7, #16]
 8004cf4:	e004      	b.n	8004d00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2b70      	cmp	r3, #112	@ 0x70
 8004cfa:	d101      	bne.n	8004d00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004d00:	4b0b      	ldr	r3, [pc, #44]	@ (8004d30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f023 0207 	bic.w	r2, r3, #7
 8004d08:	4909      	ldr	r1, [pc, #36]	@ (8004d30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004d10:	4b07      	ldr	r3, [pc, #28]	@ (8004d30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0307 	and.w	r3, r3, #7
 8004d18:	693a      	ldr	r2, [r7, #16]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d001      	beq.n	8004d22 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e000      	b.n	8004d24 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3718      	adds	r7, #24
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	40021000 	.word	0x40021000
 8004d30:	40022000 	.word	0x40022000

08004d34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b086      	sub	sp, #24
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d40:	2300      	movs	r3, #0
 8004d42:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d041      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d54:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004d58:	d02a      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004d5a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004d5e:	d824      	bhi.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004d60:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004d64:	d008      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004d66:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004d6a:	d81e      	bhi.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00a      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004d70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d74:	d010      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004d76:	e018      	b.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d78:	4b86      	ldr	r3, [pc, #536]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	4a85      	ldr	r2, [pc, #532]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d82:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d84:	e015      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	3304      	adds	r3, #4
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f000 fabb 	bl	8005308 <RCCEx_PLLSAI1_Config>
 8004d92:	4603      	mov	r3, r0
 8004d94:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d96:	e00c      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	3320      	adds	r3, #32
 8004d9c:	2100      	movs	r1, #0
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f000 fba6 	bl	80054f0 <RCCEx_PLLSAI2_Config>
 8004da4:	4603      	mov	r3, r0
 8004da6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004da8:	e003      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	74fb      	strb	r3, [r7, #19]
      break;
 8004dae:	e000      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004db0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004db2:	7cfb      	ldrb	r3, [r7, #19]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d10b      	bne.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004db8:	4b76      	ldr	r3, [pc, #472]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dbe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004dc6:	4973      	ldr	r1, [pc, #460]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004dce:	e001      	b.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dd0:	7cfb      	ldrb	r3, [r7, #19]
 8004dd2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d041      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004de4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004de8:	d02a      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004dea:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004dee:	d824      	bhi.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004df0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004df4:	d008      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004df6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004dfa:	d81e      	bhi.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00a      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004e00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e04:	d010      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004e06:	e018      	b.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e08:	4b62      	ldr	r3, [pc, #392]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	4a61      	ldr	r2, [pc, #388]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e12:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e14:	e015      	b.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	3304      	adds	r3, #4
 8004e1a:	2100      	movs	r1, #0
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f000 fa73 	bl	8005308 <RCCEx_PLLSAI1_Config>
 8004e22:	4603      	mov	r3, r0
 8004e24:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e26:	e00c      	b.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	3320      	adds	r3, #32
 8004e2c:	2100      	movs	r1, #0
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f000 fb5e 	bl	80054f0 <RCCEx_PLLSAI2_Config>
 8004e34:	4603      	mov	r3, r0
 8004e36:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e38:	e003      	b.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	74fb      	strb	r3, [r7, #19]
      break;
 8004e3e:	e000      	b.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004e40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e42:	7cfb      	ldrb	r3, [r7, #19]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d10b      	bne.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004e48:	4b52      	ldr	r3, [pc, #328]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e4e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e56:	494f      	ldr	r1, [pc, #316]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004e5e:	e001      	b.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e60:	7cfb      	ldrb	r3, [r7, #19]
 8004e62:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f000 80a0 	beq.w	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e72:	2300      	movs	r3, #0
 8004e74:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004e76:	4b47      	ldr	r3, [pc, #284]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d101      	bne.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004e82:	2301      	movs	r3, #1
 8004e84:	e000      	b.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004e86:	2300      	movs	r3, #0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d00d      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e8c:	4b41      	ldr	r3, [pc, #260]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e90:	4a40      	ldr	r2, [pc, #256]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e96:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e98:	4b3e      	ldr	r3, [pc, #248]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ea0:	60bb      	str	r3, [r7, #8]
 8004ea2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ea8:	4b3b      	ldr	r3, [pc, #236]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a3a      	ldr	r2, [pc, #232]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004eae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004eb2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004eb4:	f7fd fe48 	bl	8002b48 <HAL_GetTick>
 8004eb8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004eba:	e009      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ebc:	f7fd fe44 	bl	8002b48 <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d902      	bls.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	74fb      	strb	r3, [r7, #19]
        break;
 8004ece:	e005      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ed0:	4b31      	ldr	r3, [pc, #196]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d0ef      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004edc:	7cfb      	ldrb	r3, [r7, #19]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d15c      	bne.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ee2:	4b2c      	ldr	r3, [pc, #176]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ee8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004eec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d01f      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d019      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f00:	4b24      	ldr	r3, [pc, #144]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f0a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f0c:	4b21      	ldr	r3, [pc, #132]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f12:	4a20      	ldr	r2, [pc, #128]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f1c:	4b1d      	ldr	r3, [pc, #116]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f22:	4a1c      	ldr	r2, [pc, #112]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f2c:	4a19      	ldr	r2, [pc, #100]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	f003 0301 	and.w	r3, r3, #1
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d016      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f3e:	f7fd fe03 	bl	8002b48 <HAL_GetTick>
 8004f42:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f44:	e00b      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f46:	f7fd fdff 	bl	8002b48 <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d902      	bls.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	74fb      	strb	r3, [r7, #19]
            break;
 8004f5c:	e006      	b.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f64:	f003 0302 	and.w	r3, r3, #2
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d0ec      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004f6c:	7cfb      	ldrb	r3, [r7, #19]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d10c      	bne.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f72:	4b08      	ldr	r3, [pc, #32]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f78:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f82:	4904      	ldr	r1, [pc, #16]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004f8a:	e009      	b.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f8c:	7cfb      	ldrb	r3, [r7, #19]
 8004f8e:	74bb      	strb	r3, [r7, #18]
 8004f90:	e006      	b.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004f92:	bf00      	nop
 8004f94:	40021000 	.word	0x40021000
 8004f98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f9c:	7cfb      	ldrb	r3, [r7, #19]
 8004f9e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fa0:	7c7b      	ldrb	r3, [r7, #17]
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d105      	bne.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fa6:	4b9e      	ldr	r3, [pc, #632]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004faa:	4a9d      	ldr	r2, [pc, #628]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fb0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0301 	and.w	r3, r3, #1
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00a      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fbe:	4b98      	ldr	r3, [pc, #608]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fc4:	f023 0203 	bic.w	r2, r3, #3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fcc:	4994      	ldr	r1, [pc, #592]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0302 	and.w	r3, r3, #2
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00a      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004fe0:	4b8f      	ldr	r3, [pc, #572]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fe6:	f023 020c 	bic.w	r2, r3, #12
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fee:	498c      	ldr	r1, [pc, #560]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0304 	and.w	r3, r3, #4
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00a      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005002:	4b87      	ldr	r3, [pc, #540]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005004:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005008:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005010:	4983      	ldr	r1, [pc, #524]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005012:	4313      	orrs	r3, r2
 8005014:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0308 	and.w	r3, r3, #8
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00a      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005024:	4b7e      	ldr	r3, [pc, #504]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005026:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800502a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005032:	497b      	ldr	r1, [pc, #492]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005034:	4313      	orrs	r3, r2
 8005036:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0310 	and.w	r3, r3, #16
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00a      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005046:	4b76      	ldr	r3, [pc, #472]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005048:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800504c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005054:	4972      	ldr	r1, [pc, #456]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005056:	4313      	orrs	r3, r2
 8005058:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0320 	and.w	r3, r3, #32
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00a      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005068:	4b6d      	ldr	r3, [pc, #436]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800506a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800506e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005076:	496a      	ldr	r1, [pc, #424]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005078:	4313      	orrs	r3, r2
 800507a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00a      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800508a:	4b65      	ldr	r3, [pc, #404]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800508c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005090:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005098:	4961      	ldr	r1, [pc, #388]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800509a:	4313      	orrs	r3, r2
 800509c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00a      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80050ac:	4b5c      	ldr	r3, [pc, #368]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050ba:	4959      	ldr	r1, [pc, #356]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00a      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050ce:	4b54      	ldr	r3, [pc, #336]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050d4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050dc:	4950      	ldr	r1, [pc, #320]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d00a      	beq.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80050f0:	4b4b      	ldr	r3, [pc, #300]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050f6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050fe:	4948      	ldr	r1, [pc, #288]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005100:	4313      	orrs	r3, r2
 8005102:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00a      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005112:	4b43      	ldr	r3, [pc, #268]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005114:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005118:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005120:	493f      	ldr	r1, [pc, #252]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005122:	4313      	orrs	r3, r2
 8005124:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d028      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005134:	4b3a      	ldr	r3, [pc, #232]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800513a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005142:	4937      	ldr	r1, [pc, #220]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005144:	4313      	orrs	r3, r2
 8005146:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800514e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005152:	d106      	bne.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005154:	4b32      	ldr	r3, [pc, #200]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	4a31      	ldr	r2, [pc, #196]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800515a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800515e:	60d3      	str	r3, [r2, #12]
 8005160:	e011      	b.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005166:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800516a:	d10c      	bne.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	3304      	adds	r3, #4
 8005170:	2101      	movs	r1, #1
 8005172:	4618      	mov	r0, r3
 8005174:	f000 f8c8 	bl	8005308 <RCCEx_PLLSAI1_Config>
 8005178:	4603      	mov	r3, r0
 800517a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800517c:	7cfb      	ldrb	r3, [r7, #19]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d001      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005182:	7cfb      	ldrb	r3, [r7, #19]
 8005184:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d028      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005192:	4b23      	ldr	r3, [pc, #140]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005194:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005198:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051a0:	491f      	ldr	r1, [pc, #124]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051b0:	d106      	bne.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051b2:	4b1b      	ldr	r3, [pc, #108]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	4a1a      	ldr	r2, [pc, #104]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051b8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051bc:	60d3      	str	r3, [r2, #12]
 80051be:	e011      	b.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80051c8:	d10c      	bne.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	3304      	adds	r3, #4
 80051ce:	2101      	movs	r1, #1
 80051d0:	4618      	mov	r0, r3
 80051d2:	f000 f899 	bl	8005308 <RCCEx_PLLSAI1_Config>
 80051d6:	4603      	mov	r3, r0
 80051d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051da:	7cfb      	ldrb	r3, [r7, #19]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d001      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80051e0:	7cfb      	ldrb	r3, [r7, #19]
 80051e2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d02b      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80051f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051fe:	4908      	ldr	r1, [pc, #32]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005200:	4313      	orrs	r3, r2
 8005202:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800520a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800520e:	d109      	bne.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005210:	4b03      	ldr	r3, [pc, #12]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	4a02      	ldr	r2, [pc, #8]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005216:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800521a:	60d3      	str	r3, [r2, #12]
 800521c:	e014      	b.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800521e:	bf00      	nop
 8005220:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005228:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800522c:	d10c      	bne.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	3304      	adds	r3, #4
 8005232:	2101      	movs	r1, #1
 8005234:	4618      	mov	r0, r3
 8005236:	f000 f867 	bl	8005308 <RCCEx_PLLSAI1_Config>
 800523a:	4603      	mov	r3, r0
 800523c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800523e:	7cfb      	ldrb	r3, [r7, #19]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d001      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005244:	7cfb      	ldrb	r3, [r7, #19]
 8005246:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d02f      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005254:	4b2b      	ldr	r3, [pc, #172]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800525a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005262:	4928      	ldr	r1, [pc, #160]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005264:	4313      	orrs	r3, r2
 8005266:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800526e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005272:	d10d      	bne.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	3304      	adds	r3, #4
 8005278:	2102      	movs	r1, #2
 800527a:	4618      	mov	r0, r3
 800527c:	f000 f844 	bl	8005308 <RCCEx_PLLSAI1_Config>
 8005280:	4603      	mov	r3, r0
 8005282:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005284:	7cfb      	ldrb	r3, [r7, #19]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d014      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800528a:	7cfb      	ldrb	r3, [r7, #19]
 800528c:	74bb      	strb	r3, [r7, #18]
 800528e:	e011      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005294:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005298:	d10c      	bne.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	3320      	adds	r3, #32
 800529e:	2102      	movs	r1, #2
 80052a0:	4618      	mov	r0, r3
 80052a2:	f000 f925 	bl	80054f0 <RCCEx_PLLSAI2_Config>
 80052a6:	4603      	mov	r3, r0
 80052a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80052aa:	7cfb      	ldrb	r3, [r7, #19]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d001      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80052b0:	7cfb      	ldrb	r3, [r7, #19]
 80052b2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d00a      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80052c0:	4b10      	ldr	r3, [pc, #64]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052c6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80052ce:	490d      	ldr	r1, [pc, #52]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052d0:	4313      	orrs	r3, r2
 80052d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00b      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80052e2:	4b08      	ldr	r3, [pc, #32]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052e8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052f2:	4904      	ldr	r1, [pc, #16]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80052fa:	7cbb      	ldrb	r3, [r7, #18]
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3718      	adds	r7, #24
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}
 8005304:	40021000 	.word	0x40021000

08005308 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005312:	2300      	movs	r3, #0
 8005314:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005316:	4b75      	ldr	r3, [pc, #468]	@ (80054ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	f003 0303 	and.w	r3, r3, #3
 800531e:	2b00      	cmp	r3, #0
 8005320:	d018      	beq.n	8005354 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005322:	4b72      	ldr	r3, [pc, #456]	@ (80054ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	f003 0203 	and.w	r2, r3, #3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	429a      	cmp	r2, r3
 8005330:	d10d      	bne.n	800534e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
       ||
 8005336:	2b00      	cmp	r3, #0
 8005338:	d009      	beq.n	800534e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800533a:	4b6c      	ldr	r3, [pc, #432]	@ (80054ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	091b      	lsrs	r3, r3, #4
 8005340:	f003 0307 	and.w	r3, r3, #7
 8005344:	1c5a      	adds	r2, r3, #1
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
       ||
 800534a:	429a      	cmp	r2, r3
 800534c:	d047      	beq.n	80053de <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	73fb      	strb	r3, [r7, #15]
 8005352:	e044      	b.n	80053de <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2b03      	cmp	r3, #3
 800535a:	d018      	beq.n	800538e <RCCEx_PLLSAI1_Config+0x86>
 800535c:	2b03      	cmp	r3, #3
 800535e:	d825      	bhi.n	80053ac <RCCEx_PLLSAI1_Config+0xa4>
 8005360:	2b01      	cmp	r3, #1
 8005362:	d002      	beq.n	800536a <RCCEx_PLLSAI1_Config+0x62>
 8005364:	2b02      	cmp	r3, #2
 8005366:	d009      	beq.n	800537c <RCCEx_PLLSAI1_Config+0x74>
 8005368:	e020      	b.n	80053ac <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800536a:	4b60      	ldr	r3, [pc, #384]	@ (80054ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	2b00      	cmp	r3, #0
 8005374:	d11d      	bne.n	80053b2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800537a:	e01a      	b.n	80053b2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800537c:	4b5b      	ldr	r3, [pc, #364]	@ (80054ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005384:	2b00      	cmp	r3, #0
 8005386:	d116      	bne.n	80053b6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800538c:	e013      	b.n	80053b6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800538e:	4b57      	ldr	r3, [pc, #348]	@ (80054ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005396:	2b00      	cmp	r3, #0
 8005398:	d10f      	bne.n	80053ba <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800539a:	4b54      	ldr	r3, [pc, #336]	@ (80054ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d109      	bne.n	80053ba <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80053aa:	e006      	b.n	80053ba <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	73fb      	strb	r3, [r7, #15]
      break;
 80053b0:	e004      	b.n	80053bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80053b2:	bf00      	nop
 80053b4:	e002      	b.n	80053bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80053b6:	bf00      	nop
 80053b8:	e000      	b.n	80053bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80053ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80053bc:	7bfb      	ldrb	r3, [r7, #15]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d10d      	bne.n	80053de <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80053c2:	4b4a      	ldr	r3, [pc, #296]	@ (80054ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6819      	ldr	r1, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	3b01      	subs	r3, #1
 80053d4:	011b      	lsls	r3, r3, #4
 80053d6:	430b      	orrs	r3, r1
 80053d8:	4944      	ldr	r1, [pc, #272]	@ (80054ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80053da:	4313      	orrs	r3, r2
 80053dc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80053de:	7bfb      	ldrb	r3, [r7, #15]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d17d      	bne.n	80054e0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80053e4:	4b41      	ldr	r3, [pc, #260]	@ (80054ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a40      	ldr	r2, [pc, #256]	@ (80054ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80053ea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80053ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053f0:	f7fd fbaa 	bl	8002b48 <HAL_GetTick>
 80053f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80053f6:	e009      	b.n	800540c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053f8:	f7fd fba6 	bl	8002b48 <HAL_GetTick>
 80053fc:	4602      	mov	r2, r0
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	2b02      	cmp	r3, #2
 8005404:	d902      	bls.n	800540c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	73fb      	strb	r3, [r7, #15]
        break;
 800540a:	e005      	b.n	8005418 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800540c:	4b37      	ldr	r3, [pc, #220]	@ (80054ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d1ef      	bne.n	80053f8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005418:	7bfb      	ldrb	r3, [r7, #15]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d160      	bne.n	80054e0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d111      	bne.n	8005448 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005424:	4b31      	ldr	r3, [pc, #196]	@ (80054ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800542c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	6892      	ldr	r2, [r2, #8]
 8005434:	0211      	lsls	r1, r2, #8
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	68d2      	ldr	r2, [r2, #12]
 800543a:	0912      	lsrs	r2, r2, #4
 800543c:	0452      	lsls	r2, r2, #17
 800543e:	430a      	orrs	r2, r1
 8005440:	492a      	ldr	r1, [pc, #168]	@ (80054ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005442:	4313      	orrs	r3, r2
 8005444:	610b      	str	r3, [r1, #16]
 8005446:	e027      	b.n	8005498 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	2b01      	cmp	r3, #1
 800544c:	d112      	bne.n	8005474 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800544e:	4b27      	ldr	r3, [pc, #156]	@ (80054ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005456:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	6892      	ldr	r2, [r2, #8]
 800545e:	0211      	lsls	r1, r2, #8
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	6912      	ldr	r2, [r2, #16]
 8005464:	0852      	lsrs	r2, r2, #1
 8005466:	3a01      	subs	r2, #1
 8005468:	0552      	lsls	r2, r2, #21
 800546a:	430a      	orrs	r2, r1
 800546c:	491f      	ldr	r1, [pc, #124]	@ (80054ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800546e:	4313      	orrs	r3, r2
 8005470:	610b      	str	r3, [r1, #16]
 8005472:	e011      	b.n	8005498 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005474:	4b1d      	ldr	r3, [pc, #116]	@ (80054ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800547c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	6892      	ldr	r2, [r2, #8]
 8005484:	0211      	lsls	r1, r2, #8
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	6952      	ldr	r2, [r2, #20]
 800548a:	0852      	lsrs	r2, r2, #1
 800548c:	3a01      	subs	r2, #1
 800548e:	0652      	lsls	r2, r2, #25
 8005490:	430a      	orrs	r2, r1
 8005492:	4916      	ldr	r1, [pc, #88]	@ (80054ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005494:	4313      	orrs	r3, r2
 8005496:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005498:	4b14      	ldr	r3, [pc, #80]	@ (80054ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a13      	ldr	r2, [pc, #76]	@ (80054ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800549e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80054a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054a4:	f7fd fb50 	bl	8002b48 <HAL_GetTick>
 80054a8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80054aa:	e009      	b.n	80054c0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80054ac:	f7fd fb4c 	bl	8002b48 <HAL_GetTick>
 80054b0:	4602      	mov	r2, r0
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d902      	bls.n	80054c0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80054ba:	2303      	movs	r3, #3
 80054bc:	73fb      	strb	r3, [r7, #15]
          break;
 80054be:	e005      	b.n	80054cc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80054c0:	4b0a      	ldr	r3, [pc, #40]	@ (80054ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d0ef      	beq.n	80054ac <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80054cc:	7bfb      	ldrb	r3, [r7, #15]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d106      	bne.n	80054e0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80054d2:	4b06      	ldr	r3, [pc, #24]	@ (80054ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80054d4:	691a      	ldr	r2, [r3, #16]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	4904      	ldr	r1, [pc, #16]	@ (80054ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80054e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3710      	adds	r7, #16
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	40021000 	.word	0x40021000

080054f0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054fa:	2300      	movs	r3, #0
 80054fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80054fe:	4b6a      	ldr	r3, [pc, #424]	@ (80056a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	f003 0303 	and.w	r3, r3, #3
 8005506:	2b00      	cmp	r3, #0
 8005508:	d018      	beq.n	800553c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800550a:	4b67      	ldr	r3, [pc, #412]	@ (80056a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	f003 0203 	and.w	r2, r3, #3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	429a      	cmp	r2, r3
 8005518:	d10d      	bne.n	8005536 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
       ||
 800551e:	2b00      	cmp	r3, #0
 8005520:	d009      	beq.n	8005536 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005522:	4b61      	ldr	r3, [pc, #388]	@ (80056a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	091b      	lsrs	r3, r3, #4
 8005528:	f003 0307 	and.w	r3, r3, #7
 800552c:	1c5a      	adds	r2, r3, #1
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685b      	ldr	r3, [r3, #4]
       ||
 8005532:	429a      	cmp	r2, r3
 8005534:	d047      	beq.n	80055c6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	73fb      	strb	r3, [r7, #15]
 800553a:	e044      	b.n	80055c6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2b03      	cmp	r3, #3
 8005542:	d018      	beq.n	8005576 <RCCEx_PLLSAI2_Config+0x86>
 8005544:	2b03      	cmp	r3, #3
 8005546:	d825      	bhi.n	8005594 <RCCEx_PLLSAI2_Config+0xa4>
 8005548:	2b01      	cmp	r3, #1
 800554a:	d002      	beq.n	8005552 <RCCEx_PLLSAI2_Config+0x62>
 800554c:	2b02      	cmp	r3, #2
 800554e:	d009      	beq.n	8005564 <RCCEx_PLLSAI2_Config+0x74>
 8005550:	e020      	b.n	8005594 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005552:	4b55      	ldr	r3, [pc, #340]	@ (80056a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0302 	and.w	r3, r3, #2
 800555a:	2b00      	cmp	r3, #0
 800555c:	d11d      	bne.n	800559a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005562:	e01a      	b.n	800559a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005564:	4b50      	ldr	r3, [pc, #320]	@ (80056a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800556c:	2b00      	cmp	r3, #0
 800556e:	d116      	bne.n	800559e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005574:	e013      	b.n	800559e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005576:	4b4c      	ldr	r3, [pc, #304]	@ (80056a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800557e:	2b00      	cmp	r3, #0
 8005580:	d10f      	bne.n	80055a2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005582:	4b49      	ldr	r3, [pc, #292]	@ (80056a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800558a:	2b00      	cmp	r3, #0
 800558c:	d109      	bne.n	80055a2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005592:	e006      	b.n	80055a2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	73fb      	strb	r3, [r7, #15]
      break;
 8005598:	e004      	b.n	80055a4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800559a:	bf00      	nop
 800559c:	e002      	b.n	80055a4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800559e:	bf00      	nop
 80055a0:	e000      	b.n	80055a4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80055a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80055a4:	7bfb      	ldrb	r3, [r7, #15]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d10d      	bne.n	80055c6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80055aa:	4b3f      	ldr	r3, [pc, #252]	@ (80056a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6819      	ldr	r1, [r3, #0]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	3b01      	subs	r3, #1
 80055bc:	011b      	lsls	r3, r3, #4
 80055be:	430b      	orrs	r3, r1
 80055c0:	4939      	ldr	r1, [pc, #228]	@ (80056a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055c2:	4313      	orrs	r3, r2
 80055c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80055c6:	7bfb      	ldrb	r3, [r7, #15]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d167      	bne.n	800569c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80055cc:	4b36      	ldr	r3, [pc, #216]	@ (80056a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a35      	ldr	r2, [pc, #212]	@ (80056a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055d8:	f7fd fab6 	bl	8002b48 <HAL_GetTick>
 80055dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80055de:	e009      	b.n	80055f4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80055e0:	f7fd fab2 	bl	8002b48 <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d902      	bls.n	80055f4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	73fb      	strb	r3, [r7, #15]
        break;
 80055f2:	e005      	b.n	8005600 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80055f4:	4b2c      	ldr	r3, [pc, #176]	@ (80056a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d1ef      	bne.n	80055e0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005600:	7bfb      	ldrb	r3, [r7, #15]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d14a      	bne.n	800569c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d111      	bne.n	8005630 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800560c:	4b26      	ldr	r3, [pc, #152]	@ (80056a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800560e:	695b      	ldr	r3, [r3, #20]
 8005610:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005614:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	6892      	ldr	r2, [r2, #8]
 800561c:	0211      	lsls	r1, r2, #8
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	68d2      	ldr	r2, [r2, #12]
 8005622:	0912      	lsrs	r2, r2, #4
 8005624:	0452      	lsls	r2, r2, #17
 8005626:	430a      	orrs	r2, r1
 8005628:	491f      	ldr	r1, [pc, #124]	@ (80056a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800562a:	4313      	orrs	r3, r2
 800562c:	614b      	str	r3, [r1, #20]
 800562e:	e011      	b.n	8005654 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005630:	4b1d      	ldr	r3, [pc, #116]	@ (80056a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005632:	695b      	ldr	r3, [r3, #20]
 8005634:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005638:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	6892      	ldr	r2, [r2, #8]
 8005640:	0211      	lsls	r1, r2, #8
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	6912      	ldr	r2, [r2, #16]
 8005646:	0852      	lsrs	r2, r2, #1
 8005648:	3a01      	subs	r2, #1
 800564a:	0652      	lsls	r2, r2, #25
 800564c:	430a      	orrs	r2, r1
 800564e:	4916      	ldr	r1, [pc, #88]	@ (80056a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005650:	4313      	orrs	r3, r2
 8005652:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005654:	4b14      	ldr	r3, [pc, #80]	@ (80056a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a13      	ldr	r2, [pc, #76]	@ (80056a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800565a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800565e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005660:	f7fd fa72 	bl	8002b48 <HAL_GetTick>
 8005664:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005666:	e009      	b.n	800567c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005668:	f7fd fa6e 	bl	8002b48 <HAL_GetTick>
 800566c:	4602      	mov	r2, r0
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	2b02      	cmp	r3, #2
 8005674:	d902      	bls.n	800567c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	73fb      	strb	r3, [r7, #15]
          break;
 800567a:	e005      	b.n	8005688 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800567c:	4b0a      	ldr	r3, [pc, #40]	@ (80056a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005684:	2b00      	cmp	r3, #0
 8005686:	d0ef      	beq.n	8005668 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005688:	7bfb      	ldrb	r3, [r7, #15]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d106      	bne.n	800569c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800568e:	4b06      	ldr	r3, [pc, #24]	@ (80056a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005690:	695a      	ldr	r2, [r3, #20]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	4904      	ldr	r1, [pc, #16]	@ (80056a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005698:	4313      	orrs	r3, r2
 800569a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800569c:	7bfb      	ldrb	r3, [r7, #15]
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3710      	adds	r7, #16
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	40021000 	.word	0x40021000

080056ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d101      	bne.n	80056be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e049      	b.n	8005752 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d106      	bne.n	80056d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f7fd f8ac 	bl	8002830 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2202      	movs	r2, #2
 80056dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	3304      	adds	r3, #4
 80056e8:	4619      	mov	r1, r3
 80056ea:	4610      	mov	r0, r2
 80056ec:	f000 fd7c 	bl	80061e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	3708      	adds	r7, #8
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
	...

0800575c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800575c:	b480      	push	{r7}
 800575e:	b085      	sub	sp, #20
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800576a:	b2db      	uxtb	r3, r3
 800576c:	2b01      	cmp	r3, #1
 800576e:	d001      	beq.n	8005774 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e04f      	b.n	8005814 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2202      	movs	r2, #2
 8005778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68da      	ldr	r2, [r3, #12]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f042 0201 	orr.w	r2, r2, #1
 800578a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a23      	ldr	r2, [pc, #140]	@ (8005820 <HAL_TIM_Base_Start_IT+0xc4>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d01d      	beq.n	80057d2 <HAL_TIM_Base_Start_IT+0x76>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800579e:	d018      	beq.n	80057d2 <HAL_TIM_Base_Start_IT+0x76>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a1f      	ldr	r2, [pc, #124]	@ (8005824 <HAL_TIM_Base_Start_IT+0xc8>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d013      	beq.n	80057d2 <HAL_TIM_Base_Start_IT+0x76>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a1e      	ldr	r2, [pc, #120]	@ (8005828 <HAL_TIM_Base_Start_IT+0xcc>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d00e      	beq.n	80057d2 <HAL_TIM_Base_Start_IT+0x76>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a1c      	ldr	r2, [pc, #112]	@ (800582c <HAL_TIM_Base_Start_IT+0xd0>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d009      	beq.n	80057d2 <HAL_TIM_Base_Start_IT+0x76>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a1b      	ldr	r2, [pc, #108]	@ (8005830 <HAL_TIM_Base_Start_IT+0xd4>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d004      	beq.n	80057d2 <HAL_TIM_Base_Start_IT+0x76>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a19      	ldr	r2, [pc, #100]	@ (8005834 <HAL_TIM_Base_Start_IT+0xd8>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d115      	bne.n	80057fe <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	689a      	ldr	r2, [r3, #8]
 80057d8:	4b17      	ldr	r3, [pc, #92]	@ (8005838 <HAL_TIM_Base_Start_IT+0xdc>)
 80057da:	4013      	ands	r3, r2
 80057dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2b06      	cmp	r3, #6
 80057e2:	d015      	beq.n	8005810 <HAL_TIM_Base_Start_IT+0xb4>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057ea:	d011      	beq.n	8005810 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f042 0201 	orr.w	r2, r2, #1
 80057fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057fc:	e008      	b.n	8005810 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f042 0201 	orr.w	r2, r2, #1
 800580c:	601a      	str	r2, [r3, #0]
 800580e:	e000      	b.n	8005812 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005810:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005812:	2300      	movs	r3, #0
}
 8005814:	4618      	mov	r0, r3
 8005816:	3714      	adds	r7, #20
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr
 8005820:	40012c00 	.word	0x40012c00
 8005824:	40000400 	.word	0x40000400
 8005828:	40000800 	.word	0x40000800
 800582c:	40000c00 	.word	0x40000c00
 8005830:	40013400 	.word	0x40013400
 8005834:	40014000 	.word	0x40014000
 8005838:	00010007 	.word	0x00010007

0800583c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b082      	sub	sp, #8
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d101      	bne.n	800584e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e049      	b.n	80058e2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005854:	b2db      	uxtb	r3, r3
 8005856:	2b00      	cmp	r3, #0
 8005858:	d106      	bne.n	8005868 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f7fc ff52 	bl	800270c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2202      	movs	r2, #2
 800586c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	3304      	adds	r3, #4
 8005878:	4619      	mov	r1, r3
 800587a:	4610      	mov	r0, r2
 800587c:	f000 fcb4 	bl	80061e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3708      	adds	r7, #8
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
	...

080058ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d109      	bne.n	8005910 <HAL_TIM_PWM_Start+0x24>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005902:	b2db      	uxtb	r3, r3
 8005904:	2b01      	cmp	r3, #1
 8005906:	bf14      	ite	ne
 8005908:	2301      	movne	r3, #1
 800590a:	2300      	moveq	r3, #0
 800590c:	b2db      	uxtb	r3, r3
 800590e:	e03c      	b.n	800598a <HAL_TIM_PWM_Start+0x9e>
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	2b04      	cmp	r3, #4
 8005914:	d109      	bne.n	800592a <HAL_TIM_PWM_Start+0x3e>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800591c:	b2db      	uxtb	r3, r3
 800591e:	2b01      	cmp	r3, #1
 8005920:	bf14      	ite	ne
 8005922:	2301      	movne	r3, #1
 8005924:	2300      	moveq	r3, #0
 8005926:	b2db      	uxtb	r3, r3
 8005928:	e02f      	b.n	800598a <HAL_TIM_PWM_Start+0x9e>
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	2b08      	cmp	r3, #8
 800592e:	d109      	bne.n	8005944 <HAL_TIM_PWM_Start+0x58>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005936:	b2db      	uxtb	r3, r3
 8005938:	2b01      	cmp	r3, #1
 800593a:	bf14      	ite	ne
 800593c:	2301      	movne	r3, #1
 800593e:	2300      	moveq	r3, #0
 8005940:	b2db      	uxtb	r3, r3
 8005942:	e022      	b.n	800598a <HAL_TIM_PWM_Start+0x9e>
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	2b0c      	cmp	r3, #12
 8005948:	d109      	bne.n	800595e <HAL_TIM_PWM_Start+0x72>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005950:	b2db      	uxtb	r3, r3
 8005952:	2b01      	cmp	r3, #1
 8005954:	bf14      	ite	ne
 8005956:	2301      	movne	r3, #1
 8005958:	2300      	moveq	r3, #0
 800595a:	b2db      	uxtb	r3, r3
 800595c:	e015      	b.n	800598a <HAL_TIM_PWM_Start+0x9e>
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	2b10      	cmp	r3, #16
 8005962:	d109      	bne.n	8005978 <HAL_TIM_PWM_Start+0x8c>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800596a:	b2db      	uxtb	r3, r3
 800596c:	2b01      	cmp	r3, #1
 800596e:	bf14      	ite	ne
 8005970:	2301      	movne	r3, #1
 8005972:	2300      	moveq	r3, #0
 8005974:	b2db      	uxtb	r3, r3
 8005976:	e008      	b.n	800598a <HAL_TIM_PWM_Start+0x9e>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800597e:	b2db      	uxtb	r3, r3
 8005980:	2b01      	cmp	r3, #1
 8005982:	bf14      	ite	ne
 8005984:	2301      	movne	r3, #1
 8005986:	2300      	moveq	r3, #0
 8005988:	b2db      	uxtb	r3, r3
 800598a:	2b00      	cmp	r3, #0
 800598c:	d001      	beq.n	8005992 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e09c      	b.n	8005acc <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d104      	bne.n	80059a2 <HAL_TIM_PWM_Start+0xb6>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2202      	movs	r2, #2
 800599c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80059a0:	e023      	b.n	80059ea <HAL_TIM_PWM_Start+0xfe>
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	2b04      	cmp	r3, #4
 80059a6:	d104      	bne.n	80059b2 <HAL_TIM_PWM_Start+0xc6>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2202      	movs	r2, #2
 80059ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80059b0:	e01b      	b.n	80059ea <HAL_TIM_PWM_Start+0xfe>
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	2b08      	cmp	r3, #8
 80059b6:	d104      	bne.n	80059c2 <HAL_TIM_PWM_Start+0xd6>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2202      	movs	r2, #2
 80059bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80059c0:	e013      	b.n	80059ea <HAL_TIM_PWM_Start+0xfe>
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	2b0c      	cmp	r3, #12
 80059c6:	d104      	bne.n	80059d2 <HAL_TIM_PWM_Start+0xe6>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2202      	movs	r2, #2
 80059cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80059d0:	e00b      	b.n	80059ea <HAL_TIM_PWM_Start+0xfe>
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	2b10      	cmp	r3, #16
 80059d6:	d104      	bne.n	80059e2 <HAL_TIM_PWM_Start+0xf6>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2202      	movs	r2, #2
 80059dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80059e0:	e003      	b.n	80059ea <HAL_TIM_PWM_Start+0xfe>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2202      	movs	r2, #2
 80059e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2201      	movs	r2, #1
 80059f0:	6839      	ldr	r1, [r7, #0]
 80059f2:	4618      	mov	r0, r3
 80059f4:	f000 ff74 	bl	80068e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a35      	ldr	r2, [pc, #212]	@ (8005ad4 <HAL_TIM_PWM_Start+0x1e8>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d013      	beq.n	8005a2a <HAL_TIM_PWM_Start+0x13e>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a34      	ldr	r2, [pc, #208]	@ (8005ad8 <HAL_TIM_PWM_Start+0x1ec>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d00e      	beq.n	8005a2a <HAL_TIM_PWM_Start+0x13e>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a32      	ldr	r2, [pc, #200]	@ (8005adc <HAL_TIM_PWM_Start+0x1f0>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d009      	beq.n	8005a2a <HAL_TIM_PWM_Start+0x13e>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a31      	ldr	r2, [pc, #196]	@ (8005ae0 <HAL_TIM_PWM_Start+0x1f4>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d004      	beq.n	8005a2a <HAL_TIM_PWM_Start+0x13e>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a2f      	ldr	r2, [pc, #188]	@ (8005ae4 <HAL_TIM_PWM_Start+0x1f8>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d101      	bne.n	8005a2e <HAL_TIM_PWM_Start+0x142>
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e000      	b.n	8005a30 <HAL_TIM_PWM_Start+0x144>
 8005a2e:	2300      	movs	r3, #0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d007      	beq.n	8005a44 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005a42:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a22      	ldr	r2, [pc, #136]	@ (8005ad4 <HAL_TIM_PWM_Start+0x1e8>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d01d      	beq.n	8005a8a <HAL_TIM_PWM_Start+0x19e>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a56:	d018      	beq.n	8005a8a <HAL_TIM_PWM_Start+0x19e>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a22      	ldr	r2, [pc, #136]	@ (8005ae8 <HAL_TIM_PWM_Start+0x1fc>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d013      	beq.n	8005a8a <HAL_TIM_PWM_Start+0x19e>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a21      	ldr	r2, [pc, #132]	@ (8005aec <HAL_TIM_PWM_Start+0x200>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d00e      	beq.n	8005a8a <HAL_TIM_PWM_Start+0x19e>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a1f      	ldr	r2, [pc, #124]	@ (8005af0 <HAL_TIM_PWM_Start+0x204>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d009      	beq.n	8005a8a <HAL_TIM_PWM_Start+0x19e>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a17      	ldr	r2, [pc, #92]	@ (8005ad8 <HAL_TIM_PWM_Start+0x1ec>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d004      	beq.n	8005a8a <HAL_TIM_PWM_Start+0x19e>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a15      	ldr	r2, [pc, #84]	@ (8005adc <HAL_TIM_PWM_Start+0x1f0>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d115      	bne.n	8005ab6 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	689a      	ldr	r2, [r3, #8]
 8005a90:	4b18      	ldr	r3, [pc, #96]	@ (8005af4 <HAL_TIM_PWM_Start+0x208>)
 8005a92:	4013      	ands	r3, r2
 8005a94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2b06      	cmp	r3, #6
 8005a9a:	d015      	beq.n	8005ac8 <HAL_TIM_PWM_Start+0x1dc>
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005aa2:	d011      	beq.n	8005ac8 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f042 0201 	orr.w	r2, r2, #1
 8005ab2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ab4:	e008      	b.n	8005ac8 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f042 0201 	orr.w	r2, r2, #1
 8005ac4:	601a      	str	r2, [r3, #0]
 8005ac6:	e000      	b.n	8005aca <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ac8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3710      	adds	r7, #16
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	40012c00 	.word	0x40012c00
 8005ad8:	40013400 	.word	0x40013400
 8005adc:	40014000 	.word	0x40014000
 8005ae0:	40014400 	.word	0x40014400
 8005ae4:	40014800 	.word	0x40014800
 8005ae8:	40000400 	.word	0x40000400
 8005aec:	40000800 	.word	0x40000800
 8005af0:	40000c00 	.word	0x40000c00
 8005af4:	00010007 	.word	0x00010007

08005af8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b086      	sub	sp, #24
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d101      	bne.n	8005b0c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e097      	b.n	8005c3c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d106      	bne.n	8005b26 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f7fc fe13 	bl	800274c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2202      	movs	r2, #2
 8005b2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	6812      	ldr	r2, [r2, #0]
 8005b38:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8005b3c:	f023 0307 	bic.w	r3, r3, #7
 8005b40:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	3304      	adds	r3, #4
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	4610      	mov	r0, r2
 8005b4e:	f000 fb4b 	bl	80061e8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	699b      	ldr	r3, [r3, #24]
 8005b60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	6a1b      	ldr	r3, [r3, #32]
 8005b68:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	697a      	ldr	r2, [r7, #20]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b7a:	f023 0303 	bic.w	r3, r3, #3
 8005b7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	689a      	ldr	r2, [r3, #8]
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	699b      	ldr	r3, [r3, #24]
 8005b88:	021b      	lsls	r3, r3, #8
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	693a      	ldr	r2, [r7, #16]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005b98:	f023 030c 	bic.w	r3, r3, #12
 8005b9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005ba4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ba8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	68da      	ldr	r2, [r3, #12]
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	69db      	ldr	r3, [r3, #28]
 8005bb2:	021b      	lsls	r3, r3, #8
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	693a      	ldr	r2, [r7, #16]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	011a      	lsls	r2, r3, #4
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	031b      	lsls	r3, r3, #12
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	693a      	ldr	r2, [r7, #16]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005bd6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005bde:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	685a      	ldr	r2, [r3, #4]
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	695b      	ldr	r3, [r3, #20]
 8005be8:	011b      	lsls	r3, r3, #4
 8005bea:	4313      	orrs	r3, r2
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	697a      	ldr	r2, [r7, #20]
 8005bf8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2201      	movs	r2, #1
 8005c16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2201      	movs	r2, #1
 8005c26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2201      	movs	r2, #1
 8005c36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c3a:	2300      	movs	r3, #0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3718      	adds	r7, #24
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005c54:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005c5c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c64:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c6c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d110      	bne.n	8005c96 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c74:	7bfb      	ldrb	r3, [r7, #15]
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d102      	bne.n	8005c80 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c7a:	7b7b      	ldrb	r3, [r7, #13]
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d001      	beq.n	8005c84 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e069      	b.n	8005d58 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2202      	movs	r2, #2
 8005c88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2202      	movs	r2, #2
 8005c90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c94:	e031      	b.n	8005cfa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	2b04      	cmp	r3, #4
 8005c9a:	d110      	bne.n	8005cbe <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c9c:	7bbb      	ldrb	r3, [r7, #14]
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d102      	bne.n	8005ca8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ca2:	7b3b      	ldrb	r3, [r7, #12]
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d001      	beq.n	8005cac <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e055      	b.n	8005d58 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2202      	movs	r2, #2
 8005cb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2202      	movs	r2, #2
 8005cb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005cbc:	e01d      	b.n	8005cfa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005cbe:	7bfb      	ldrb	r3, [r7, #15]
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d108      	bne.n	8005cd6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005cc4:	7bbb      	ldrb	r3, [r7, #14]
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d105      	bne.n	8005cd6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005cca:	7b7b      	ldrb	r3, [r7, #13]
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d102      	bne.n	8005cd6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005cd0:	7b3b      	ldrb	r3, [r7, #12]
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d001      	beq.n	8005cda <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e03e      	b.n	8005d58 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2202      	movs	r2, #2
 8005cde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2202      	movs	r2, #2
 8005ce6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2202      	movs	r2, #2
 8005cee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2202      	movs	r2, #2
 8005cf6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d003      	beq.n	8005d08 <HAL_TIM_Encoder_Start+0xc4>
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	2b04      	cmp	r3, #4
 8005d04:	d008      	beq.n	8005d18 <HAL_TIM_Encoder_Start+0xd4>
 8005d06:	e00f      	b.n	8005d28 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	2100      	movs	r1, #0
 8005d10:	4618      	mov	r0, r3
 8005d12:	f000 fde5 	bl	80068e0 <TIM_CCxChannelCmd>
      break;
 8005d16:	e016      	b.n	8005d46 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	2104      	movs	r1, #4
 8005d20:	4618      	mov	r0, r3
 8005d22:	f000 fddd 	bl	80068e0 <TIM_CCxChannelCmd>
      break;
 8005d26:	e00e      	b.n	8005d46 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	2100      	movs	r1, #0
 8005d30:	4618      	mov	r0, r3
 8005d32:	f000 fdd5 	bl	80068e0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	2104      	movs	r1, #4
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f000 fdce 	bl	80068e0 <TIM_CCxChannelCmd>
      break;
 8005d44:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f042 0201 	orr.w	r2, r2, #1
 8005d54:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3710      	adds	r7, #16
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	f003 0302 	and.w	r3, r3, #2
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d020      	beq.n	8005dc4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f003 0302 	and.w	r3, r3, #2
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d01b      	beq.n	8005dc4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f06f 0202 	mvn.w	r2, #2
 8005d94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	699b      	ldr	r3, [r3, #24]
 8005da2:	f003 0303 	and.w	r3, r3, #3
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d003      	beq.n	8005db2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 f9fe 	bl	80061ac <HAL_TIM_IC_CaptureCallback>
 8005db0:	e005      	b.n	8005dbe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 f9f0 	bl	8006198 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 fa01 	bl	80061c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	f003 0304 	and.w	r3, r3, #4
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d020      	beq.n	8005e10 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f003 0304 	and.w	r3, r3, #4
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d01b      	beq.n	8005e10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f06f 0204 	mvn.w	r2, #4
 8005de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2202      	movs	r2, #2
 8005de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d003      	beq.n	8005dfe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 f9d8 	bl	80061ac <HAL_TIM_IC_CaptureCallback>
 8005dfc:	e005      	b.n	8005e0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 f9ca 	bl	8006198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f000 f9db 	bl	80061c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	f003 0308 	and.w	r3, r3, #8
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d020      	beq.n	8005e5c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f003 0308 	and.w	r3, r3, #8
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d01b      	beq.n	8005e5c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f06f 0208 	mvn.w	r2, #8
 8005e2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2204      	movs	r2, #4
 8005e32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	69db      	ldr	r3, [r3, #28]
 8005e3a:	f003 0303 	and.w	r3, r3, #3
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d003      	beq.n	8005e4a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 f9b2 	bl	80061ac <HAL_TIM_IC_CaptureCallback>
 8005e48:	e005      	b.n	8005e56 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 f9a4 	bl	8006198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 f9b5 	bl	80061c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	f003 0310 	and.w	r3, r3, #16
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d020      	beq.n	8005ea8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f003 0310 	and.w	r3, r3, #16
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d01b      	beq.n	8005ea8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f06f 0210 	mvn.w	r2, #16
 8005e78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2208      	movs	r2, #8
 8005e7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	69db      	ldr	r3, [r3, #28]
 8005e86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d003      	beq.n	8005e96 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 f98c 	bl	80061ac <HAL_TIM_IC_CaptureCallback>
 8005e94:	e005      	b.n	8005ea2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 f97e 	bl	8006198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 f98f 	bl	80061c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	f003 0301 	and.w	r3, r3, #1
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00c      	beq.n	8005ecc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f003 0301 	and.w	r3, r3, #1
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d007      	beq.n	8005ecc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f06f 0201 	mvn.w	r2, #1
 8005ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f7fb fb54 	bl	8001574 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d104      	bne.n	8005ee0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d00c      	beq.n	8005efa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d007      	beq.n	8005efa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005ef2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 fe29 	bl	8006b4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00c      	beq.n	8005f1e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d007      	beq.n	8005f1e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005f16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 fe21 	bl	8006b60 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d00c      	beq.n	8005f42 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d007      	beq.n	8005f42 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005f3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 f949 	bl	80061d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	f003 0320 	and.w	r3, r3, #32
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d00c      	beq.n	8005f66 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f003 0320 	and.w	r3, r3, #32
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d007      	beq.n	8005f66 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f06f 0220 	mvn.w	r2, #32
 8005f5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 fde9 	bl	8006b38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f66:	bf00      	nop
 8005f68:	3710      	adds	r7, #16
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
	...

08005f70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b086      	sub	sp, #24
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d101      	bne.n	8005f8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f8a:	2302      	movs	r3, #2
 8005f8c:	e0ff      	b.n	800618e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2201      	movs	r2, #1
 8005f92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2b14      	cmp	r3, #20
 8005f9a:	f200 80f0 	bhi.w	800617e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005f9e:	a201      	add	r2, pc, #4	@ (adr r2, 8005fa4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa4:	08005ff9 	.word	0x08005ff9
 8005fa8:	0800617f 	.word	0x0800617f
 8005fac:	0800617f 	.word	0x0800617f
 8005fb0:	0800617f 	.word	0x0800617f
 8005fb4:	08006039 	.word	0x08006039
 8005fb8:	0800617f 	.word	0x0800617f
 8005fbc:	0800617f 	.word	0x0800617f
 8005fc0:	0800617f 	.word	0x0800617f
 8005fc4:	0800607b 	.word	0x0800607b
 8005fc8:	0800617f 	.word	0x0800617f
 8005fcc:	0800617f 	.word	0x0800617f
 8005fd0:	0800617f 	.word	0x0800617f
 8005fd4:	080060bb 	.word	0x080060bb
 8005fd8:	0800617f 	.word	0x0800617f
 8005fdc:	0800617f 	.word	0x0800617f
 8005fe0:	0800617f 	.word	0x0800617f
 8005fe4:	080060fd 	.word	0x080060fd
 8005fe8:	0800617f 	.word	0x0800617f
 8005fec:	0800617f 	.word	0x0800617f
 8005ff0:	0800617f 	.word	0x0800617f
 8005ff4:	0800613d 	.word	0x0800613d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68b9      	ldr	r1, [r7, #8]
 8005ffe:	4618      	mov	r0, r3
 8006000:	f000 f998 	bl	8006334 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	699a      	ldr	r2, [r3, #24]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f042 0208 	orr.w	r2, r2, #8
 8006012:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	699a      	ldr	r2, [r3, #24]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f022 0204 	bic.w	r2, r2, #4
 8006022:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	6999      	ldr	r1, [r3, #24]
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	691a      	ldr	r2, [r3, #16]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	430a      	orrs	r2, r1
 8006034:	619a      	str	r2, [r3, #24]
      break;
 8006036:	e0a5      	b.n	8006184 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	68b9      	ldr	r1, [r7, #8]
 800603e:	4618      	mov	r0, r3
 8006040:	f000 fa08 	bl	8006454 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	699a      	ldr	r2, [r3, #24]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006052:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	699a      	ldr	r2, [r3, #24]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006062:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	6999      	ldr	r1, [r3, #24]
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	021a      	lsls	r2, r3, #8
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	430a      	orrs	r2, r1
 8006076:	619a      	str	r2, [r3, #24]
      break;
 8006078:	e084      	b.n	8006184 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68b9      	ldr	r1, [r7, #8]
 8006080:	4618      	mov	r0, r3
 8006082:	f000 fa71 	bl	8006568 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	69da      	ldr	r2, [r3, #28]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f042 0208 	orr.w	r2, r2, #8
 8006094:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	69da      	ldr	r2, [r3, #28]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f022 0204 	bic.w	r2, r2, #4
 80060a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	69d9      	ldr	r1, [r3, #28]
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	691a      	ldr	r2, [r3, #16]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	430a      	orrs	r2, r1
 80060b6:	61da      	str	r2, [r3, #28]
      break;
 80060b8:	e064      	b.n	8006184 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68b9      	ldr	r1, [r7, #8]
 80060c0:	4618      	mov	r0, r3
 80060c2:	f000 fad9 	bl	8006678 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	69da      	ldr	r2, [r3, #28]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	69da      	ldr	r2, [r3, #28]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	69d9      	ldr	r1, [r3, #28]
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	691b      	ldr	r3, [r3, #16]
 80060f0:	021a      	lsls	r2, r3, #8
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	430a      	orrs	r2, r1
 80060f8:	61da      	str	r2, [r3, #28]
      break;
 80060fa:	e043      	b.n	8006184 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68b9      	ldr	r1, [r7, #8]
 8006102:	4618      	mov	r0, r3
 8006104:	f000 fb22 	bl	800674c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f042 0208 	orr.w	r2, r2, #8
 8006116:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f022 0204 	bic.w	r2, r2, #4
 8006126:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	691a      	ldr	r2, [r3, #16]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	430a      	orrs	r2, r1
 8006138:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800613a:	e023      	b.n	8006184 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68b9      	ldr	r1, [r7, #8]
 8006142:	4618      	mov	r0, r3
 8006144:	f000 fb66 	bl	8006814 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006156:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006166:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	021a      	lsls	r2, r3, #8
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	430a      	orrs	r2, r1
 800617a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800617c:	e002      	b.n	8006184 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	75fb      	strb	r3, [r7, #23]
      break;
 8006182:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2200      	movs	r2, #0
 8006188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800618c:	7dfb      	ldrb	r3, [r7, #23]
}
 800618e:	4618      	mov	r0, r3
 8006190:	3718      	adds	r7, #24
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop

08006198 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061a0:	bf00      	nop
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061b4:	bf00      	nop
 80061b6:	370c      	adds	r7, #12
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061c8:	bf00      	nop
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061dc:	bf00      	nop
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b085      	sub	sp, #20
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4a46      	ldr	r2, [pc, #280]	@ (8006314 <TIM_Base_SetConfig+0x12c>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d013      	beq.n	8006228 <TIM_Base_SetConfig+0x40>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006206:	d00f      	beq.n	8006228 <TIM_Base_SetConfig+0x40>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a43      	ldr	r2, [pc, #268]	@ (8006318 <TIM_Base_SetConfig+0x130>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d00b      	beq.n	8006228 <TIM_Base_SetConfig+0x40>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4a42      	ldr	r2, [pc, #264]	@ (800631c <TIM_Base_SetConfig+0x134>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d007      	beq.n	8006228 <TIM_Base_SetConfig+0x40>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a41      	ldr	r2, [pc, #260]	@ (8006320 <TIM_Base_SetConfig+0x138>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d003      	beq.n	8006228 <TIM_Base_SetConfig+0x40>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a40      	ldr	r2, [pc, #256]	@ (8006324 <TIM_Base_SetConfig+0x13c>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d108      	bne.n	800623a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800622e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	68fa      	ldr	r2, [r7, #12]
 8006236:	4313      	orrs	r3, r2
 8006238:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a35      	ldr	r2, [pc, #212]	@ (8006314 <TIM_Base_SetConfig+0x12c>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d01f      	beq.n	8006282 <TIM_Base_SetConfig+0x9a>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006248:	d01b      	beq.n	8006282 <TIM_Base_SetConfig+0x9a>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a32      	ldr	r2, [pc, #200]	@ (8006318 <TIM_Base_SetConfig+0x130>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d017      	beq.n	8006282 <TIM_Base_SetConfig+0x9a>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a31      	ldr	r2, [pc, #196]	@ (800631c <TIM_Base_SetConfig+0x134>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d013      	beq.n	8006282 <TIM_Base_SetConfig+0x9a>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a30      	ldr	r2, [pc, #192]	@ (8006320 <TIM_Base_SetConfig+0x138>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d00f      	beq.n	8006282 <TIM_Base_SetConfig+0x9a>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a2f      	ldr	r2, [pc, #188]	@ (8006324 <TIM_Base_SetConfig+0x13c>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d00b      	beq.n	8006282 <TIM_Base_SetConfig+0x9a>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a2e      	ldr	r2, [pc, #184]	@ (8006328 <TIM_Base_SetConfig+0x140>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d007      	beq.n	8006282 <TIM_Base_SetConfig+0x9a>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a2d      	ldr	r2, [pc, #180]	@ (800632c <TIM_Base_SetConfig+0x144>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d003      	beq.n	8006282 <TIM_Base_SetConfig+0x9a>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a2c      	ldr	r2, [pc, #176]	@ (8006330 <TIM_Base_SetConfig+0x148>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d108      	bne.n	8006294 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006288:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	4313      	orrs	r3, r2
 8006292:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	695b      	ldr	r3, [r3, #20]
 800629e:	4313      	orrs	r3, r2
 80062a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	689a      	ldr	r2, [r3, #8]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4a16      	ldr	r2, [pc, #88]	@ (8006314 <TIM_Base_SetConfig+0x12c>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d00f      	beq.n	80062e0 <TIM_Base_SetConfig+0xf8>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4a18      	ldr	r2, [pc, #96]	@ (8006324 <TIM_Base_SetConfig+0x13c>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d00b      	beq.n	80062e0 <TIM_Base_SetConfig+0xf8>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4a17      	ldr	r2, [pc, #92]	@ (8006328 <TIM_Base_SetConfig+0x140>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d007      	beq.n	80062e0 <TIM_Base_SetConfig+0xf8>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4a16      	ldr	r2, [pc, #88]	@ (800632c <TIM_Base_SetConfig+0x144>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d003      	beq.n	80062e0 <TIM_Base_SetConfig+0xf8>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4a15      	ldr	r2, [pc, #84]	@ (8006330 <TIM_Base_SetConfig+0x148>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d103      	bne.n	80062e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	691a      	ldr	r2, [r3, #16]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	f003 0301 	and.w	r3, r3, #1
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d105      	bne.n	8006306 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	f023 0201 	bic.w	r2, r3, #1
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	611a      	str	r2, [r3, #16]
  }
}
 8006306:	bf00      	nop
 8006308:	3714      	adds	r7, #20
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr
 8006312:	bf00      	nop
 8006314:	40012c00 	.word	0x40012c00
 8006318:	40000400 	.word	0x40000400
 800631c:	40000800 	.word	0x40000800
 8006320:	40000c00 	.word	0x40000c00
 8006324:	40013400 	.word	0x40013400
 8006328:	40014000 	.word	0x40014000
 800632c:	40014400 	.word	0x40014400
 8006330:	40014800 	.word	0x40014800

08006334 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006334:	b480      	push	{r7}
 8006336:	b087      	sub	sp, #28
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a1b      	ldr	r3, [r3, #32]
 8006342:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a1b      	ldr	r3, [r3, #32]
 8006348:	f023 0201 	bic.w	r2, r3, #1
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	699b      	ldr	r3, [r3, #24]
 800635a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006362:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f023 0303 	bic.w	r3, r3, #3
 800636e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	4313      	orrs	r3, r2
 8006378:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	f023 0302 	bic.w	r3, r3, #2
 8006380:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	697a      	ldr	r2, [r7, #20]
 8006388:	4313      	orrs	r3, r2
 800638a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4a2c      	ldr	r2, [pc, #176]	@ (8006440 <TIM_OC1_SetConfig+0x10c>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d00f      	beq.n	80063b4 <TIM_OC1_SetConfig+0x80>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4a2b      	ldr	r2, [pc, #172]	@ (8006444 <TIM_OC1_SetConfig+0x110>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d00b      	beq.n	80063b4 <TIM_OC1_SetConfig+0x80>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	4a2a      	ldr	r2, [pc, #168]	@ (8006448 <TIM_OC1_SetConfig+0x114>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d007      	beq.n	80063b4 <TIM_OC1_SetConfig+0x80>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a29      	ldr	r2, [pc, #164]	@ (800644c <TIM_OC1_SetConfig+0x118>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d003      	beq.n	80063b4 <TIM_OC1_SetConfig+0x80>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4a28      	ldr	r2, [pc, #160]	@ (8006450 <TIM_OC1_SetConfig+0x11c>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d10c      	bne.n	80063ce <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	f023 0308 	bic.w	r3, r3, #8
 80063ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	697a      	ldr	r2, [r7, #20]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	f023 0304 	bic.w	r3, r3, #4
 80063cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4a1b      	ldr	r2, [pc, #108]	@ (8006440 <TIM_OC1_SetConfig+0x10c>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d00f      	beq.n	80063f6 <TIM_OC1_SetConfig+0xc2>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a1a      	ldr	r2, [pc, #104]	@ (8006444 <TIM_OC1_SetConfig+0x110>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d00b      	beq.n	80063f6 <TIM_OC1_SetConfig+0xc2>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a19      	ldr	r2, [pc, #100]	@ (8006448 <TIM_OC1_SetConfig+0x114>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d007      	beq.n	80063f6 <TIM_OC1_SetConfig+0xc2>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4a18      	ldr	r2, [pc, #96]	@ (800644c <TIM_OC1_SetConfig+0x118>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d003      	beq.n	80063f6 <TIM_OC1_SetConfig+0xc2>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a17      	ldr	r2, [pc, #92]	@ (8006450 <TIM_OC1_SetConfig+0x11c>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d111      	bne.n	800641a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006404:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	695b      	ldr	r3, [r3, #20]
 800640a:	693a      	ldr	r2, [r7, #16]
 800640c:	4313      	orrs	r3, r2
 800640e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	699b      	ldr	r3, [r3, #24]
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	4313      	orrs	r3, r2
 8006418:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	693a      	ldr	r2, [r7, #16]
 800641e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	685a      	ldr	r2, [r3, #4]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	697a      	ldr	r2, [r7, #20]
 8006432:	621a      	str	r2, [r3, #32]
}
 8006434:	bf00      	nop
 8006436:	371c      	adds	r7, #28
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr
 8006440:	40012c00 	.word	0x40012c00
 8006444:	40013400 	.word	0x40013400
 8006448:	40014000 	.word	0x40014000
 800644c:	40014400 	.word	0x40014400
 8006450:	40014800 	.word	0x40014800

08006454 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006454:	b480      	push	{r7}
 8006456:	b087      	sub	sp, #28
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a1b      	ldr	r3, [r3, #32]
 8006462:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a1b      	ldr	r3, [r3, #32]
 8006468:	f023 0210 	bic.w	r2, r3, #16
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	699b      	ldr	r3, [r3, #24]
 800647a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006482:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800648e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	021b      	lsls	r3, r3, #8
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	4313      	orrs	r3, r2
 800649a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	f023 0320 	bic.w	r3, r3, #32
 80064a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	011b      	lsls	r3, r3, #4
 80064aa:	697a      	ldr	r2, [r7, #20]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a28      	ldr	r2, [pc, #160]	@ (8006554 <TIM_OC2_SetConfig+0x100>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d003      	beq.n	80064c0 <TIM_OC2_SetConfig+0x6c>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4a27      	ldr	r2, [pc, #156]	@ (8006558 <TIM_OC2_SetConfig+0x104>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d10d      	bne.n	80064dc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80064c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	011b      	lsls	r3, r3, #4
 80064ce:	697a      	ldr	r2, [r7, #20]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	4a1d      	ldr	r2, [pc, #116]	@ (8006554 <TIM_OC2_SetConfig+0x100>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d00f      	beq.n	8006504 <TIM_OC2_SetConfig+0xb0>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	4a1c      	ldr	r2, [pc, #112]	@ (8006558 <TIM_OC2_SetConfig+0x104>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d00b      	beq.n	8006504 <TIM_OC2_SetConfig+0xb0>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4a1b      	ldr	r2, [pc, #108]	@ (800655c <TIM_OC2_SetConfig+0x108>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d007      	beq.n	8006504 <TIM_OC2_SetConfig+0xb0>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4a1a      	ldr	r2, [pc, #104]	@ (8006560 <TIM_OC2_SetConfig+0x10c>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d003      	beq.n	8006504 <TIM_OC2_SetConfig+0xb0>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a19      	ldr	r2, [pc, #100]	@ (8006564 <TIM_OC2_SetConfig+0x110>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d113      	bne.n	800652c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800650a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006512:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	695b      	ldr	r3, [r3, #20]
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	693a      	ldr	r2, [r7, #16]
 800651c:	4313      	orrs	r3, r2
 800651e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	699b      	ldr	r3, [r3, #24]
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	693a      	ldr	r2, [r7, #16]
 8006528:	4313      	orrs	r3, r2
 800652a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	693a      	ldr	r2, [r7, #16]
 8006530:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	685a      	ldr	r2, [r3, #4]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	697a      	ldr	r2, [r7, #20]
 8006544:	621a      	str	r2, [r3, #32]
}
 8006546:	bf00      	nop
 8006548:	371c      	adds	r7, #28
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop
 8006554:	40012c00 	.word	0x40012c00
 8006558:	40013400 	.word	0x40013400
 800655c:	40014000 	.word	0x40014000
 8006560:	40014400 	.word	0x40014400
 8006564:	40014800 	.word	0x40014800

08006568 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006568:	b480      	push	{r7}
 800656a:	b087      	sub	sp, #28
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a1b      	ldr	r3, [r3, #32]
 8006576:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6a1b      	ldr	r3, [r3, #32]
 800657c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	69db      	ldr	r3, [r3, #28]
 800658e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006596:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800659a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f023 0303 	bic.w	r3, r3, #3
 80065a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80065b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	021b      	lsls	r3, r3, #8
 80065bc:	697a      	ldr	r2, [r7, #20]
 80065be:	4313      	orrs	r3, r2
 80065c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a27      	ldr	r2, [pc, #156]	@ (8006664 <TIM_OC3_SetConfig+0xfc>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d003      	beq.n	80065d2 <TIM_OC3_SetConfig+0x6a>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a26      	ldr	r2, [pc, #152]	@ (8006668 <TIM_OC3_SetConfig+0x100>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d10d      	bne.n	80065ee <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80065d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	021b      	lsls	r3, r3, #8
 80065e0:	697a      	ldr	r2, [r7, #20]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80065ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a1c      	ldr	r2, [pc, #112]	@ (8006664 <TIM_OC3_SetConfig+0xfc>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d00f      	beq.n	8006616 <TIM_OC3_SetConfig+0xae>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a1b      	ldr	r2, [pc, #108]	@ (8006668 <TIM_OC3_SetConfig+0x100>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d00b      	beq.n	8006616 <TIM_OC3_SetConfig+0xae>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a1a      	ldr	r2, [pc, #104]	@ (800666c <TIM_OC3_SetConfig+0x104>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d007      	beq.n	8006616 <TIM_OC3_SetConfig+0xae>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a19      	ldr	r2, [pc, #100]	@ (8006670 <TIM_OC3_SetConfig+0x108>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d003      	beq.n	8006616 <TIM_OC3_SetConfig+0xae>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4a18      	ldr	r2, [pc, #96]	@ (8006674 <TIM_OC3_SetConfig+0x10c>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d113      	bne.n	800663e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800661c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006624:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	695b      	ldr	r3, [r3, #20]
 800662a:	011b      	lsls	r3, r3, #4
 800662c:	693a      	ldr	r2, [r7, #16]
 800662e:	4313      	orrs	r3, r2
 8006630:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	699b      	ldr	r3, [r3, #24]
 8006636:	011b      	lsls	r3, r3, #4
 8006638:	693a      	ldr	r2, [r7, #16]
 800663a:	4313      	orrs	r3, r2
 800663c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	693a      	ldr	r2, [r7, #16]
 8006642:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	685a      	ldr	r2, [r3, #4]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	697a      	ldr	r2, [r7, #20]
 8006656:	621a      	str	r2, [r3, #32]
}
 8006658:	bf00      	nop
 800665a:	371c      	adds	r7, #28
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr
 8006664:	40012c00 	.word	0x40012c00
 8006668:	40013400 	.word	0x40013400
 800666c:	40014000 	.word	0x40014000
 8006670:	40014400 	.word	0x40014400
 8006674:	40014800 	.word	0x40014800

08006678 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006678:	b480      	push	{r7}
 800667a:	b087      	sub	sp, #28
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a1b      	ldr	r3, [r3, #32]
 8006686:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6a1b      	ldr	r3, [r3, #32]
 800668c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	69db      	ldr	r3, [r3, #28]
 800669e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80066a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	021b      	lsls	r3, r3, #8
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	4313      	orrs	r3, r2
 80066be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80066c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	031b      	lsls	r3, r3, #12
 80066ce:	693a      	ldr	r2, [r7, #16]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a18      	ldr	r2, [pc, #96]	@ (8006738 <TIM_OC4_SetConfig+0xc0>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d00f      	beq.n	80066fc <TIM_OC4_SetConfig+0x84>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a17      	ldr	r2, [pc, #92]	@ (800673c <TIM_OC4_SetConfig+0xc4>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d00b      	beq.n	80066fc <TIM_OC4_SetConfig+0x84>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4a16      	ldr	r2, [pc, #88]	@ (8006740 <TIM_OC4_SetConfig+0xc8>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d007      	beq.n	80066fc <TIM_OC4_SetConfig+0x84>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	4a15      	ldr	r2, [pc, #84]	@ (8006744 <TIM_OC4_SetConfig+0xcc>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d003      	beq.n	80066fc <TIM_OC4_SetConfig+0x84>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	4a14      	ldr	r2, [pc, #80]	@ (8006748 <TIM_OC4_SetConfig+0xd0>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d109      	bne.n	8006710 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006702:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	695b      	ldr	r3, [r3, #20]
 8006708:	019b      	lsls	r3, r3, #6
 800670a:	697a      	ldr	r2, [r7, #20]
 800670c:	4313      	orrs	r3, r2
 800670e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	697a      	ldr	r2, [r7, #20]
 8006714:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	685a      	ldr	r2, [r3, #4]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	693a      	ldr	r2, [r7, #16]
 8006728:	621a      	str	r2, [r3, #32]
}
 800672a:	bf00      	nop
 800672c:	371c      	adds	r7, #28
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
 8006736:	bf00      	nop
 8006738:	40012c00 	.word	0x40012c00
 800673c:	40013400 	.word	0x40013400
 8006740:	40014000 	.word	0x40014000
 8006744:	40014400 	.word	0x40014400
 8006748:	40014800 	.word	0x40014800

0800674c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800674c:	b480      	push	{r7}
 800674e:	b087      	sub	sp, #28
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6a1b      	ldr	r3, [r3, #32]
 800675a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6a1b      	ldr	r3, [r3, #32]
 8006760:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800677a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800677e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	4313      	orrs	r3, r2
 8006788:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006790:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	041b      	lsls	r3, r3, #16
 8006798:	693a      	ldr	r2, [r7, #16]
 800679a:	4313      	orrs	r3, r2
 800679c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a17      	ldr	r2, [pc, #92]	@ (8006800 <TIM_OC5_SetConfig+0xb4>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d00f      	beq.n	80067c6 <TIM_OC5_SetConfig+0x7a>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4a16      	ldr	r2, [pc, #88]	@ (8006804 <TIM_OC5_SetConfig+0xb8>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d00b      	beq.n	80067c6 <TIM_OC5_SetConfig+0x7a>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a15      	ldr	r2, [pc, #84]	@ (8006808 <TIM_OC5_SetConfig+0xbc>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d007      	beq.n	80067c6 <TIM_OC5_SetConfig+0x7a>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4a14      	ldr	r2, [pc, #80]	@ (800680c <TIM_OC5_SetConfig+0xc0>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d003      	beq.n	80067c6 <TIM_OC5_SetConfig+0x7a>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4a13      	ldr	r2, [pc, #76]	@ (8006810 <TIM_OC5_SetConfig+0xc4>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d109      	bne.n	80067da <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	695b      	ldr	r3, [r3, #20]
 80067d2:	021b      	lsls	r3, r3, #8
 80067d4:	697a      	ldr	r2, [r7, #20]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	697a      	ldr	r2, [r7, #20]
 80067de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	68fa      	ldr	r2, [r7, #12]
 80067e4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	685a      	ldr	r2, [r3, #4]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	693a      	ldr	r2, [r7, #16]
 80067f2:	621a      	str	r2, [r3, #32]
}
 80067f4:	bf00      	nop
 80067f6:	371c      	adds	r7, #28
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr
 8006800:	40012c00 	.word	0x40012c00
 8006804:	40013400 	.word	0x40013400
 8006808:	40014000 	.word	0x40014000
 800680c:	40014400 	.word	0x40014400
 8006810:	40014800 	.word	0x40014800

08006814 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006814:	b480      	push	{r7}
 8006816:	b087      	sub	sp, #28
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a1b      	ldr	r3, [r3, #32]
 8006822:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a1b      	ldr	r3, [r3, #32]
 8006828:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800683a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006842:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006846:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	021b      	lsls	r3, r3, #8
 800684e:	68fa      	ldr	r2, [r7, #12]
 8006850:	4313      	orrs	r3, r2
 8006852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800685a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	051b      	lsls	r3, r3, #20
 8006862:	693a      	ldr	r2, [r7, #16]
 8006864:	4313      	orrs	r3, r2
 8006866:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a18      	ldr	r2, [pc, #96]	@ (80068cc <TIM_OC6_SetConfig+0xb8>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d00f      	beq.n	8006890 <TIM_OC6_SetConfig+0x7c>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a17      	ldr	r2, [pc, #92]	@ (80068d0 <TIM_OC6_SetConfig+0xbc>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d00b      	beq.n	8006890 <TIM_OC6_SetConfig+0x7c>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a16      	ldr	r2, [pc, #88]	@ (80068d4 <TIM_OC6_SetConfig+0xc0>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d007      	beq.n	8006890 <TIM_OC6_SetConfig+0x7c>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a15      	ldr	r2, [pc, #84]	@ (80068d8 <TIM_OC6_SetConfig+0xc4>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d003      	beq.n	8006890 <TIM_OC6_SetConfig+0x7c>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a14      	ldr	r2, [pc, #80]	@ (80068dc <TIM_OC6_SetConfig+0xc8>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d109      	bne.n	80068a4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006896:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	695b      	ldr	r3, [r3, #20]
 800689c:	029b      	lsls	r3, r3, #10
 800689e:	697a      	ldr	r2, [r7, #20]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	697a      	ldr	r2, [r7, #20]
 80068a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	685a      	ldr	r2, [r3, #4]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	693a      	ldr	r2, [r7, #16]
 80068bc:	621a      	str	r2, [r3, #32]
}
 80068be:	bf00      	nop
 80068c0:	371c      	adds	r7, #28
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr
 80068ca:	bf00      	nop
 80068cc:	40012c00 	.word	0x40012c00
 80068d0:	40013400 	.word	0x40013400
 80068d4:	40014000 	.word	0x40014000
 80068d8:	40014400 	.word	0x40014400
 80068dc:	40014800 	.word	0x40014800

080068e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b087      	sub	sp, #28
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	f003 031f 	and.w	r3, r3, #31
 80068f2:	2201      	movs	r2, #1
 80068f4:	fa02 f303 	lsl.w	r3, r2, r3
 80068f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	6a1a      	ldr	r2, [r3, #32]
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	43db      	mvns	r3, r3
 8006902:	401a      	ands	r2, r3
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6a1a      	ldr	r2, [r3, #32]
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	f003 031f 	and.w	r3, r3, #31
 8006912:	6879      	ldr	r1, [r7, #4]
 8006914:	fa01 f303 	lsl.w	r3, r1, r3
 8006918:	431a      	orrs	r2, r3
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	621a      	str	r2, [r3, #32]
}
 800691e:	bf00      	nop
 8006920:	371c      	adds	r7, #28
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr
	...

0800692c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800692c:	b480      	push	{r7}
 800692e:	b085      	sub	sp, #20
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800693c:	2b01      	cmp	r3, #1
 800693e:	d101      	bne.n	8006944 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006940:	2302      	movs	r3, #2
 8006942:	e068      	b.n	8006a16 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2202      	movs	r2, #2
 8006950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a2e      	ldr	r2, [pc, #184]	@ (8006a24 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d004      	beq.n	8006978 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a2d      	ldr	r2, [pc, #180]	@ (8006a28 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d108      	bne.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800697e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	4313      	orrs	r3, r2
 8006988:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006990:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	4313      	orrs	r3, r2
 800699a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a1e      	ldr	r2, [pc, #120]	@ (8006a24 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d01d      	beq.n	80069ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069b6:	d018      	beq.n	80069ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a1b      	ldr	r2, [pc, #108]	@ (8006a2c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d013      	beq.n	80069ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a1a      	ldr	r2, [pc, #104]	@ (8006a30 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d00e      	beq.n	80069ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a18      	ldr	r2, [pc, #96]	@ (8006a34 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d009      	beq.n	80069ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a13      	ldr	r2, [pc, #76]	@ (8006a28 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d004      	beq.n	80069ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a14      	ldr	r2, [pc, #80]	@ (8006a38 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d10c      	bne.n	8006a04 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	68ba      	ldr	r2, [r7, #8]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	68ba      	ldr	r2, [r7, #8]
 8006a02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2201      	movs	r2, #1
 8006a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006a14:	2300      	movs	r3, #0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3714      	adds	r7, #20
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr
 8006a22:	bf00      	nop
 8006a24:	40012c00 	.word	0x40012c00
 8006a28:	40013400 	.word	0x40013400
 8006a2c:	40000400 	.word	0x40000400
 8006a30:	40000800 	.word	0x40000800
 8006a34:	40000c00 	.word	0x40000c00
 8006a38:	40014000 	.word	0x40014000

08006a3c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b085      	sub	sp, #20
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006a46:	2300      	movs	r3, #0
 8006a48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d101      	bne.n	8006a58 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006a54:	2302      	movs	r3, #2
 8006a56:	e065      	b.n	8006b24 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	4313      	orrs	r3, r2
 8006a88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4313      	orrs	r3, r2
 8006a96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	695b      	ldr	r3, [r3, #20]
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	699b      	ldr	r3, [r3, #24]
 8006acc:	041b      	lsls	r3, r3, #16
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a16      	ldr	r2, [pc, #88]	@ (8006b30 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d004      	beq.n	8006ae6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a14      	ldr	r2, [pc, #80]	@ (8006b34 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d115      	bne.n	8006b12 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006af0:	051b      	lsls	r3, r3, #20
 8006af2:	4313      	orrs	r3, r2
 8006af4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	69db      	ldr	r3, [r3, #28]
 8006b00:	4313      	orrs	r3, r2
 8006b02:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	6a1b      	ldr	r3, [r3, #32]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3714      	adds	r7, #20
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr
 8006b30:	40012c00 	.word	0x40012c00
 8006b34:	40013400 	.word	0x40013400

08006b38 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b40:	bf00      	nop
 8006b42:	370c      	adds	r7, #12
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b54:	bf00      	nop
 8006b56:	370c      	adds	r7, #12
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr

08006b60 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b083      	sub	sp, #12
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006b68:	bf00      	nop
 8006b6a:	370c      	adds	r7, #12
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr

08006b74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b082      	sub	sp, #8
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d101      	bne.n	8006b86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	e040      	b.n	8006c08 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d106      	bne.n	8006b9c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f7fb fed8 	bl	800294c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2224      	movs	r2, #36	@ 0x24
 8006ba0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f022 0201 	bic.w	r2, r2, #1
 8006bb0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d002      	beq.n	8006bc0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 fedc 	bl	8007978 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 fc21 	bl	8007408 <UART_SetConfig>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d101      	bne.n	8006bd0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	e01b      	b.n	8006c08 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	685a      	ldr	r2, [r3, #4]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006bde:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	689a      	ldr	r2, [r3, #8]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006bee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f042 0201 	orr.w	r2, r2, #1
 8006bfe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f000 ff5b 	bl	8007abc <UART_CheckIdleState>
 8006c06:	4603      	mov	r3, r0
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3708      	adds	r7, #8
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b08a      	sub	sp, #40	@ 0x28
 8006c14:	af02      	add	r7, sp, #8
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	603b      	str	r3, [r7, #0]
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c24:	2b20      	cmp	r3, #32
 8006c26:	d177      	bne.n	8006d18 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d002      	beq.n	8006c34 <HAL_UART_Transmit+0x24>
 8006c2e:	88fb      	ldrh	r3, [r7, #6]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d101      	bne.n	8006c38 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	e070      	b.n	8006d1a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2221      	movs	r2, #33	@ 0x21
 8006c44:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c46:	f7fb ff7f 	bl	8002b48 <HAL_GetTick>
 8006c4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	88fa      	ldrh	r2, [r7, #6]
 8006c50:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	88fa      	ldrh	r2, [r7, #6]
 8006c58:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c64:	d108      	bne.n	8006c78 <HAL_UART_Transmit+0x68>
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	691b      	ldr	r3, [r3, #16]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d104      	bne.n	8006c78 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	61bb      	str	r3, [r7, #24]
 8006c76:	e003      	b.n	8006c80 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006c80:	e02f      	b.n	8006ce2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	9300      	str	r3, [sp, #0]
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	2180      	movs	r1, #128	@ 0x80
 8006c8c:	68f8      	ldr	r0, [r7, #12]
 8006c8e:	f000 ffbd 	bl	8007c0c <UART_WaitOnFlagUntilTimeout>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d004      	beq.n	8006ca2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2220      	movs	r2, #32
 8006c9c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006c9e:	2303      	movs	r3, #3
 8006ca0:	e03b      	b.n	8006d1a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d10b      	bne.n	8006cc0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	881a      	ldrh	r2, [r3, #0]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006cb4:	b292      	uxth	r2, r2
 8006cb6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	3302      	adds	r3, #2
 8006cbc:	61bb      	str	r3, [r7, #24]
 8006cbe:	e007      	b.n	8006cd0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006cc0:	69fb      	ldr	r3, [r7, #28]
 8006cc2:	781a      	ldrb	r2, [r3, #0]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	3301      	adds	r3, #1
 8006cce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	3b01      	subs	r3, #1
 8006cda:	b29a      	uxth	r2, r3
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d1c9      	bne.n	8006c82 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	9300      	str	r3, [sp, #0]
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	2140      	movs	r1, #64	@ 0x40
 8006cf8:	68f8      	ldr	r0, [r7, #12]
 8006cfa:	f000 ff87 	bl	8007c0c <UART_WaitOnFlagUntilTimeout>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d004      	beq.n	8006d0e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2220      	movs	r2, #32
 8006d08:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006d0a:	2303      	movs	r3, #3
 8006d0c:	e005      	b.n	8006d1a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2220      	movs	r2, #32
 8006d12:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006d14:	2300      	movs	r3, #0
 8006d16:	e000      	b.n	8006d1a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006d18:	2302      	movs	r3, #2
  }
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3720      	adds	r7, #32
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
	...

08006d24 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b08a      	sub	sp, #40	@ 0x28
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	4613      	mov	r3, r2
 8006d30:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d38:	2b20      	cmp	r3, #32
 8006d3a:	d137      	bne.n	8006dac <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d002      	beq.n	8006d48 <HAL_UART_Receive_IT+0x24>
 8006d42:	88fb      	ldrh	r3, [r7, #6]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d101      	bne.n	8006d4c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	e030      	b.n	8006dae <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a18      	ldr	r2, [pc, #96]	@ (8006db8 <HAL_UART_Receive_IT+0x94>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d01f      	beq.n	8006d9c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d018      	beq.n	8006d9c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	e853 3f00 	ldrex	r3, [r3]
 8006d76:	613b      	str	r3, [r7, #16]
   return(result);
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006d7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	461a      	mov	r2, r3
 8006d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d88:	623b      	str	r3, [r7, #32]
 8006d8a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d8c:	69f9      	ldr	r1, [r7, #28]
 8006d8e:	6a3a      	ldr	r2, [r7, #32]
 8006d90:	e841 2300 	strex	r3, r2, [r1]
 8006d94:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d1e6      	bne.n	8006d6a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006d9c:	88fb      	ldrh	r3, [r7, #6]
 8006d9e:	461a      	mov	r2, r3
 8006da0:	68b9      	ldr	r1, [r7, #8]
 8006da2:	68f8      	ldr	r0, [r7, #12]
 8006da4:	f000 ffa0 	bl	8007ce8 <UART_Start_Receive_IT>
 8006da8:	4603      	mov	r3, r0
 8006daa:	e000      	b.n	8006dae <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006dac:	2302      	movs	r3, #2
  }
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3728      	adds	r7, #40	@ 0x28
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop
 8006db8:	40008000 	.word	0x40008000

08006dbc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b0ba      	sub	sp, #232	@ 0xe8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	69db      	ldr	r3, [r3, #28]
 8006dca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006de2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006de6:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006dea:	4013      	ands	r3, r2
 8006dec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006df0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d115      	bne.n	8006e24 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006df8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dfc:	f003 0320 	and.w	r3, r3, #32
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d00f      	beq.n	8006e24 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006e04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e08:	f003 0320 	and.w	r3, r3, #32
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d009      	beq.n	8006e24 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	f000 82ca 	beq.w	80073ae <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	4798      	blx	r3
      }
      return;
 8006e22:	e2c4      	b.n	80073ae <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006e24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	f000 8117 	beq.w	800705c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006e2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e32:	f003 0301 	and.w	r3, r3, #1
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d106      	bne.n	8006e48 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006e3a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006e3e:	4b85      	ldr	r3, [pc, #532]	@ (8007054 <HAL_UART_IRQHandler+0x298>)
 8006e40:	4013      	ands	r3, r2
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	f000 810a 	beq.w	800705c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006e48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e4c:	f003 0301 	and.w	r3, r3, #1
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d011      	beq.n	8006e78 <HAL_UART_IRQHandler+0xbc>
 8006e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d00b      	beq.n	8006e78 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	2201      	movs	r2, #1
 8006e66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e6e:	f043 0201 	orr.w	r2, r3, #1
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e7c:	f003 0302 	and.w	r3, r3, #2
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d011      	beq.n	8006ea8 <HAL_UART_IRQHandler+0xec>
 8006e84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e88:	f003 0301 	and.w	r3, r3, #1
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d00b      	beq.n	8006ea8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	2202      	movs	r2, #2
 8006e96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e9e:	f043 0204 	orr.w	r2, r3, #4
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006eac:	f003 0304 	and.w	r3, r3, #4
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d011      	beq.n	8006ed8 <HAL_UART_IRQHandler+0x11c>
 8006eb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006eb8:	f003 0301 	and.w	r3, r3, #1
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d00b      	beq.n	8006ed8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2204      	movs	r2, #4
 8006ec6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ece:	f043 0202 	orr.w	r2, r3, #2
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006edc:	f003 0308 	and.w	r3, r3, #8
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d017      	beq.n	8006f14 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ee8:	f003 0320 	and.w	r3, r3, #32
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d105      	bne.n	8006efc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006ef0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ef4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d00b      	beq.n	8006f14 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2208      	movs	r2, #8
 8006f02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f0a:	f043 0208 	orr.w	r2, r3, #8
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006f14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d012      	beq.n	8006f46 <HAL_UART_IRQHandler+0x18a>
 8006f20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f24:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d00c      	beq.n	8006f46 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006f34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f3c:	f043 0220 	orr.w	r2, r3, #32
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	f000 8230 	beq.w	80073b2 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f56:	f003 0320 	and.w	r3, r3, #32
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d00d      	beq.n	8006f7a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006f5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f62:	f003 0320 	and.w	r3, r3, #32
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d007      	beq.n	8006f7a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d003      	beq.n	8006f7a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f80:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f8e:	2b40      	cmp	r3, #64	@ 0x40
 8006f90:	d005      	beq.n	8006f9e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006f92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f96:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d04f      	beq.n	800703e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 ff68 	bl	8007e74 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fae:	2b40      	cmp	r3, #64	@ 0x40
 8006fb0:	d141      	bne.n	8007036 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	3308      	adds	r3, #8
 8006fb8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006fc0:	e853 3f00 	ldrex	r3, [r3]
 8006fc4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006fc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006fcc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fd0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	3308      	adds	r3, #8
 8006fda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006fde:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006fe2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006fea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006fee:	e841 2300 	strex	r3, r2, [r1]
 8006ff2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006ff6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d1d9      	bne.n	8006fb2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007002:	2b00      	cmp	r3, #0
 8007004:	d013      	beq.n	800702e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800700a:	4a13      	ldr	r2, [pc, #76]	@ (8007058 <HAL_UART_IRQHandler+0x29c>)
 800700c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007012:	4618      	mov	r0, r3
 8007014:	f7fb ff17 	bl	8002e46 <HAL_DMA_Abort_IT>
 8007018:	4603      	mov	r3, r0
 800701a:	2b00      	cmp	r3, #0
 800701c:	d017      	beq.n	800704e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007028:	4610      	mov	r0, r2
 800702a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800702c:	e00f      	b.n	800704e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 f9d4 	bl	80073dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007034:	e00b      	b.n	800704e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 f9d0 	bl	80073dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800703c:	e007      	b.n	800704e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 f9cc 	bl	80073dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800704c:	e1b1      	b.n	80073b2 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800704e:	bf00      	nop
    return;
 8007050:	e1af      	b.n	80073b2 <HAL_UART_IRQHandler+0x5f6>
 8007052:	bf00      	nop
 8007054:	04000120 	.word	0x04000120
 8007058:	08007f3d 	.word	0x08007f3d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007060:	2b01      	cmp	r3, #1
 8007062:	f040 816a 	bne.w	800733a <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800706a:	f003 0310 	and.w	r3, r3, #16
 800706e:	2b00      	cmp	r3, #0
 8007070:	f000 8163 	beq.w	800733a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007078:	f003 0310 	and.w	r3, r3, #16
 800707c:	2b00      	cmp	r3, #0
 800707e:	f000 815c 	beq.w	800733a <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2210      	movs	r2, #16
 8007088:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007094:	2b40      	cmp	r3, #64	@ 0x40
 8007096:	f040 80d4 	bne.w	8007242 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80070a6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	f000 80ad 	beq.w	800720a <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80070b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80070ba:	429a      	cmp	r2, r3
 80070bc:	f080 80a5 	bcs.w	800720a <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80070c6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 0320 	and.w	r3, r3, #32
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	f040 8086 	bne.w	80071e8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80070e8:	e853 3f00 	ldrex	r3, [r3]
 80070ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80070f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80070f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80070f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	461a      	mov	r2, r3
 8007102:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007106:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800710a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800710e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007112:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007116:	e841 2300 	strex	r3, r2, [r1]
 800711a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800711e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007122:	2b00      	cmp	r3, #0
 8007124:	d1da      	bne.n	80070dc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	3308      	adds	r3, #8
 800712c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800712e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007130:	e853 3f00 	ldrex	r3, [r3]
 8007134:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007136:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007138:	f023 0301 	bic.w	r3, r3, #1
 800713c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	3308      	adds	r3, #8
 8007146:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800714a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800714e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007150:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007152:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007156:	e841 2300 	strex	r3, r2, [r1]
 800715a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800715c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800715e:	2b00      	cmp	r3, #0
 8007160:	d1e1      	bne.n	8007126 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	3308      	adds	r3, #8
 8007168:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800716a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800716c:	e853 3f00 	ldrex	r3, [r3]
 8007170:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007172:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007174:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007178:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	3308      	adds	r3, #8
 8007182:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007186:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007188:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800718a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800718c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800718e:	e841 2300 	strex	r3, r2, [r1]
 8007192:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007194:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007196:	2b00      	cmp	r3, #0
 8007198:	d1e3      	bne.n	8007162 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2220      	movs	r2, #32
 800719e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071b0:	e853 3f00 	ldrex	r3, [r3]
 80071b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80071b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80071b8:	f023 0310 	bic.w	r3, r3, #16
 80071bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	461a      	mov	r2, r3
 80071c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 80071cc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80071d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80071d2:	e841 2300 	strex	r3, r2, [r1]
 80071d6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80071d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d1e4      	bne.n	80071a8 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071e2:	4618      	mov	r0, r3
 80071e4:	f7fb fdf1 	bl	8002dca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2202      	movs	r2, #2
 80071ec:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	1ad3      	subs	r3, r2, r3
 80071fe:	b29b      	uxth	r3, r3
 8007200:	4619      	mov	r1, r3
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 f8f4 	bl	80073f0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007208:	e0d5      	b.n	80073b6 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007210:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007214:	429a      	cmp	r2, r3
 8007216:	f040 80ce 	bne.w	80073b6 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f003 0320 	and.w	r3, r3, #32
 8007226:	2b20      	cmp	r3, #32
 8007228:	f040 80c5 	bne.w	80073b6 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2202      	movs	r2, #2
 8007230:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007238:	4619      	mov	r1, r3
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 f8d8 	bl	80073f0 <HAL_UARTEx_RxEventCallback>
      return;
 8007240:	e0b9      	b.n	80073b6 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800724e:	b29b      	uxth	r3, r3
 8007250:	1ad3      	subs	r3, r2, r3
 8007252:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800725c:	b29b      	uxth	r3, r3
 800725e:	2b00      	cmp	r3, #0
 8007260:	f000 80ab 	beq.w	80073ba <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8007264:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007268:	2b00      	cmp	r3, #0
 800726a:	f000 80a6 	beq.w	80073ba <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007276:	e853 3f00 	ldrex	r3, [r3]
 800727a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800727c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800727e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007282:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	461a      	mov	r2, r3
 800728c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007290:	647b      	str	r3, [r7, #68]	@ 0x44
 8007292:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007294:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007296:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007298:	e841 2300 	strex	r3, r2, [r1]
 800729c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800729e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d1e4      	bne.n	800726e <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	3308      	adds	r3, #8
 80072aa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ae:	e853 3f00 	ldrex	r3, [r3]
 80072b2:	623b      	str	r3, [r7, #32]
   return(result);
 80072b4:	6a3b      	ldr	r3, [r7, #32]
 80072b6:	f023 0301 	bic.w	r3, r3, #1
 80072ba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	3308      	adds	r3, #8
 80072c4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80072c8:	633a      	str	r2, [r7, #48]	@ 0x30
 80072ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80072ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072d0:	e841 2300 	strex	r3, r2, [r1]
 80072d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80072d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d1e3      	bne.n	80072a4 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2220      	movs	r2, #32
 80072e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	e853 3f00 	ldrex	r3, [r3]
 80072fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f023 0310 	bic.w	r3, r3, #16
 8007304:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	461a      	mov	r2, r3
 800730e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007312:	61fb      	str	r3, [r7, #28]
 8007314:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007316:	69b9      	ldr	r1, [r7, #24]
 8007318:	69fa      	ldr	r2, [r7, #28]
 800731a:	e841 2300 	strex	r3, r2, [r1]
 800731e:	617b      	str	r3, [r7, #20]
   return(result);
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d1e4      	bne.n	80072f0 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2202      	movs	r2, #2
 800732a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800732c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007330:	4619      	mov	r1, r3
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 f85c 	bl	80073f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007338:	e03f      	b.n	80073ba <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800733a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800733e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007342:	2b00      	cmp	r3, #0
 8007344:	d00e      	beq.n	8007364 <HAL_UART_IRQHandler+0x5a8>
 8007346:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800734a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800734e:	2b00      	cmp	r3, #0
 8007350:	d008      	beq.n	8007364 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800735a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 ffe9 	bl	8008334 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007362:	e02d      	b.n	80073c0 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007368:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800736c:	2b00      	cmp	r3, #0
 800736e:	d00e      	beq.n	800738e <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007374:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007378:	2b00      	cmp	r3, #0
 800737a:	d008      	beq.n	800738e <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007380:	2b00      	cmp	r3, #0
 8007382:	d01c      	beq.n	80073be <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	4798      	blx	r3
    }
    return;
 800738c:	e017      	b.n	80073be <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800738e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007392:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007396:	2b00      	cmp	r3, #0
 8007398:	d012      	beq.n	80073c0 <HAL_UART_IRQHandler+0x604>
 800739a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800739e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d00c      	beq.n	80073c0 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 fdde 	bl	8007f68 <UART_EndTransmit_IT>
    return;
 80073ac:	e008      	b.n	80073c0 <HAL_UART_IRQHandler+0x604>
      return;
 80073ae:	bf00      	nop
 80073b0:	e006      	b.n	80073c0 <HAL_UART_IRQHandler+0x604>
    return;
 80073b2:	bf00      	nop
 80073b4:	e004      	b.n	80073c0 <HAL_UART_IRQHandler+0x604>
      return;
 80073b6:	bf00      	nop
 80073b8:	e002      	b.n	80073c0 <HAL_UART_IRQHandler+0x604>
      return;
 80073ba:	bf00      	nop
 80073bc:	e000      	b.n	80073c0 <HAL_UART_IRQHandler+0x604>
    return;
 80073be:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80073c0:	37e8      	adds	r7, #232	@ 0xe8
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop

080073c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b083      	sub	sp, #12
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80073d0:	bf00      	nop
 80073d2:	370c      	adds	r7, #12
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr

080073dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80073dc:	b480      	push	{r7}
 80073de:	b083      	sub	sp, #12
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80073e4:	bf00      	nop
 80073e6:	370c      	adds	r7, #12
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr

080073f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	460b      	mov	r3, r1
 80073fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80073fc:	bf00      	nop
 80073fe:	370c      	adds	r7, #12
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr

08007408 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007408:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800740c:	b08a      	sub	sp, #40	@ 0x28
 800740e:	af00      	add	r7, sp, #0
 8007410:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007412:	2300      	movs	r3, #0
 8007414:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	689a      	ldr	r2, [r3, #8]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	691b      	ldr	r3, [r3, #16]
 8007420:	431a      	orrs	r2, r3
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	695b      	ldr	r3, [r3, #20]
 8007426:	431a      	orrs	r2, r3
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	69db      	ldr	r3, [r3, #28]
 800742c:	4313      	orrs	r3, r2
 800742e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	681a      	ldr	r2, [r3, #0]
 8007436:	4ba4      	ldr	r3, [pc, #656]	@ (80076c8 <UART_SetConfig+0x2c0>)
 8007438:	4013      	ands	r3, r2
 800743a:	68fa      	ldr	r2, [r7, #12]
 800743c:	6812      	ldr	r2, [r2, #0]
 800743e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007440:	430b      	orrs	r3, r1
 8007442:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	68da      	ldr	r2, [r3, #12]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	430a      	orrs	r2, r1
 8007458:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	699b      	ldr	r3, [r3, #24]
 800745e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a99      	ldr	r2, [pc, #612]	@ (80076cc <UART_SetConfig+0x2c4>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d004      	beq.n	8007474 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	6a1b      	ldr	r3, [r3, #32]
 800746e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007470:	4313      	orrs	r3, r2
 8007472:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007484:	430a      	orrs	r2, r1
 8007486:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a90      	ldr	r2, [pc, #576]	@ (80076d0 <UART_SetConfig+0x2c8>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d126      	bne.n	80074e0 <UART_SetConfig+0xd8>
 8007492:	4b90      	ldr	r3, [pc, #576]	@ (80076d4 <UART_SetConfig+0x2cc>)
 8007494:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007498:	f003 0303 	and.w	r3, r3, #3
 800749c:	2b03      	cmp	r3, #3
 800749e:	d81b      	bhi.n	80074d8 <UART_SetConfig+0xd0>
 80074a0:	a201      	add	r2, pc, #4	@ (adr r2, 80074a8 <UART_SetConfig+0xa0>)
 80074a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a6:	bf00      	nop
 80074a8:	080074b9 	.word	0x080074b9
 80074ac:	080074c9 	.word	0x080074c9
 80074b0:	080074c1 	.word	0x080074c1
 80074b4:	080074d1 	.word	0x080074d1
 80074b8:	2301      	movs	r3, #1
 80074ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074be:	e116      	b.n	80076ee <UART_SetConfig+0x2e6>
 80074c0:	2302      	movs	r3, #2
 80074c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074c6:	e112      	b.n	80076ee <UART_SetConfig+0x2e6>
 80074c8:	2304      	movs	r3, #4
 80074ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074ce:	e10e      	b.n	80076ee <UART_SetConfig+0x2e6>
 80074d0:	2308      	movs	r3, #8
 80074d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074d6:	e10a      	b.n	80076ee <UART_SetConfig+0x2e6>
 80074d8:	2310      	movs	r3, #16
 80074da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074de:	e106      	b.n	80076ee <UART_SetConfig+0x2e6>
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a7c      	ldr	r2, [pc, #496]	@ (80076d8 <UART_SetConfig+0x2d0>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d138      	bne.n	800755c <UART_SetConfig+0x154>
 80074ea:	4b7a      	ldr	r3, [pc, #488]	@ (80076d4 <UART_SetConfig+0x2cc>)
 80074ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074f0:	f003 030c 	and.w	r3, r3, #12
 80074f4:	2b0c      	cmp	r3, #12
 80074f6:	d82d      	bhi.n	8007554 <UART_SetConfig+0x14c>
 80074f8:	a201      	add	r2, pc, #4	@ (adr r2, 8007500 <UART_SetConfig+0xf8>)
 80074fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074fe:	bf00      	nop
 8007500:	08007535 	.word	0x08007535
 8007504:	08007555 	.word	0x08007555
 8007508:	08007555 	.word	0x08007555
 800750c:	08007555 	.word	0x08007555
 8007510:	08007545 	.word	0x08007545
 8007514:	08007555 	.word	0x08007555
 8007518:	08007555 	.word	0x08007555
 800751c:	08007555 	.word	0x08007555
 8007520:	0800753d 	.word	0x0800753d
 8007524:	08007555 	.word	0x08007555
 8007528:	08007555 	.word	0x08007555
 800752c:	08007555 	.word	0x08007555
 8007530:	0800754d 	.word	0x0800754d
 8007534:	2300      	movs	r3, #0
 8007536:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800753a:	e0d8      	b.n	80076ee <UART_SetConfig+0x2e6>
 800753c:	2302      	movs	r3, #2
 800753e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007542:	e0d4      	b.n	80076ee <UART_SetConfig+0x2e6>
 8007544:	2304      	movs	r3, #4
 8007546:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800754a:	e0d0      	b.n	80076ee <UART_SetConfig+0x2e6>
 800754c:	2308      	movs	r3, #8
 800754e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007552:	e0cc      	b.n	80076ee <UART_SetConfig+0x2e6>
 8007554:	2310      	movs	r3, #16
 8007556:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800755a:	e0c8      	b.n	80076ee <UART_SetConfig+0x2e6>
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a5e      	ldr	r2, [pc, #376]	@ (80076dc <UART_SetConfig+0x2d4>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d125      	bne.n	80075b2 <UART_SetConfig+0x1aa>
 8007566:	4b5b      	ldr	r3, [pc, #364]	@ (80076d4 <UART_SetConfig+0x2cc>)
 8007568:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800756c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007570:	2b30      	cmp	r3, #48	@ 0x30
 8007572:	d016      	beq.n	80075a2 <UART_SetConfig+0x19a>
 8007574:	2b30      	cmp	r3, #48	@ 0x30
 8007576:	d818      	bhi.n	80075aa <UART_SetConfig+0x1a2>
 8007578:	2b20      	cmp	r3, #32
 800757a:	d00a      	beq.n	8007592 <UART_SetConfig+0x18a>
 800757c:	2b20      	cmp	r3, #32
 800757e:	d814      	bhi.n	80075aa <UART_SetConfig+0x1a2>
 8007580:	2b00      	cmp	r3, #0
 8007582:	d002      	beq.n	800758a <UART_SetConfig+0x182>
 8007584:	2b10      	cmp	r3, #16
 8007586:	d008      	beq.n	800759a <UART_SetConfig+0x192>
 8007588:	e00f      	b.n	80075aa <UART_SetConfig+0x1a2>
 800758a:	2300      	movs	r3, #0
 800758c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007590:	e0ad      	b.n	80076ee <UART_SetConfig+0x2e6>
 8007592:	2302      	movs	r3, #2
 8007594:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007598:	e0a9      	b.n	80076ee <UART_SetConfig+0x2e6>
 800759a:	2304      	movs	r3, #4
 800759c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075a0:	e0a5      	b.n	80076ee <UART_SetConfig+0x2e6>
 80075a2:	2308      	movs	r3, #8
 80075a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075a8:	e0a1      	b.n	80076ee <UART_SetConfig+0x2e6>
 80075aa:	2310      	movs	r3, #16
 80075ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075b0:	e09d      	b.n	80076ee <UART_SetConfig+0x2e6>
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a4a      	ldr	r2, [pc, #296]	@ (80076e0 <UART_SetConfig+0x2d8>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d125      	bne.n	8007608 <UART_SetConfig+0x200>
 80075bc:	4b45      	ldr	r3, [pc, #276]	@ (80076d4 <UART_SetConfig+0x2cc>)
 80075be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075c2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80075c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80075c8:	d016      	beq.n	80075f8 <UART_SetConfig+0x1f0>
 80075ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80075cc:	d818      	bhi.n	8007600 <UART_SetConfig+0x1f8>
 80075ce:	2b80      	cmp	r3, #128	@ 0x80
 80075d0:	d00a      	beq.n	80075e8 <UART_SetConfig+0x1e0>
 80075d2:	2b80      	cmp	r3, #128	@ 0x80
 80075d4:	d814      	bhi.n	8007600 <UART_SetConfig+0x1f8>
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d002      	beq.n	80075e0 <UART_SetConfig+0x1d8>
 80075da:	2b40      	cmp	r3, #64	@ 0x40
 80075dc:	d008      	beq.n	80075f0 <UART_SetConfig+0x1e8>
 80075de:	e00f      	b.n	8007600 <UART_SetConfig+0x1f8>
 80075e0:	2300      	movs	r3, #0
 80075e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075e6:	e082      	b.n	80076ee <UART_SetConfig+0x2e6>
 80075e8:	2302      	movs	r3, #2
 80075ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075ee:	e07e      	b.n	80076ee <UART_SetConfig+0x2e6>
 80075f0:	2304      	movs	r3, #4
 80075f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075f6:	e07a      	b.n	80076ee <UART_SetConfig+0x2e6>
 80075f8:	2308      	movs	r3, #8
 80075fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075fe:	e076      	b.n	80076ee <UART_SetConfig+0x2e6>
 8007600:	2310      	movs	r3, #16
 8007602:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007606:	e072      	b.n	80076ee <UART_SetConfig+0x2e6>
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a35      	ldr	r2, [pc, #212]	@ (80076e4 <UART_SetConfig+0x2dc>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d12a      	bne.n	8007668 <UART_SetConfig+0x260>
 8007612:	4b30      	ldr	r3, [pc, #192]	@ (80076d4 <UART_SetConfig+0x2cc>)
 8007614:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007618:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800761c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007620:	d01a      	beq.n	8007658 <UART_SetConfig+0x250>
 8007622:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007626:	d81b      	bhi.n	8007660 <UART_SetConfig+0x258>
 8007628:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800762c:	d00c      	beq.n	8007648 <UART_SetConfig+0x240>
 800762e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007632:	d815      	bhi.n	8007660 <UART_SetConfig+0x258>
 8007634:	2b00      	cmp	r3, #0
 8007636:	d003      	beq.n	8007640 <UART_SetConfig+0x238>
 8007638:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800763c:	d008      	beq.n	8007650 <UART_SetConfig+0x248>
 800763e:	e00f      	b.n	8007660 <UART_SetConfig+0x258>
 8007640:	2300      	movs	r3, #0
 8007642:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007646:	e052      	b.n	80076ee <UART_SetConfig+0x2e6>
 8007648:	2302      	movs	r3, #2
 800764a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800764e:	e04e      	b.n	80076ee <UART_SetConfig+0x2e6>
 8007650:	2304      	movs	r3, #4
 8007652:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007656:	e04a      	b.n	80076ee <UART_SetConfig+0x2e6>
 8007658:	2308      	movs	r3, #8
 800765a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800765e:	e046      	b.n	80076ee <UART_SetConfig+0x2e6>
 8007660:	2310      	movs	r3, #16
 8007662:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007666:	e042      	b.n	80076ee <UART_SetConfig+0x2e6>
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a17      	ldr	r2, [pc, #92]	@ (80076cc <UART_SetConfig+0x2c4>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d13a      	bne.n	80076e8 <UART_SetConfig+0x2e0>
 8007672:	4b18      	ldr	r3, [pc, #96]	@ (80076d4 <UART_SetConfig+0x2cc>)
 8007674:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007678:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800767c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007680:	d01a      	beq.n	80076b8 <UART_SetConfig+0x2b0>
 8007682:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007686:	d81b      	bhi.n	80076c0 <UART_SetConfig+0x2b8>
 8007688:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800768c:	d00c      	beq.n	80076a8 <UART_SetConfig+0x2a0>
 800768e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007692:	d815      	bhi.n	80076c0 <UART_SetConfig+0x2b8>
 8007694:	2b00      	cmp	r3, #0
 8007696:	d003      	beq.n	80076a0 <UART_SetConfig+0x298>
 8007698:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800769c:	d008      	beq.n	80076b0 <UART_SetConfig+0x2a8>
 800769e:	e00f      	b.n	80076c0 <UART_SetConfig+0x2b8>
 80076a0:	2300      	movs	r3, #0
 80076a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076a6:	e022      	b.n	80076ee <UART_SetConfig+0x2e6>
 80076a8:	2302      	movs	r3, #2
 80076aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076ae:	e01e      	b.n	80076ee <UART_SetConfig+0x2e6>
 80076b0:	2304      	movs	r3, #4
 80076b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076b6:	e01a      	b.n	80076ee <UART_SetConfig+0x2e6>
 80076b8:	2308      	movs	r3, #8
 80076ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076be:	e016      	b.n	80076ee <UART_SetConfig+0x2e6>
 80076c0:	2310      	movs	r3, #16
 80076c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076c6:	e012      	b.n	80076ee <UART_SetConfig+0x2e6>
 80076c8:	efff69f3 	.word	0xefff69f3
 80076cc:	40008000 	.word	0x40008000
 80076d0:	40013800 	.word	0x40013800
 80076d4:	40021000 	.word	0x40021000
 80076d8:	40004400 	.word	0x40004400
 80076dc:	40004800 	.word	0x40004800
 80076e0:	40004c00 	.word	0x40004c00
 80076e4:	40005000 	.word	0x40005000
 80076e8:	2310      	movs	r3, #16
 80076ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a9f      	ldr	r2, [pc, #636]	@ (8007970 <UART_SetConfig+0x568>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d17a      	bne.n	80077ee <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80076f8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80076fc:	2b08      	cmp	r3, #8
 80076fe:	d824      	bhi.n	800774a <UART_SetConfig+0x342>
 8007700:	a201      	add	r2, pc, #4	@ (adr r2, 8007708 <UART_SetConfig+0x300>)
 8007702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007706:	bf00      	nop
 8007708:	0800772d 	.word	0x0800772d
 800770c:	0800774b 	.word	0x0800774b
 8007710:	08007735 	.word	0x08007735
 8007714:	0800774b 	.word	0x0800774b
 8007718:	0800773b 	.word	0x0800773b
 800771c:	0800774b 	.word	0x0800774b
 8007720:	0800774b 	.word	0x0800774b
 8007724:	0800774b 	.word	0x0800774b
 8007728:	08007743 	.word	0x08007743
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800772c:	f7fd fa76 	bl	8004c1c <HAL_RCC_GetPCLK1Freq>
 8007730:	61f8      	str	r0, [r7, #28]
        break;
 8007732:	e010      	b.n	8007756 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007734:	4b8f      	ldr	r3, [pc, #572]	@ (8007974 <UART_SetConfig+0x56c>)
 8007736:	61fb      	str	r3, [r7, #28]
        break;
 8007738:	e00d      	b.n	8007756 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800773a:	f7fd f9d7 	bl	8004aec <HAL_RCC_GetSysClockFreq>
 800773e:	61f8      	str	r0, [r7, #28]
        break;
 8007740:	e009      	b.n	8007756 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007742:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007746:	61fb      	str	r3, [r7, #28]
        break;
 8007748:	e005      	b.n	8007756 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800774a:	2300      	movs	r3, #0
 800774c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800774e:	2301      	movs	r3, #1
 8007750:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007754:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007756:	69fb      	ldr	r3, [r7, #28]
 8007758:	2b00      	cmp	r3, #0
 800775a:	f000 80fb 	beq.w	8007954 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	685a      	ldr	r2, [r3, #4]
 8007762:	4613      	mov	r3, r2
 8007764:	005b      	lsls	r3, r3, #1
 8007766:	4413      	add	r3, r2
 8007768:	69fa      	ldr	r2, [r7, #28]
 800776a:	429a      	cmp	r2, r3
 800776c:	d305      	bcc.n	800777a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007774:	69fa      	ldr	r2, [r7, #28]
 8007776:	429a      	cmp	r2, r3
 8007778:	d903      	bls.n	8007782 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007780:	e0e8      	b.n	8007954 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	2200      	movs	r2, #0
 8007786:	461c      	mov	r4, r3
 8007788:	4615      	mov	r5, r2
 800778a:	f04f 0200 	mov.w	r2, #0
 800778e:	f04f 0300 	mov.w	r3, #0
 8007792:	022b      	lsls	r3, r5, #8
 8007794:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007798:	0222      	lsls	r2, r4, #8
 800779a:	68f9      	ldr	r1, [r7, #12]
 800779c:	6849      	ldr	r1, [r1, #4]
 800779e:	0849      	lsrs	r1, r1, #1
 80077a0:	2000      	movs	r0, #0
 80077a2:	4688      	mov	r8, r1
 80077a4:	4681      	mov	r9, r0
 80077a6:	eb12 0a08 	adds.w	sl, r2, r8
 80077aa:	eb43 0b09 	adc.w	fp, r3, r9
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	603b      	str	r3, [r7, #0]
 80077b6:	607a      	str	r2, [r7, #4]
 80077b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077bc:	4650      	mov	r0, sl
 80077be:	4659      	mov	r1, fp
 80077c0:	f7f9 f9f2 	bl	8000ba8 <__aeabi_uldivmod>
 80077c4:	4602      	mov	r2, r0
 80077c6:	460b      	mov	r3, r1
 80077c8:	4613      	mov	r3, r2
 80077ca:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80077cc:	69bb      	ldr	r3, [r7, #24]
 80077ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077d2:	d308      	bcc.n	80077e6 <UART_SetConfig+0x3de>
 80077d4:	69bb      	ldr	r3, [r7, #24]
 80077d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80077da:	d204      	bcs.n	80077e6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	69ba      	ldr	r2, [r7, #24]
 80077e2:	60da      	str	r2, [r3, #12]
 80077e4:	e0b6      	b.n	8007954 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80077ec:	e0b2      	b.n	8007954 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	69db      	ldr	r3, [r3, #28]
 80077f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077f6:	d15e      	bne.n	80078b6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80077f8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80077fc:	2b08      	cmp	r3, #8
 80077fe:	d828      	bhi.n	8007852 <UART_SetConfig+0x44a>
 8007800:	a201      	add	r2, pc, #4	@ (adr r2, 8007808 <UART_SetConfig+0x400>)
 8007802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007806:	bf00      	nop
 8007808:	0800782d 	.word	0x0800782d
 800780c:	08007835 	.word	0x08007835
 8007810:	0800783d 	.word	0x0800783d
 8007814:	08007853 	.word	0x08007853
 8007818:	08007843 	.word	0x08007843
 800781c:	08007853 	.word	0x08007853
 8007820:	08007853 	.word	0x08007853
 8007824:	08007853 	.word	0x08007853
 8007828:	0800784b 	.word	0x0800784b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800782c:	f7fd f9f6 	bl	8004c1c <HAL_RCC_GetPCLK1Freq>
 8007830:	61f8      	str	r0, [r7, #28]
        break;
 8007832:	e014      	b.n	800785e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007834:	f7fd fa08 	bl	8004c48 <HAL_RCC_GetPCLK2Freq>
 8007838:	61f8      	str	r0, [r7, #28]
        break;
 800783a:	e010      	b.n	800785e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800783c:	4b4d      	ldr	r3, [pc, #308]	@ (8007974 <UART_SetConfig+0x56c>)
 800783e:	61fb      	str	r3, [r7, #28]
        break;
 8007840:	e00d      	b.n	800785e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007842:	f7fd f953 	bl	8004aec <HAL_RCC_GetSysClockFreq>
 8007846:	61f8      	str	r0, [r7, #28]
        break;
 8007848:	e009      	b.n	800785e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800784a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800784e:	61fb      	str	r3, [r7, #28]
        break;
 8007850:	e005      	b.n	800785e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007852:	2300      	movs	r3, #0
 8007854:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800785c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800785e:	69fb      	ldr	r3, [r7, #28]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d077      	beq.n	8007954 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	005a      	lsls	r2, r3, #1
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	085b      	lsrs	r3, r3, #1
 800786e:	441a      	add	r2, r3
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	fbb2 f3f3 	udiv	r3, r2, r3
 8007878:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800787a:	69bb      	ldr	r3, [r7, #24]
 800787c:	2b0f      	cmp	r3, #15
 800787e:	d916      	bls.n	80078ae <UART_SetConfig+0x4a6>
 8007880:	69bb      	ldr	r3, [r7, #24]
 8007882:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007886:	d212      	bcs.n	80078ae <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007888:	69bb      	ldr	r3, [r7, #24]
 800788a:	b29b      	uxth	r3, r3
 800788c:	f023 030f 	bic.w	r3, r3, #15
 8007890:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007892:	69bb      	ldr	r3, [r7, #24]
 8007894:	085b      	lsrs	r3, r3, #1
 8007896:	b29b      	uxth	r3, r3
 8007898:	f003 0307 	and.w	r3, r3, #7
 800789c:	b29a      	uxth	r2, r3
 800789e:	8afb      	ldrh	r3, [r7, #22]
 80078a0:	4313      	orrs	r3, r2
 80078a2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	8afa      	ldrh	r2, [r7, #22]
 80078aa:	60da      	str	r2, [r3, #12]
 80078ac:	e052      	b.n	8007954 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80078b4:	e04e      	b.n	8007954 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80078b6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80078ba:	2b08      	cmp	r3, #8
 80078bc:	d827      	bhi.n	800790e <UART_SetConfig+0x506>
 80078be:	a201      	add	r2, pc, #4	@ (adr r2, 80078c4 <UART_SetConfig+0x4bc>)
 80078c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c4:	080078e9 	.word	0x080078e9
 80078c8:	080078f1 	.word	0x080078f1
 80078cc:	080078f9 	.word	0x080078f9
 80078d0:	0800790f 	.word	0x0800790f
 80078d4:	080078ff 	.word	0x080078ff
 80078d8:	0800790f 	.word	0x0800790f
 80078dc:	0800790f 	.word	0x0800790f
 80078e0:	0800790f 	.word	0x0800790f
 80078e4:	08007907 	.word	0x08007907
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078e8:	f7fd f998 	bl	8004c1c <HAL_RCC_GetPCLK1Freq>
 80078ec:	61f8      	str	r0, [r7, #28]
        break;
 80078ee:	e014      	b.n	800791a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80078f0:	f7fd f9aa 	bl	8004c48 <HAL_RCC_GetPCLK2Freq>
 80078f4:	61f8      	str	r0, [r7, #28]
        break;
 80078f6:	e010      	b.n	800791a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078f8:	4b1e      	ldr	r3, [pc, #120]	@ (8007974 <UART_SetConfig+0x56c>)
 80078fa:	61fb      	str	r3, [r7, #28]
        break;
 80078fc:	e00d      	b.n	800791a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078fe:	f7fd f8f5 	bl	8004aec <HAL_RCC_GetSysClockFreq>
 8007902:	61f8      	str	r0, [r7, #28]
        break;
 8007904:	e009      	b.n	800791a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007906:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800790a:	61fb      	str	r3, [r7, #28]
        break;
 800790c:	e005      	b.n	800791a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800790e:	2300      	movs	r3, #0
 8007910:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007918:	bf00      	nop
    }

    if (pclk != 0U)
 800791a:	69fb      	ldr	r3, [r7, #28]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d019      	beq.n	8007954 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	085a      	lsrs	r2, r3, #1
 8007926:	69fb      	ldr	r3, [r7, #28]
 8007928:	441a      	add	r2, r3
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007932:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007934:	69bb      	ldr	r3, [r7, #24]
 8007936:	2b0f      	cmp	r3, #15
 8007938:	d909      	bls.n	800794e <UART_SetConfig+0x546>
 800793a:	69bb      	ldr	r3, [r7, #24]
 800793c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007940:	d205      	bcs.n	800794e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007942:	69bb      	ldr	r3, [r7, #24]
 8007944:	b29a      	uxth	r2, r3
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	60da      	str	r2, [r3, #12]
 800794c:	e002      	b.n	8007954 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2200      	movs	r2, #0
 8007958:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2200      	movs	r2, #0
 800795e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007960:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007964:	4618      	mov	r0, r3
 8007966:	3728      	adds	r7, #40	@ 0x28
 8007968:	46bd      	mov	sp, r7
 800796a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800796e:	bf00      	nop
 8007970:	40008000 	.word	0x40008000
 8007974:	00f42400 	.word	0x00f42400

08007978 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007978:	b480      	push	{r7}
 800797a:	b083      	sub	sp, #12
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007984:	f003 0308 	and.w	r3, r3, #8
 8007988:	2b00      	cmp	r3, #0
 800798a:	d00a      	beq.n	80079a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	430a      	orrs	r2, r1
 80079a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079a6:	f003 0301 	and.w	r3, r3, #1
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d00a      	beq.n	80079c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	430a      	orrs	r2, r1
 80079c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079c8:	f003 0302 	and.w	r3, r3, #2
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d00a      	beq.n	80079e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	430a      	orrs	r2, r1
 80079e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079ea:	f003 0304 	and.w	r3, r3, #4
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d00a      	beq.n	8007a08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	430a      	orrs	r2, r1
 8007a06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a0c:	f003 0310 	and.w	r3, r3, #16
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d00a      	beq.n	8007a2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	430a      	orrs	r2, r1
 8007a28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a2e:	f003 0320 	and.w	r3, r3, #32
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d00a      	beq.n	8007a4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	430a      	orrs	r2, r1
 8007a4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d01a      	beq.n	8007a8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	430a      	orrs	r2, r1
 8007a6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a76:	d10a      	bne.n	8007a8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	430a      	orrs	r2, r1
 8007a8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d00a      	beq.n	8007ab0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	430a      	orrs	r2, r1
 8007aae:	605a      	str	r2, [r3, #4]
  }
}
 8007ab0:	bf00      	nop
 8007ab2:	370c      	adds	r7, #12
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr

08007abc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b098      	sub	sp, #96	@ 0x60
 8007ac0:	af02      	add	r7, sp, #8
 8007ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007acc:	f7fb f83c 	bl	8002b48 <HAL_GetTick>
 8007ad0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f003 0308 	and.w	r3, r3, #8
 8007adc:	2b08      	cmp	r3, #8
 8007ade:	d12e      	bne.n	8007b3e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ae0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007ae4:	9300      	str	r3, [sp, #0]
 8007ae6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ae8:	2200      	movs	r2, #0
 8007aea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 f88c 	bl	8007c0c <UART_WaitOnFlagUntilTimeout>
 8007af4:	4603      	mov	r3, r0
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d021      	beq.n	8007b3e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b02:	e853 3f00 	ldrex	r3, [r3]
 8007b06:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007b08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	461a      	mov	r2, r3
 8007b16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b18:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b1a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b1c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007b1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b20:	e841 2300 	strex	r3, r2, [r1]
 8007b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007b26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d1e6      	bne.n	8007afa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2220      	movs	r2, #32
 8007b30:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b3a:	2303      	movs	r3, #3
 8007b3c:	e062      	b.n	8007c04 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f003 0304 	and.w	r3, r3, #4
 8007b48:	2b04      	cmp	r3, #4
 8007b4a:	d149      	bne.n	8007be0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b4c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007b50:	9300      	str	r3, [sp, #0]
 8007b52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b54:	2200      	movs	r2, #0
 8007b56:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 f856 	bl	8007c0c <UART_WaitOnFlagUntilTimeout>
 8007b60:	4603      	mov	r3, r0
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d03c      	beq.n	8007be0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b6e:	e853 3f00 	ldrex	r3, [r3]
 8007b72:	623b      	str	r3, [r7, #32]
   return(result);
 8007b74:	6a3b      	ldr	r3, [r7, #32]
 8007b76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	461a      	mov	r2, r3
 8007b82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b84:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b86:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b88:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b8c:	e841 2300 	strex	r3, r2, [r1]
 8007b90:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d1e6      	bne.n	8007b66 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	3308      	adds	r3, #8
 8007b9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	e853 3f00 	ldrex	r3, [r3]
 8007ba6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f023 0301 	bic.w	r3, r3, #1
 8007bae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	3308      	adds	r3, #8
 8007bb6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007bb8:	61fa      	str	r2, [r7, #28]
 8007bba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bbc:	69b9      	ldr	r1, [r7, #24]
 8007bbe:	69fa      	ldr	r2, [r7, #28]
 8007bc0:	e841 2300 	strex	r3, r2, [r1]
 8007bc4:	617b      	str	r3, [r7, #20]
   return(result);
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d1e5      	bne.n	8007b98 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2220      	movs	r2, #32
 8007bd0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007bdc:	2303      	movs	r3, #3
 8007bde:	e011      	b.n	8007c04 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2220      	movs	r2, #32
 8007be4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2220      	movs	r2, #32
 8007bea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007c02:	2300      	movs	r3, #0
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3758      	adds	r7, #88	@ 0x58
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b084      	sub	sp, #16
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	60f8      	str	r0, [r7, #12]
 8007c14:	60b9      	str	r1, [r7, #8]
 8007c16:	603b      	str	r3, [r7, #0]
 8007c18:	4613      	mov	r3, r2
 8007c1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c1c:	e04f      	b.n	8007cbe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c1e:	69bb      	ldr	r3, [r7, #24]
 8007c20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007c24:	d04b      	beq.n	8007cbe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c26:	f7fa ff8f 	bl	8002b48 <HAL_GetTick>
 8007c2a:	4602      	mov	r2, r0
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	1ad3      	subs	r3, r2, r3
 8007c30:	69ba      	ldr	r2, [r7, #24]
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d302      	bcc.n	8007c3c <UART_WaitOnFlagUntilTimeout+0x30>
 8007c36:	69bb      	ldr	r3, [r7, #24]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d101      	bne.n	8007c40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007c3c:	2303      	movs	r3, #3
 8007c3e:	e04e      	b.n	8007cde <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f003 0304 	and.w	r3, r3, #4
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d037      	beq.n	8007cbe <UART_WaitOnFlagUntilTimeout+0xb2>
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	2b80      	cmp	r3, #128	@ 0x80
 8007c52:	d034      	beq.n	8007cbe <UART_WaitOnFlagUntilTimeout+0xb2>
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	2b40      	cmp	r3, #64	@ 0x40
 8007c58:	d031      	beq.n	8007cbe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	69db      	ldr	r3, [r3, #28]
 8007c60:	f003 0308 	and.w	r3, r3, #8
 8007c64:	2b08      	cmp	r3, #8
 8007c66:	d110      	bne.n	8007c8a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	2208      	movs	r2, #8
 8007c6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c70:	68f8      	ldr	r0, [r7, #12]
 8007c72:	f000 f8ff 	bl	8007e74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2208      	movs	r2, #8
 8007c7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2200      	movs	r2, #0
 8007c82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	e029      	b.n	8007cde <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	69db      	ldr	r3, [r3, #28]
 8007c90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c98:	d111      	bne.n	8007cbe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007ca2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ca4:	68f8      	ldr	r0, [r7, #12]
 8007ca6:	f000 f8e5 	bl	8007e74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2220      	movs	r2, #32
 8007cae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007cba:	2303      	movs	r3, #3
 8007cbc:	e00f      	b.n	8007cde <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	69da      	ldr	r2, [r3, #28]
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	4013      	ands	r3, r2
 8007cc8:	68ba      	ldr	r2, [r7, #8]
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	bf0c      	ite	eq
 8007cce:	2301      	moveq	r3, #1
 8007cd0:	2300      	movne	r3, #0
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	79fb      	ldrb	r3, [r7, #7]
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d0a0      	beq.n	8007c1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007cdc:	2300      	movs	r3, #0
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3710      	adds	r7, #16
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
	...

08007ce8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b097      	sub	sp, #92	@ 0x5c
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	4613      	mov	r3, r2
 8007cf4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	68ba      	ldr	r2, [r7, #8]
 8007cfa:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	88fa      	ldrh	r2, [r7, #6]
 8007d00:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	88fa      	ldrh	r2, [r7, #6]
 8007d08:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d1a:	d10e      	bne.n	8007d3a <UART_Start_Receive_IT+0x52>
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	691b      	ldr	r3, [r3, #16]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d105      	bne.n	8007d30 <UART_Start_Receive_IT+0x48>
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007d2a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007d2e:	e02d      	b.n	8007d8c <UART_Start_Receive_IT+0xa4>
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	22ff      	movs	r2, #255	@ 0xff
 8007d34:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007d38:	e028      	b.n	8007d8c <UART_Start_Receive_IT+0xa4>
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d10d      	bne.n	8007d5e <UART_Start_Receive_IT+0x76>
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	691b      	ldr	r3, [r3, #16]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d104      	bne.n	8007d54 <UART_Start_Receive_IT+0x6c>
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	22ff      	movs	r2, #255	@ 0xff
 8007d4e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007d52:	e01b      	b.n	8007d8c <UART_Start_Receive_IT+0xa4>
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	227f      	movs	r2, #127	@ 0x7f
 8007d58:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007d5c:	e016      	b.n	8007d8c <UART_Start_Receive_IT+0xa4>
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	689b      	ldr	r3, [r3, #8]
 8007d62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d66:	d10d      	bne.n	8007d84 <UART_Start_Receive_IT+0x9c>
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	691b      	ldr	r3, [r3, #16]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d104      	bne.n	8007d7a <UART_Start_Receive_IT+0x92>
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	227f      	movs	r2, #127	@ 0x7f
 8007d74:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007d78:	e008      	b.n	8007d8c <UART_Start_Receive_IT+0xa4>
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	223f      	movs	r2, #63	@ 0x3f
 8007d7e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007d82:	e003      	b.n	8007d8c <UART_Start_Receive_IT+0xa4>
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2200      	movs	r2, #0
 8007d88:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2222      	movs	r2, #34	@ 0x22
 8007d98:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	3308      	adds	r3, #8
 8007da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007da6:	e853 3f00 	ldrex	r3, [r3]
 8007daa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007dac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dae:	f043 0301 	orr.w	r3, r3, #1
 8007db2:	657b      	str	r3, [r7, #84]	@ 0x54
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	3308      	adds	r3, #8
 8007dba:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007dbc:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007dbe:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007dc2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007dc4:	e841 2300 	strex	r3, r2, [r1]
 8007dc8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007dca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d1e5      	bne.n	8007d9c <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007dd8:	d107      	bne.n	8007dea <UART_Start_Receive_IT+0x102>
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	691b      	ldr	r3, [r3, #16]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d103      	bne.n	8007dea <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	4a21      	ldr	r2, [pc, #132]	@ (8007e6c <UART_Start_Receive_IT+0x184>)
 8007de6:	669a      	str	r2, [r3, #104]	@ 0x68
 8007de8:	e002      	b.n	8007df0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	4a20      	ldr	r2, [pc, #128]	@ (8007e70 <UART_Start_Receive_IT+0x188>)
 8007dee:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	691b      	ldr	r3, [r3, #16]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d019      	beq.n	8007e2c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e00:	e853 3f00 	ldrex	r3, [r3]
 8007e04:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e08:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007e0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	461a      	mov	r2, r3
 8007e14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e16:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e18:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e1a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007e1c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007e1e:	e841 2300 	strex	r3, r2, [r1]
 8007e22:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007e24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d1e6      	bne.n	8007df8 <UART_Start_Receive_IT+0x110>
 8007e2a:	e018      	b.n	8007e5e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	e853 3f00 	ldrex	r3, [r3]
 8007e38:	613b      	str	r3, [r7, #16]
   return(result);
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	f043 0320 	orr.w	r3, r3, #32
 8007e40:	653b      	str	r3, [r7, #80]	@ 0x50
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	461a      	mov	r2, r3
 8007e48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e4a:	623b      	str	r3, [r7, #32]
 8007e4c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e4e:	69f9      	ldr	r1, [r7, #28]
 8007e50:	6a3a      	ldr	r2, [r7, #32]
 8007e52:	e841 2300 	strex	r3, r2, [r1]
 8007e56:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e58:	69bb      	ldr	r3, [r7, #24]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d1e6      	bne.n	8007e2c <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007e5e:	2300      	movs	r3, #0
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	375c      	adds	r7, #92	@ 0x5c
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr
 8007e6c:	08008179 	.word	0x08008179
 8007e70:	08007fbd 	.word	0x08007fbd

08007e74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b095      	sub	sp, #84	@ 0x54
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e84:	e853 3f00 	ldrex	r3, [r3]
 8007e88:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	461a      	mov	r2, r3
 8007e98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e9a:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e9c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e9e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007ea0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007ea2:	e841 2300 	strex	r3, r2, [r1]
 8007ea6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d1e6      	bne.n	8007e7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	3308      	adds	r3, #8
 8007eb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb6:	6a3b      	ldr	r3, [r7, #32]
 8007eb8:	e853 3f00 	ldrex	r3, [r3]
 8007ebc:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ebe:	69fb      	ldr	r3, [r7, #28]
 8007ec0:	f023 0301 	bic.w	r3, r3, #1
 8007ec4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	3308      	adds	r3, #8
 8007ecc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ece:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ed4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ed6:	e841 2300 	strex	r3, r2, [r1]
 8007eda:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d1e5      	bne.n	8007eae <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	d118      	bne.n	8007f1c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	e853 3f00 	ldrex	r3, [r3]
 8007ef6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	f023 0310 	bic.w	r3, r3, #16
 8007efe:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	461a      	mov	r2, r3
 8007f06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f08:	61bb      	str	r3, [r7, #24]
 8007f0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f0c:	6979      	ldr	r1, [r7, #20]
 8007f0e:	69ba      	ldr	r2, [r7, #24]
 8007f10:	e841 2300 	strex	r3, r2, [r1]
 8007f14:	613b      	str	r3, [r7, #16]
   return(result);
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d1e6      	bne.n	8007eea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2220      	movs	r2, #32
 8007f20:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2200      	movs	r2, #0
 8007f28:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007f30:	bf00      	nop
 8007f32:	3754      	adds	r7, #84	@ 0x54
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b084      	sub	sp, #16
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f48:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2200      	movs	r2, #0
 8007f56:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f5a:	68f8      	ldr	r0, [r7, #12]
 8007f5c:	f7ff fa3e 	bl	80073dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f60:	bf00      	nop
 8007f62:	3710      	adds	r7, #16
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b088      	sub	sp, #32
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	e853 3f00 	ldrex	r3, [r3]
 8007f7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f84:	61fb      	str	r3, [r7, #28]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	69fb      	ldr	r3, [r7, #28]
 8007f8e:	61bb      	str	r3, [r7, #24]
 8007f90:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f92:	6979      	ldr	r1, [r7, #20]
 8007f94:	69ba      	ldr	r2, [r7, #24]
 8007f96:	e841 2300 	strex	r3, r2, [r1]
 8007f9a:	613b      	str	r3, [r7, #16]
   return(result);
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d1e6      	bne.n	8007f70 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2220      	movs	r2, #32
 8007fa6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2200      	movs	r2, #0
 8007fac:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f7ff fa0a 	bl	80073c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fb4:	bf00      	nop
 8007fb6:	3720      	adds	r7, #32
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b09c      	sub	sp, #112	@ 0x70
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007fca:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fd4:	2b22      	cmp	r3, #34	@ 0x22
 8007fd6:	f040 80be 	bne.w	8008156 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007fe0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007fe4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007fe8:	b2d9      	uxtb	r1, r3
 8007fea:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007fee:	b2da      	uxtb	r2, r3
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ff4:	400a      	ands	r2, r1
 8007ff6:	b2d2      	uxtb	r2, r2
 8007ff8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ffe:	1c5a      	adds	r2, r3, #1
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800800a:	b29b      	uxth	r3, r3
 800800c:	3b01      	subs	r3, #1
 800800e:	b29a      	uxth	r2, r3
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800801c:	b29b      	uxth	r3, r3
 800801e:	2b00      	cmp	r3, #0
 8008020:	f040 80a3 	bne.w	800816a <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800802a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800802c:	e853 3f00 	ldrex	r3, [r3]
 8008030:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008032:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008034:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008038:	66bb      	str	r3, [r7, #104]	@ 0x68
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	461a      	mov	r2, r3
 8008040:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008042:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008044:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008046:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008048:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800804a:	e841 2300 	strex	r3, r2, [r1]
 800804e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008050:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008052:	2b00      	cmp	r3, #0
 8008054:	d1e6      	bne.n	8008024 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	3308      	adds	r3, #8
 800805c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800805e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008060:	e853 3f00 	ldrex	r3, [r3]
 8008064:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008068:	f023 0301 	bic.w	r3, r3, #1
 800806c:	667b      	str	r3, [r7, #100]	@ 0x64
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	3308      	adds	r3, #8
 8008074:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008076:	647a      	str	r2, [r7, #68]	@ 0x44
 8008078:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800807a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800807c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800807e:	e841 2300 	strex	r3, r2, [r1]
 8008082:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008084:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008086:	2b00      	cmp	r3, #0
 8008088:	d1e5      	bne.n	8008056 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2220      	movs	r2, #32
 800808e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2200      	movs	r2, #0
 8008096:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2200      	movs	r2, #0
 800809c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a34      	ldr	r2, [pc, #208]	@ (8008174 <UART_RxISR_8BIT+0x1b8>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d01f      	beq.n	80080e8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d018      	beq.n	80080e8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080be:	e853 3f00 	ldrex	r3, [r3]
 80080c2:	623b      	str	r3, [r7, #32]
   return(result);
 80080c4:	6a3b      	ldr	r3, [r7, #32]
 80080c6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80080ca:	663b      	str	r3, [r7, #96]	@ 0x60
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	461a      	mov	r2, r3
 80080d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80080d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80080d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80080da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080dc:	e841 2300 	strex	r3, r2, [r1]
 80080e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80080e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d1e6      	bne.n	80080b6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d12e      	bne.n	800814e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2200      	movs	r2, #0
 80080f4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	e853 3f00 	ldrex	r3, [r3]
 8008102:	60fb      	str	r3, [r7, #12]
   return(result);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f023 0310 	bic.w	r3, r3, #16
 800810a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	461a      	mov	r2, r3
 8008112:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008114:	61fb      	str	r3, [r7, #28]
 8008116:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008118:	69b9      	ldr	r1, [r7, #24]
 800811a:	69fa      	ldr	r2, [r7, #28]
 800811c:	e841 2300 	strex	r3, r2, [r1]
 8008120:	617b      	str	r3, [r7, #20]
   return(result);
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d1e6      	bne.n	80080f6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	69db      	ldr	r3, [r3, #28]
 800812e:	f003 0310 	and.w	r3, r3, #16
 8008132:	2b10      	cmp	r3, #16
 8008134:	d103      	bne.n	800813e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	2210      	movs	r2, #16
 800813c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008144:	4619      	mov	r1, r3
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f7ff f952 	bl	80073f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800814c:	e00d      	b.n	800816a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f7f9 fa46 	bl	80015e0 <HAL_UART_RxCpltCallback>
}
 8008154:	e009      	b.n	800816a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	8b1b      	ldrh	r3, [r3, #24]
 800815c:	b29a      	uxth	r2, r3
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f042 0208 	orr.w	r2, r2, #8
 8008166:	b292      	uxth	r2, r2
 8008168:	831a      	strh	r2, [r3, #24]
}
 800816a:	bf00      	nop
 800816c:	3770      	adds	r7, #112	@ 0x70
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}
 8008172:	bf00      	nop
 8008174:	40008000 	.word	0x40008000

08008178 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b09c      	sub	sp, #112	@ 0x70
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008186:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008190:	2b22      	cmp	r3, #34	@ 0x22
 8008192:	f040 80be 	bne.w	8008312 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800819c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081a4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80081a6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80081aa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80081ae:	4013      	ands	r3, r2
 80081b0:	b29a      	uxth	r2, r3
 80081b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80081b4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081ba:	1c9a      	adds	r2, r3, #2
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	3b01      	subs	r3, #1
 80081ca:	b29a      	uxth	r2, r3
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80081d8:	b29b      	uxth	r3, r3
 80081da:	2b00      	cmp	r3, #0
 80081dc:	f040 80a3 	bne.w	8008326 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80081e8:	e853 3f00 	ldrex	r3, [r3]
 80081ec:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80081ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80081f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80081f4:	667b      	str	r3, [r7, #100]	@ 0x64
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	461a      	mov	r2, r3
 80081fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80081fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8008200:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008202:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008204:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008206:	e841 2300 	strex	r3, r2, [r1]
 800820a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800820c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800820e:	2b00      	cmp	r3, #0
 8008210:	d1e6      	bne.n	80081e0 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	3308      	adds	r3, #8
 8008218:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800821a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800821c:	e853 3f00 	ldrex	r3, [r3]
 8008220:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008224:	f023 0301 	bic.w	r3, r3, #1
 8008228:	663b      	str	r3, [r7, #96]	@ 0x60
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	3308      	adds	r3, #8
 8008230:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008232:	643a      	str	r2, [r7, #64]	@ 0x40
 8008234:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008236:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008238:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800823a:	e841 2300 	strex	r3, r2, [r1]
 800823e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008242:	2b00      	cmp	r3, #0
 8008244:	d1e5      	bne.n	8008212 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2220      	movs	r2, #32
 800824a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2200      	movs	r2, #0
 8008252:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2200      	movs	r2, #0
 8008258:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a34      	ldr	r2, [pc, #208]	@ (8008330 <UART_RxISR_16BIT+0x1b8>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d01f      	beq.n	80082a4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800826e:	2b00      	cmp	r3, #0
 8008270:	d018      	beq.n	80082a4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008278:	6a3b      	ldr	r3, [r7, #32]
 800827a:	e853 3f00 	ldrex	r3, [r3]
 800827e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008280:	69fb      	ldr	r3, [r7, #28]
 8008282:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008286:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	461a      	mov	r2, r3
 800828e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008290:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008292:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008294:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008296:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008298:	e841 2300 	strex	r3, r2, [r1]
 800829c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800829e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d1e6      	bne.n	8008272 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d12e      	bne.n	800830a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2200      	movs	r2, #0
 80082b0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	e853 3f00 	ldrex	r3, [r3]
 80082be:	60bb      	str	r3, [r7, #8]
   return(result);
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	f023 0310 	bic.w	r3, r3, #16
 80082c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	461a      	mov	r2, r3
 80082ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80082d0:	61bb      	str	r3, [r7, #24]
 80082d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d4:	6979      	ldr	r1, [r7, #20]
 80082d6:	69ba      	ldr	r2, [r7, #24]
 80082d8:	e841 2300 	strex	r3, r2, [r1]
 80082dc:	613b      	str	r3, [r7, #16]
   return(result);
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d1e6      	bne.n	80082b2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	69db      	ldr	r3, [r3, #28]
 80082ea:	f003 0310 	and.w	r3, r3, #16
 80082ee:	2b10      	cmp	r3, #16
 80082f0:	d103      	bne.n	80082fa <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	2210      	movs	r2, #16
 80082f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008300:	4619      	mov	r1, r3
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f7ff f874 	bl	80073f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008308:	e00d      	b.n	8008326 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f7f9 f968 	bl	80015e0 <HAL_UART_RxCpltCallback>
}
 8008310:	e009      	b.n	8008326 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	8b1b      	ldrh	r3, [r3, #24]
 8008318:	b29a      	uxth	r2, r3
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f042 0208 	orr.w	r2, r2, #8
 8008322:	b292      	uxth	r2, r2
 8008324:	831a      	strh	r2, [r3, #24]
}
 8008326:	bf00      	nop
 8008328:	3770      	adds	r7, #112	@ 0x70
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
 800832e:	bf00      	nop
 8008330:	40008000 	.word	0x40008000

08008334 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008334:	b480      	push	{r7}
 8008336:	b083      	sub	sp, #12
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800833c:	bf00      	nop
 800833e:	370c      	adds	r7, #12
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr

08008348 <_vl53l5cx_poll_for_answer>:
		uint8_t					size,
		uint8_t					pos,
		uint16_t				address,
		uint8_t					mask,
		uint8_t					expected_value)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b084      	sub	sp, #16
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	4608      	mov	r0, r1
 8008352:	4611      	mov	r1, r2
 8008354:	461a      	mov	r2, r3
 8008356:	4603      	mov	r3, r0
 8008358:	70fb      	strb	r3, [r7, #3]
 800835a:	460b      	mov	r3, r1
 800835c:	70bb      	strb	r3, [r7, #2]
 800835e:	4613      	mov	r3, r2
 8008360:	803b      	strh	r3, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8008362:	2300      	movs	r3, #0
 8008364:	73fb      	strb	r3, [r7, #15]
	uint8_t timeout = 0;
 8008366:	2300      	movs	r3, #0
 8008368:	73bb      	strb	r3, [r7, #14]

	do {
		status |= VL53L5CX_RdMulti(&(p_dev->platform), address,
 800836a:	6878      	ldr	r0, [r7, #4]
				p_dev->temp_buffer, size);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f503 62a1 	add.w	r2, r3, #1288	@ 0x508
		status |= VL53L5CX_RdMulti(&(p_dev->platform), address,
 8008372:	78fb      	ldrb	r3, [r7, #3]
 8008374:	8839      	ldrh	r1, [r7, #0]
 8008376:	f7f9 fc01 	bl	8001b7c <VL53L5CX_RdMulti>
 800837a:	4603      	mov	r3, r0
 800837c:	461a      	mov	r2, r3
 800837e:	7bfb      	ldrb	r3, [r7, #15]
 8008380:	4313      	orrs	r3, r2
 8008382:	73fb      	strb	r3, [r7, #15]
		status |= VL53L5CX_WaitMs(&(p_dev->platform), 10);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	210a      	movs	r1, #10
 8008388:	4618      	mov	r0, r3
 800838a:	f7f9 fc57 	bl	8001c3c <VL53L5CX_WaitMs>
 800838e:	4603      	mov	r3, r0
 8008390:	461a      	mov	r2, r3
 8008392:	7bfb      	ldrb	r3, [r7, #15]
 8008394:	4313      	orrs	r3, r2
 8008396:	73fb      	strb	r3, [r7, #15]

		if(timeout >= (uint8_t)200)	/* 2s timeout */
 8008398:	7bbb      	ldrb	r3, [r7, #14]
 800839a:	2bc7      	cmp	r3, #199	@ 0xc7
 800839c:	d904      	bls.n	80083a8 <_vl53l5cx_poll_for_answer+0x60>
		{
			status |= (uint8_t)VL53L5CX_STATUS_TIMEOUT_ERROR;
 800839e:	7bfb      	ldrb	r3, [r7, #15]
 80083a0:	f043 0301 	orr.w	r3, r3, #1
 80083a4:	73fb      	strb	r3, [r7, #15]
			break;
 80083a6:	e01a      	b.n	80083de <_vl53l5cx_poll_for_answer+0x96>
		}else if((size >= (uint8_t)4) 
 80083a8:	78fb      	ldrb	r3, [r7, #3]
 80083aa:	2b03      	cmp	r3, #3
 80083ac:	d909      	bls.n	80083c2 <_vl53l5cx_poll_for_answer+0x7a>
                         && (p_dev->temp_buffer[2] >= (uint8_t)0x7f))
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f893 350a 	ldrb.w	r3, [r3, #1290]	@ 0x50a
 80083b4:	2b7e      	cmp	r3, #126	@ 0x7e
 80083b6:	d904      	bls.n	80083c2 <_vl53l5cx_poll_for_answer+0x7a>
		{
			status |= VL53L5CX_MCU_ERROR;
 80083b8:	7bfb      	ldrb	r3, [r7, #15]
 80083ba:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80083be:	73fb      	strb	r3, [r7, #15]
			break;
 80083c0:	e00d      	b.n	80083de <_vl53l5cx_poll_for_answer+0x96>
		}
		else
		{
			timeout++;
 80083c2:	7bbb      	ldrb	r3, [r7, #14]
 80083c4:	3301      	adds	r3, #1
 80083c6:	73bb      	strb	r3, [r7, #14]
		}
	}while ((p_dev->temp_buffer[pos] & mask) != expected_value);
 80083c8:	78bb      	ldrb	r3, [r7, #2]
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	4413      	add	r3, r2
 80083ce:	f893 2508 	ldrb.w	r2, [r3, #1288]	@ 0x508
 80083d2:	7e3b      	ldrb	r3, [r7, #24]
 80083d4:	4013      	ands	r3, r2
 80083d6:	b2db      	uxtb	r3, r3
 80083d8:	7f3a      	ldrb	r2, [r7, #28]
 80083da:	429a      	cmp	r2, r3
 80083dc:	d1c5      	bne.n	800836a <_vl53l5cx_poll_for_answer+0x22>

	return status;
 80083de:	7bfb      	ldrb	r3, [r7, #15]
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3710      	adds	r7, #16
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <_vl53l5cx_poll_for_mcu_boot>:
 * Inner function, not available outside this file. This function is used to
 * wait for the MCU to boot.
 */
static uint8_t _vl53l5cx_poll_for_mcu_boot(
              VL53L5CX_Configuration      *p_dev)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b084      	sub	sp, #16
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
   uint8_t go2_status0, go2_status1, status = VL53L5CX_STATUS_OK;
 80083f0:	2300      	movs	r3, #0
 80083f2:	73fb      	strb	r3, [r7, #15]
   uint16_t timeout = 0;
 80083f4:	2300      	movs	r3, #0
 80083f6:	81bb      	strh	r3, [r7, #12]

   do {
		status |= VL53L5CX_RdByte(&(p_dev->platform), 0x06, &go2_status0);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f107 020b 	add.w	r2, r7, #11
 80083fe:	2106      	movs	r1, #6
 8008400:	4618      	mov	r0, r3
 8008402:	f7f9 fb40 	bl	8001a86 <VL53L5CX_RdByte>
 8008406:	4603      	mov	r3, r0
 8008408:	461a      	mov	r2, r3
 800840a:	7bfb      	ldrb	r3, [r7, #15]
 800840c:	4313      	orrs	r3, r2
 800840e:	73fb      	strb	r3, [r7, #15]
		if((go2_status0 & (uint8_t)0x80) != (uint8_t)0){
 8008410:	7afb      	ldrb	r3, [r7, #11]
 8008412:	b25b      	sxtb	r3, r3
 8008414:	2b00      	cmp	r3, #0
 8008416:	da10      	bge.n	800843a <_vl53l5cx_poll_for_mcu_boot+0x52>
			status |= VL53L5CX_RdByte(&(p_dev->platform), 0x07, &go2_status1);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f107 020a 	add.w	r2, r7, #10
 800841e:	2107      	movs	r1, #7
 8008420:	4618      	mov	r0, r3
 8008422:	f7f9 fb30 	bl	8001a86 <VL53L5CX_RdByte>
 8008426:	4603      	mov	r3, r0
 8008428:	461a      	mov	r2, r3
 800842a:	7bfb      	ldrb	r3, [r7, #15]
 800842c:	4313      	orrs	r3, r2
 800842e:	73fb      	strb	r3, [r7, #15]
			status |= go2_status1;
 8008430:	7aba      	ldrb	r2, [r7, #10]
 8008432:	7bfb      	ldrb	r3, [r7, #15]
 8008434:	4313      	orrs	r3, r2
 8008436:	73fb      	strb	r3, [r7, #15]
			break;
 8008438:	e012      	b.n	8008460 <_vl53l5cx_poll_for_mcu_boot+0x78>
		}
		(void)VL53L5CX_WaitMs(&(p_dev->platform), 1);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2101      	movs	r1, #1
 800843e:	4618      	mov	r0, r3
 8008440:	f7f9 fbfc 	bl	8001c3c <VL53L5CX_WaitMs>
		timeout++;
 8008444:	89bb      	ldrh	r3, [r7, #12]
 8008446:	3301      	adds	r3, #1
 8008448:	81bb      	strh	r3, [r7, #12]

		if((go2_status0 & (uint8_t)0x1) != (uint8_t)0){
 800844a:	7afb      	ldrb	r3, [r7, #11]
 800844c:	f003 0301 	and.w	r3, r3, #1
 8008450:	2b00      	cmp	r3, #0
 8008452:	d104      	bne.n	800845e <_vl53l5cx_poll_for_mcu_boot+0x76>
			break;
		}

	}while (timeout < (uint16_t)500);
 8008454:	89bb      	ldrh	r3, [r7, #12]
 8008456:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800845a:	d3cd      	bcc.n	80083f8 <_vl53l5cx_poll_for_mcu_boot+0x10>
 800845c:	e000      	b.n	8008460 <_vl53l5cx_poll_for_mcu_boot+0x78>
			break;
 800845e:	bf00      	nop

   return status;
 8008460:	7bfb      	ldrb	r3, [r7, #15]
}
 8008462:	4618      	mov	r0, r3
 8008464:	3710      	adds	r7, #16
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
	...

0800846c <_vl53l5cx_send_offset_data>:
 */

static uint8_t _vl53l5cx_send_offset_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t						resolution)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b0ea      	sub	sp, #424	@ 0x1a8
 8008470:	af02      	add	r7, sp, #8
 8008472:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8008476:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800847a:	6018      	str	r0, [r3, #0]
 800847c:	460a      	mov	r2, r1
 800847e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8008482:	f2a3 139d 	subw	r3, r3, #413	@ 0x19d
 8008486:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8008488:	2300      	movs	r3, #0
 800848a:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
	uint32_t signal_grid[64];
	int16_t range_grid[64];
	uint8_t dss_4x4[] = {0x0F, 0x04, 0x04, 0x00, 0x08, 0x10, 0x10, 0x07};
 800848e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8008492:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8008496:	4ad9      	ldr	r2, [pc, #868]	@ (80087fc <_vl53l5cx_send_offset_data+0x390>)
 8008498:	e892 0003 	ldmia.w	r2, {r0, r1}
 800849c:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0F, 0x03, 0x01, 0x01, 0xE4};
 80084a0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80084a4:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80084a8:	4ad5      	ldr	r2, [pc, #852]	@ (8008800 <_vl53l5cx_send_offset_data+0x394>)
 80084aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80084ae:	e883 0003 	stmia.w	r3, {r0, r1}
	int8_t i, j;
	uint16_t k;

	(void)memcpy(p_dev->temp_buffer,
 80084b2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80084b6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f503 60a1 	add.w	r0, r3, #1288	@ 0x508
               p_dev->offset_data, VL53L5CX_OFFSET_BUFFER_SIZE);
 80084c0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80084c4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	3318      	adds	r3, #24
	(void)memcpy(p_dev->temp_buffer,
 80084cc:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 80084d0:	4619      	mov	r1, r3
 80084d2:	f002 fcc0 	bl	800ae56 <memcpy>

	/* Data extrapolation is required for 4X4 offset */
	if(resolution == (uint8_t)VL53L5CX_RESOLUTION_4X4){
 80084d6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80084da:	f2a3 139d 	subw	r3, r3, #413	@ 0x19d
 80084de:	781b      	ldrb	r3, [r3, #0]
 80084e0:	2b10      	cmp	r3, #16
 80084e2:	f040 8122 	bne.w	800872a <_vl53l5cx_send_offset_data+0x2be>
		(void)memcpy(&(p_dev->temp_buffer[0x10]), dss_4x4, sizeof(dss_4x4));
 80084e6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80084ea:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f503 62a3 	add.w	r2, r3, #1304	@ 0x518
 80084f4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80084f8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80084fc:	cb03      	ldmia	r3!, {r0, r1}
 80084fe:	6010      	str	r0, [r2, #0]
 8008500:	6051      	str	r1, [r2, #4]
		VL53L5CX_SwapBuffer(p_dev->temp_buffer, VL53L5CX_OFFSET_BUFFER_SIZE);
 8008502:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8008506:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8008510:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 8008514:	4618      	mov	r0, r3
 8008516:	f7f9 fb5b 	bl	8001bd0 <VL53L5CX_SwapBuffer>
		(void)memcpy(signal_grid,&(p_dev->temp_buffer[0x3C]),
 800851a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800851e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f203 5144 	addw	r1, r3, #1348	@ 0x544
 8008528:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800852c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008530:	4618      	mov	r0, r3
 8008532:	f002 fc90 	bl	800ae56 <memcpy>
			sizeof(signal_grid));
		(void)memcpy(range_grid,&(p_dev->temp_buffer[0x140]),
 8008536:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800853a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f503 61c9 	add.w	r1, r3, #1608	@ 0x648
 8008544:	f107 0318 	add.w	r3, r7, #24
 8008548:	2280      	movs	r2, #128	@ 0x80
 800854a:	4618      	mov	r0, r3
 800854c:	f002 fc83 	bl	800ae56 <memcpy>
			sizeof(range_grid));

		for (j = 0; j < (int8_t)4; j++)
 8008550:	2300      	movs	r3, #0
 8008552:	f887 319e 	strb.w	r3, [r7, #414]	@ 0x19e
 8008556:	e0ac      	b.n	80086b2 <_vl53l5cx_send_offset_data+0x246>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 8008558:	2300      	movs	r3, #0
 800855a:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f
 800855e:	e09c      	b.n	800869a <_vl53l5cx_send_offset_data+0x22e>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+ (int8_t)0]
 8008560:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 8008564:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8008568:	00db      	lsls	r3, r3, #3
 800856a:	4413      	add	r3, r2
 800856c:	005a      	lsls	r2, r3, #1
 800856e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8008572:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008576:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+(int8_t)1]
 800857a:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 800857e:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8008582:	00db      	lsls	r3, r3, #3
 8008584:	440b      	add	r3, r1
 8008586:	005b      	lsls	r3, r3, #1
 8008588:	1c59      	adds	r1, r3, #1
 800858a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800858e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008592:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008596:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)8]
 8008598:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 800859c:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 80085a0:	00db      	lsls	r3, r3, #3
 80085a2:	440b      	add	r3, r1
 80085a4:	3304      	adds	r3, #4
 80085a6:	0059      	lsls	r1, r3, #1
 80085a8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80085ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80085b4:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)9])
 80085b6:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 80085ba:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 80085be:	00db      	lsls	r3, r3, #3
 80085c0:	440b      	add	r3, r1
 80085c2:	005b      	lsls	r3, r3, #1
 80085c4:	f103 0109 	add.w	r1, r3, #9
 80085c8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80085cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80085d4:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 80085d6:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 80085da:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 80085de:	0092      	lsls	r2, r2, #2
 80085e0:	440a      	add	r2, r1
                                  /(uint32_t)4;
 80085e2:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 80085e4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80085e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				range_grid[i+(4*j)] =
				(range_grid[(2*i)+(16*j)]
 80085f0:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 80085f4:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 80085f8:	00db      	lsls	r3, r3, #3
 80085fa:	4413      	add	r3, r2
 80085fc:	005a      	lsls	r2, r3, #1
 80085fe:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8008602:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8008606:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800860a:	4619      	mov	r1, r3
				+ range_grid[(2*i)+(16*j)+1]
 800860c:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 8008610:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8008614:	00db      	lsls	r3, r3, #3
 8008616:	4413      	add	r3, r2
 8008618:	005b      	lsls	r3, r3, #1
 800861a:	1c5a      	adds	r2, r3, #1
 800861c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8008620:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8008624:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8008628:	440b      	add	r3, r1
				+ range_grid[(2*i)+(16*j)+8]
 800862a:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 800862e:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 8008632:	00d2      	lsls	r2, r2, #3
 8008634:	440a      	add	r2, r1
 8008636:	3204      	adds	r2, #4
 8008638:	0051      	lsls	r1, r2, #1
 800863a:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 800863e:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 8008642:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8008646:	4413      	add	r3, r2
				+ range_grid[(2*i)+(16*j)+9])
 8008648:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 800864c:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 8008650:	00d2      	lsls	r2, r2, #3
 8008652:	440a      	add	r2, r1
 8008654:	0052      	lsls	r2, r2, #1
 8008656:	f102 0109 	add.w	r1, r2, #9
 800865a:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 800865e:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 8008662:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8008666:	4413      	add	r3, r2
                                  /(int16_t)4;
 8008668:	2b00      	cmp	r3, #0
 800866a:	da00      	bge.n	800866e <_vl53l5cx_send_offset_data+0x202>
 800866c:	3303      	adds	r3, #3
 800866e:	109b      	asrs	r3, r3, #2
 8008670:	4619      	mov	r1, r3
				range_grid[i+(4*j)] =
 8008672:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 8008676:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 800867a:	009b      	lsls	r3, r3, #2
 800867c:	441a      	add	r2, r3
 800867e:	b209      	sxth	r1, r1
 8008680:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8008684:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8008688:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (i = 0; i < (int8_t)4 ; i++)
 800868c:	f997 319f 	ldrsb.w	r3, [r7, #415]	@ 0x19f
 8008690:	b2db      	uxtb	r3, r3
 8008692:	3301      	adds	r3, #1
 8008694:	b2db      	uxtb	r3, r3
 8008696:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f
 800869a:	f997 319f 	ldrsb.w	r3, [r7, #415]	@ 0x19f
 800869e:	2b03      	cmp	r3, #3
 80086a0:	f77f af5e 	ble.w	8008560 <_vl53l5cx_send_offset_data+0xf4>
		for (j = 0; j < (int8_t)4; j++)
 80086a4:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 80086a8:	b2db      	uxtb	r3, r3
 80086aa:	3301      	adds	r3, #1
 80086ac:	b2db      	uxtb	r3, r3
 80086ae:	f887 319e 	strb.w	r3, [r7, #414]	@ 0x19e
 80086b2:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 80086b6:	2b03      	cmp	r3, #3
 80086b8:	f77f af4e 	ble.w	8008558 <_vl53l5cx_send_offset_data+0xec>
			}
		}
	    (void)memset(&range_grid[0x10], 0, (uint16_t)96);
 80086bc:	f107 0318 	add.w	r3, r7, #24
 80086c0:	3320      	adds	r3, #32
 80086c2:	2260      	movs	r2, #96	@ 0x60
 80086c4:	2100      	movs	r1, #0
 80086c6:	4618      	mov	r0, r3
 80086c8:	f002 fb8c 	bl	800ade4 <memset>
	    (void)memset(&signal_grid[0x10], 0, (uint16_t)192);
 80086cc:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80086d0:	3340      	adds	r3, #64	@ 0x40
 80086d2:	22c0      	movs	r2, #192	@ 0xc0
 80086d4:	2100      	movs	r1, #0
 80086d6:	4618      	mov	r0, r3
 80086d8:	f002 fb84 	bl	800ade4 <memset>
            (void)memcpy(&(p_dev->temp_buffer[0x3C]),
 80086dc:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80086e0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f203 5344 	addw	r3, r3, #1348	@ 0x544
 80086ea:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 80086ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80086f2:	4618      	mov	r0, r3
 80086f4:	f002 fbaf 	bl	800ae56 <memcpy>
		signal_grid, sizeof(signal_grid));
            (void)memcpy(&(p_dev->temp_buffer[0x140]),
 80086f8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80086fc:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f503 63c9 	add.w	r3, r3, #1608	@ 0x648
 8008706:	f107 0118 	add.w	r1, r7, #24
 800870a:	2280      	movs	r2, #128	@ 0x80
 800870c:	4618      	mov	r0, r3
 800870e:	f002 fba2 	bl	800ae56 <memcpy>
		range_grid, sizeof(range_grid));
            VL53L5CX_SwapBuffer(p_dev->temp_buffer, VL53L5CX_OFFSET_BUFFER_SIZE);
 8008712:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8008716:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8008720:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 8008724:	4618      	mov	r0, r3
 8008726:	f7f9 fa53 	bl	8001bd0 <VL53L5CX_SwapBuffer>
	}

	for(k = 0; k < (VL53L5CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 800872a:	2300      	movs	r3, #0
 800872c:	f8a7 319c 	strh.w	r3, [r7, #412]	@ 0x19c
 8008730:	e01b      	b.n	800876a <_vl53l5cx_send_offset_data+0x2fe>
	{
		p_dev->temp_buffer[k] = p_dev->temp_buffer[k + (uint16_t)8];
 8008732:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 8008736:	f103 0208 	add.w	r2, r3, #8
 800873a:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 800873e:	f507 71d0 	add.w	r1, r7, #416	@ 0x1a0
 8008742:	f5a1 71ce 	sub.w	r1, r1, #412	@ 0x19c
 8008746:	6809      	ldr	r1, [r1, #0]
 8008748:	440a      	add	r2, r1
 800874a:	f892 1508 	ldrb.w	r1, [r2, #1288]	@ 0x508
 800874e:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8008752:	f5a2 72ce 	sub.w	r2, r2, #412	@ 0x19c
 8008756:	6812      	ldr	r2, [r2, #0]
 8008758:	4413      	add	r3, r2
 800875a:	460a      	mov	r2, r1
 800875c:	f883 2508 	strb.w	r2, [r3, #1288]	@ 0x508
	for(k = 0; k < (VL53L5CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 8008760:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 8008764:	3301      	adds	r3, #1
 8008766:	f8a7 319c 	strh.w	r3, [r7, #412]	@ 0x19c
 800876a:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 800876e:	f5b3 7ff2 	cmp.w	r3, #484	@ 0x1e4
 8008772:	d3de      	bcc.n	8008732 <_vl53l5cx_send_offset_data+0x2c6>
	}

	(void)memcpy(&(p_dev->temp_buffer[0x1E0]), footer, 8);
 8008774:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8008778:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f503 62dd 	add.w	r2, r3, #1768	@ 0x6e8
 8008782:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8008786:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800878a:	cb03      	ldmia	r3!, {r0, r1}
 800878c:	6010      	str	r0, [r2, #0]
 800878e:	6051      	str	r1, [r2, #4]
	status |= VL53L5CX_WrMulti(&(p_dev->platform), 0x2e18, p_dev->temp_buffer,
 8008790:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8008794:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8008798:	6818      	ldr	r0, [r3, #0]
 800879a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800879e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f503 62a1 	add.w	r2, r3, #1288	@ 0x508
 80087a8:	f44f 73f4 	mov.w	r3, #488	@ 0x1e8
 80087ac:	f642 6118 	movw	r1, #11800	@ 0x2e18
 80087b0:	f7f9 f9ba 	bl	8001b28 <VL53L5CX_WrMulti>
 80087b4:	4603      	mov	r3, r0
 80087b6:	461a      	mov	r2, r3
 80087b8:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 80087bc:	4313      	orrs	r3, r2
 80087be:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
		VL53L5CX_OFFSET_BUFFER_SIZE);
	status |=_vl53l5cx_poll_for_answer(p_dev, 4, 1,
 80087c2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80087c6:	f5a3 70ce 	sub.w	r0, r3, #412	@ 0x19c
 80087ca:	2303      	movs	r3, #3
 80087cc:	9301      	str	r3, [sp, #4]
 80087ce:	23ff      	movs	r3, #255	@ 0xff
 80087d0:	9300      	str	r3, [sp, #0]
 80087d2:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 80087d6:	2201      	movs	r2, #1
 80087d8:	2104      	movs	r1, #4
 80087da:	6800      	ldr	r0, [r0, #0]
 80087dc:	f7ff fdb4 	bl	8008348 <_vl53l5cx_poll_for_answer>
 80087e0:	4603      	mov	r3, r0
 80087e2:	461a      	mov	r2, r3
 80087e4:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 80087e8:	4313      	orrs	r3, r2
 80087ea:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
		VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 80087ee:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	f507 77d0 	add.w	r7, r7, #416	@ 0x1a0
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}
 80087fc:	0800d330 	.word	0x0800d330
 8008800:	0800d338 	.word	0x0800d338

08008804 <_vl53l5cx_send_xtalk_data>:
 */

static uint8_t _vl53l5cx_send_xtalk_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				resolution)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b0ca      	sub	sp, #296	@ 0x128
 8008808:	af02      	add	r7, sp, #8
 800880a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800880e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8008812:	6018      	str	r0, [r3, #0]
 8008814:	460a      	mov	r2, r1
 8008816:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800881a:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 800881e:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8008820:	2300      	movs	r3, #0
 8008822:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
	uint8_t res4x4[] = {0x0F, 0x04, 0x04, 0x17, 0x08, 0x10, 0x10, 0x07};
 8008826:	4a9a      	ldr	r2, [pc, #616]	@ (8008a90 <_vl53l5cx_send_xtalk_data+0x28c>)
 8008828:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800882c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008830:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t dss_4x4[] = {0x00, 0x78, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08};
 8008834:	4a97      	ldr	r2, [pc, #604]	@ (8008a94 <_vl53l5cx_send_xtalk_data+0x290>)
 8008836:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800883a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800883e:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t profile_4x4[] = {0xA0, 0xFC, 0x01, 0x00};
 8008842:	4b95      	ldr	r3, [pc, #596]	@ (8008a98 <_vl53l5cx_send_xtalk_data+0x294>)
 8008844:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
	uint32_t signal_grid[64];
	int8_t i, j;

	(void)memcpy(p_dev->temp_buffer, &(p_dev->xtalk_data[0]),
 8008848:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800884c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f503 60a1 	add.w	r0, r3, #1288	@ 0x508
 8008856:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800885a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8008864:	f44f 7242 	mov.w	r2, #776	@ 0x308
 8008868:	4619      	mov	r1, r3
 800886a:	f002 faf4 	bl	800ae56 <memcpy>
		VL53L5CX_XTALK_BUFFER_SIZE);

	/* Data extrapolation is required for 4X4 Xtalk */
	if(resolution == (uint8_t)VL53L5CX_RESOLUTION_4X4)
 800886e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8008872:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	2b10      	cmp	r3, #16
 800887a:	f040 80d2 	bne.w	8008a22 <_vl53l5cx_send_xtalk_data+0x21e>
	{
		(void)memcpy(&(p_dev->temp_buffer[0x8]),
 800887e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8008882:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 800888c:	461a      	mov	r2, r3
 800888e:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8008892:	cb03      	ldmia	r3!, {r0, r1}
 8008894:	6010      	str	r0, [r2, #0]
 8008896:	6051      	str	r1, [r2, #4]
			res4x4, sizeof(res4x4));
		(void)memcpy(&(p_dev->temp_buffer[0x020]),
 8008898:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800889c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f503 63a5 	add.w	r3, r3, #1320	@ 0x528
 80088a6:	461a      	mov	r2, r3
 80088a8:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80088ac:	cb03      	ldmia	r3!, {r0, r1}
 80088ae:	6010      	str	r0, [r2, #0]
 80088b0:	6051      	str	r1, [r2, #4]
			dss_4x4, sizeof(dss_4x4));

		VL53L5CX_SwapBuffer(p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 80088b2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80088b6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 80088c0:	f44f 7142 	mov.w	r1, #776	@ 0x308
 80088c4:	4618      	mov	r0, r3
 80088c6:	f7f9 f983 	bl	8001bd0 <VL53L5CX_SwapBuffer>
		(void)memcpy(signal_grid, &(p_dev->temp_buffer[0x34]),
 80088ca:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80088ce:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f203 513c 	addw	r1, r3, #1340	@ 0x53c
 80088d8:	f107 0308 	add.w	r3, r7, #8
 80088dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80088e0:	4618      	mov	r0, r3
 80088e2:	f002 fab8 	bl	800ae56 <memcpy>
			sizeof(signal_grid));

		for (j = 0; j < (int8_t)4; j++)
 80088e6:	2300      	movs	r3, #0
 80088e8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80088ec:	e05d      	b.n	80089aa <_vl53l5cx_send_xtalk_data+0x1a6>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 80088ee:	2300      	movs	r3, #0
 80088f0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 80088f4:	e04e      	b.n	8008994 <_vl53l5cx_send_xtalk_data+0x190>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+0]
 80088f6:	f997 211f 	ldrsb.w	r2, [r7, #287]	@ 0x11f
 80088fa:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 80088fe:	00db      	lsls	r3, r3, #3
 8008900:	4413      	add	r3, r2
 8008902:	005a      	lsls	r2, r3, #1
 8008904:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8008908:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800890c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+1]
 8008910:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 8008914:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8008918:	00db      	lsls	r3, r3, #3
 800891a:	440b      	add	r3, r1
 800891c:	005b      	lsls	r3, r3, #1
 800891e:	1c59      	adds	r1, r3, #1
 8008920:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8008924:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8008928:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800892c:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+8]
 800892e:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 8008932:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8008936:	00db      	lsls	r3, r3, #3
 8008938:	440b      	add	r3, r1
 800893a:	3304      	adds	r3, #4
 800893c:	0059      	lsls	r1, r3, #1
 800893e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8008942:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8008946:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800894a:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 800894c:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 8008950:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8008954:	00db      	lsls	r3, r3, #3
 8008956:	440b      	add	r3, r1
 8008958:	005b      	lsls	r3, r3, #1
 800895a:	f103 0109 	add.w	r1, r3, #9
 800895e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8008962:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8008966:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800896a:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 800896c:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 8008970:	f997 211e 	ldrsb.w	r2, [r7, #286]	@ 0x11e
 8008974:	0092      	lsls	r2, r2, #2
 8008976:	440a      	add	r2, r1
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 8008978:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 800897a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800897e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8008982:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0; i < (int8_t)4 ; i++)
 8008986:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 800898a:	b2db      	uxtb	r3, r3
 800898c:	3301      	adds	r3, #1
 800898e:	b2db      	uxtb	r3, r3
 8008990:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8008994:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8008998:	2b03      	cmp	r3, #3
 800899a:	ddac      	ble.n	80088f6 <_vl53l5cx_send_xtalk_data+0xf2>
		for (j = 0; j < (int8_t)4; j++)
 800899c:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 80089a0:	b2db      	uxtb	r3, r3
 80089a2:	3301      	adds	r3, #1
 80089a4:	b2db      	uxtb	r3, r3
 80089a6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80089aa:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 80089ae:	2b03      	cmp	r3, #3
 80089b0:	dd9d      	ble.n	80088ee <_vl53l5cx_send_xtalk_data+0xea>
			}
		}
	    (void)memset(&signal_grid[0x10], 0, (uint32_t)192);
 80089b2:	f107 0308 	add.w	r3, r7, #8
 80089b6:	3340      	adds	r3, #64	@ 0x40
 80089b8:	22c0      	movs	r2, #192	@ 0xc0
 80089ba:	2100      	movs	r1, #0
 80089bc:	4618      	mov	r0, r3
 80089be:	f002 fa11 	bl	800ade4 <memset>
	    (void)memcpy(&(p_dev->temp_buffer[0x34]),
 80089c2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80089c6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f203 533c 	addw	r3, r3, #1340	@ 0x53c
 80089d0:	f107 0108 	add.w	r1, r7, #8
 80089d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80089d8:	4618      	mov	r0, r3
 80089da:	f002 fa3c 	bl	800ae56 <memcpy>
                  signal_grid, sizeof(signal_grid));
	    VL53L5CX_SwapBuffer(p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 80089de:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80089e2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 80089ec:	f44f 7142 	mov.w	r1, #776	@ 0x308
 80089f0:	4618      	mov	r0, r3
 80089f2:	f7f9 f8ed 	bl	8001bd0 <VL53L5CX_SwapBuffer>
	    (void)memcpy(&(p_dev->temp_buffer[0x134]),
 80089f6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80089fa:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f203 633c 	addw	r3, r3, #1596	@ 0x63c
 8008a04:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8008a08:	601a      	str	r2, [r3, #0]
	    profile_4x4, sizeof(profile_4x4));
	    (void)memset(&(p_dev->temp_buffer[0x078]),0 ,
 8008a0a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8008a0e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f503 63b0 	add.w	r3, r3, #1408	@ 0x580
 8008a18:	2204      	movs	r2, #4
 8008a1a:	2100      	movs	r1, #0
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f002 f9e1 	bl	800ade4 <memset>
                         (uint32_t)4*sizeof(uint8_t));
	}

	status |= VL53L5CX_WrMulti(&(p_dev->platform), 0x2cf8,
 8008a22:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8008a26:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8008a2a:	6818      	ldr	r0, [r3, #0]
			p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 8008a2c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8008a30:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f503 62a1 	add.w	r2, r3, #1288	@ 0x508
	status |= VL53L5CX_WrMulti(&(p_dev->platform), 0x2cf8,
 8008a3a:	f44f 7342 	mov.w	r3, #776	@ 0x308
 8008a3e:	f642 41f8 	movw	r1, #11512	@ 0x2cf8
 8008a42:	f7f9 f871 	bl	8001b28 <VL53L5CX_WrMulti>
 8008a46:	4603      	mov	r3, r0
 8008a48:	461a      	mov	r2, r3
 8008a4a:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
	status |=_vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8008a54:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8008a58:	f5a3 708e 	sub.w	r0, r3, #284	@ 0x11c
 8008a5c:	2303      	movs	r3, #3
 8008a5e:	9301      	str	r3, [sp, #4]
 8008a60:	23ff      	movs	r3, #255	@ 0xff
 8008a62:	9300      	str	r3, [sp, #0]
 8008a64:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8008a68:	2201      	movs	r2, #1
 8008a6a:	2104      	movs	r1, #4
 8008a6c:	6800      	ldr	r0, [r0, #0]
 8008a6e:	f7ff fc6b 	bl	8008348 <_vl53l5cx_poll_for_answer>
 8008a72:	4603      	mov	r3, r0
 8008a74:	461a      	mov	r2, r3
 8008a76:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
			VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 8008a80:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
 8008a8e:	bf00      	nop
 8008a90:	0800d340 	.word	0x0800d340
 8008a94:	0800d348 	.word	0x0800d348
 8008a98:	0001fca0 	.word	0x0001fca0

08008a9c <vl53l5cx_init>:
	return status;
}

uint8_t vl53l5cx_init(
		VL53L5CX_Configuration		*p_dev)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b08a      	sub	sp, #40	@ 0x28
 8008aa0:	af04      	add	r7, sp, #16
 8008aa2:	6078      	str	r0, [r7, #4]
	uint8_t tmp, status = VL53L5CX_STATUS_OK;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	75fb      	strb	r3, [r7, #23]
	uint8_t pipe_ctrl[] = {VL53L5CX_NB_TARGET_PER_ZONE, 0x00, 0x01, 0x00};
 8008aa8:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8008aac:	613b      	str	r3, [r7, #16]
	uint32_t single_range = 0x01;
 8008aae:	2301      	movs	r3, #1
 8008ab0:	60fb      	str	r3, [r7, #12]

	p_dev->default_xtalk = (uint8_t*)VL53L5CX_DEFAULT_XTALK;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	4a80      	ldr	r2, [pc, #512]	@ (8008cb8 <vl53l5cx_init+0x21c>)
 8008ab6:	615a      	str	r2, [r3, #20]
	p_dev->default_configuration = (uint8_t*)VL53L5CX_DEFAULT_CONFIGURATION;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	4a80      	ldr	r2, [pc, #512]	@ (8008cbc <vl53l5cx_init+0x220>)
 8008abc:	611a      	str	r2, [r3, #16]
	p_dev->is_auto_stop_enabled = (uint8_t)0x0;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	f883 2ab4 	strb.w	r2, [r3, #2740]	@ 0xab4

	/* SW reboot sequence */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f7f9 f801 	bl	8001ad6 <VL53L5CX_WrByte>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	7dfb      	ldrb	r3, [r7, #23]
 8008ada:	4313      	orrs	r3, r2
 8008adc:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0009, 0x04);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2204      	movs	r2, #4
 8008ae2:	2109      	movs	r1, #9
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f7f8 fff6 	bl	8001ad6 <VL53L5CX_WrByte>
 8008aea:	4603      	mov	r3, r0
 8008aec:	461a      	mov	r2, r3
 8008aee:	7dfb      	ldrb	r3, [r7, #23]
 8008af0:	4313      	orrs	r3, r2
 8008af2:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x000F, 0x40);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2240      	movs	r2, #64	@ 0x40
 8008af8:	210f      	movs	r1, #15
 8008afa:	4618      	mov	r0, r3
 8008afc:	f7f8 ffeb 	bl	8001ad6 <VL53L5CX_WrByte>
 8008b00:	4603      	mov	r3, r0
 8008b02:	461a      	mov	r2, r3
 8008b04:	7dfb      	ldrb	r3, [r7, #23]
 8008b06:	4313      	orrs	r3, r2
 8008b08:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x000A, 0x03);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2203      	movs	r2, #3
 8008b0e:	210a      	movs	r1, #10
 8008b10:	4618      	mov	r0, r3
 8008b12:	f7f8 ffe0 	bl	8001ad6 <VL53L5CX_WrByte>
 8008b16:	4603      	mov	r3, r0
 8008b18:	461a      	mov	r2, r3
 8008b1a:	7dfb      	ldrb	r3, [r7, #23]
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_RdByte(&(p_dev->platform), 0x7FFF, &tmp);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f107 0216 	add.w	r2, r7, #22
 8008b26:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f7f8 ffab 	bl	8001a86 <VL53L5CX_RdByte>
 8008b30:	4603      	mov	r3, r0
 8008b32:	461a      	mov	r2, r3
 8008b34:	7dfb      	ldrb	r3, [r7, #23]
 8008b36:	4313      	orrs	r3, r2
 8008b38:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x000C, 0x01);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2201      	movs	r2, #1
 8008b3e:	210c      	movs	r1, #12
 8008b40:	4618      	mov	r0, r3
 8008b42:	f7f8 ffc8 	bl	8001ad6 <VL53L5CX_WrByte>
 8008b46:	4603      	mov	r3, r0
 8008b48:	461a      	mov	r2, r3
 8008b4a:	7dfb      	ldrb	r3, [r7, #23]
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	75fb      	strb	r3, [r7, #23]

	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0101, 0x00);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2200      	movs	r2, #0
 8008b54:	f240 1101 	movw	r1, #257	@ 0x101
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f7f8 ffbc 	bl	8001ad6 <VL53L5CX_WrByte>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	461a      	mov	r2, r3
 8008b62:	7dfb      	ldrb	r3, [r7, #23]
 8008b64:	4313      	orrs	r3, r2
 8008b66:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0102, 0x00);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8008b70:	4618      	mov	r0, r3
 8008b72:	f7f8 ffb0 	bl	8001ad6 <VL53L5CX_WrByte>
 8008b76:	4603      	mov	r3, r0
 8008b78:	461a      	mov	r2, r3
 8008b7a:	7dfb      	ldrb	r3, [r7, #23]
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x010A, 0x01);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2201      	movs	r2, #1
 8008b84:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f7f8 ffa4 	bl	8001ad6 <VL53L5CX_WrByte>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	461a      	mov	r2, r3
 8008b92:	7dfb      	ldrb	r3, [r7, #23]
 8008b94:	4313      	orrs	r3, r2
 8008b96:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x4002, 0x01);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	f244 0102 	movw	r1, #16386	@ 0x4002
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f7f8 ff98 	bl	8001ad6 <VL53L5CX_WrByte>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	461a      	mov	r2, r3
 8008baa:	7dfb      	ldrb	r3, [r7, #23]
 8008bac:	4313      	orrs	r3, r2
 8008bae:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x4002, 0x00);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	f244 0102 	movw	r1, #16386	@ 0x4002
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f7f8 ff8c 	bl	8001ad6 <VL53L5CX_WrByte>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	461a      	mov	r2, r3
 8008bc2:	7dfb      	ldrb	r3, [r7, #23]
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x010A, 0x03);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2203      	movs	r2, #3
 8008bcc:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f7f8 ff80 	bl	8001ad6 <VL53L5CX_WrByte>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	461a      	mov	r2, r3
 8008bda:	7dfb      	ldrb	r3, [r7, #23]
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0103, 0x01);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2201      	movs	r2, #1
 8008be4:	f240 1103 	movw	r1, #259	@ 0x103
 8008be8:	4618      	mov	r0, r3
 8008bea:	f7f8 ff74 	bl	8001ad6 <VL53L5CX_WrByte>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	461a      	mov	r2, r3
 8008bf2:	7dfb      	ldrb	r3, [r7, #23]
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x000C, 0x00);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	210c      	movs	r1, #12
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f7f8 ff69 	bl	8001ad6 <VL53L5CX_WrByte>
 8008c04:	4603      	mov	r3, r0
 8008c06:	461a      	mov	r2, r3
 8008c08:	7dfb      	ldrb	r3, [r7, #23]
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x000F, 0x43);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2243      	movs	r2, #67	@ 0x43
 8008c12:	210f      	movs	r1, #15
 8008c14:	4618      	mov	r0, r3
 8008c16:	f7f8 ff5e 	bl	8001ad6 <VL53L5CX_WrByte>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	7dfb      	ldrb	r3, [r7, #23]
 8008c20:	4313      	orrs	r3, r2
 8008c22:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WaitMs(&(p_dev->platform), 1);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2101      	movs	r1, #1
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f7f9 f807 	bl	8001c3c <VL53L5CX_WaitMs>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	461a      	mov	r2, r3
 8008c32:	7dfb      	ldrb	r3, [r7, #23]
 8008c34:	4313      	orrs	r3, r2
 8008c36:	75fb      	strb	r3, [r7, #23]

	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x000F, 0x40);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2240      	movs	r2, #64	@ 0x40
 8008c3c:	210f      	movs	r1, #15
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f7f8 ff49 	bl	8001ad6 <VL53L5CX_WrByte>
 8008c44:	4603      	mov	r3, r0
 8008c46:	461a      	mov	r2, r3
 8008c48:	7dfb      	ldrb	r3, [r7, #23]
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x000A, 0x01);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2201      	movs	r2, #1
 8008c52:	210a      	movs	r1, #10
 8008c54:	4618      	mov	r0, r3
 8008c56:	f7f8 ff3e 	bl	8001ad6 <VL53L5CX_WrByte>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	461a      	mov	r2, r3
 8008c5e:	7dfb      	ldrb	r3, [r7, #23]
 8008c60:	4313      	orrs	r3, r2
 8008c62:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WaitMs(&(p_dev->platform), 100);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2164      	movs	r1, #100	@ 0x64
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f7f8 ffe7 	bl	8001c3c <VL53L5CX_WaitMs>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	461a      	mov	r2, r3
 8008c72:	7dfb      	ldrb	r3, [r7, #23]
 8008c74:	4313      	orrs	r3, r2
 8008c76:	75fb      	strb	r3, [r7, #23]

	/* Wait for sensor booted (several ms required to get sensor ready ) */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8008c80:	4618      	mov	r0, r3
 8008c82:	f7f8 ff28 	bl	8001ad6 <VL53L5CX_WrByte>
 8008c86:	4603      	mov	r3, r0
 8008c88:	461a      	mov	r2, r3
 8008c8a:	7dfb      	ldrb	r3, [r7, #23]
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x06, 0xff, 1);
 8008c90:	2301      	movs	r3, #1
 8008c92:	9301      	str	r3, [sp, #4]
 8008c94:	23ff      	movs	r3, #255	@ 0xff
 8008c96:	9300      	str	r3, [sp, #0]
 8008c98:	2306      	movs	r3, #6
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	2101      	movs	r1, #1
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f7ff fb52 	bl	8008348 <_vl53l5cx_poll_for_answer>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	7dfb      	ldrb	r3, [r7, #23]
 8008caa:	4313      	orrs	r3, r2
 8008cac:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 8008cae:	7dfb      	ldrb	r3, [r7, #23]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	f040 8354 	bne.w	800935e <vl53l5cx_init+0x8c2>
 8008cb6:	e003      	b.n	8008cc0 <vl53l5cx_init+0x224>
 8008cb8:	080227b0 	.word	0x080227b0
 8008cbc:	080223e4 	.word	0x080223e4
		goto exit;
	}

	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x000E, 0x01);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	210e      	movs	r1, #14
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f7f8 ff05 	bl	8001ad6 <VL53L5CX_WrByte>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	461a      	mov	r2, r3
 8008cd0:	7dfb      	ldrb	r3, [r7, #23]
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2202      	movs	r2, #2
 8008cda:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f7f8 fef9 	bl	8001ad6 <VL53L5CX_WrByte>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	461a      	mov	r2, r3
 8008ce8:	7dfb      	ldrb	r3, [r7, #23]
 8008cea:	4313      	orrs	r3, r2
 8008cec:	75fb      	strb	r3, [r7, #23]

	/* Enable FW access */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x03, 0x0D);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	220d      	movs	r2, #13
 8008cf2:	2103      	movs	r1, #3
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f7f8 feee 	bl	8001ad6 <VL53L5CX_WrByte>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	7dfb      	ldrb	r3, [r7, #23]
 8008d00:	4313      	orrs	r3, r2
 8008d02:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2201      	movs	r2, #1
 8008d08:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f7f8 fee2 	bl	8001ad6 <VL53L5CX_WrByte>
 8008d12:	4603      	mov	r3, r0
 8008d14:	461a      	mov	r2, r3
 8008d16:	7dfb      	ldrb	r3, [r7, #23]
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 8008d1c:	2310      	movs	r3, #16
 8008d1e:	9301      	str	r3, [sp, #4]
 8008d20:	2310      	movs	r3, #16
 8008d22:	9300      	str	r3, [sp, #0]
 8008d24:	2321      	movs	r3, #33	@ 0x21
 8008d26:	2200      	movs	r2, #0
 8008d28:	2101      	movs	r1, #1
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f7ff fb0c 	bl	8008348 <_vl53l5cx_poll_for_answer>
 8008d30:	4603      	mov	r3, r0
 8008d32:	461a      	mov	r2, r3
 8008d34:	7dfb      	ldrb	r3, [r7, #23]
 8008d36:	4313      	orrs	r3, r2
 8008d38:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8008d42:	4618      	mov	r0, r3
 8008d44:	f7f8 fec7 	bl	8001ad6 <VL53L5CX_WrByte>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	7dfb      	ldrb	r3, [r7, #23]
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	75fb      	strb	r3, [r7, #23]

	/* Enable host access to GO1 */
	status |= VL53L5CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f107 0216 	add.w	r2, r7, #22
 8008d58:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f7f8 fe92 	bl	8001a86 <VL53L5CX_RdByte>
 8008d62:	4603      	mov	r3, r0
 8008d64:	461a      	mov	r2, r3
 8008d66:	7dfb      	ldrb	r3, [r7, #23]
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0C, 0x01);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2201      	movs	r2, #1
 8008d70:	210c      	movs	r1, #12
 8008d72:	4618      	mov	r0, r3
 8008d74:	f7f8 feaf 	bl	8001ad6 <VL53L5CX_WrByte>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	7dfb      	ldrb	r3, [r7, #23]
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	75fb      	strb	r3, [r7, #23]

	/* Power ON status */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2200      	movs	r2, #0
 8008d86:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f7f8 fea3 	bl	8001ad6 <VL53L5CX_WrByte>
 8008d90:	4603      	mov	r3, r0
 8008d92:	461a      	mov	r2, r3
 8008d94:	7dfb      	ldrb	r3, [r7, #23]
 8008d96:	4313      	orrs	r3, r2
 8008d98:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x101, 0x00);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	f240 1101 	movw	r1, #257	@ 0x101
 8008da2:	4618      	mov	r0, r3
 8008da4:	f7f8 fe97 	bl	8001ad6 <VL53L5CX_WrByte>
 8008da8:	4603      	mov	r3, r0
 8008daa:	461a      	mov	r2, r3
 8008dac:	7dfb      	ldrb	r3, [r7, #23]
 8008dae:	4313      	orrs	r3, r2
 8008db0:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x102, 0x00);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2200      	movs	r2, #0
 8008db6:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f7f8 fe8b 	bl	8001ad6 <VL53L5CX_WrByte>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	461a      	mov	r2, r3
 8008dc4:	7dfb      	ldrb	r3, [r7, #23]
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x010A, 0x01);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2201      	movs	r2, #1
 8008dce:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f7f8 fe7f 	bl	8001ad6 <VL53L5CX_WrByte>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	461a      	mov	r2, r3
 8008ddc:	7dfb      	ldrb	r3, [r7, #23]
 8008dde:	4313      	orrs	r3, r2
 8008de0:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x4002, 0x01);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2201      	movs	r2, #1
 8008de6:	f244 0102 	movw	r1, #16386	@ 0x4002
 8008dea:	4618      	mov	r0, r3
 8008dec:	f7f8 fe73 	bl	8001ad6 <VL53L5CX_WrByte>
 8008df0:	4603      	mov	r3, r0
 8008df2:	461a      	mov	r2, r3
 8008df4:	7dfb      	ldrb	r3, [r7, #23]
 8008df6:	4313      	orrs	r3, r2
 8008df8:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x4002, 0x00);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	f244 0102 	movw	r1, #16386	@ 0x4002
 8008e02:	4618      	mov	r0, r3
 8008e04:	f7f8 fe67 	bl	8001ad6 <VL53L5CX_WrByte>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	7dfb      	ldrb	r3, [r7, #23]
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x010A, 0x03);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2203      	movs	r2, #3
 8008e16:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f7f8 fe5b 	bl	8001ad6 <VL53L5CX_WrByte>
 8008e20:	4603      	mov	r3, r0
 8008e22:	461a      	mov	r2, r3
 8008e24:	7dfb      	ldrb	r3, [r7, #23]
 8008e26:	4313      	orrs	r3, r2
 8008e28:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x103, 0x01);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	f240 1103 	movw	r1, #259	@ 0x103
 8008e32:	4618      	mov	r0, r3
 8008e34:	f7f8 fe4f 	bl	8001ad6 <VL53L5CX_WrByte>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	7dfb      	ldrb	r3, [r7, #23]
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x400F, 0x00);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2200      	movs	r2, #0
 8008e46:	f244 010f 	movw	r1, #16399	@ 0x400f
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f7f8 fe43 	bl	8001ad6 <VL53L5CX_WrByte>
 8008e50:	4603      	mov	r3, r0
 8008e52:	461a      	mov	r2, r3
 8008e54:	7dfb      	ldrb	r3, [r7, #23]
 8008e56:	4313      	orrs	r3, r2
 8008e58:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x21A, 0x43);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2243      	movs	r2, #67	@ 0x43
 8008e5e:	f240 211a 	movw	r1, #538	@ 0x21a
 8008e62:	4618      	mov	r0, r3
 8008e64:	f7f8 fe37 	bl	8001ad6 <VL53L5CX_WrByte>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	7dfb      	ldrb	r3, [r7, #23]
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x21A, 0x03);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2203      	movs	r2, #3
 8008e76:	f240 211a 	movw	r1, #538	@ 0x21a
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f7f8 fe2b 	bl	8001ad6 <VL53L5CX_WrByte>
 8008e80:	4603      	mov	r3, r0
 8008e82:	461a      	mov	r2, r3
 8008e84:	7dfb      	ldrb	r3, [r7, #23]
 8008e86:	4313      	orrs	r3, r2
 8008e88:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x21A, 0x01);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2201      	movs	r2, #1
 8008e8e:	f240 211a 	movw	r1, #538	@ 0x21a
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7f8 fe1f 	bl	8001ad6 <VL53L5CX_WrByte>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	461a      	mov	r2, r3
 8008e9c:	7dfb      	ldrb	r3, [r7, #23]
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x21A, 0x00);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	f240 211a 	movw	r1, #538	@ 0x21a
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f7f8 fe13 	bl	8001ad6 <VL53L5CX_WrByte>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	461a      	mov	r2, r3
 8008eb4:	7dfb      	ldrb	r3, [r7, #23]
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x219, 0x00);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	f240 2119 	movw	r1, #537	@ 0x219
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f7f8 fe07 	bl	8001ad6 <VL53L5CX_WrByte>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	461a      	mov	r2, r3
 8008ecc:	7dfb      	ldrb	r3, [r7, #23]
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x21B, 0x00);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	f240 211b 	movw	r1, #539	@ 0x21b
 8008eda:	4618      	mov	r0, r3
 8008edc:	f7f8 fdfb 	bl	8001ad6 <VL53L5CX_WrByte>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	7dfb      	ldrb	r3, [r7, #23]
 8008ee6:	4313      	orrs	r3, r2
 8008ee8:	75fb      	strb	r3, [r7, #23]

	/* Wake up MCU */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2200      	movs	r2, #0
 8008eee:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f7f8 fdef 	bl	8001ad6 <VL53L5CX_WrByte>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	461a      	mov	r2, r3
 8008efc:	7dfb      	ldrb	r3, [r7, #23]
 8008efe:	4313      	orrs	r3, r2
 8008f00:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f107 0216 	add.w	r2, r7, #22
 8008f08:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	f7f8 fdba 	bl	8001a86 <VL53L5CX_RdByte>
 8008f12:	4603      	mov	r3, r0
 8008f14:	461a      	mov	r2, r3
 8008f16:	7dfb      	ldrb	r3, [r7, #23]
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0C, 0x00);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	210c      	movs	r1, #12
 8008f22:	4618      	mov	r0, r3
 8008f24:	f7f8 fdd7 	bl	8001ad6 <VL53L5CX_WrByte>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	461a      	mov	r2, r3
 8008f2c:	7dfb      	ldrb	r3, [r7, #23]
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2201      	movs	r2, #1
 8008f36:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f7f8 fdcb 	bl	8001ad6 <VL53L5CX_WrByte>
 8008f40:	4603      	mov	r3, r0
 8008f42:	461a      	mov	r2, r3
 8008f44:	7dfb      	ldrb	r3, [r7, #23]
 8008f46:	4313      	orrs	r3, r2
 8008f48:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x20, 0x07);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2207      	movs	r2, #7
 8008f4e:	2120      	movs	r1, #32
 8008f50:	4618      	mov	r0, r3
 8008f52:	f7f8 fdc0 	bl	8001ad6 <VL53L5CX_WrByte>
 8008f56:	4603      	mov	r3, r0
 8008f58:	461a      	mov	r2, r3
 8008f5a:	7dfb      	ldrb	r3, [r7, #23]
 8008f5c:	4313      	orrs	r3, r2
 8008f5e:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x20, 0x06);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2206      	movs	r2, #6
 8008f64:	2120      	movs	r1, #32
 8008f66:	4618      	mov	r0, r3
 8008f68:	f7f8 fdb5 	bl	8001ad6 <VL53L5CX_WrByte>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	461a      	mov	r2, r3
 8008f70:	7dfb      	ldrb	r3, [r7, #23]
 8008f72:	4313      	orrs	r3, r2
 8008f74:	75fb      	strb	r3, [r7, #23]

	/* Download FW into VL53L5 */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x09);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2209      	movs	r2, #9
 8008f7a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f7f8 fda9 	bl	8001ad6 <VL53L5CX_WrByte>
 8008f84:	4603      	mov	r3, r0
 8008f86:	461a      	mov	r2, r3
 8008f88:	7dfb      	ldrb	r3, [r7, #23]
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrMulti(&(p_dev->platform),0,
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f94:	4ae1      	ldr	r2, [pc, #900]	@ (800931c <vl53l5cx_init+0x880>)
 8008f96:	2100      	movs	r1, #0
 8008f98:	f7f8 fdc6 	bl	8001b28 <VL53L5CX_WrMulti>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	461a      	mov	r2, r3
 8008fa0:	7dfb      	ldrb	r3, [r7, #23]
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L5CX_FIRMWARE[0],0x8000);
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x0a);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	220a      	movs	r2, #10
 8008faa:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f7f8 fd91 	bl	8001ad6 <VL53L5CX_WrByte>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	7dfb      	ldrb	r3, [r7, #23]
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrMulti(&(p_dev->platform),0,
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008fc4:	4ad6      	ldr	r2, [pc, #856]	@ (8009320 <vl53l5cx_init+0x884>)
 8008fc6:	2100      	movs	r1, #0
 8008fc8:	f7f8 fdae 	bl	8001b28 <VL53L5CX_WrMulti>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	461a      	mov	r2, r3
 8008fd0:	7dfb      	ldrb	r3, [r7, #23]
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L5CX_FIRMWARE[0x8000],0x8000);
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x0b);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	220b      	movs	r2, #11
 8008fda:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f7f8 fd79 	bl	8001ad6 <VL53L5CX_WrByte>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	461a      	mov	r2, r3
 8008fe8:	7dfb      	ldrb	r3, [r7, #23]
 8008fea:	4313      	orrs	r3, r2
 8008fec:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrMulti(&(p_dev->platform),0,
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8008ff4:	4acb      	ldr	r2, [pc, #812]	@ (8009324 <vl53l5cx_init+0x888>)
 8008ff6:	2100      	movs	r1, #0
 8008ff8:	f7f8 fd96 	bl	8001b28 <VL53L5CX_WrMulti>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	461a      	mov	r2, r3
 8009000:	7dfb      	ldrb	r3, [r7, #23]
 8009002:	4313      	orrs	r3, r2
 8009004:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L5CX_FIRMWARE[0x10000],0x5000);
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2201      	movs	r2, #1
 800900a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800900e:	4618      	mov	r0, r3
 8009010:	f7f8 fd61 	bl	8001ad6 <VL53L5CX_WrByte>
 8009014:	4603      	mov	r3, r0
 8009016:	461a      	mov	r2, r3
 8009018:	7dfb      	ldrb	r3, [r7, #23]
 800901a:	4313      	orrs	r3, r2
 800901c:	75fb      	strb	r3, [r7, #23]

	/* Check if FW correctly downloaded */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2202      	movs	r2, #2
 8009022:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8009026:	4618      	mov	r0, r3
 8009028:	f7f8 fd55 	bl	8001ad6 <VL53L5CX_WrByte>
 800902c:	4603      	mov	r3, r0
 800902e:	461a      	mov	r2, r3
 8009030:	7dfb      	ldrb	r3, [r7, #23]
 8009032:	4313      	orrs	r3, r2
 8009034:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x03, 0x0D);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	220d      	movs	r2, #13
 800903a:	2103      	movs	r1, #3
 800903c:	4618      	mov	r0, r3
 800903e:	f7f8 fd4a 	bl	8001ad6 <VL53L5CX_WrByte>
 8009042:	4603      	mov	r3, r0
 8009044:	461a      	mov	r2, r3
 8009046:	7dfb      	ldrb	r3, [r7, #23]
 8009048:	4313      	orrs	r3, r2
 800904a:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2201      	movs	r2, #1
 8009050:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8009054:	4618      	mov	r0, r3
 8009056:	f7f8 fd3e 	bl	8001ad6 <VL53L5CX_WrByte>
 800905a:	4603      	mov	r3, r0
 800905c:	461a      	mov	r2, r3
 800905e:	7dfb      	ldrb	r3, [r7, #23]
 8009060:	4313      	orrs	r3, r2
 8009062:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 8009064:	2310      	movs	r3, #16
 8009066:	9301      	str	r3, [sp, #4]
 8009068:	2310      	movs	r3, #16
 800906a:	9300      	str	r3, [sp, #0]
 800906c:	2321      	movs	r3, #33	@ 0x21
 800906e:	2200      	movs	r2, #0
 8009070:	2101      	movs	r1, #1
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f7ff f968 	bl	8008348 <_vl53l5cx_poll_for_answer>
 8009078:	4603      	mov	r3, r0
 800907a:	461a      	mov	r2, r3
 800907c:	7dfb      	ldrb	r3, [r7, #23]
 800907e:	4313      	orrs	r3, r2
 8009080:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 8009082:	7dfb      	ldrb	r3, [r7, #23]
 8009084:	2b00      	cmp	r3, #0
 8009086:	f040 816c 	bne.w	8009362 <vl53l5cx_init+0x8c6>
		goto exit;
	}

	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2200      	movs	r2, #0
 800908e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8009092:	4618      	mov	r0, r3
 8009094:	f7f8 fd1f 	bl	8001ad6 <VL53L5CX_WrByte>
 8009098:	4603      	mov	r3, r0
 800909a:	461a      	mov	r2, r3
 800909c:	7dfb      	ldrb	r3, [r7, #23]
 800909e:	4313      	orrs	r3, r2
 80090a0:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f107 0216 	add.w	r2, r7, #22
 80090a8:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80090ac:	4618      	mov	r0, r3
 80090ae:	f7f8 fcea 	bl	8001a86 <VL53L5CX_RdByte>
 80090b2:	4603      	mov	r3, r0
 80090b4:	461a      	mov	r2, r3
 80090b6:	7dfb      	ldrb	r3, [r7, #23]
 80090b8:	4313      	orrs	r3, r2
 80090ba:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0C, 0x01);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2201      	movs	r2, #1
 80090c0:	210c      	movs	r1, #12
 80090c2:	4618      	mov	r0, r3
 80090c4:	f7f8 fd07 	bl	8001ad6 <VL53L5CX_WrByte>
 80090c8:	4603      	mov	r3, r0
 80090ca:	461a      	mov	r2, r3
 80090cc:	7dfb      	ldrb	r3, [r7, #23]
 80090ce:	4313      	orrs	r3, r2
 80090d0:	75fb      	strb	r3, [r7, #23]

	/* Reset MCU and wait boot */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2200      	movs	r2, #0
 80090d6:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80090da:	4618      	mov	r0, r3
 80090dc:	f7f8 fcfb 	bl	8001ad6 <VL53L5CX_WrByte>
 80090e0:	4603      	mov	r3, r0
 80090e2:	461a      	mov	r2, r3
 80090e4:	7dfb      	ldrb	r3, [r7, #23]
 80090e6:	4313      	orrs	r3, r2
 80090e8:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x114, 0x00);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2200      	movs	r2, #0
 80090ee:	f44f 718a 	mov.w	r1, #276	@ 0x114
 80090f2:	4618      	mov	r0, r3
 80090f4:	f7f8 fcef 	bl	8001ad6 <VL53L5CX_WrByte>
 80090f8:	4603      	mov	r3, r0
 80090fa:	461a      	mov	r2, r3
 80090fc:	7dfb      	ldrb	r3, [r7, #23]
 80090fe:	4313      	orrs	r3, r2
 8009100:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x115, 0x00);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2200      	movs	r2, #0
 8009106:	f240 1115 	movw	r1, #277	@ 0x115
 800910a:	4618      	mov	r0, r3
 800910c:	f7f8 fce3 	bl	8001ad6 <VL53L5CX_WrByte>
 8009110:	4603      	mov	r3, r0
 8009112:	461a      	mov	r2, r3
 8009114:	7dfb      	ldrb	r3, [r7, #23]
 8009116:	4313      	orrs	r3, r2
 8009118:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x116, 0x42);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2242      	movs	r2, #66	@ 0x42
 800911e:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8009122:	4618      	mov	r0, r3
 8009124:	f7f8 fcd7 	bl	8001ad6 <VL53L5CX_WrByte>
 8009128:	4603      	mov	r3, r0
 800912a:	461a      	mov	r2, r3
 800912c:	7dfb      	ldrb	r3, [r7, #23]
 800912e:	4313      	orrs	r3, r2
 8009130:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x117, 0x00);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2200      	movs	r2, #0
 8009136:	f240 1117 	movw	r1, #279	@ 0x117
 800913a:	4618      	mov	r0, r3
 800913c:	f7f8 fccb 	bl	8001ad6 <VL53L5CX_WrByte>
 8009140:	4603      	mov	r3, r0
 8009142:	461a      	mov	r2, r3
 8009144:	7dfb      	ldrb	r3, [r7, #23]
 8009146:	4313      	orrs	r3, r2
 8009148:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0B, 0x00);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2200      	movs	r2, #0
 800914e:	210b      	movs	r1, #11
 8009150:	4618      	mov	r0, r3
 8009152:	f7f8 fcc0 	bl	8001ad6 <VL53L5CX_WrByte>
 8009156:	4603      	mov	r3, r0
 8009158:	461a      	mov	r2, r3
 800915a:	7dfb      	ldrb	r3, [r7, #23]
 800915c:	4313      	orrs	r3, r2
 800915e:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f107 0216 	add.w	r2, r7, #22
 8009166:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800916a:	4618      	mov	r0, r3
 800916c:	f7f8 fc8b 	bl	8001a86 <VL53L5CX_RdByte>
 8009170:	4603      	mov	r3, r0
 8009172:	461a      	mov	r2, r3
 8009174:	7dfb      	ldrb	r3, [r7, #23]
 8009176:	4313      	orrs	r3, r2
 8009178:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0C, 0x00);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2200      	movs	r2, #0
 800917e:	210c      	movs	r1, #12
 8009180:	4618      	mov	r0, r3
 8009182:	f7f8 fca8 	bl	8001ad6 <VL53L5CX_WrByte>
 8009186:	4603      	mov	r3, r0
 8009188:	461a      	mov	r2, r3
 800918a:	7dfb      	ldrb	r3, [r7, #23]
 800918c:	4313      	orrs	r3, r2
 800918e:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0B, 0x01);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2201      	movs	r2, #1
 8009194:	210b      	movs	r1, #11
 8009196:	4618      	mov	r0, r3
 8009198:	f7f8 fc9d 	bl	8001ad6 <VL53L5CX_WrByte>
 800919c:	4603      	mov	r3, r0
 800919e:	461a      	mov	r2, r3
 80091a0:	7dfb      	ldrb	r3, [r7, #23]
 80091a2:	4313      	orrs	r3, r2
 80091a4:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_mcu_boot(p_dev);
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f7ff f91e 	bl	80083e8 <_vl53l5cx_poll_for_mcu_boot>
 80091ac:	4603      	mov	r3, r0
 80091ae:	461a      	mov	r2, r3
 80091b0:	7dfb      	ldrb	r3, [r7, #23]
 80091b2:	4313      	orrs	r3, r2
 80091b4:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 80091b6:	7dfb      	ldrb	r3, [r7, #23]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	f040 80d4 	bne.w	8009366 <vl53l5cx_init+0x8ca>
		goto exit;
	}

	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2202      	movs	r2, #2
 80091c2:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80091c6:	4618      	mov	r0, r3
 80091c8:	f7f8 fc85 	bl	8001ad6 <VL53L5CX_WrByte>
 80091cc:	4603      	mov	r3, r0
 80091ce:	461a      	mov	r2, r3
 80091d0:	7dfb      	ldrb	r3, [r7, #23]
 80091d2:	4313      	orrs	r3, r2
 80091d4:	75fb      	strb	r3, [r7, #23]

	/* Get offset NVM data and store them into the offset buffer */
	status |= VL53L5CX_WrMulti(&(p_dev->platform), 0x2fd8,
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	2328      	movs	r3, #40	@ 0x28
 80091da:	4a53      	ldr	r2, [pc, #332]	@ (8009328 <vl53l5cx_init+0x88c>)
 80091dc:	f642 71d8 	movw	r1, #12248	@ 0x2fd8
 80091e0:	f7f8 fca2 	bl	8001b28 <VL53L5CX_WrMulti>
 80091e4:	4603      	mov	r3, r0
 80091e6:	461a      	mov	r2, r3
 80091e8:	7dfb      	ldrb	r3, [r7, #23]
 80091ea:	4313      	orrs	r3, r2
 80091ec:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)VL53L5CX_GET_NVM_CMD, sizeof(VL53L5CX_GET_NVM_CMD));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 0,
 80091ee:	2302      	movs	r3, #2
 80091f0:	9301      	str	r3, [sp, #4]
 80091f2:	23ff      	movs	r3, #255	@ 0xff
 80091f4:	9300      	str	r3, [sp, #0]
 80091f6:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 80091fa:	2200      	movs	r2, #0
 80091fc:	2104      	movs	r1, #4
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f7ff f8a2 	bl	8008348 <_vl53l5cx_poll_for_answer>
 8009204:	4603      	mov	r3, r0
 8009206:	461a      	mov	r2, r3
 8009208:	7dfb      	ldrb	r3, [r7, #23]
 800920a:	4313      	orrs	r3, r2
 800920c:	75fb      	strb	r3, [r7, #23]
		VL53L5CX_UI_CMD_STATUS, 0xff, 2);
	status |= VL53L5CX_RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 800920e:	6878      	ldr	r0, [r7, #4]
		p_dev->temp_buffer, VL53L5CX_NVM_DATA_SIZE);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f503 62a1 	add.w	r2, r3, #1288	@ 0x508
	status |= VL53L5CX_RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8009216:	f44f 73f6 	mov.w	r3, #492	@ 0x1ec
 800921a:	f642 4104 	movw	r1, #11268	@ 0x2c04
 800921e:	f7f8 fcad 	bl	8001b7c <VL53L5CX_RdMulti>
 8009222:	4603      	mov	r3, r0
 8009224:	461a      	mov	r2, r3
 8009226:	7dfb      	ldrb	r3, [r7, #23]
 8009228:	4313      	orrs	r3, r2
 800922a:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(p_dev->offset_data, p_dev->temp_buffer,
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f103 0018 	add.w	r0, r3, #24
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8009238:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800923c:	4619      	mov	r1, r3
 800923e:	f001 fe0a 	bl	800ae56 <memcpy>
		VL53L5CX_OFFSET_BUFFER_SIZE);
	status |= _vl53l5cx_send_offset_data(p_dev, VL53L5CX_RESOLUTION_4X4);
 8009242:	2110      	movs	r1, #16
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f7ff f911 	bl	800846c <_vl53l5cx_send_offset_data>
 800924a:	4603      	mov	r3, r0
 800924c:	461a      	mov	r2, r3
 800924e:	7dfb      	ldrb	r3, [r7, #23]
 8009250:	4313      	orrs	r3, r2
 8009252:	75fb      	strb	r3, [r7, #23]

	/* Set default Xtalk shape. Send Xtalk to sensor */
	(void)memcpy(p_dev->xtalk_data, (uint8_t*)VL53L5CX_DEFAULT_XTALK,
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800925a:	4a34      	ldr	r2, [pc, #208]	@ (800932c <vl53l5cx_init+0x890>)
 800925c:	4618      	mov	r0, r3
 800925e:	4611      	mov	r1, r2
 8009260:	f44f 7342 	mov.w	r3, #776	@ 0x308
 8009264:	461a      	mov	r2, r3
 8009266:	f001 fdf6 	bl	800ae56 <memcpy>
		VL53L5CX_XTALK_BUFFER_SIZE);
	status |= _vl53l5cx_send_xtalk_data(p_dev, VL53L5CX_RESOLUTION_4X4);
 800926a:	2110      	movs	r1, #16
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f7ff fac9 	bl	8008804 <_vl53l5cx_send_xtalk_data>
 8009272:	4603      	mov	r3, r0
 8009274:	461a      	mov	r2, r3
 8009276:	7dfb      	ldrb	r3, [r7, #23]
 8009278:	4313      	orrs	r3, r2
 800927a:	75fb      	strb	r3, [r7, #23]

	/* Send default configuration to VL53L5CX firmware */
	status |= VL53L5CX_WrMulti(&(p_dev->platform), 0x2c34,
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	691a      	ldr	r2, [r3, #16]
 8009282:	f44f 7373 	mov.w	r3, #972	@ 0x3cc
 8009286:	f642 4134 	movw	r1, #11316	@ 0x2c34
 800928a:	f7f8 fc4d 	bl	8001b28 <VL53L5CX_WrMulti>
 800928e:	4603      	mov	r3, r0
 8009290:	461a      	mov	r2, r3
 8009292:	7dfb      	ldrb	r3, [r7, #23]
 8009294:	4313      	orrs	r3, r2
 8009296:	75fb      	strb	r3, [r7, #23]
		p_dev->default_configuration,
		sizeof(VL53L5CX_DEFAULT_CONFIGURATION));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8009298:	2303      	movs	r3, #3
 800929a:	9301      	str	r3, [sp, #4]
 800929c:	23ff      	movs	r3, #255	@ 0xff
 800929e:	9300      	str	r3, [sp, #0]
 80092a0:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 80092a4:	2201      	movs	r2, #1
 80092a6:	2104      	movs	r1, #4
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f7ff f84d 	bl	8008348 <_vl53l5cx_poll_for_answer>
 80092ae:	4603      	mov	r3, r0
 80092b0:	461a      	mov	r2, r3
 80092b2:	7dfb      	ldrb	r3, [r7, #23]
 80092b4:	4313      	orrs	r3, r2
 80092b6:	75fb      	strb	r3, [r7, #23]
		VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)&pipe_ctrl,
 80092b8:	f107 0110 	add.w	r1, r7, #16
 80092bc:	2304      	movs	r3, #4
 80092be:	f64d 3280 	movw	r2, #56192	@ 0xdb80
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f000 fe36 	bl	8009f34 <vl53l5cx_dci_write_data>
 80092c8:	4603      	mov	r3, r0
 80092ca:	461a      	mov	r2, r3
 80092cc:	7dfb      	ldrb	r3, [r7, #23]
 80092ce:	4313      	orrs	r3, r2
 80092d0:	75fb      	strb	r3, [r7, #23]
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
		VL53L5CX_DCI_FW_NB_TARGET, 16,
	(uint8_t*)&tmp, 1, 0x0C);
#endif

	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 80092d2:	f107 010c 	add.w	r1, r7, #12
 80092d6:	2304      	movs	r3, #4
 80092d8:	f64d 1264 	movw	r2, #55652	@ 0xd964
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f000 fe29 	bl	8009f34 <vl53l5cx_dci_write_data>
 80092e2:	4603      	mov	r3, r0
 80092e4:	461a      	mov	r2, r3
 80092e6:	7dfb      	ldrb	r3, [r7, #23]
 80092e8:	4313      	orrs	r3, r2
 80092ea:	75fb      	strb	r3, [r7, #23]
			VL53L5CX_DCI_SINGLE_RANGE,
			(uint16_t)sizeof(single_range));

	tmp = (uint8_t)1;
 80092ec:	2301      	movs	r3, #1
 80092ee:	75bb      	strb	r3, [r7, #22]
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f503 61a1 	add.w	r1, r3, #1288	@ 0x508
 80092f6:	2326      	movs	r3, #38	@ 0x26
 80092f8:	9302      	str	r3, [sp, #8]
 80092fa:	2301      	movs	r3, #1
 80092fc:	9301      	str	r3, [sp, #4]
 80092fe:	f107 0316 	add.w	r3, r7, #22
 8009302:	9300      	str	r3, [sp, #0]
 8009304:	2328      	movs	r3, #40	@ 0x28
 8009306:	f24e 1208 	movw	r2, #57608	@ 0xe108
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f000 feb0 	bl	800a070 <vl53l5cx_dci_replace_data>
 8009310:	4603      	mov	r3, r0
 8009312:	461a      	mov	r2, r3
 8009314:	7dfb      	ldrb	r3, [r7, #23]
 8009316:	4313      	orrs	r3, r2
 8009318:	e00a      	b.n	8009330 <vl53l5cx_init+0x894>
 800931a:	bf00      	nop
 800931c:	0800d3e4 	.word	0x0800d3e4
 8009320:	080153e4 	.word	0x080153e4
 8009324:	0801d3e4 	.word	0x0801d3e4
 8009328:	08022ab8 	.word	0x08022ab8
 800932c:	080227b0 	.word	0x080227b0
 8009330:	75fb      	strb	r3, [r7, #23]
			VL53L5CX_GLARE_FILTER, 40, (uint8_t*)&tmp, 1, 0x26);
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f503 61a1 	add.w	r1, r3, #1288	@ 0x508
 8009338:	2325      	movs	r3, #37	@ 0x25
 800933a:	9302      	str	r3, [sp, #8]
 800933c:	2301      	movs	r3, #1
 800933e:	9301      	str	r3, [sp, #4]
 8009340:	f107 0316 	add.w	r3, r7, #22
 8009344:	9300      	str	r3, [sp, #0]
 8009346:	2328      	movs	r3, #40	@ 0x28
 8009348:	f24e 1208 	movw	r2, #57608	@ 0xe108
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f000 fe8f 	bl	800a070 <vl53l5cx_dci_replace_data>
 8009352:	4603      	mov	r3, r0
 8009354:	461a      	mov	r2, r3
 8009356:	7dfb      	ldrb	r3, [r7, #23]
 8009358:	4313      	orrs	r3, r2
 800935a:	75fb      	strb	r3, [r7, #23]
 800935c:	e004      	b.n	8009368 <vl53l5cx_init+0x8cc>
		goto exit;
 800935e:	bf00      	nop
 8009360:	e002      	b.n	8009368 <vl53l5cx_init+0x8cc>
		goto exit;
 8009362:	bf00      	nop
 8009364:	e000      	b.n	8009368 <vl53l5cx_init+0x8cc>
		goto exit;
 8009366:	bf00      	nop
			VL53L5CX_GLARE_FILTER, 40, (uint8_t*)&tmp, 1, 0x25);

exit:
	return status;
 8009368:	7dfb      	ldrb	r3, [r7, #23]
}
 800936a:	4618      	mov	r0, r3
 800936c:	3718      	adds	r7, #24
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}
 8009372:	bf00      	nop

08009374 <vl53l5cx_start_ranging>:
	return status;
}

uint8_t vl53l5cx_start_ranging(
		VL53L5CX_Configuration		*p_dev)
{
 8009374:	b5b0      	push	{r4, r5, r7, lr}
 8009376:	b09c      	sub	sp, #112	@ 0x70
 8009378:	af02      	add	r7, sp, #8
 800937a:	6078      	str	r0, [r7, #4]
	uint8_t resolution, status = VL53L5CX_STATUS_OK;
 800937c:	2300      	movs	r3, #0
 800937e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	uint16_t tmp;
	uint32_t i;
	uint32_t header_config[2] = {0, 0};
 8009382:	2300      	movs	r3, #0
 8009384:	653b      	str	r3, [r7, #80]	@ 0x50
 8009386:	2300      	movs	r3, #0
 8009388:	657b      	str	r3, [r7, #84]	@ 0x54

	union Block_header *bh_ptr;
	uint8_t cmd[] = {0x00, 0x03, 0x00, 0x00};
 800938a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800938e:	64fb      	str	r3, [r7, #76]	@ 0x4c

	status |= vl53l5cx_get_resolution(p_dev, &resolution);
 8009390:	f107 035b 	add.w	r3, r7, #91	@ 0x5b
 8009394:	4619      	mov	r1, r3
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 fbd0 	bl	8009b3c <vl53l5cx_get_resolution>
 800939c:	4603      	mov	r3, r0
 800939e:	461a      	mov	r2, r3
 80093a0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80093a4:	4313      	orrs	r3, r2
 80093a6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	p_dev->data_read_size = 0;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2200      	movs	r2, #0
 80093ae:	60da      	str	r2, [r3, #12]
	p_dev->streamcount = 255;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	22ff      	movs	r2, #255	@ 0xff
 80093b4:	721a      	strb	r2, [r3, #8]

	/* Enable mandatory output (meta and common data) */
	uint32_t output_bh_enable[] = {
 80093b6:	4baa      	ldr	r3, [pc, #680]	@ (8009660 <vl53l5cx_start_ranging+0x2ec>)
 80093b8:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80093bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80093be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00000000U,
		0x00000000U,
		0xC0000000U};

	/* Send addresses of possible output */
	uint32_t output[] ={VL53L5CX_START_BH,
 80093c2:	4ba8      	ldr	r3, [pc, #672]	@ (8009664 <vl53l5cx_start_ranging+0x2f0>)
 80093c4:	f107 040c 	add.w	r4, r7, #12
 80093c8:	461d      	mov	r5, r3
 80093ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80093cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80093ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80093d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80093d2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80093d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		VL53L5CX_TARGET_STATUS_BH,
		VL53L5CX_MOTION_DETECT_BH};

	/* Enable selected outputs in the 'platform.h' file */
#ifndef VL53L5CX_DISABLE_AMBIENT_PER_SPAD
	output_bh_enable[0] += (uint32_t)8;
 80093da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093dc:	3308      	adds	r3, #8
 80093de:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_NB_SPADS_ENABLED
	output_bh_enable[0] += (uint32_t)16;
 80093e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093e2:	3310      	adds	r3, #16
 80093e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_NB_TARGET_DETECTED
	output_bh_enable[0] += (uint32_t)32;
 80093e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093e8:	3320      	adds	r3, #32
 80093ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_SIGNAL_PER_SPAD
	output_bh_enable[0] += (uint32_t)64;
 80093ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093ee:	3340      	adds	r3, #64	@ 0x40
 80093f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_RANGE_SIGMA_MM
	output_bh_enable[0] += (uint32_t)128;
 80093f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093f4:	3380      	adds	r3, #128	@ 0x80
 80093f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_DISTANCE_MM
	output_bh_enable[0] += (uint32_t)256;
 80093f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093fa:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80093fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_REFLECTANCE_PERCENT
	output_bh_enable[0] += (uint32_t)512;
 8009400:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009402:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8009406:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_TARGET_STATUS
	output_bh_enable[0] += (uint32_t)1024;
 8009408:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800940a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800940e:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_MOTION_INDICATOR
	output_bh_enable[0] += (uint32_t)2048;
 8009410:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009412:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009416:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif

	/* Update data size */
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 8009418:	2300      	movs	r3, #0
 800941a:	663b      	str	r3, [r7, #96]	@ 0x60
 800941c:	e073      	b.n	8009506 <vl53l5cx_start_ranging+0x192>
	{
		if ((output[i] == (uint8_t)0) 
 800941e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009420:	009b      	lsls	r3, r3, #2
 8009422:	3368      	adds	r3, #104	@ 0x68
 8009424:	443b      	add	r3, r7
 8009426:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d067      	beq.n	80094fe <vl53l5cx_start_ranging+0x18a>
                    || ((output_bh_enable[i/(uint32_t)32]
 800942e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009430:	095b      	lsrs	r3, r3, #5
 8009432:	009b      	lsls	r3, r3, #2
 8009434:	3368      	adds	r3, #104	@ 0x68
 8009436:	443b      	add	r3, r7
 8009438:	f853 2c2c 	ldr.w	r2, [r3, #-44]
                         &((uint32_t)1 << (i%(uint32_t)32))) == (uint32_t)0))
 800943c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800943e:	f003 031f 	and.w	r3, r3, #31
 8009442:	fa22 f303 	lsr.w	r3, r2, r3
 8009446:	f003 0301 	and.w	r3, r3, #1
                    || ((output_bh_enable[i/(uint32_t)32]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d057      	beq.n	80094fe <vl53l5cx_start_ranging+0x18a>
		{
			continue;
		}

		bh_ptr = (union Block_header *)&(output[i]);
 800944e:	f107 020c 	add.w	r2, r7, #12
 8009452:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009454:	009b      	lsls	r3, r3, #2
 8009456:	4413      	add	r3, r2
 8009458:	65fb      	str	r3, [r7, #92]	@ 0x5c
		if (((uint8_t)bh_ptr->type >= (uint8_t)0x1) 
 800945a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	f003 030f 	and.w	r3, r3, #15
 8009462:	b2db      	uxtb	r3, r3
 8009464:	2b00      	cmp	r3, #0
 8009466:	d03a      	beq.n	80094de <vl53l5cx_start_ranging+0x16a>
                    && ((uint8_t)bh_ptr->type < (uint8_t)0x0d))
 8009468:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800946a:	781b      	ldrb	r3, [r3, #0]
 800946c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8009470:	b2db      	uxtb	r3, r3
 8009472:	2b0c      	cmp	r3, #12
 8009474:	d833      	bhi.n	80094de <vl53l5cx_start_ranging+0x16a>
		{
			if ((bh_ptr->idx >= (uint16_t)0x54d0) 
 8009476:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009478:	885b      	ldrh	r3, [r3, #2]
 800947a:	f245 42cf 	movw	r2, #21711	@ 0x54cf
 800947e:	4293      	cmp	r3, r2
 8009480:	d910      	bls.n	80094a4 <vl53l5cx_start_ranging+0x130>
                            && (bh_ptr->idx < (uint16_t)(0x54d0 + 960)))
 8009482:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009484:	885b      	ldrh	r3, [r3, #2]
 8009486:	f645 028f 	movw	r2, #22671	@ 0x588f
 800948a:	4293      	cmp	r3, r2
 800948c:	d80a      	bhi.n	80094a4 <vl53l5cx_start_ranging+0x130>
			{
				bh_ptr->size = resolution;
 800948e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8009492:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009496:	b299      	uxth	r1, r3
 8009498:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800949a:	8813      	ldrh	r3, [r2, #0]
 800949c:	f361 130f 	bfi	r3, r1, #4, #12
 80094a0:	8013      	strh	r3, [r2, #0]
 80094a2:	e009      	b.n	80094b8 <vl53l5cx_start_ranging+0x144>
			}
			else
			{
				bh_ptr->size = (uint16_t)((uint16_t)resolution
 80094a4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80094a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80094ac:	b299      	uxth	r1, r3
 80094ae:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80094b0:	8813      	ldrh	r3, [r2, #0]
 80094b2:	f361 130f 	bfi	r3, r1, #4, #12
 80094b6:	8013      	strh	r3, [r2, #0]
                                  * (uint16_t)VL53L5CX_NB_TARGET_PER_ZONE);
			}
			p_dev->data_read_size += bh_ptr->type * bh_ptr->size;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	68db      	ldr	r3, [r3, #12]
 80094bc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80094be:	7812      	ldrb	r2, [r2, #0]
 80094c0:	f3c2 0203 	ubfx	r2, r2, #0, #4
 80094c4:	b2d2      	uxtb	r2, r2
 80094c6:	4611      	mov	r1, r2
 80094c8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80094ca:	8812      	ldrh	r2, [r2, #0]
 80094cc:	f3c2 120b 	ubfx	r2, r2, #4, #12
 80094d0:	b292      	uxth	r2, r2
 80094d2:	fb01 f202 	mul.w	r2, r1, r2
 80094d6:	441a      	add	r2, r3
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	60da      	str	r2, [r3, #12]
 80094dc:	e009      	b.n	80094f2 <vl53l5cx_start_ranging+0x17e>
		}
		else
		{
			p_dev->data_read_size += bh_ptr->size;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	68db      	ldr	r3, [r3, #12]
 80094e2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80094e4:	8812      	ldrh	r2, [r2, #0]
 80094e6:	f3c2 120b 	ubfx	r2, r2, #4, #12
 80094ea:	b292      	uxth	r2, r2
 80094ec:	441a      	add	r2, r3
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	60da      	str	r2, [r3, #12]
		}
		p_dev->data_read_size += (uint32_t)4;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	68db      	ldr	r3, [r3, #12]
 80094f6:	1d1a      	adds	r2, r3, #4
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	60da      	str	r2, [r3, #12]
 80094fc:	e000      	b.n	8009500 <vl53l5cx_start_ranging+0x18c>
			continue;
 80094fe:	bf00      	nop
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 8009500:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009502:	3301      	adds	r3, #1
 8009504:	663b      	str	r3, [r7, #96]	@ 0x60
 8009506:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009508:	2b0b      	cmp	r3, #11
 800950a:	d988      	bls.n	800941e <vl53l5cx_start_ranging+0xaa>
	}
	p_dev->data_read_size += (uint32_t)24;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	68db      	ldr	r3, [r3, #12]
 8009510:	f103 0218 	add.w	r2, r3, #24
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	60da      	str	r2, [r3, #12]

	status |= vl53l5cx_dci_write_data(p_dev,
 8009518:	f107 010c 	add.w	r1, r7, #12
 800951c:	2330      	movs	r3, #48	@ 0x30
 800951e:	f64d 1280 	movw	r2, #55680	@ 0xd980
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 fd06 	bl	8009f34 <vl53l5cx_dci_write_data>
 8009528:	4603      	mov	r3, r0
 800952a:	461a      	mov	r2, r3
 800952c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009530:	4313      	orrs	r3, r2
 8009532:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint8_t*)&(output), VL53L5CX_DCI_OUTPUT_LIST,
			(uint16_t)sizeof(output));

	header_config[0] = p_dev->data_read_size;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	68db      	ldr	r3, [r3, #12]
 800953a:	653b      	str	r3, [r7, #80]	@ 0x50
	header_config[1] = i + (uint32_t)1;
 800953c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800953e:	3301      	adds	r3, #1
 8009540:	657b      	str	r3, [r7, #84]	@ 0x54

	status |= vl53l5cx_dci_write_data(p_dev,
 8009542:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8009546:	2308      	movs	r3, #8
 8009548:	f64d 1268 	movw	r2, #55656	@ 0xd968
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f000 fcf1 	bl	8009f34 <vl53l5cx_dci_write_data>
 8009552:	4603      	mov	r3, r0
 8009554:	461a      	mov	r2, r3
 8009556:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800955a:	4313      	orrs	r3, r2
 800955c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint8_t*)&(header_config), VL53L5CX_DCI_OUTPUT_CONFIG,
			(uint16_t)sizeof(header_config));

	status |= vl53l5cx_dci_write_data(p_dev,
 8009560:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8009564:	2310      	movs	r3, #16
 8009566:	f64d 1270 	movw	r2, #55664	@ 0xd970
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f000 fce2 	bl	8009f34 <vl53l5cx_dci_write_data>
 8009570:	4603      	mov	r3, r0
 8009572:	461a      	mov	r2, r3
 8009574:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009578:	4313      	orrs	r3, r2
 800957a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint8_t*)&(output_bh_enable), VL53L5CX_DCI_OUTPUT_ENABLES,
			(uint16_t)sizeof(output_bh_enable));

	/* Start xshut bypass (interrupt mode) */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2200      	movs	r2, #0
 8009582:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8009586:	4618      	mov	r0, r3
 8009588:	f7f8 faa5 	bl	8001ad6 <VL53L5CX_WrByte>
 800958c:	4603      	mov	r3, r0
 800958e:	461a      	mov	r2, r3
 8009590:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009594:	4313      	orrs	r3, r2
 8009596:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x09, 0x05);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2205      	movs	r2, #5
 800959e:	2109      	movs	r1, #9
 80095a0:	4618      	mov	r0, r3
 80095a2:	f7f8 fa98 	bl	8001ad6 <VL53L5CX_WrByte>
 80095a6:	4603      	mov	r3, r0
 80095a8:	461a      	mov	r2, r3
 80095aa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80095ae:	4313      	orrs	r3, r2
 80095b0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2202      	movs	r2, #2
 80095b8:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80095bc:	4618      	mov	r0, r3
 80095be:	f7f8 fa8a 	bl	8001ad6 <VL53L5CX_WrByte>
 80095c2:	4603      	mov	r3, r0
 80095c4:	461a      	mov	r2, r3
 80095c6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80095ca:	4313      	orrs	r3, r2
 80095cc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

	/* Start ranging session */
	status |= VL53L5CX_WrMulti(&(p_dev->platform), VL53L5CX_UI_CMD_END -
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80095d6:	2304      	movs	r3, #4
 80095d8:	f642 71fc 	movw	r1, #12284	@ 0x2ffc
 80095dc:	f7f8 faa4 	bl	8001b28 <VL53L5CX_WrMulti>
 80095e0:	4603      	mov	r3, r0
 80095e2:	461a      	mov	r2, r3
 80095e4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80095e8:	4313      	orrs	r3, r2
 80095ea:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint16_t)(4 - 1), (uint8_t*)cmd, sizeof(cmd));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 80095ee:	2303      	movs	r3, #3
 80095f0:	9301      	str	r3, [sp, #4]
 80095f2:	23ff      	movs	r3, #255	@ 0xff
 80095f4:	9300      	str	r3, [sp, #0]
 80095f6:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 80095fa:	2201      	movs	r2, #1
 80095fc:	2104      	movs	r1, #4
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f7fe fea2 	bl	8008348 <_vl53l5cx_poll_for_answer>
 8009604:	4603      	mov	r3, r0
 8009606:	461a      	mov	r2, r3
 8009608:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800960c:	4313      	orrs	r3, r2
 800960e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	/* Read ui range data content and compare if data size is the correct one */
	status |= vl53l5cx_dci_read_data(p_dev,
			(uint8_t*)p_dev->temp_buffer, 0x5440, 12);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f503 61a1 	add.w	r1, r3, #1288	@ 0x508
	status |= vl53l5cx_dci_read_data(p_dev,
 8009618:	230c      	movs	r3, #12
 800961a:	f245 4240 	movw	r2, #21568	@ 0x5440
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f000 fbfe 	bl	8009e20 <vl53l5cx_dci_read_data>
 8009624:	4603      	mov	r3, r0
 8009626:	461a      	mov	r2, r3
 8009628:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800962c:	4313      	orrs	r3, r2
 800962e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	(void)memcpy(&tmp, &(p_dev->temp_buffer[0x8]), sizeof(tmp));
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8009638:	881b      	ldrh	r3, [r3, #0]
 800963a:	b29b      	uxth	r3, r3
 800963c:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
	if(tmp != p_dev->data_read_size)
 8009640:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8009644:	461a      	mov	r2, r3
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	68db      	ldr	r3, [r3, #12]
 800964a:	429a      	cmp	r2, r3
 800964c:	d002      	beq.n	8009654 <vl53l5cx_start_ranging+0x2e0>
	{
		status |= VL53L5CX_STATUS_ERROR;
 800964e:	23ff      	movs	r3, #255	@ 0xff
 8009650:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	}

	return status;
 8009654:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8009658:	4618      	mov	r0, r3
 800965a:	3768      	adds	r7, #104	@ 0x68
 800965c:	46bd      	mov	sp, r7
 800965e:	bdb0      	pop	{r4, r5, r7, pc}
 8009660:	0800d350 	.word	0x0800d350
 8009664:	0800d360 	.word	0x0800d360

08009668 <vl53l5cx_check_data_ready>:
}

uint8_t vl53l5cx_check_data_ready(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*p_isReady)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b084      	sub	sp, #16
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8009672:	2300      	movs	r3, #0
 8009674:	73fb      	strb	r3, [r7, #15]

	status |= VL53L5CX_RdMulti(&(p_dev->platform), 0x0, p_dev->temp_buffer, 4);
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f503 62a1 	add.w	r2, r3, #1288	@ 0x508
 800967e:	2304      	movs	r3, #4
 8009680:	2100      	movs	r1, #0
 8009682:	f7f8 fa7b 	bl	8001b7c <VL53L5CX_RdMulti>
 8009686:	4603      	mov	r3, r0
 8009688:	461a      	mov	r2, r3
 800968a:	7bfb      	ldrb	r3, [r7, #15]
 800968c:	4313      	orrs	r3, r2
 800968e:	73fb      	strb	r3, [r7, #15]

	if((p_dev->temp_buffer[0] != p_dev->streamcount)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f893 2508 	ldrb.w	r2, [r3, #1288]	@ 0x508
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	7a1b      	ldrb	r3, [r3, #8]
 800969a:	429a      	cmp	r2, r3
 800969c:	d020      	beq.n	80096e0 <vl53l5cx_check_data_ready+0x78>
			&& (p_dev->temp_buffer[0] != (uint8_t)255)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f893 3508 	ldrb.w	r3, [r3, #1288]	@ 0x508
 80096a4:	2bff      	cmp	r3, #255	@ 0xff
 80096a6:	d01b      	beq.n	80096e0 <vl53l5cx_check_data_ready+0x78>
			&& (p_dev->temp_buffer[1] == (uint8_t)0x5)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f893 3509 	ldrb.w	r3, [r3, #1289]	@ 0x509
 80096ae:	2b05      	cmp	r3, #5
 80096b0:	d116      	bne.n	80096e0 <vl53l5cx_check_data_ready+0x78>
			&& ((p_dev->temp_buffer[2] & (uint8_t)0x5) == (uint8_t)0x5)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f893 350a 	ldrb.w	r3, [r3, #1290]	@ 0x50a
 80096b8:	f003 0305 	and.w	r3, r3, #5
 80096bc:	2b05      	cmp	r3, #5
 80096be:	d10f      	bne.n	80096e0 <vl53l5cx_check_data_ready+0x78>
			&& ((p_dev->temp_buffer[3] & (uint8_t)0x10) ==(uint8_t)0x10)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f893 350b 	ldrb.w	r3, [r3, #1291]	@ 0x50b
 80096c6:	f003 0310 	and.w	r3, r3, #16
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d008      	beq.n	80096e0 <vl53l5cx_check_data_ready+0x78>
			)
	{
		*p_isReady = (uint8_t)1;
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	2201      	movs	r2, #1
 80096d2:	701a      	strb	r2, [r3, #0]
		 p_dev->streamcount = p_dev->temp_buffer[0];
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f893 2508 	ldrb.w	r2, [r3, #1288]	@ 0x508
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	721a      	strb	r2, [r3, #8]
 80096de:	e00e      	b.n	80096fe <vl53l5cx_check_data_ready+0x96>
	}
	else
	{
        if ((p_dev->temp_buffer[3] & (uint8_t)0x80) != (uint8_t)0)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f893 350b 	ldrb.w	r3, [r3, #1291]	@ 0x50b
 80096e6:	b25b      	sxtb	r3, r3
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	da05      	bge.n	80096f8 <vl53l5cx_check_data_ready+0x90>
        {
        	status |= p_dev->temp_buffer[2];	/* Return GO2 error status */
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f893 250a 	ldrb.w	r2, [r3, #1290]	@ 0x50a
 80096f2:	7bfb      	ldrb	r3, [r7, #15]
 80096f4:	4313      	orrs	r3, r2
 80096f6:	73fb      	strb	r3, [r7, #15]
        }

		*p_isReady = 0;
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	2200      	movs	r2, #0
 80096fc:	701a      	strb	r2, [r3, #0]
	}

	return status;
 80096fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009700:	4618      	mov	r0, r3
 8009702:	3710      	adds	r7, #16
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}

08009708 <vl53l5cx_get_ranging_data>:

uint8_t vl53l5cx_get_ranging_data(
		VL53L5CX_Configuration		*p_dev,
		VL53L5CX_ResultsData		*p_results)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b088      	sub	sp, #32
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
 8009710:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8009712:	2300      	movs	r3, #0
 8009714:	77fb      	strb	r3, [r7, #31]
	union Block_header *bh_ptr;
	uint16_t header_id, footer_id;
	uint32_t i, j, msize;

	status |= VL53L5CX_RdMulti(&(p_dev->platform), 0x0,
 8009716:	6878      	ldr	r0, [r7, #4]
			p_dev->temp_buffer, p_dev->data_read_size);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f503 62a1 	add.w	r2, r3, #1288	@ 0x508
	status |= VL53L5CX_RdMulti(&(p_dev->platform), 0x0,
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	68db      	ldr	r3, [r3, #12]
 8009722:	2100      	movs	r1, #0
 8009724:	f7f8 fa2a 	bl	8001b7c <VL53L5CX_RdMulti>
 8009728:	4603      	mov	r3, r0
 800972a:	461a      	mov	r2, r3
 800972c:	7ffb      	ldrb	r3, [r7, #31]
 800972e:	4313      	orrs	r3, r2
 8009730:	77fb      	strb	r3, [r7, #31]
	p_dev->streamcount = p_dev->temp_buffer[0];
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f893 2508 	ldrb.w	r2, [r3, #1288]	@ 0x508
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	721a      	strb	r2, [r3, #8]
	VL53L5CX_SwapBuffer(p_dev->temp_buffer, (uint16_t)p_dev->data_read_size);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f503 62a1 	add.w	r2, r3, #1288	@ 0x508
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	68db      	ldr	r3, [r3, #12]
 8009746:	b29b      	uxth	r3, r3
 8009748:	4619      	mov	r1, r3
 800974a:	4610      	mov	r0, r2
 800974c:	f7f8 fa40 	bl	8001bd0 <VL53L5CX_SwapBuffer>

	/* Start conversion at position 16 to avoid headers */
	for (i = (uint32_t)16; i 
 8009750:	2310      	movs	r3, #16
 8009752:	61bb      	str	r3, [r7, #24]
 8009754:	e10e      	b.n	8009974 <vl53l5cx_get_ranging_data+0x26c>
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
	{
		bh_ptr = (union Block_header *)&(p_dev->temp_buffer[i]);
 8009756:	69bb      	ldr	r3, [r7, #24]
 8009758:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 800975c:	687a      	ldr	r2, [r7, #4]
 800975e:	4413      	add	r3, r2
 8009760:	60bb      	str	r3, [r7, #8]
		if ((bh_ptr->type > (uint32_t)0x1) 
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	781b      	ldrb	r3, [r3, #0]
 8009766:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800976a:	b2db      	uxtb	r3, r3
 800976c:	2b01      	cmp	r3, #1
 800976e:	d915      	bls.n	800979c <vl53l5cx_get_ranging_data+0x94>
                    && (bh_ptr->type < (uint32_t)0xd))
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	781b      	ldrb	r3, [r3, #0]
 8009774:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8009778:	b2db      	uxtb	r3, r3
 800977a:	2b0c      	cmp	r3, #12
 800977c:	d80e      	bhi.n	800979c <vl53l5cx_get_ranging_data+0x94>
		{
			msize = bh_ptr->type * bh_ptr->size;
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	781b      	ldrb	r3, [r3, #0]
 8009782:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8009786:	b2db      	uxtb	r3, r3
 8009788:	461a      	mov	r2, r3
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	881b      	ldrh	r3, [r3, #0]
 800978e:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8009792:	b29b      	uxth	r3, r3
 8009794:	fb02 f303 	mul.w	r3, r2, r3
 8009798:	613b      	str	r3, [r7, #16]
 800979a:	e005      	b.n	80097a8 <vl53l5cx_get_ranging_data+0xa0>
		}
		else
		{
			msize = bh_ptr->size;
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	881b      	ldrh	r3, [r3, #0]
 80097a0:	f3c3 130b 	ubfx	r3, r3, #4, #12
 80097a4:	b29b      	uxth	r3, r3
 80097a6:	613b      	str	r3, [r7, #16]
		}

		switch(bh_ptr->idx){
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	885b      	ldrh	r3, [r3, #2]
 80097ac:	f24e 0284 	movw	r2, #57476	@ 0xe084
 80097b0:	4293      	cmp	r3, r2
 80097b2:	f000 80bb 	beq.w	800992c <vl53l5cx_get_ranging_data+0x224>
 80097b6:	f24e 0284 	movw	r2, #57476	@ 0xe084
 80097ba:	4293      	cmp	r3, r2
 80097bc:	f300 80d2 	bgt.w	8009964 <vl53l5cx_get_ranging_data+0x25c>
 80097c0:	f24e 0244 	movw	r2, #57412	@ 0xe044
 80097c4:	4293      	cmp	r3, r2
 80097c6:	f000 80a3 	beq.w	8009910 <vl53l5cx_get_ranging_data+0x208>
 80097ca:	f24e 0244 	movw	r2, #57412	@ 0xe044
 80097ce:	4293      	cmp	r3, r2
 80097d0:	f300 80c8 	bgt.w	8009964 <vl53l5cx_get_ranging_data+0x25c>
 80097d4:	f64d 7244 	movw	r2, #57156	@ 0xdf44
 80097d8:	4293      	cmp	r3, r2
 80097da:	f000 808b 	beq.w	80098f4 <vl53l5cx_get_ranging_data+0x1ec>
 80097de:	f64d 7244 	movw	r2, #57156	@ 0xdf44
 80097e2:	4293      	cmp	r3, r2
 80097e4:	f300 80be 	bgt.w	8009964 <vl53l5cx_get_ranging_data+0x25c>
 80097e8:	f64d 62c4 	movw	r2, #57028	@ 0xdec4
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d073      	beq.n	80098d8 <vl53l5cx_get_ranging_data+0x1d0>
 80097f0:	f64d 62c4 	movw	r2, #57028	@ 0xdec4
 80097f4:	4293      	cmp	r3, r2
 80097f6:	f300 80b5 	bgt.w	8009964 <vl53l5cx_get_ranging_data+0x25c>
 80097fa:	f64d 32c4 	movw	r2, #56260	@ 0xdbc4
 80097fe:	4293      	cmp	r3, r2
 8009800:	d05c      	beq.n	80098bc <vl53l5cx_get_ranging_data+0x1b4>
 8009802:	f64d 32c4 	movw	r2, #56260	@ 0xdbc4
 8009806:	4293      	cmp	r3, r2
 8009808:	f300 80ac 	bgt.w	8009964 <vl53l5cx_get_ranging_data+0x25c>
 800980c:	f64d 3284 	movw	r2, #56196	@ 0xdb84
 8009810:	4293      	cmp	r3, r2
 8009812:	d045      	beq.n	80098a0 <vl53l5cx_get_ranging_data+0x198>
 8009814:	f64d 3284 	movw	r2, #56196	@ 0xdb84
 8009818:	4293      	cmp	r3, r2
 800981a:	f300 80a3 	bgt.w	8009964 <vl53l5cx_get_ranging_data+0x25c>
 800981e:	f64d 0258 	movw	r2, #55384	@ 0xd858
 8009822:	4293      	cmp	r3, r2
 8009824:	f000 8090 	beq.w	8009948 <vl53l5cx_get_ranging_data+0x240>
 8009828:	f64d 0258 	movw	r2, #55384	@ 0xd858
 800982c:	4293      	cmp	r3, r2
 800982e:	f300 8099 	bgt.w	8009964 <vl53l5cx_get_ranging_data+0x25c>
 8009832:	f245 52d0 	movw	r2, #21968	@ 0x55d0
 8009836:	4293      	cmp	r3, r2
 8009838:	d024      	beq.n	8009884 <vl53l5cx_get_ranging_data+0x17c>
 800983a:	f245 52d0 	movw	r2, #21968	@ 0x55d0
 800983e:	4293      	cmp	r3, r2
 8009840:	f300 8090 	bgt.w	8009964 <vl53l5cx_get_ranging_data+0x25c>
 8009844:	f245 42b4 	movw	r2, #21684	@ 0x54b4
 8009848:	4293      	cmp	r3, r2
 800984a:	d004      	beq.n	8009856 <vl53l5cx_get_ranging_data+0x14e>
 800984c:	f245 42d0 	movw	r2, #21712	@ 0x54d0
 8009850:	4293      	cmp	r3, r2
 8009852:	d00a      	beq.n	800986a <vl53l5cx_get_ranging_data+0x162>
				(void)memcpy(&p_results->motion_indicator,
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
				break;
#endif
			default:
				break;
 8009854:	e086      	b.n	8009964 <vl53l5cx_get_ranging_data+0x25c>
						(int8_t)p_dev->temp_buffer[i + (uint32_t)12];
 8009856:	69bb      	ldr	r3, [r7, #24]
 8009858:	330c      	adds	r3, #12
 800985a:	687a      	ldr	r2, [r7, #4]
 800985c:	4413      	add	r3, r2
 800985e:	f893 3508 	ldrb.w	r3, [r3, #1288]	@ 0x508
 8009862:	b25a      	sxtb	r2, r3
				p_results->silicon_temp_degc =
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	701a      	strb	r2, [r3, #0]
				break;
 8009868:	e07d      	b.n	8009966 <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->ambient_per_spad,
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	1d18      	adds	r0, r3, #4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800986e:	69bb      	ldr	r3, [r7, #24]
 8009870:	3304      	adds	r3, #4
 8009872:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8009876:	687a      	ldr	r2, [r7, #4]
 8009878:	4413      	add	r3, r2
				(void)memcpy(p_results->ambient_per_spad,
 800987a:	693a      	ldr	r2, [r7, #16]
 800987c:	4619      	mov	r1, r3
 800987e:	f001 faea 	bl	800ae56 <memcpy>
				break;
 8009882:	e070      	b.n	8009966 <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->nb_spads_enabled,
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800988a:	69bb      	ldr	r3, [r7, #24]
 800988c:	3304      	adds	r3, #4
 800988e:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8009892:	687a      	ldr	r2, [r7, #4]
 8009894:	4413      	add	r3, r2
				(void)memcpy(p_results->nb_spads_enabled,
 8009896:	693a      	ldr	r2, [r7, #16]
 8009898:	4619      	mov	r1, r3
 800989a:	f001 fadc 	bl	800ae56 <memcpy>
				break;
 800989e:	e062      	b.n	8009966 <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->nb_target_detected,
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	f503 7082 	add.w	r0, r3, #260	@ 0x104
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80098a6:	69bb      	ldr	r3, [r7, #24]
 80098a8:	3304      	adds	r3, #4
 80098aa:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 80098ae:	687a      	ldr	r2, [r7, #4]
 80098b0:	4413      	add	r3, r2
				(void)memcpy(p_results->nb_target_detected,
 80098b2:	693a      	ldr	r2, [r7, #16]
 80098b4:	4619      	mov	r1, r3
 80098b6:	f001 face 	bl	800ae56 <memcpy>
				break;
 80098ba:	e054      	b.n	8009966 <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->signal_per_spad,
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	f503 7011 	add.w	r0, r3, #580	@ 0x244
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80098c2:	69bb      	ldr	r3, [r7, #24]
 80098c4:	3304      	adds	r3, #4
 80098c6:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 80098ca:	687a      	ldr	r2, [r7, #4]
 80098cc:	4413      	add	r3, r2
				(void)memcpy(p_results->signal_per_spad,
 80098ce:	693a      	ldr	r2, [r7, #16]
 80098d0:	4619      	mov	r1, r3
 80098d2:	f001 fac0 	bl	800ae56 <memcpy>
				break;
 80098d6:	e046      	b.n	8009966 <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->range_sigma_mm,
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	f503 7051 	add.w	r0, r3, #836	@ 0x344
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80098de:	69bb      	ldr	r3, [r7, #24]
 80098e0:	3304      	adds	r3, #4
 80098e2:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 80098e6:	687a      	ldr	r2, [r7, #4]
 80098e8:	4413      	add	r3, r2
				(void)memcpy(p_results->range_sigma_mm,
 80098ea:	693a      	ldr	r2, [r7, #16]
 80098ec:	4619      	mov	r1, r3
 80098ee:	f001 fab2 	bl	800ae56 <memcpy>
				break;
 80098f2:	e038      	b.n	8009966 <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->distance_mm,
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	f503 7071 	add.w	r0, r3, #964	@ 0x3c4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80098fa:	69bb      	ldr	r3, [r7, #24]
 80098fc:	3304      	adds	r3, #4
 80098fe:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8009902:	687a      	ldr	r2, [r7, #4]
 8009904:	4413      	add	r3, r2
				(void)memcpy(p_results->distance_mm,
 8009906:	693a      	ldr	r2, [r7, #16]
 8009908:	4619      	mov	r1, r3
 800990a:	f001 faa4 	bl	800ae56 <memcpy>
				break;
 800990e:	e02a      	b.n	8009966 <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->reflectance,
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	f203 4044 	addw	r0, r3, #1092	@ 0x444
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8009916:	69bb      	ldr	r3, [r7, #24]
 8009918:	3304      	adds	r3, #4
 800991a:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 800991e:	687a      	ldr	r2, [r7, #4]
 8009920:	4413      	add	r3, r2
				(void)memcpy(p_results->reflectance,
 8009922:	693a      	ldr	r2, [r7, #16]
 8009924:	4619      	mov	r1, r3
 8009926:	f001 fa96 	bl	800ae56 <memcpy>
				break;
 800992a:	e01c      	b.n	8009966 <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->target_status,
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	f203 4084 	addw	r0, r3, #1156	@ 0x484
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8009932:	69bb      	ldr	r3, [r7, #24]
 8009934:	3304      	adds	r3, #4
 8009936:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 800993a:	687a      	ldr	r2, [r7, #4]
 800993c:	4413      	add	r3, r2
				(void)memcpy(p_results->target_status,
 800993e:	693a      	ldr	r2, [r7, #16]
 8009940:	4619      	mov	r1, r3
 8009942:	f001 fa88 	bl	800ae56 <memcpy>
				break;
 8009946:	e00e      	b.n	8009966 <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(&p_results->motion_indicator,
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	f203 40c4 	addw	r0, r3, #1220	@ 0x4c4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800994e:	69bb      	ldr	r3, [r7, #24]
 8009950:	3304      	adds	r3, #4
 8009952:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8009956:	687a      	ldr	r2, [r7, #4]
 8009958:	4413      	add	r3, r2
				(void)memcpy(&p_results->motion_indicator,
 800995a:	693a      	ldr	r2, [r7, #16]
 800995c:	4619      	mov	r1, r3
 800995e:	f001 fa7a 	bl	800ae56 <memcpy>
				break;
 8009962:	e000      	b.n	8009966 <vl53l5cx_get_ranging_data+0x25e>
				break;
 8009964:	bf00      	nop
		}
		i += msize;
 8009966:	69ba      	ldr	r2, [r7, #24]
 8009968:	693b      	ldr	r3, [r7, #16]
 800996a:	4413      	add	r3, r2
 800996c:	61bb      	str	r3, [r7, #24]
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
 800996e:	69bb      	ldr	r3, [r7, #24]
 8009970:	3304      	adds	r3, #4
 8009972:	61bb      	str	r3, [r7, #24]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	68db      	ldr	r3, [r3, #12]
 8009978:	69ba      	ldr	r2, [r7, #24]
 800997a:	429a      	cmp	r2, r3
 800997c:	f4ff aeeb 	bcc.w	8009756 <vl53l5cx_get_ranging_data+0x4e>

#ifndef VL53L5CX_USE_RAW_FORMAT

	/* Convert data into their real format */
#ifndef VL53L5CX_DISABLE_AMBIENT_PER_SPAD
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 8009980:	2300      	movs	r3, #0
 8009982:	61bb      	str	r3, [r7, #24]
 8009984:	e00d      	b.n	80099a2 <vl53l5cx_get_ranging_data+0x29a>
	{
		p_results->ambient_per_spad[i] /= (uint32_t)2048;
 8009986:	683a      	ldr	r2, [r7, #0]
 8009988:	69bb      	ldr	r3, [r7, #24]
 800998a:	009b      	lsls	r3, r3, #2
 800998c:	4413      	add	r3, r2
 800998e:	685b      	ldr	r3, [r3, #4]
 8009990:	0ada      	lsrs	r2, r3, #11
 8009992:	6839      	ldr	r1, [r7, #0]
 8009994:	69bb      	ldr	r3, [r7, #24]
 8009996:	009b      	lsls	r3, r3, #2
 8009998:	440b      	add	r3, r1
 800999a:	605a      	str	r2, [r3, #4]
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 800999c:	69bb      	ldr	r3, [r7, #24]
 800999e:	3301      	adds	r3, #1
 80099a0:	61bb      	str	r3, [r7, #24]
 80099a2:	69bb      	ldr	r3, [r7, #24]
 80099a4:	2b3f      	cmp	r3, #63	@ 0x3f
 80099a6:	d9ee      	bls.n	8009986 <vl53l5cx_get_ranging_data+0x27e>
	}
#endif

	for(i = 0; i < (uint32_t)(VL53L5CX_RESOLUTION_8X8
 80099a8:	2300      	movs	r3, #0
 80099aa:	61bb      	str	r3, [r7, #24]
 80099ac:	e056      	b.n	8009a5c <vl53l5cx_get_ranging_data+0x354>
			*VL53L5CX_NB_TARGET_PER_ZONE); i++)
	{
#ifndef VL53L5CX_DISABLE_DISTANCE_MM
		p_results->distance_mm[i] /= 4;
 80099ae:	683a      	ldr	r2, [r7, #0]
 80099b0:	69bb      	ldr	r3, [r7, #24]
 80099b2:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 80099b6:	005b      	lsls	r3, r3, #1
 80099b8:	4413      	add	r3, r2
 80099ba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	da00      	bge.n	80099c4 <vl53l5cx_get_ranging_data+0x2bc>
 80099c2:	3303      	adds	r3, #3
 80099c4:	109b      	asrs	r3, r3, #2
 80099c6:	b219      	sxth	r1, r3
 80099c8:	683a      	ldr	r2, [r7, #0]
 80099ca:	69bb      	ldr	r3, [r7, #24]
 80099cc:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 80099d0:	005b      	lsls	r3, r3, #1
 80099d2:	4413      	add	r3, r2
 80099d4:	460a      	mov	r2, r1
 80099d6:	809a      	strh	r2, [r3, #4]
		if(p_results->distance_mm[i] < 0)
 80099d8:	683a      	ldr	r2, [r7, #0]
 80099da:	69bb      	ldr	r3, [r7, #24]
 80099dc:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 80099e0:	005b      	lsls	r3, r3, #1
 80099e2:	4413      	add	r3, r2
 80099e4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	da07      	bge.n	80099fc <vl53l5cx_get_ranging_data+0x2f4>
		{
			p_results->distance_mm[i] = 0;
 80099ec:	683a      	ldr	r2, [r7, #0]
 80099ee:	69bb      	ldr	r3, [r7, #24]
 80099f0:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 80099f4:	005b      	lsls	r3, r3, #1
 80099f6:	4413      	add	r3, r2
 80099f8:	2200      	movs	r2, #0
 80099fa:	809a      	strh	r2, [r3, #4]
		}
#endif
#ifndef VL53L5CX_DISABLE_REFLECTANCE_PERCENT
		p_results->reflectance[i] /= (uint8_t)2;
 80099fc:	683a      	ldr	r2, [r7, #0]
 80099fe:	69bb      	ldr	r3, [r7, #24]
 8009a00:	4413      	add	r3, r2
 8009a02:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 8009a06:	781b      	ldrb	r3, [r3, #0]
 8009a08:	085b      	lsrs	r3, r3, #1
 8009a0a:	b2d9      	uxtb	r1, r3
 8009a0c:	683a      	ldr	r2, [r7, #0]
 8009a0e:	69bb      	ldr	r3, [r7, #24]
 8009a10:	4413      	add	r3, r2
 8009a12:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 8009a16:	460a      	mov	r2, r1
 8009a18:	701a      	strb	r2, [r3, #0]
#endif
#ifndef VL53L5CX_DISABLE_RANGE_SIGMA_MM
		p_results->range_sigma_mm[i] /= (uint16_t)128;
 8009a1a:	683a      	ldr	r2, [r7, #0]
 8009a1c:	69bb      	ldr	r3, [r7, #24]
 8009a1e:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8009a22:	005b      	lsls	r3, r3, #1
 8009a24:	4413      	add	r3, r2
 8009a26:	889b      	ldrh	r3, [r3, #4]
 8009a28:	09db      	lsrs	r3, r3, #7
 8009a2a:	b299      	uxth	r1, r3
 8009a2c:	683a      	ldr	r2, [r7, #0]
 8009a2e:	69bb      	ldr	r3, [r7, #24]
 8009a30:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8009a34:	005b      	lsls	r3, r3, #1
 8009a36:	4413      	add	r3, r2
 8009a38:	460a      	mov	r2, r1
 8009a3a:	809a      	strh	r2, [r3, #4]
#endif
#ifndef VL53L5CX_DISABLE_SIGNAL_PER_SPAD
		p_results->signal_per_spad[i] /= (uint32_t)2048;
 8009a3c:	683a      	ldr	r2, [r7, #0]
 8009a3e:	69bb      	ldr	r3, [r7, #24]
 8009a40:	3390      	adds	r3, #144	@ 0x90
 8009a42:	009b      	lsls	r3, r3, #2
 8009a44:	4413      	add	r3, r2
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	0ada      	lsrs	r2, r3, #11
 8009a4a:	6839      	ldr	r1, [r7, #0]
 8009a4c:	69bb      	ldr	r3, [r7, #24]
 8009a4e:	3390      	adds	r3, #144	@ 0x90
 8009a50:	009b      	lsls	r3, r3, #2
 8009a52:	440b      	add	r3, r1
 8009a54:	605a      	str	r2, [r3, #4]
			*VL53L5CX_NB_TARGET_PER_ZONE); i++)
 8009a56:	69bb      	ldr	r3, [r7, #24]
 8009a58:	3301      	adds	r3, #1
 8009a5a:	61bb      	str	r3, [r7, #24]
	for(i = 0; i < (uint32_t)(VL53L5CX_RESOLUTION_8X8
 8009a5c:	69bb      	ldr	r3, [r7, #24]
 8009a5e:	2b3f      	cmp	r3, #63	@ 0x3f
 8009a60:	d9a5      	bls.n	80099ae <vl53l5cx_get_ranging_data+0x2a6>
#endif
	}

	/* Set target status to 255 if no target is detected for this zone */
#ifndef VL53L5CX_DISABLE_NB_TARGET_DETECTED
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 8009a62:	2300      	movs	r3, #0
 8009a64:	61bb      	str	r3, [r7, #24]
 8009a66:	e01b      	b.n	8009aa0 <vl53l5cx_get_ranging_data+0x398>
	{
		if(p_results->nb_target_detected[i] == (uint8_t)0){
 8009a68:	683a      	ldr	r2, [r7, #0]
 8009a6a:	69bb      	ldr	r3, [r7, #24]
 8009a6c:	4413      	add	r3, r2
 8009a6e:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8009a72:	781b      	ldrb	r3, [r3, #0]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d110      	bne.n	8009a9a <vl53l5cx_get_ranging_data+0x392>
			for(j = 0; j < (uint32_t)
 8009a78:	2300      	movs	r3, #0
 8009a7a:	617b      	str	r3, [r7, #20]
 8009a7c:	e00a      	b.n	8009a94 <vl53l5cx_get_ranging_data+0x38c>
				VL53L5CX_NB_TARGET_PER_ZONE; j++)
			{
#ifndef VL53L5CX_DISABLE_TARGET_STATUS
				p_results->target_status
				[((uint32_t)VL53L5CX_NB_TARGET_PER_ZONE
					*(uint32_t)i) + j]=(uint8_t)255;
 8009a7e:	69ba      	ldr	r2, [r7, #24]
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	4413      	add	r3, r2
 8009a84:	683a      	ldr	r2, [r7, #0]
 8009a86:	4413      	add	r3, r2
 8009a88:	22ff      	movs	r2, #255	@ 0xff
 8009a8a:	f883 2484 	strb.w	r2, [r3, #1156]	@ 0x484
				VL53L5CX_NB_TARGET_PER_ZONE; j++)
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	3301      	adds	r3, #1
 8009a92:	617b      	str	r3, [r7, #20]
			for(j = 0; j < (uint32_t)
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d0f1      	beq.n	8009a7e <vl53l5cx_get_ranging_data+0x376>
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 8009a9a:	69bb      	ldr	r3, [r7, #24]
 8009a9c:	3301      	adds	r3, #1
 8009a9e:	61bb      	str	r3, [r7, #24]
 8009aa0:	69bb      	ldr	r3, [r7, #24]
 8009aa2:	2b3f      	cmp	r3, #63	@ 0x3f
 8009aa4:	d9e0      	bls.n	8009a68 <vl53l5cx_get_ranging_data+0x360>
		}
	}
#endif

#ifndef VL53L5CX_DISABLE_MOTION_INDICATOR
	for(i = 0; i < (uint32_t)32; i++)
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	61bb      	str	r3, [r7, #24]
 8009aaa:	e014      	b.n	8009ad6 <vl53l5cx_get_ranging_data+0x3ce>
	{
		p_results->motion_indicator.motion[i] /= (uint32_t)65535;
 8009aac:	683a      	ldr	r2, [r7, #0]
 8009aae:	69bb      	ldr	r3, [r7, #24]
 8009ab0:	f503 7399 	add.w	r3, r3, #306	@ 0x132
 8009ab4:	009b      	lsls	r3, r3, #2
 8009ab6:	4413      	add	r3, r2
 8009ab8:	689b      	ldr	r3, [r3, #8]
 8009aba:	4a1f      	ldr	r2, [pc, #124]	@ (8009b38 <vl53l5cx_get_ranging_data+0x430>)
 8009abc:	fba2 2303 	umull	r2, r3, r2, r3
 8009ac0:	0bda      	lsrs	r2, r3, #15
 8009ac2:	6839      	ldr	r1, [r7, #0]
 8009ac4:	69bb      	ldr	r3, [r7, #24]
 8009ac6:	f503 7399 	add.w	r3, r3, #306	@ 0x132
 8009aca:	009b      	lsls	r3, r3, #2
 8009acc:	440b      	add	r3, r1
 8009ace:	609a      	str	r2, [r3, #8]
	for(i = 0; i < (uint32_t)32; i++)
 8009ad0:	69bb      	ldr	r3, [r7, #24]
 8009ad2:	3301      	adds	r3, #1
 8009ad4:	61bb      	str	r3, [r7, #24]
 8009ad6:	69bb      	ldr	r3, [r7, #24]
 8009ad8:	2b1f      	cmp	r3, #31
 8009ada:	d9e7      	bls.n	8009aac <vl53l5cx_get_ranging_data+0x3a4>

#endif

	/* Check if footer id and header id are matching. This allows to detect
	 * corrupted frames */
	header_id = ((uint16_t)(p_dev->temp_buffer[0x8])<<8) & 0xFF00U;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f893 3510 	ldrb.w	r3, [r3, #1296]	@ 0x510
 8009ae2:	021b      	lsls	r3, r3, #8
 8009ae4:	81fb      	strh	r3, [r7, #14]
	header_id |= ((uint16_t)(p_dev->temp_buffer[0x9])) & 0x00FFU;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f893 3511 	ldrb.w	r3, [r3, #1297]	@ 0x511
 8009aec:	461a      	mov	r2, r3
 8009aee:	89fb      	ldrh	r3, [r7, #14]
 8009af0:	4313      	orrs	r3, r2
 8009af2:	81fb      	strh	r3, [r7, #14]

	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	68db      	ldr	r3, [r3, #12]
		- (uint32_t)4]) << 8) & 0xFF00U;
 8009af8:	3b04      	subs	r3, #4
	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8009afa:	687a      	ldr	r2, [r7, #4]
 8009afc:	4413      	add	r3, r2
 8009afe:	f893 3508 	ldrb.w	r3, [r3, #1288]	@ 0x508
 8009b02:	021b      	lsls	r3, r3, #8
 8009b04:	81bb      	strh	r3, [r7, #12]
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	68db      	ldr	r3, [r3, #12]
		- (uint32_t)3])) & 0xFFU;
 8009b0a:	3b03      	subs	r3, #3
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8009b0c:	687a      	ldr	r2, [r7, #4]
 8009b0e:	4413      	add	r3, r2
 8009b10:	f893 3508 	ldrb.w	r3, [r3, #1288]	@ 0x508
 8009b14:	461a      	mov	r2, r3
 8009b16:	89bb      	ldrh	r3, [r7, #12]
 8009b18:	4313      	orrs	r3, r2
 8009b1a:	81bb      	strh	r3, [r7, #12]

	if(header_id != footer_id)
 8009b1c:	89fa      	ldrh	r2, [r7, #14]
 8009b1e:	89bb      	ldrh	r3, [r7, #12]
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d003      	beq.n	8009b2c <vl53l5cx_get_ranging_data+0x424>
	{
		status |= VL53L5CX_STATUS_CORRUPTED_FRAME;
 8009b24:	7ffb      	ldrb	r3, [r7, #31]
 8009b26:	f043 0302 	orr.w	r3, r3, #2
 8009b2a:	77fb      	strb	r3, [r7, #31]
	}

	return status;
 8009b2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3720      	adds	r7, #32
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
 8009b36:	bf00      	nop
 8009b38:	80008001 	.word	0x80008001

08009b3c <vl53l5cx_get_resolution>:

uint8_t vl53l5cx_get_resolution(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*p_resolution)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b084      	sub	sp, #16
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8009b46:	2300      	movs	r3, #0
 8009b48:	73fb      	strb	r3, [r7, #15]

	status |= vl53l5cx_dci_read_data(p_dev, p_dev->temp_buffer,
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f503 61a1 	add.w	r1, r3, #1288	@ 0x508
 8009b50:	2308      	movs	r3, #8
 8009b52:	f245 4250 	movw	r2, #21584	@ 0x5450
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 f962 	bl	8009e20 <vl53l5cx_dci_read_data>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	461a      	mov	r2, r3
 8009b60:	7bfb      	ldrb	r3, [r7, #15]
 8009b62:	4313      	orrs	r3, r2
 8009b64:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_ZONE_CONFIG, 8);
	*p_resolution = p_dev->temp_buffer[0x00]*p_dev->temp_buffer[0x01];
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f893 2508 	ldrb.w	r2, [r3, #1288]	@ 0x508
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f893 3509 	ldrb.w	r3, [r3, #1289]	@ 0x509
 8009b72:	fb12 f303 	smulbb	r3, r2, r3
 8009b76:	b2da      	uxtb	r2, r3
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	701a      	strb	r2, [r3, #0]

	return status;
 8009b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3710      	adds	r7, #16
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}

08009b86 <vl53l5cx_set_resolution>:


uint8_t vl53l5cx_set_resolution(
		VL53L5CX_Configuration 		 *p_dev,
		uint8_t				resolution)
{
 8009b86:	b580      	push	{r7, lr}
 8009b88:	b084      	sub	sp, #16
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	6078      	str	r0, [r7, #4]
 8009b8e:	460b      	mov	r3, r1
 8009b90:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L5CX_STATUS_OK;
 8009b92:	2300      	movs	r3, #0
 8009b94:	73fb      	strb	r3, [r7, #15]

	switch(resolution){
 8009b96:	78fb      	ldrb	r3, [r7, #3]
 8009b98:	2b10      	cmp	r3, #16
 8009b9a:	d002      	beq.n	8009ba2 <vl53l5cx_set_resolution+0x1c>
 8009b9c:	2b40      	cmp	r3, #64	@ 0x40
 8009b9e:	d055      	beq.n	8009c4c <vl53l5cx_set_resolution+0xc6>
 8009ba0:	e0a9      	b.n	8009cf6 <vl53l5cx_set_resolution+0x170>
		case VL53L5CX_RESOLUTION_4X4:
			status |= vl53l5cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f503 61a1 	add.w	r1, r3, #1288	@ 0x508
			status |= vl53l5cx_dci_read_data(p_dev,
 8009ba8:	2310      	movs	r3, #16
 8009baa:	f64a 5238 	movw	r2, #44344	@ 0xad38
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f000 f936 	bl	8009e20 <vl53l5cx_dci_read_data>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	7bfb      	ldrb	r3, [r7, #15]
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 64;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2240      	movs	r2, #64	@ 0x40
 8009bc2:	f883 250c 	strb.w	r2, [r3, #1292]	@ 0x50c
			p_dev->temp_buffer[0x06] = 64;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2240      	movs	r2, #64	@ 0x40
 8009bca:	f883 250e 	strb.w	r2, [r3, #1294]	@ 0x50e
			p_dev->temp_buffer[0x09] = 4;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2204      	movs	r2, #4
 8009bd2:	f883 2511 	strb.w	r2, [r3, #1297]	@ 0x511
			status |= vl53l5cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f503 61a1 	add.w	r1, r3, #1288	@ 0x508
			status |= vl53l5cx_dci_write_data(p_dev,
 8009bdc:	2310      	movs	r3, #16
 8009bde:	f64a 5238 	movw	r2, #44344	@ 0xad38
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f000 f9a6 	bl	8009f34 <vl53l5cx_dci_write_data>
 8009be8:	4603      	mov	r3, r0
 8009bea:	461a      	mov	r2, r3
 8009bec:	7bfb      	ldrb	r3, [r7, #15]
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_DSS_CONFIG, 16);

			status |= vl53l5cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f503 61a1 	add.w	r1, r3, #1288	@ 0x508
			status |= vl53l5cx_dci_read_data(p_dev,
 8009bf8:	2308      	movs	r3, #8
 8009bfa:	f245 4250 	movw	r2, #21584	@ 0x5450
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f000 f90e 	bl	8009e20 <vl53l5cx_dci_read_data>
 8009c04:	4603      	mov	r3, r0
 8009c06:	461a      	mov	r2, r3
 8009c08:	7bfb      	ldrb	r3, [r7, #15]
 8009c0a:	4313      	orrs	r3, r2
 8009c0c:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 4;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2204      	movs	r2, #4
 8009c12:	f883 2508 	strb.w	r2, [r3, #1288]	@ 0x508
			p_dev->temp_buffer[0x01] = 4;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2204      	movs	r2, #4
 8009c1a:	f883 2509 	strb.w	r2, [r3, #1289]	@ 0x509
			p_dev->temp_buffer[0x04] = 8;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2208      	movs	r2, #8
 8009c22:	f883 250c 	strb.w	r2, [r3, #1292]	@ 0x50c
			p_dev->temp_buffer[0x05] = 8;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2208      	movs	r2, #8
 8009c2a:	f883 250d 	strb.w	r2, [r3, #1293]	@ 0x50d
			status |= vl53l5cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f503 61a1 	add.w	r1, r3, #1288	@ 0x508
			status |= vl53l5cx_dci_write_data(p_dev,
 8009c34:	2308      	movs	r3, #8
 8009c36:	f245 4250 	movw	r2, #21584	@ 0x5450
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f000 f97a 	bl	8009f34 <vl53l5cx_dci_write_data>
 8009c40:	4603      	mov	r3, r0
 8009c42:	461a      	mov	r2, r3
 8009c44:	7bfb      	ldrb	r3, [r7, #15]
 8009c46:	4313      	orrs	r3, r2
 8009c48:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_ZONE_CONFIG, 8);
			break;
 8009c4a:	e057      	b.n	8009cfc <vl53l5cx_set_resolution+0x176>

		case VL53L5CX_RESOLUTION_8X8:
			status |= vl53l5cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f503 61a1 	add.w	r1, r3, #1288	@ 0x508
			status |= vl53l5cx_dci_read_data(p_dev,
 8009c52:	2310      	movs	r3, #16
 8009c54:	f64a 5238 	movw	r2, #44344	@ 0xad38
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f000 f8e1 	bl	8009e20 <vl53l5cx_dci_read_data>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	461a      	mov	r2, r3
 8009c62:	7bfb      	ldrb	r3, [r7, #15]
 8009c64:	4313      	orrs	r3, r2
 8009c66:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 16;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2210      	movs	r2, #16
 8009c6c:	f883 250c 	strb.w	r2, [r3, #1292]	@ 0x50c
			p_dev->temp_buffer[0x06] = 16;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2210      	movs	r2, #16
 8009c74:	f883 250e 	strb.w	r2, [r3, #1294]	@ 0x50e
			p_dev->temp_buffer[0x09] = 1;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	f883 2511 	strb.w	r2, [r3, #1297]	@ 0x511
			status |= vl53l5cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f503 61a1 	add.w	r1, r3, #1288	@ 0x508
			status |= vl53l5cx_dci_write_data(p_dev,
 8009c86:	2310      	movs	r3, #16
 8009c88:	f64a 5238 	movw	r2, #44344	@ 0xad38
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f000 f951 	bl	8009f34 <vl53l5cx_dci_write_data>
 8009c92:	4603      	mov	r3, r0
 8009c94:	461a      	mov	r2, r3
 8009c96:	7bfb      	ldrb	r3, [r7, #15]
 8009c98:	4313      	orrs	r3, r2
 8009c9a:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_DSS_CONFIG, 16);

			status |= vl53l5cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f503 61a1 	add.w	r1, r3, #1288	@ 0x508
			status |= vl53l5cx_dci_read_data(p_dev,
 8009ca2:	2308      	movs	r3, #8
 8009ca4:	f245 4250 	movw	r2, #21584	@ 0x5450
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f000 f8b9 	bl	8009e20 <vl53l5cx_dci_read_data>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	461a      	mov	r2, r3
 8009cb2:	7bfb      	ldrb	r3, [r7, #15]
 8009cb4:	4313      	orrs	r3, r2
 8009cb6:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 8;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2208      	movs	r2, #8
 8009cbc:	f883 2508 	strb.w	r2, [r3, #1288]	@ 0x508
			p_dev->temp_buffer[0x01] = 8;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2208      	movs	r2, #8
 8009cc4:	f883 2509 	strb.w	r2, [r3, #1289]	@ 0x509
			p_dev->temp_buffer[0x04] = 4;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2204      	movs	r2, #4
 8009ccc:	f883 250c 	strb.w	r2, [r3, #1292]	@ 0x50c
			p_dev->temp_buffer[0x05] = 4;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2204      	movs	r2, #4
 8009cd4:	f883 250d 	strb.w	r2, [r3, #1293]	@ 0x50d
			status |= vl53l5cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f503 61a1 	add.w	r1, r3, #1288	@ 0x508
			status |= vl53l5cx_dci_write_data(p_dev,
 8009cde:	2308      	movs	r3, #8
 8009ce0:	f245 4250 	movw	r2, #21584	@ 0x5450
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f000 f925 	bl	8009f34 <vl53l5cx_dci_write_data>
 8009cea:	4603      	mov	r3, r0
 8009cec:	461a      	mov	r2, r3
 8009cee:	7bfb      	ldrb	r3, [r7, #15]
 8009cf0:	4313      	orrs	r3, r2
 8009cf2:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_ZONE_CONFIG, 8);

			break;
 8009cf4:	e002      	b.n	8009cfc <vl53l5cx_set_resolution+0x176>

		default:
			status = VL53L5CX_STATUS_INVALID_PARAM;
 8009cf6:	237f      	movs	r3, #127	@ 0x7f
 8009cf8:	73fb      	strb	r3, [r7, #15]
			break;
 8009cfa:	bf00      	nop
		}

	status |= _vl53l5cx_send_offset_data(p_dev, resolution);
 8009cfc:	78fb      	ldrb	r3, [r7, #3]
 8009cfe:	4619      	mov	r1, r3
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f7fe fbb3 	bl	800846c <_vl53l5cx_send_offset_data>
 8009d06:	4603      	mov	r3, r0
 8009d08:	461a      	mov	r2, r3
 8009d0a:	7bfb      	ldrb	r3, [r7, #15]
 8009d0c:	4313      	orrs	r3, r2
 8009d0e:	73fb      	strb	r3, [r7, #15]
	status |= _vl53l5cx_send_xtalk_data(p_dev, resolution);
 8009d10:	78fb      	ldrb	r3, [r7, #3]
 8009d12:	4619      	mov	r1, r3
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f7fe fd75 	bl	8008804 <_vl53l5cx_send_xtalk_data>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	461a      	mov	r2, r3
 8009d1e:	7bfb      	ldrb	r3, [r7, #15]
 8009d20:	4313      	orrs	r3, r2
 8009d22:	73fb      	strb	r3, [r7, #15]

	return status;
 8009d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3710      	adds	r7, #16
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}

08009d2e <vl53l5cx_set_ranging_frequency_hz>:
}

uint8_t vl53l5cx_set_ranging_frequency_hz(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				frequency_hz)
{
 8009d2e:	b580      	push	{r7, lr}
 8009d30:	b088      	sub	sp, #32
 8009d32:	af04      	add	r7, sp, #16
 8009d34:	6078      	str	r0, [r7, #4]
 8009d36:	460b      	mov	r3, r1
 8009d38:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L5CX_STATUS_OK;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	73fb      	strb	r3, [r7, #15]

	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f503 61a1 	add.w	r1, r3, #1288	@ 0x508
 8009d44:	2301      	movs	r3, #1
 8009d46:	9302      	str	r3, [sp, #8]
 8009d48:	2301      	movs	r3, #1
 8009d4a:	9301      	str	r3, [sp, #4]
 8009d4c:	1cfb      	adds	r3, r7, #3
 8009d4e:	9300      	str	r3, [sp, #0]
 8009d50:	2304      	movs	r3, #4
 8009d52:	f245 4258 	movw	r2, #21592	@ 0x5458
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f000 f98a 	bl	800a070 <vl53l5cx_dci_replace_data>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	461a      	mov	r2, r3
 8009d60:	7bfb      	ldrb	r3, [r7, #15]
 8009d62:	4313      	orrs	r3, r2
 8009d64:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_FREQ_HZ, 4,
					(uint8_t*)&frequency_hz, 1, 0x01);

	return status;
 8009d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3710      	adds	r7, #16
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}

08009d70 <vl53l5cx_set_ranging_mode>:
}

uint8_t vl53l5cx_set_ranging_mode(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				ranging_mode)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b084      	sub	sp, #16
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
 8009d78:	460b      	mov	r3, r1
 8009d7a:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L5CX_STATUS_OK;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	73fb      	strb	r3, [r7, #15]
	uint32_t single_range = 0x00;
 8009d80:	2300      	movs	r3, #0
 8009d82:	60bb      	str	r3, [r7, #8]

	status |= vl53l5cx_dci_read_data(p_dev, p_dev->temp_buffer,
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f503 61a1 	add.w	r1, r3, #1288	@ 0x508
 8009d8a:	2308      	movs	r3, #8
 8009d8c:	f64a 5230 	movw	r2, #44336	@ 0xad30
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f000 f845 	bl	8009e20 <vl53l5cx_dci_read_data>
 8009d96:	4603      	mov	r3, r0
 8009d98:	461a      	mov	r2, r3
 8009d9a:	7bfb      	ldrb	r3, [r7, #15]
 8009d9c:	4313      	orrs	r3, r2
 8009d9e:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_RANGING_MODE, 8);

	switch(ranging_mode)
 8009da0:	78fb      	ldrb	r3, [r7, #3]
 8009da2:	2b01      	cmp	r3, #1
 8009da4:	d002      	beq.n	8009dac <vl53l5cx_set_ranging_mode+0x3c>
 8009da6:	2b03      	cmp	r3, #3
 8009da8:	d00b      	beq.n	8009dc2 <vl53l5cx_set_ranging_mode+0x52>
 8009daa:	e015      	b.n	8009dd8 <vl53l5cx_set_ranging_mode+0x68>
	{
		case VL53L5CX_RANGING_MODE_CONTINUOUS:
			p_dev->temp_buffer[0x01] = 0x1;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2201      	movs	r2, #1
 8009db0:	f883 2509 	strb.w	r2, [r3, #1289]	@ 0x509
			p_dev->temp_buffer[0x03] = 0x3;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2203      	movs	r2, #3
 8009db8:	f883 250b 	strb.w	r2, [r3, #1291]	@ 0x50b
			single_range = 0x00;
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	60bb      	str	r3, [r7, #8]
			break;
 8009dc0:	e00d      	b.n	8009dde <vl53l5cx_set_ranging_mode+0x6e>

		case VL53L5CX_RANGING_MODE_AUTONOMOUS:
			p_dev->temp_buffer[0x01] = 0x3;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2203      	movs	r2, #3
 8009dc6:	f883 2509 	strb.w	r2, [r3, #1289]	@ 0x509
			p_dev->temp_buffer[0x03] = 0x2;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2202      	movs	r2, #2
 8009dce:	f883 250b 	strb.w	r2, [r3, #1291]	@ 0x50b
			single_range = 0x01;
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	60bb      	str	r3, [r7, #8]
			break;
 8009dd6:	e002      	b.n	8009dde <vl53l5cx_set_ranging_mode+0x6e>

		default:
			status = VL53L5CX_STATUS_INVALID_PARAM;
 8009dd8:	237f      	movs	r3, #127	@ 0x7f
 8009dda:	73fb      	strb	r3, [r7, #15]
			break;
 8009ddc:	bf00      	nop
	}

	status |= vl53l5cx_dci_write_data(p_dev, p_dev->temp_buffer,
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f503 61a1 	add.w	r1, r3, #1288	@ 0x508
 8009de4:	2308      	movs	r3, #8
 8009de6:	f64a 5230 	movw	r2, #44336	@ 0xad30
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f000 f8a2 	bl	8009f34 <vl53l5cx_dci_write_data>
 8009df0:	4603      	mov	r3, r0
 8009df2:	461a      	mov	r2, r3
 8009df4:	7bfb      	ldrb	r3, [r7, #15]
 8009df6:	4313      	orrs	r3, r2
 8009df8:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_RANGING_MODE, (uint16_t)8);

	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 8009dfa:	f107 0108 	add.w	r1, r7, #8
 8009dfe:	2304      	movs	r3, #4
 8009e00:	f64d 1264 	movw	r2, #55652	@ 0xd964
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f000 f895 	bl	8009f34 <vl53l5cx_dci_write_data>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	461a      	mov	r2, r3
 8009e0e:	7bfb      	ldrb	r3, [r7, #15]
 8009e10:	4313      	orrs	r3, r2
 8009e12:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_SINGLE_RANGE, 
                        (uint16_t)sizeof(single_range));

	return status;
 8009e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3710      	adds	r7, #16
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}
	...

08009e20 <vl53l5cx_dci_read_data>:
uint8_t vl53l5cx_dci_read_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b08c      	sub	sp, #48	@ 0x30
 8009e24:	af02      	add	r7, sp, #8
 8009e26:	60f8      	str	r0, [r7, #12]
 8009e28:	60b9      	str	r1, [r7, #8]
 8009e2a:	607a      	str	r2, [r7, #4]
 8009e2c:	807b      	strh	r3, [r7, #2]
	int16_t i;
	uint8_t status = VL53L5CX_STATUS_OK;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        uint32_t rd_size = (uint32_t) data_size + (uint32_t)12;
 8009e34:	887b      	ldrh	r3, [r7, #2]
 8009e36:	330c      	adds	r3, #12
 8009e38:	623b      	str	r3, [r7, #32]
	uint8_t cmd[] = {0x00, 0x00, 0x00, 0x00,
 8009e3a:	4a3d      	ldr	r2, [pc, #244]	@ (8009f30 <vl53l5cx_dci_read_data+0x110>)
 8009e3c:	f107 0314 	add.w	r3, r7, #20
 8009e40:	ca07      	ldmia	r2, {r0, r1, r2}
 8009e42:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x00, 0x00, 0x00, 0x0f,
			0x00, 0x02, 0x00, 0x08};

	/* Check if tmp buffer is large enough */
	if((data_size + (uint16_t)12)>(uint16_t)VL53L5CX_TEMPORARY_BUFFER_SIZE)
 8009e46:	887b      	ldrh	r3, [r7, #2]
 8009e48:	f5b3 6fb4 	cmp.w	r3, #1440	@ 0x5a0
 8009e4c:	d903      	bls.n	8009e56 <vl53l5cx_dci_read_data+0x36>
	{
		status |= VL53L5CX_STATUS_ERROR;
 8009e4e:	23ff      	movs	r3, #255	@ 0xff
 8009e50:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8009e54:	e065      	b.n	8009f22 <vl53l5cx_dci_read_data+0x102>
	}
	else
	{
		cmd[0] = (uint8_t)(index >> 8);	
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	0a1b      	lsrs	r3, r3, #8
 8009e5a:	b2db      	uxtb	r3, r3
 8009e5c:	753b      	strb	r3, [r7, #20]
		cmd[1] = (uint8_t)(index & (uint32_t)0xff);			
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	b2db      	uxtb	r3, r3
 8009e62:	757b      	strb	r3, [r7, #21]
		cmd[2] = (uint8_t)((data_size & (uint16_t)0xff0) >> 4);
 8009e64:	887b      	ldrh	r3, [r7, #2]
 8009e66:	111b      	asrs	r3, r3, #4
 8009e68:	b2db      	uxtb	r3, r3
 8009e6a:	75bb      	strb	r3, [r7, #22]
		cmd[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 8009e6c:	887b      	ldrh	r3, [r7, #2]
 8009e6e:	b2db      	uxtb	r3, r3
 8009e70:	011b      	lsls	r3, r3, #4
 8009e72:	b2db      	uxtb	r3, r3
 8009e74:	75fb      	strb	r3, [r7, #23]

	/* Request data reading from FW */
		status |= VL53L5CX_WrMulti(&(p_dev->platform),
 8009e76:	68f8      	ldr	r0, [r7, #12]
 8009e78:	f107 0214 	add.w	r2, r7, #20
 8009e7c:	230c      	movs	r3, #12
 8009e7e:	f642 71f4 	movw	r1, #12276	@ 0x2ff4
 8009e82:	f7f7 fe51 	bl	8001b28 <VL53L5CX_WrMulti>
 8009e86:	4603      	mov	r3, r0
 8009e88:	461a      	mov	r2, r3
 8009e8a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009e8e:	4313      	orrs	r3, r2
 8009e90:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			(VL53L5CX_UI_CMD_END-(uint16_t)11),cmd, sizeof(cmd));
		status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8009e94:	2303      	movs	r3, #3
 8009e96:	9301      	str	r3, [sp, #4]
 8009e98:	23ff      	movs	r3, #255	@ 0xff
 8009e9a:	9300      	str	r3, [sp, #0]
 8009e9c:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8009ea0:	2201      	movs	r2, #1
 8009ea2:	2104      	movs	r1, #4
 8009ea4:	68f8      	ldr	r0, [r7, #12]
 8009ea6:	f7fe fa4f 	bl	8008348 <_vl53l5cx_poll_for_answer>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	461a      	mov	r2, r3
 8009eae:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009eb2:	4313      	orrs	r3, r2
 8009eb4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			VL53L5CX_UI_CMD_STATUS,
			0xff, 0x03);

	/* Read new data sent (4 bytes header + data_size + 8 bytes footer) */
		status |= VL53L5CX_RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8009eb8:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer, rd_size);
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	f503 62a1 	add.w	r2, r3, #1288	@ 0x508
		status |= VL53L5CX_RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8009ec0:	6a3b      	ldr	r3, [r7, #32]
 8009ec2:	f642 4104 	movw	r1, #11268	@ 0x2c04
 8009ec6:	f7f7 fe59 	bl	8001b7c <VL53L5CX_RdMulti>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	461a      	mov	r2, r3
 8009ece:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009ed2:	4313      	orrs	r3, r2
 8009ed4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		VL53L5CX_SwapBuffer(p_dev->temp_buffer, data_size + (uint16_t)12);
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	f503 62a1 	add.w	r2, r3, #1288	@ 0x508
 8009ede:	887b      	ldrh	r3, [r7, #2]
 8009ee0:	330c      	adds	r3, #12
 8009ee2:	b29b      	uxth	r3, r3
 8009ee4:	4619      	mov	r1, r3
 8009ee6:	4610      	mov	r0, r2
 8009ee8:	f7f7 fe72 	bl	8001bd0 <VL53L5CX_SwapBuffer>

	/* Copy data from FW into input structure (-4 bytes to remove header) */
		for(i = 0 ; i < (int16_t)data_size;i++){
 8009eec:	2300      	movs	r3, #0
 8009eee:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8009ef0:	e011      	b.n	8009f16 <vl53l5cx_dci_read_data+0xf6>
			data[i] = p_dev->temp_buffer[i + 4];
 8009ef2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8009ef6:	1d1a      	adds	r2, r3, #4
 8009ef8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8009efc:	68b9      	ldr	r1, [r7, #8]
 8009efe:	440b      	add	r3, r1
 8009f00:	68f9      	ldr	r1, [r7, #12]
 8009f02:	440a      	add	r2, r1
 8009f04:	f892 2508 	ldrb.w	r2, [r2, #1288]	@ 0x508
 8009f08:	701a      	strb	r2, [r3, #0]
		for(i = 0 ; i < (int16_t)data_size;i++){
 8009f0a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8009f0e:	b29b      	uxth	r3, r3
 8009f10:	3301      	adds	r3, #1
 8009f12:	b29b      	uxth	r3, r3
 8009f14:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8009f16:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009f1a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8009f1e:	429a      	cmp	r2, r3
 8009f20:	dbe7      	blt.n	8009ef2 <vl53l5cx_dci_read_data+0xd2>
		}
	}

	return status;
 8009f22:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3728      	adds	r7, #40	@ 0x28
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
 8009f2e:	bf00      	nop
 8009f30:	0800d390 	.word	0x0800d390

08009f34 <vl53l5cx_dci_write_data>:
uint8_t vl53l5cx_dci_write_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b08c      	sub	sp, #48	@ 0x30
 8009f38:	af02      	add	r7, sp, #8
 8009f3a:	60f8      	str	r0, [r7, #12]
 8009f3c:	60b9      	str	r1, [r7, #8]
 8009f3e:	607a      	str	r2, [r7, #4]
 8009f40:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L5CX_STATUS_OK;
 8009f42:	2300      	movs	r3, #0
 8009f44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	int16_t i;

	uint8_t headers[] = {0x00, 0x00, 0x00, 0x00};
 8009f48:	2300      	movs	r3, #0
 8009f4a:	61fb      	str	r3, [r7, #28]
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	753b      	strb	r3, [r7, #20]
 8009f50:	2300      	movs	r3, #0
 8009f52:	757b      	strb	r3, [r7, #21]
 8009f54:	2300      	movs	r3, #0
 8009f56:	75bb      	strb	r3, [r7, #22]
 8009f58:	230f      	movs	r3, #15
 8009f5a:	75fb      	strb	r3, [r7, #23]
 8009f5c:	2305      	movs	r3, #5
 8009f5e:	763b      	strb	r3, [r7, #24]
 8009f60:	2301      	movs	r3, #1
 8009f62:	767b      	strb	r3, [r7, #25]
			(uint8_t)((data_size + (uint16_t)8) >> 8), 
 8009f64:	887b      	ldrh	r3, [r7, #2]
 8009f66:	3308      	adds	r3, #8
 8009f68:	121b      	asrs	r3, r3, #8
 8009f6a:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8009f6c:	76bb      	strb	r3, [r7, #26]
			(uint8_t)((data_size + (uint16_t)8) & (uint8_t)0xFF)};
 8009f6e:	887b      	ldrh	r3, [r7, #2]
 8009f70:	b2db      	uxtb	r3, r3
 8009f72:	3308      	adds	r3, #8
 8009f74:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8009f76:	76fb      	strb	r3, [r7, #27]

	uint16_t address = (uint16_t)VL53L5CX_UI_CMD_END - 
 8009f78:	887b      	ldrh	r3, [r7, #2]
 8009f7a:	f5c3 533f 	rsb	r3, r3, #12224	@ 0x2fc0
 8009f7e:	3334      	adds	r3, #52	@ 0x34
 8009f80:	847b      	strh	r3, [r7, #34]	@ 0x22
		(data_size + (uint16_t)12) + (uint16_t)1;

	/* Check if cmd buffer is large enough */
	if((data_size + (uint16_t)12) 
 8009f82:	887b      	ldrh	r3, [r7, #2]
 8009f84:	f5b3 6fb4 	cmp.w	r3, #1440	@ 0x5a0
 8009f88:	d903      	bls.n	8009f92 <vl53l5cx_dci_write_data+0x5e>
           > (uint16_t)VL53L5CX_TEMPORARY_BUFFER_SIZE)
	{
		status |= VL53L5CX_STATUS_ERROR;
 8009f8a:	23ff      	movs	r3, #255	@ 0xff
 8009f8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009f90:	e068      	b.n	800a064 <vl53l5cx_dci_write_data+0x130>
	}
	else
	{
		headers[0] = (uint8_t)(index >> 8);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	0a1b      	lsrs	r3, r3, #8
 8009f96:	b2db      	uxtb	r3, r3
 8009f98:	773b      	strb	r3, [r7, #28]
		headers[1] = (uint8_t)(index & (uint32_t)0xff);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	b2db      	uxtb	r3, r3
 8009f9e:	777b      	strb	r3, [r7, #29]
		headers[2] = (uint8_t)(((data_size & (uint16_t)0xff0) >> 4));
 8009fa0:	887b      	ldrh	r3, [r7, #2]
 8009fa2:	111b      	asrs	r3, r3, #4
 8009fa4:	b2db      	uxtb	r3, r3
 8009fa6:	77bb      	strb	r3, [r7, #30]
		headers[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 8009fa8:	887b      	ldrh	r3, [r7, #2]
 8009faa:	b2db      	uxtb	r3, r3
 8009fac:	011b      	lsls	r3, r3, #4
 8009fae:	b2db      	uxtb	r3, r3
 8009fb0:	77fb      	strb	r3, [r7, #31]

	/* Copy data from structure to FW format (+4 bytes to add header) */
		VL53L5CX_SwapBuffer(data, data_size);
 8009fb2:	887b      	ldrh	r3, [r7, #2]
 8009fb4:	4619      	mov	r1, r3
 8009fb6:	68b8      	ldr	r0, [r7, #8]
 8009fb8:	f7f7 fe0a 	bl	8001bd0 <VL53L5CX_SwapBuffer>
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 8009fbc:	887b      	ldrh	r3, [r7, #2]
 8009fbe:	3b01      	subs	r3, #1
 8009fc0:	b29b      	uxth	r3, r3
 8009fc2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009fc4:	e012      	b.n	8009fec <vl53l5cx_dci_write_data+0xb8>
		{
			p_dev->temp_buffer[i + 4] = data[i];
 8009fc6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8009fca:	68ba      	ldr	r2, [r7, #8]
 8009fcc:	441a      	add	r2, r3
 8009fce:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8009fd2:	3304      	adds	r3, #4
 8009fd4:	7811      	ldrb	r1, [r2, #0]
 8009fd6:	68fa      	ldr	r2, [r7, #12]
 8009fd8:	4413      	add	r3, r2
 8009fda:	460a      	mov	r2, r1
 8009fdc:	f883 2508 	strb.w	r2, [r3, #1288]	@ 0x508
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 8009fe0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8009fe4:	b29b      	uxth	r3, r3
 8009fe6:	3b01      	subs	r3, #1
 8009fe8:	b29b      	uxth	r3, r3
 8009fea:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009fec:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	dae8      	bge.n	8009fc6 <vl53l5cx_dci_write_data+0x92>
		}

	/* Add headers and footer */
		(void)memcpy(&p_dev->temp_buffer[0], headers, sizeof(headers));
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8009ffa:	69fa      	ldr	r2, [r7, #28]
 8009ffc:	601a      	str	r2, [r3, #0]
		(void)memcpy(&p_dev->temp_buffer[data_size + (uint16_t)4],
 8009ffe:	887b      	ldrh	r3, [r7, #2]
 800a000:	3304      	adds	r3, #4
 800a002:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 800a006:	68fa      	ldr	r2, [r7, #12]
 800a008:	4413      	add	r3, r2
 800a00a:	461a      	mov	r2, r3
 800a00c:	f107 0314 	add.w	r3, r7, #20
 800a010:	cb03      	ldmia	r3!, {r0, r1}
 800a012:	6010      	str	r0, [r2, #0]
 800a014:	6051      	str	r1, [r2, #4]
			footer, sizeof(footer));

	/* Send data to FW */
		status |= VL53L5CX_WrMulti(&(p_dev->platform),address,
 800a016:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer,
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f503 62a1 	add.w	r2, r3, #1288	@ 0x508
			(uint32_t)((uint32_t)data_size + (uint32_t)12));
 800a01e:	887b      	ldrh	r3, [r7, #2]
		status |= VL53L5CX_WrMulti(&(p_dev->platform),address,
 800a020:	330c      	adds	r3, #12
 800a022:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 800a024:	f7f7 fd80 	bl	8001b28 <VL53L5CX_WrMulti>
 800a028:	4603      	mov	r3, r0
 800a02a:	461a      	mov	r2, r3
 800a02c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a030:	4313      	orrs	r3, r2
 800a032:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 800a036:	2303      	movs	r3, #3
 800a038:	9301      	str	r3, [sp, #4]
 800a03a:	23ff      	movs	r3, #255	@ 0xff
 800a03c:	9300      	str	r3, [sp, #0]
 800a03e:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 800a042:	2201      	movs	r2, #1
 800a044:	2104      	movs	r1, #4
 800a046:	68f8      	ldr	r0, [r7, #12]
 800a048:	f7fe f97e 	bl	8008348 <_vl53l5cx_poll_for_answer>
 800a04c:	4603      	mov	r3, r0
 800a04e:	461a      	mov	r2, r3
 800a050:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a054:	4313      	orrs	r3, r2
 800a056:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

		VL53L5CX_SwapBuffer(data, data_size);
 800a05a:	887b      	ldrh	r3, [r7, #2]
 800a05c:	4619      	mov	r1, r3
 800a05e:	68b8      	ldr	r0, [r7, #8]
 800a060:	f7f7 fdb6 	bl	8001bd0 <VL53L5CX_SwapBuffer>
	}

	return status;
 800a064:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a068:	4618      	mov	r0, r3
 800a06a:	3728      	adds	r7, #40	@ 0x28
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}

0800a070 <vl53l5cx_dci_replace_data>:
		uint32_t			index,
		uint16_t			data_size,
		uint8_t				*new_data,
		uint16_t			new_data_size,
		uint16_t			new_data_pos)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b086      	sub	sp, #24
 800a074:	af00      	add	r7, sp, #0
 800a076:	60f8      	str	r0, [r7, #12]
 800a078:	60b9      	str	r1, [r7, #8]
 800a07a:	607a      	str	r2, [r7, #4]
 800a07c:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L5CX_STATUS_OK;
 800a07e:	2300      	movs	r3, #0
 800a080:	75fb      	strb	r3, [r7, #23]

	status |= vl53l5cx_dci_read_data(p_dev, data, index, data_size);
 800a082:	887b      	ldrh	r3, [r7, #2]
 800a084:	687a      	ldr	r2, [r7, #4]
 800a086:	68b9      	ldr	r1, [r7, #8]
 800a088:	68f8      	ldr	r0, [r7, #12]
 800a08a:	f7ff fec9 	bl	8009e20 <vl53l5cx_dci_read_data>
 800a08e:	4603      	mov	r3, r0
 800a090:	461a      	mov	r2, r3
 800a092:	7dfb      	ldrb	r3, [r7, #23]
 800a094:	4313      	orrs	r3, r2
 800a096:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(&(data[new_data_pos]), new_data, new_data_size);
 800a098:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a09a:	68ba      	ldr	r2, [r7, #8]
 800a09c:	4413      	add	r3, r2
 800a09e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a0a0:	6a39      	ldr	r1, [r7, #32]
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f000 fed7 	bl	800ae56 <memcpy>
	status |= vl53l5cx_dci_write_data(p_dev, data, index, data_size);
 800a0a8:	887b      	ldrh	r3, [r7, #2]
 800a0aa:	687a      	ldr	r2, [r7, #4]
 800a0ac:	68b9      	ldr	r1, [r7, #8]
 800a0ae:	68f8      	ldr	r0, [r7, #12]
 800a0b0:	f7ff ff40 	bl	8009f34 <vl53l5cx_dci_write_data>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	461a      	mov	r2, r3
 800a0b8:	7dfb      	ldrb	r3, [r7, #23]
 800a0ba:	4313      	orrs	r3, r2
 800a0bc:	75fb      	strb	r3, [r7, #23]

	return status;
 800a0be:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	3718      	adds	r7, #24
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}

0800a0c8 <atoi>:
 800a0c8:	220a      	movs	r2, #10
 800a0ca:	2100      	movs	r1, #0
 800a0cc:	f000 bd96 	b.w	800abfc <strtol>

0800a0d0 <__cvt>:
 800a0d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a0d4:	ec57 6b10 	vmov	r6, r7, d0
 800a0d8:	2f00      	cmp	r7, #0
 800a0da:	460c      	mov	r4, r1
 800a0dc:	4619      	mov	r1, r3
 800a0de:	463b      	mov	r3, r7
 800a0e0:	bfbb      	ittet	lt
 800a0e2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a0e6:	461f      	movlt	r7, r3
 800a0e8:	2300      	movge	r3, #0
 800a0ea:	232d      	movlt	r3, #45	@ 0x2d
 800a0ec:	700b      	strb	r3, [r1, #0]
 800a0ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a0f0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a0f4:	4691      	mov	r9, r2
 800a0f6:	f023 0820 	bic.w	r8, r3, #32
 800a0fa:	bfbc      	itt	lt
 800a0fc:	4632      	movlt	r2, r6
 800a0fe:	4616      	movlt	r6, r2
 800a100:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a104:	d005      	beq.n	800a112 <__cvt+0x42>
 800a106:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a10a:	d100      	bne.n	800a10e <__cvt+0x3e>
 800a10c:	3401      	adds	r4, #1
 800a10e:	2102      	movs	r1, #2
 800a110:	e000      	b.n	800a114 <__cvt+0x44>
 800a112:	2103      	movs	r1, #3
 800a114:	ab03      	add	r3, sp, #12
 800a116:	9301      	str	r3, [sp, #4]
 800a118:	ab02      	add	r3, sp, #8
 800a11a:	9300      	str	r3, [sp, #0]
 800a11c:	ec47 6b10 	vmov	d0, r6, r7
 800a120:	4653      	mov	r3, sl
 800a122:	4622      	mov	r2, r4
 800a124:	f000 ff4c 	bl	800afc0 <_dtoa_r>
 800a128:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a12c:	4605      	mov	r5, r0
 800a12e:	d119      	bne.n	800a164 <__cvt+0x94>
 800a130:	f019 0f01 	tst.w	r9, #1
 800a134:	d00e      	beq.n	800a154 <__cvt+0x84>
 800a136:	eb00 0904 	add.w	r9, r0, r4
 800a13a:	2200      	movs	r2, #0
 800a13c:	2300      	movs	r3, #0
 800a13e:	4630      	mov	r0, r6
 800a140:	4639      	mov	r1, r7
 800a142:	f7f6 fcc1 	bl	8000ac8 <__aeabi_dcmpeq>
 800a146:	b108      	cbz	r0, 800a14c <__cvt+0x7c>
 800a148:	f8cd 900c 	str.w	r9, [sp, #12]
 800a14c:	2230      	movs	r2, #48	@ 0x30
 800a14e:	9b03      	ldr	r3, [sp, #12]
 800a150:	454b      	cmp	r3, r9
 800a152:	d31e      	bcc.n	800a192 <__cvt+0xc2>
 800a154:	9b03      	ldr	r3, [sp, #12]
 800a156:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a158:	1b5b      	subs	r3, r3, r5
 800a15a:	4628      	mov	r0, r5
 800a15c:	6013      	str	r3, [r2, #0]
 800a15e:	b004      	add	sp, #16
 800a160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a164:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a168:	eb00 0904 	add.w	r9, r0, r4
 800a16c:	d1e5      	bne.n	800a13a <__cvt+0x6a>
 800a16e:	7803      	ldrb	r3, [r0, #0]
 800a170:	2b30      	cmp	r3, #48	@ 0x30
 800a172:	d10a      	bne.n	800a18a <__cvt+0xba>
 800a174:	2200      	movs	r2, #0
 800a176:	2300      	movs	r3, #0
 800a178:	4630      	mov	r0, r6
 800a17a:	4639      	mov	r1, r7
 800a17c:	f7f6 fca4 	bl	8000ac8 <__aeabi_dcmpeq>
 800a180:	b918      	cbnz	r0, 800a18a <__cvt+0xba>
 800a182:	f1c4 0401 	rsb	r4, r4, #1
 800a186:	f8ca 4000 	str.w	r4, [sl]
 800a18a:	f8da 3000 	ldr.w	r3, [sl]
 800a18e:	4499      	add	r9, r3
 800a190:	e7d3      	b.n	800a13a <__cvt+0x6a>
 800a192:	1c59      	adds	r1, r3, #1
 800a194:	9103      	str	r1, [sp, #12]
 800a196:	701a      	strb	r2, [r3, #0]
 800a198:	e7d9      	b.n	800a14e <__cvt+0x7e>

0800a19a <__exponent>:
 800a19a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a19c:	2900      	cmp	r1, #0
 800a19e:	bfba      	itte	lt
 800a1a0:	4249      	neglt	r1, r1
 800a1a2:	232d      	movlt	r3, #45	@ 0x2d
 800a1a4:	232b      	movge	r3, #43	@ 0x2b
 800a1a6:	2909      	cmp	r1, #9
 800a1a8:	7002      	strb	r2, [r0, #0]
 800a1aa:	7043      	strb	r3, [r0, #1]
 800a1ac:	dd29      	ble.n	800a202 <__exponent+0x68>
 800a1ae:	f10d 0307 	add.w	r3, sp, #7
 800a1b2:	461d      	mov	r5, r3
 800a1b4:	270a      	movs	r7, #10
 800a1b6:	461a      	mov	r2, r3
 800a1b8:	fbb1 f6f7 	udiv	r6, r1, r7
 800a1bc:	fb07 1416 	mls	r4, r7, r6, r1
 800a1c0:	3430      	adds	r4, #48	@ 0x30
 800a1c2:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a1c6:	460c      	mov	r4, r1
 800a1c8:	2c63      	cmp	r4, #99	@ 0x63
 800a1ca:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800a1ce:	4631      	mov	r1, r6
 800a1d0:	dcf1      	bgt.n	800a1b6 <__exponent+0x1c>
 800a1d2:	3130      	adds	r1, #48	@ 0x30
 800a1d4:	1e94      	subs	r4, r2, #2
 800a1d6:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a1da:	1c41      	adds	r1, r0, #1
 800a1dc:	4623      	mov	r3, r4
 800a1de:	42ab      	cmp	r3, r5
 800a1e0:	d30a      	bcc.n	800a1f8 <__exponent+0x5e>
 800a1e2:	f10d 0309 	add.w	r3, sp, #9
 800a1e6:	1a9b      	subs	r3, r3, r2
 800a1e8:	42ac      	cmp	r4, r5
 800a1ea:	bf88      	it	hi
 800a1ec:	2300      	movhi	r3, #0
 800a1ee:	3302      	adds	r3, #2
 800a1f0:	4403      	add	r3, r0
 800a1f2:	1a18      	subs	r0, r3, r0
 800a1f4:	b003      	add	sp, #12
 800a1f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1f8:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a1fc:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a200:	e7ed      	b.n	800a1de <__exponent+0x44>
 800a202:	2330      	movs	r3, #48	@ 0x30
 800a204:	3130      	adds	r1, #48	@ 0x30
 800a206:	7083      	strb	r3, [r0, #2]
 800a208:	70c1      	strb	r1, [r0, #3]
 800a20a:	1d03      	adds	r3, r0, #4
 800a20c:	e7f1      	b.n	800a1f2 <__exponent+0x58>
	...

0800a210 <_printf_float>:
 800a210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a214:	b08d      	sub	sp, #52	@ 0x34
 800a216:	460c      	mov	r4, r1
 800a218:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a21c:	4616      	mov	r6, r2
 800a21e:	461f      	mov	r7, r3
 800a220:	4605      	mov	r5, r0
 800a222:	f000 fde7 	bl	800adf4 <_localeconv_r>
 800a226:	6803      	ldr	r3, [r0, #0]
 800a228:	9304      	str	r3, [sp, #16]
 800a22a:	4618      	mov	r0, r3
 800a22c:	f7f6 f820 	bl	8000270 <strlen>
 800a230:	2300      	movs	r3, #0
 800a232:	930a      	str	r3, [sp, #40]	@ 0x28
 800a234:	f8d8 3000 	ldr.w	r3, [r8]
 800a238:	9005      	str	r0, [sp, #20]
 800a23a:	3307      	adds	r3, #7
 800a23c:	f023 0307 	bic.w	r3, r3, #7
 800a240:	f103 0208 	add.w	r2, r3, #8
 800a244:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a248:	f8d4 b000 	ldr.w	fp, [r4]
 800a24c:	f8c8 2000 	str.w	r2, [r8]
 800a250:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a254:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a258:	9307      	str	r3, [sp, #28]
 800a25a:	f8cd 8018 	str.w	r8, [sp, #24]
 800a25e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a262:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a266:	4b9c      	ldr	r3, [pc, #624]	@ (800a4d8 <_printf_float+0x2c8>)
 800a268:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a26c:	f7f6 fc5e 	bl	8000b2c <__aeabi_dcmpun>
 800a270:	bb70      	cbnz	r0, 800a2d0 <_printf_float+0xc0>
 800a272:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a276:	4b98      	ldr	r3, [pc, #608]	@ (800a4d8 <_printf_float+0x2c8>)
 800a278:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a27c:	f7f6 fc38 	bl	8000af0 <__aeabi_dcmple>
 800a280:	bb30      	cbnz	r0, 800a2d0 <_printf_float+0xc0>
 800a282:	2200      	movs	r2, #0
 800a284:	2300      	movs	r3, #0
 800a286:	4640      	mov	r0, r8
 800a288:	4649      	mov	r1, r9
 800a28a:	f7f6 fc27 	bl	8000adc <__aeabi_dcmplt>
 800a28e:	b110      	cbz	r0, 800a296 <_printf_float+0x86>
 800a290:	232d      	movs	r3, #45	@ 0x2d
 800a292:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a296:	4a91      	ldr	r2, [pc, #580]	@ (800a4dc <_printf_float+0x2cc>)
 800a298:	4b91      	ldr	r3, [pc, #580]	@ (800a4e0 <_printf_float+0x2d0>)
 800a29a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a29e:	bf94      	ite	ls
 800a2a0:	4690      	movls	r8, r2
 800a2a2:	4698      	movhi	r8, r3
 800a2a4:	2303      	movs	r3, #3
 800a2a6:	6123      	str	r3, [r4, #16]
 800a2a8:	f02b 0304 	bic.w	r3, fp, #4
 800a2ac:	6023      	str	r3, [r4, #0]
 800a2ae:	f04f 0900 	mov.w	r9, #0
 800a2b2:	9700      	str	r7, [sp, #0]
 800a2b4:	4633      	mov	r3, r6
 800a2b6:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a2b8:	4621      	mov	r1, r4
 800a2ba:	4628      	mov	r0, r5
 800a2bc:	f000 f9d2 	bl	800a664 <_printf_common>
 800a2c0:	3001      	adds	r0, #1
 800a2c2:	f040 808d 	bne.w	800a3e0 <_printf_float+0x1d0>
 800a2c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a2ca:	b00d      	add	sp, #52	@ 0x34
 800a2cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2d0:	4642      	mov	r2, r8
 800a2d2:	464b      	mov	r3, r9
 800a2d4:	4640      	mov	r0, r8
 800a2d6:	4649      	mov	r1, r9
 800a2d8:	f7f6 fc28 	bl	8000b2c <__aeabi_dcmpun>
 800a2dc:	b140      	cbz	r0, 800a2f0 <_printf_float+0xe0>
 800a2de:	464b      	mov	r3, r9
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	bfbc      	itt	lt
 800a2e4:	232d      	movlt	r3, #45	@ 0x2d
 800a2e6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a2ea:	4a7e      	ldr	r2, [pc, #504]	@ (800a4e4 <_printf_float+0x2d4>)
 800a2ec:	4b7e      	ldr	r3, [pc, #504]	@ (800a4e8 <_printf_float+0x2d8>)
 800a2ee:	e7d4      	b.n	800a29a <_printf_float+0x8a>
 800a2f0:	6863      	ldr	r3, [r4, #4]
 800a2f2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a2f6:	9206      	str	r2, [sp, #24]
 800a2f8:	1c5a      	adds	r2, r3, #1
 800a2fa:	d13b      	bne.n	800a374 <_printf_float+0x164>
 800a2fc:	2306      	movs	r3, #6
 800a2fe:	6063      	str	r3, [r4, #4]
 800a300:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a304:	2300      	movs	r3, #0
 800a306:	6022      	str	r2, [r4, #0]
 800a308:	9303      	str	r3, [sp, #12]
 800a30a:	ab0a      	add	r3, sp, #40	@ 0x28
 800a30c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a310:	ab09      	add	r3, sp, #36	@ 0x24
 800a312:	9300      	str	r3, [sp, #0]
 800a314:	6861      	ldr	r1, [r4, #4]
 800a316:	ec49 8b10 	vmov	d0, r8, r9
 800a31a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a31e:	4628      	mov	r0, r5
 800a320:	f7ff fed6 	bl	800a0d0 <__cvt>
 800a324:	9b06      	ldr	r3, [sp, #24]
 800a326:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a328:	2b47      	cmp	r3, #71	@ 0x47
 800a32a:	4680      	mov	r8, r0
 800a32c:	d129      	bne.n	800a382 <_printf_float+0x172>
 800a32e:	1cc8      	adds	r0, r1, #3
 800a330:	db02      	blt.n	800a338 <_printf_float+0x128>
 800a332:	6863      	ldr	r3, [r4, #4]
 800a334:	4299      	cmp	r1, r3
 800a336:	dd41      	ble.n	800a3bc <_printf_float+0x1ac>
 800a338:	f1aa 0a02 	sub.w	sl, sl, #2
 800a33c:	fa5f fa8a 	uxtb.w	sl, sl
 800a340:	3901      	subs	r1, #1
 800a342:	4652      	mov	r2, sl
 800a344:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a348:	9109      	str	r1, [sp, #36]	@ 0x24
 800a34a:	f7ff ff26 	bl	800a19a <__exponent>
 800a34e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a350:	1813      	adds	r3, r2, r0
 800a352:	2a01      	cmp	r2, #1
 800a354:	4681      	mov	r9, r0
 800a356:	6123      	str	r3, [r4, #16]
 800a358:	dc02      	bgt.n	800a360 <_printf_float+0x150>
 800a35a:	6822      	ldr	r2, [r4, #0]
 800a35c:	07d2      	lsls	r2, r2, #31
 800a35e:	d501      	bpl.n	800a364 <_printf_float+0x154>
 800a360:	3301      	adds	r3, #1
 800a362:	6123      	str	r3, [r4, #16]
 800a364:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d0a2      	beq.n	800a2b2 <_printf_float+0xa2>
 800a36c:	232d      	movs	r3, #45	@ 0x2d
 800a36e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a372:	e79e      	b.n	800a2b2 <_printf_float+0xa2>
 800a374:	9a06      	ldr	r2, [sp, #24]
 800a376:	2a47      	cmp	r2, #71	@ 0x47
 800a378:	d1c2      	bne.n	800a300 <_printf_float+0xf0>
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d1c0      	bne.n	800a300 <_printf_float+0xf0>
 800a37e:	2301      	movs	r3, #1
 800a380:	e7bd      	b.n	800a2fe <_printf_float+0xee>
 800a382:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a386:	d9db      	bls.n	800a340 <_printf_float+0x130>
 800a388:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a38c:	d118      	bne.n	800a3c0 <_printf_float+0x1b0>
 800a38e:	2900      	cmp	r1, #0
 800a390:	6863      	ldr	r3, [r4, #4]
 800a392:	dd0b      	ble.n	800a3ac <_printf_float+0x19c>
 800a394:	6121      	str	r1, [r4, #16]
 800a396:	b913      	cbnz	r3, 800a39e <_printf_float+0x18e>
 800a398:	6822      	ldr	r2, [r4, #0]
 800a39a:	07d0      	lsls	r0, r2, #31
 800a39c:	d502      	bpl.n	800a3a4 <_printf_float+0x194>
 800a39e:	3301      	adds	r3, #1
 800a3a0:	440b      	add	r3, r1
 800a3a2:	6123      	str	r3, [r4, #16]
 800a3a4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a3a6:	f04f 0900 	mov.w	r9, #0
 800a3aa:	e7db      	b.n	800a364 <_printf_float+0x154>
 800a3ac:	b913      	cbnz	r3, 800a3b4 <_printf_float+0x1a4>
 800a3ae:	6822      	ldr	r2, [r4, #0]
 800a3b0:	07d2      	lsls	r2, r2, #31
 800a3b2:	d501      	bpl.n	800a3b8 <_printf_float+0x1a8>
 800a3b4:	3302      	adds	r3, #2
 800a3b6:	e7f4      	b.n	800a3a2 <_printf_float+0x192>
 800a3b8:	2301      	movs	r3, #1
 800a3ba:	e7f2      	b.n	800a3a2 <_printf_float+0x192>
 800a3bc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a3c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3c2:	4299      	cmp	r1, r3
 800a3c4:	db05      	blt.n	800a3d2 <_printf_float+0x1c2>
 800a3c6:	6823      	ldr	r3, [r4, #0]
 800a3c8:	6121      	str	r1, [r4, #16]
 800a3ca:	07d8      	lsls	r0, r3, #31
 800a3cc:	d5ea      	bpl.n	800a3a4 <_printf_float+0x194>
 800a3ce:	1c4b      	adds	r3, r1, #1
 800a3d0:	e7e7      	b.n	800a3a2 <_printf_float+0x192>
 800a3d2:	2900      	cmp	r1, #0
 800a3d4:	bfd4      	ite	le
 800a3d6:	f1c1 0202 	rsble	r2, r1, #2
 800a3da:	2201      	movgt	r2, #1
 800a3dc:	4413      	add	r3, r2
 800a3de:	e7e0      	b.n	800a3a2 <_printf_float+0x192>
 800a3e0:	6823      	ldr	r3, [r4, #0]
 800a3e2:	055a      	lsls	r2, r3, #21
 800a3e4:	d407      	bmi.n	800a3f6 <_printf_float+0x1e6>
 800a3e6:	6923      	ldr	r3, [r4, #16]
 800a3e8:	4642      	mov	r2, r8
 800a3ea:	4631      	mov	r1, r6
 800a3ec:	4628      	mov	r0, r5
 800a3ee:	47b8      	blx	r7
 800a3f0:	3001      	adds	r0, #1
 800a3f2:	d12b      	bne.n	800a44c <_printf_float+0x23c>
 800a3f4:	e767      	b.n	800a2c6 <_printf_float+0xb6>
 800a3f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a3fa:	f240 80dd 	bls.w	800a5b8 <_printf_float+0x3a8>
 800a3fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a402:	2200      	movs	r2, #0
 800a404:	2300      	movs	r3, #0
 800a406:	f7f6 fb5f 	bl	8000ac8 <__aeabi_dcmpeq>
 800a40a:	2800      	cmp	r0, #0
 800a40c:	d033      	beq.n	800a476 <_printf_float+0x266>
 800a40e:	4a37      	ldr	r2, [pc, #220]	@ (800a4ec <_printf_float+0x2dc>)
 800a410:	2301      	movs	r3, #1
 800a412:	4631      	mov	r1, r6
 800a414:	4628      	mov	r0, r5
 800a416:	47b8      	blx	r7
 800a418:	3001      	adds	r0, #1
 800a41a:	f43f af54 	beq.w	800a2c6 <_printf_float+0xb6>
 800a41e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a422:	4543      	cmp	r3, r8
 800a424:	db02      	blt.n	800a42c <_printf_float+0x21c>
 800a426:	6823      	ldr	r3, [r4, #0]
 800a428:	07d8      	lsls	r0, r3, #31
 800a42a:	d50f      	bpl.n	800a44c <_printf_float+0x23c>
 800a42c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a430:	4631      	mov	r1, r6
 800a432:	4628      	mov	r0, r5
 800a434:	47b8      	blx	r7
 800a436:	3001      	adds	r0, #1
 800a438:	f43f af45 	beq.w	800a2c6 <_printf_float+0xb6>
 800a43c:	f04f 0900 	mov.w	r9, #0
 800a440:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800a444:	f104 0a1a 	add.w	sl, r4, #26
 800a448:	45c8      	cmp	r8, r9
 800a44a:	dc09      	bgt.n	800a460 <_printf_float+0x250>
 800a44c:	6823      	ldr	r3, [r4, #0]
 800a44e:	079b      	lsls	r3, r3, #30
 800a450:	f100 8103 	bmi.w	800a65a <_printf_float+0x44a>
 800a454:	68e0      	ldr	r0, [r4, #12]
 800a456:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a458:	4298      	cmp	r0, r3
 800a45a:	bfb8      	it	lt
 800a45c:	4618      	movlt	r0, r3
 800a45e:	e734      	b.n	800a2ca <_printf_float+0xba>
 800a460:	2301      	movs	r3, #1
 800a462:	4652      	mov	r2, sl
 800a464:	4631      	mov	r1, r6
 800a466:	4628      	mov	r0, r5
 800a468:	47b8      	blx	r7
 800a46a:	3001      	adds	r0, #1
 800a46c:	f43f af2b 	beq.w	800a2c6 <_printf_float+0xb6>
 800a470:	f109 0901 	add.w	r9, r9, #1
 800a474:	e7e8      	b.n	800a448 <_printf_float+0x238>
 800a476:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a478:	2b00      	cmp	r3, #0
 800a47a:	dc39      	bgt.n	800a4f0 <_printf_float+0x2e0>
 800a47c:	4a1b      	ldr	r2, [pc, #108]	@ (800a4ec <_printf_float+0x2dc>)
 800a47e:	2301      	movs	r3, #1
 800a480:	4631      	mov	r1, r6
 800a482:	4628      	mov	r0, r5
 800a484:	47b8      	blx	r7
 800a486:	3001      	adds	r0, #1
 800a488:	f43f af1d 	beq.w	800a2c6 <_printf_float+0xb6>
 800a48c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a490:	ea59 0303 	orrs.w	r3, r9, r3
 800a494:	d102      	bne.n	800a49c <_printf_float+0x28c>
 800a496:	6823      	ldr	r3, [r4, #0]
 800a498:	07d9      	lsls	r1, r3, #31
 800a49a:	d5d7      	bpl.n	800a44c <_printf_float+0x23c>
 800a49c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a4a0:	4631      	mov	r1, r6
 800a4a2:	4628      	mov	r0, r5
 800a4a4:	47b8      	blx	r7
 800a4a6:	3001      	adds	r0, #1
 800a4a8:	f43f af0d 	beq.w	800a2c6 <_printf_float+0xb6>
 800a4ac:	f04f 0a00 	mov.w	sl, #0
 800a4b0:	f104 0b1a 	add.w	fp, r4, #26
 800a4b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4b6:	425b      	negs	r3, r3
 800a4b8:	4553      	cmp	r3, sl
 800a4ba:	dc01      	bgt.n	800a4c0 <_printf_float+0x2b0>
 800a4bc:	464b      	mov	r3, r9
 800a4be:	e793      	b.n	800a3e8 <_printf_float+0x1d8>
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	465a      	mov	r2, fp
 800a4c4:	4631      	mov	r1, r6
 800a4c6:	4628      	mov	r0, r5
 800a4c8:	47b8      	blx	r7
 800a4ca:	3001      	adds	r0, #1
 800a4cc:	f43f aefb 	beq.w	800a2c6 <_printf_float+0xb6>
 800a4d0:	f10a 0a01 	add.w	sl, sl, #1
 800a4d4:	e7ee      	b.n	800a4b4 <_printf_float+0x2a4>
 800a4d6:	bf00      	nop
 800a4d8:	7fefffff 	.word	0x7fefffff
 800a4dc:	08022ae0 	.word	0x08022ae0
 800a4e0:	08022ae4 	.word	0x08022ae4
 800a4e4:	08022ae8 	.word	0x08022ae8
 800a4e8:	08022aec 	.word	0x08022aec
 800a4ec:	08022af0 	.word	0x08022af0
 800a4f0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a4f2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a4f6:	4553      	cmp	r3, sl
 800a4f8:	bfa8      	it	ge
 800a4fa:	4653      	movge	r3, sl
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	4699      	mov	r9, r3
 800a500:	dc36      	bgt.n	800a570 <_printf_float+0x360>
 800a502:	f04f 0b00 	mov.w	fp, #0
 800a506:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a50a:	f104 021a 	add.w	r2, r4, #26
 800a50e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a510:	9306      	str	r3, [sp, #24]
 800a512:	eba3 0309 	sub.w	r3, r3, r9
 800a516:	455b      	cmp	r3, fp
 800a518:	dc31      	bgt.n	800a57e <_printf_float+0x36e>
 800a51a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a51c:	459a      	cmp	sl, r3
 800a51e:	dc3a      	bgt.n	800a596 <_printf_float+0x386>
 800a520:	6823      	ldr	r3, [r4, #0]
 800a522:	07da      	lsls	r2, r3, #31
 800a524:	d437      	bmi.n	800a596 <_printf_float+0x386>
 800a526:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a528:	ebaa 0903 	sub.w	r9, sl, r3
 800a52c:	9b06      	ldr	r3, [sp, #24]
 800a52e:	ebaa 0303 	sub.w	r3, sl, r3
 800a532:	4599      	cmp	r9, r3
 800a534:	bfa8      	it	ge
 800a536:	4699      	movge	r9, r3
 800a538:	f1b9 0f00 	cmp.w	r9, #0
 800a53c:	dc33      	bgt.n	800a5a6 <_printf_float+0x396>
 800a53e:	f04f 0800 	mov.w	r8, #0
 800a542:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a546:	f104 0b1a 	add.w	fp, r4, #26
 800a54a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a54c:	ebaa 0303 	sub.w	r3, sl, r3
 800a550:	eba3 0309 	sub.w	r3, r3, r9
 800a554:	4543      	cmp	r3, r8
 800a556:	f77f af79 	ble.w	800a44c <_printf_float+0x23c>
 800a55a:	2301      	movs	r3, #1
 800a55c:	465a      	mov	r2, fp
 800a55e:	4631      	mov	r1, r6
 800a560:	4628      	mov	r0, r5
 800a562:	47b8      	blx	r7
 800a564:	3001      	adds	r0, #1
 800a566:	f43f aeae 	beq.w	800a2c6 <_printf_float+0xb6>
 800a56a:	f108 0801 	add.w	r8, r8, #1
 800a56e:	e7ec      	b.n	800a54a <_printf_float+0x33a>
 800a570:	4642      	mov	r2, r8
 800a572:	4631      	mov	r1, r6
 800a574:	4628      	mov	r0, r5
 800a576:	47b8      	blx	r7
 800a578:	3001      	adds	r0, #1
 800a57a:	d1c2      	bne.n	800a502 <_printf_float+0x2f2>
 800a57c:	e6a3      	b.n	800a2c6 <_printf_float+0xb6>
 800a57e:	2301      	movs	r3, #1
 800a580:	4631      	mov	r1, r6
 800a582:	4628      	mov	r0, r5
 800a584:	9206      	str	r2, [sp, #24]
 800a586:	47b8      	blx	r7
 800a588:	3001      	adds	r0, #1
 800a58a:	f43f ae9c 	beq.w	800a2c6 <_printf_float+0xb6>
 800a58e:	9a06      	ldr	r2, [sp, #24]
 800a590:	f10b 0b01 	add.w	fp, fp, #1
 800a594:	e7bb      	b.n	800a50e <_printf_float+0x2fe>
 800a596:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a59a:	4631      	mov	r1, r6
 800a59c:	4628      	mov	r0, r5
 800a59e:	47b8      	blx	r7
 800a5a0:	3001      	adds	r0, #1
 800a5a2:	d1c0      	bne.n	800a526 <_printf_float+0x316>
 800a5a4:	e68f      	b.n	800a2c6 <_printf_float+0xb6>
 800a5a6:	9a06      	ldr	r2, [sp, #24]
 800a5a8:	464b      	mov	r3, r9
 800a5aa:	4442      	add	r2, r8
 800a5ac:	4631      	mov	r1, r6
 800a5ae:	4628      	mov	r0, r5
 800a5b0:	47b8      	blx	r7
 800a5b2:	3001      	adds	r0, #1
 800a5b4:	d1c3      	bne.n	800a53e <_printf_float+0x32e>
 800a5b6:	e686      	b.n	800a2c6 <_printf_float+0xb6>
 800a5b8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a5bc:	f1ba 0f01 	cmp.w	sl, #1
 800a5c0:	dc01      	bgt.n	800a5c6 <_printf_float+0x3b6>
 800a5c2:	07db      	lsls	r3, r3, #31
 800a5c4:	d536      	bpl.n	800a634 <_printf_float+0x424>
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	4642      	mov	r2, r8
 800a5ca:	4631      	mov	r1, r6
 800a5cc:	4628      	mov	r0, r5
 800a5ce:	47b8      	blx	r7
 800a5d0:	3001      	adds	r0, #1
 800a5d2:	f43f ae78 	beq.w	800a2c6 <_printf_float+0xb6>
 800a5d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a5da:	4631      	mov	r1, r6
 800a5dc:	4628      	mov	r0, r5
 800a5de:	47b8      	blx	r7
 800a5e0:	3001      	adds	r0, #1
 800a5e2:	f43f ae70 	beq.w	800a2c6 <_printf_float+0xb6>
 800a5e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800a5f2:	f7f6 fa69 	bl	8000ac8 <__aeabi_dcmpeq>
 800a5f6:	b9c0      	cbnz	r0, 800a62a <_printf_float+0x41a>
 800a5f8:	4653      	mov	r3, sl
 800a5fa:	f108 0201 	add.w	r2, r8, #1
 800a5fe:	4631      	mov	r1, r6
 800a600:	4628      	mov	r0, r5
 800a602:	47b8      	blx	r7
 800a604:	3001      	adds	r0, #1
 800a606:	d10c      	bne.n	800a622 <_printf_float+0x412>
 800a608:	e65d      	b.n	800a2c6 <_printf_float+0xb6>
 800a60a:	2301      	movs	r3, #1
 800a60c:	465a      	mov	r2, fp
 800a60e:	4631      	mov	r1, r6
 800a610:	4628      	mov	r0, r5
 800a612:	47b8      	blx	r7
 800a614:	3001      	adds	r0, #1
 800a616:	f43f ae56 	beq.w	800a2c6 <_printf_float+0xb6>
 800a61a:	f108 0801 	add.w	r8, r8, #1
 800a61e:	45d0      	cmp	r8, sl
 800a620:	dbf3      	blt.n	800a60a <_printf_float+0x3fa>
 800a622:	464b      	mov	r3, r9
 800a624:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a628:	e6df      	b.n	800a3ea <_printf_float+0x1da>
 800a62a:	f04f 0800 	mov.w	r8, #0
 800a62e:	f104 0b1a 	add.w	fp, r4, #26
 800a632:	e7f4      	b.n	800a61e <_printf_float+0x40e>
 800a634:	2301      	movs	r3, #1
 800a636:	4642      	mov	r2, r8
 800a638:	e7e1      	b.n	800a5fe <_printf_float+0x3ee>
 800a63a:	2301      	movs	r3, #1
 800a63c:	464a      	mov	r2, r9
 800a63e:	4631      	mov	r1, r6
 800a640:	4628      	mov	r0, r5
 800a642:	47b8      	blx	r7
 800a644:	3001      	adds	r0, #1
 800a646:	f43f ae3e 	beq.w	800a2c6 <_printf_float+0xb6>
 800a64a:	f108 0801 	add.w	r8, r8, #1
 800a64e:	68e3      	ldr	r3, [r4, #12]
 800a650:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a652:	1a5b      	subs	r3, r3, r1
 800a654:	4543      	cmp	r3, r8
 800a656:	dcf0      	bgt.n	800a63a <_printf_float+0x42a>
 800a658:	e6fc      	b.n	800a454 <_printf_float+0x244>
 800a65a:	f04f 0800 	mov.w	r8, #0
 800a65e:	f104 0919 	add.w	r9, r4, #25
 800a662:	e7f4      	b.n	800a64e <_printf_float+0x43e>

0800a664 <_printf_common>:
 800a664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a668:	4616      	mov	r6, r2
 800a66a:	4698      	mov	r8, r3
 800a66c:	688a      	ldr	r2, [r1, #8]
 800a66e:	690b      	ldr	r3, [r1, #16]
 800a670:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a674:	4293      	cmp	r3, r2
 800a676:	bfb8      	it	lt
 800a678:	4613      	movlt	r3, r2
 800a67a:	6033      	str	r3, [r6, #0]
 800a67c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a680:	4607      	mov	r7, r0
 800a682:	460c      	mov	r4, r1
 800a684:	b10a      	cbz	r2, 800a68a <_printf_common+0x26>
 800a686:	3301      	adds	r3, #1
 800a688:	6033      	str	r3, [r6, #0]
 800a68a:	6823      	ldr	r3, [r4, #0]
 800a68c:	0699      	lsls	r1, r3, #26
 800a68e:	bf42      	ittt	mi
 800a690:	6833      	ldrmi	r3, [r6, #0]
 800a692:	3302      	addmi	r3, #2
 800a694:	6033      	strmi	r3, [r6, #0]
 800a696:	6825      	ldr	r5, [r4, #0]
 800a698:	f015 0506 	ands.w	r5, r5, #6
 800a69c:	d106      	bne.n	800a6ac <_printf_common+0x48>
 800a69e:	f104 0a19 	add.w	sl, r4, #25
 800a6a2:	68e3      	ldr	r3, [r4, #12]
 800a6a4:	6832      	ldr	r2, [r6, #0]
 800a6a6:	1a9b      	subs	r3, r3, r2
 800a6a8:	42ab      	cmp	r3, r5
 800a6aa:	dc26      	bgt.n	800a6fa <_printf_common+0x96>
 800a6ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a6b0:	6822      	ldr	r2, [r4, #0]
 800a6b2:	3b00      	subs	r3, #0
 800a6b4:	bf18      	it	ne
 800a6b6:	2301      	movne	r3, #1
 800a6b8:	0692      	lsls	r2, r2, #26
 800a6ba:	d42b      	bmi.n	800a714 <_printf_common+0xb0>
 800a6bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a6c0:	4641      	mov	r1, r8
 800a6c2:	4638      	mov	r0, r7
 800a6c4:	47c8      	blx	r9
 800a6c6:	3001      	adds	r0, #1
 800a6c8:	d01e      	beq.n	800a708 <_printf_common+0xa4>
 800a6ca:	6823      	ldr	r3, [r4, #0]
 800a6cc:	6922      	ldr	r2, [r4, #16]
 800a6ce:	f003 0306 	and.w	r3, r3, #6
 800a6d2:	2b04      	cmp	r3, #4
 800a6d4:	bf02      	ittt	eq
 800a6d6:	68e5      	ldreq	r5, [r4, #12]
 800a6d8:	6833      	ldreq	r3, [r6, #0]
 800a6da:	1aed      	subeq	r5, r5, r3
 800a6dc:	68a3      	ldr	r3, [r4, #8]
 800a6de:	bf0c      	ite	eq
 800a6e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a6e4:	2500      	movne	r5, #0
 800a6e6:	4293      	cmp	r3, r2
 800a6e8:	bfc4      	itt	gt
 800a6ea:	1a9b      	subgt	r3, r3, r2
 800a6ec:	18ed      	addgt	r5, r5, r3
 800a6ee:	2600      	movs	r6, #0
 800a6f0:	341a      	adds	r4, #26
 800a6f2:	42b5      	cmp	r5, r6
 800a6f4:	d11a      	bne.n	800a72c <_printf_common+0xc8>
 800a6f6:	2000      	movs	r0, #0
 800a6f8:	e008      	b.n	800a70c <_printf_common+0xa8>
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	4652      	mov	r2, sl
 800a6fe:	4641      	mov	r1, r8
 800a700:	4638      	mov	r0, r7
 800a702:	47c8      	blx	r9
 800a704:	3001      	adds	r0, #1
 800a706:	d103      	bne.n	800a710 <_printf_common+0xac>
 800a708:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a70c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a710:	3501      	adds	r5, #1
 800a712:	e7c6      	b.n	800a6a2 <_printf_common+0x3e>
 800a714:	18e1      	adds	r1, r4, r3
 800a716:	1c5a      	adds	r2, r3, #1
 800a718:	2030      	movs	r0, #48	@ 0x30
 800a71a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a71e:	4422      	add	r2, r4
 800a720:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a724:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a728:	3302      	adds	r3, #2
 800a72a:	e7c7      	b.n	800a6bc <_printf_common+0x58>
 800a72c:	2301      	movs	r3, #1
 800a72e:	4622      	mov	r2, r4
 800a730:	4641      	mov	r1, r8
 800a732:	4638      	mov	r0, r7
 800a734:	47c8      	blx	r9
 800a736:	3001      	adds	r0, #1
 800a738:	d0e6      	beq.n	800a708 <_printf_common+0xa4>
 800a73a:	3601      	adds	r6, #1
 800a73c:	e7d9      	b.n	800a6f2 <_printf_common+0x8e>
	...

0800a740 <_printf_i>:
 800a740:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a744:	7e0f      	ldrb	r7, [r1, #24]
 800a746:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a748:	2f78      	cmp	r7, #120	@ 0x78
 800a74a:	4691      	mov	r9, r2
 800a74c:	4680      	mov	r8, r0
 800a74e:	460c      	mov	r4, r1
 800a750:	469a      	mov	sl, r3
 800a752:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a756:	d807      	bhi.n	800a768 <_printf_i+0x28>
 800a758:	2f62      	cmp	r7, #98	@ 0x62
 800a75a:	d80a      	bhi.n	800a772 <_printf_i+0x32>
 800a75c:	2f00      	cmp	r7, #0
 800a75e:	f000 80d2 	beq.w	800a906 <_printf_i+0x1c6>
 800a762:	2f58      	cmp	r7, #88	@ 0x58
 800a764:	f000 80b9 	beq.w	800a8da <_printf_i+0x19a>
 800a768:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a76c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a770:	e03a      	b.n	800a7e8 <_printf_i+0xa8>
 800a772:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a776:	2b15      	cmp	r3, #21
 800a778:	d8f6      	bhi.n	800a768 <_printf_i+0x28>
 800a77a:	a101      	add	r1, pc, #4	@ (adr r1, 800a780 <_printf_i+0x40>)
 800a77c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a780:	0800a7d9 	.word	0x0800a7d9
 800a784:	0800a7ed 	.word	0x0800a7ed
 800a788:	0800a769 	.word	0x0800a769
 800a78c:	0800a769 	.word	0x0800a769
 800a790:	0800a769 	.word	0x0800a769
 800a794:	0800a769 	.word	0x0800a769
 800a798:	0800a7ed 	.word	0x0800a7ed
 800a79c:	0800a769 	.word	0x0800a769
 800a7a0:	0800a769 	.word	0x0800a769
 800a7a4:	0800a769 	.word	0x0800a769
 800a7a8:	0800a769 	.word	0x0800a769
 800a7ac:	0800a8ed 	.word	0x0800a8ed
 800a7b0:	0800a817 	.word	0x0800a817
 800a7b4:	0800a8a7 	.word	0x0800a8a7
 800a7b8:	0800a769 	.word	0x0800a769
 800a7bc:	0800a769 	.word	0x0800a769
 800a7c0:	0800a90f 	.word	0x0800a90f
 800a7c4:	0800a769 	.word	0x0800a769
 800a7c8:	0800a817 	.word	0x0800a817
 800a7cc:	0800a769 	.word	0x0800a769
 800a7d0:	0800a769 	.word	0x0800a769
 800a7d4:	0800a8af 	.word	0x0800a8af
 800a7d8:	6833      	ldr	r3, [r6, #0]
 800a7da:	1d1a      	adds	r2, r3, #4
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	6032      	str	r2, [r6, #0]
 800a7e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a7e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	e09d      	b.n	800a928 <_printf_i+0x1e8>
 800a7ec:	6833      	ldr	r3, [r6, #0]
 800a7ee:	6820      	ldr	r0, [r4, #0]
 800a7f0:	1d19      	adds	r1, r3, #4
 800a7f2:	6031      	str	r1, [r6, #0]
 800a7f4:	0606      	lsls	r6, r0, #24
 800a7f6:	d501      	bpl.n	800a7fc <_printf_i+0xbc>
 800a7f8:	681d      	ldr	r5, [r3, #0]
 800a7fa:	e003      	b.n	800a804 <_printf_i+0xc4>
 800a7fc:	0645      	lsls	r5, r0, #25
 800a7fe:	d5fb      	bpl.n	800a7f8 <_printf_i+0xb8>
 800a800:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a804:	2d00      	cmp	r5, #0
 800a806:	da03      	bge.n	800a810 <_printf_i+0xd0>
 800a808:	232d      	movs	r3, #45	@ 0x2d
 800a80a:	426d      	negs	r5, r5
 800a80c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a810:	4859      	ldr	r0, [pc, #356]	@ (800a978 <_printf_i+0x238>)
 800a812:	230a      	movs	r3, #10
 800a814:	e011      	b.n	800a83a <_printf_i+0xfa>
 800a816:	6821      	ldr	r1, [r4, #0]
 800a818:	6833      	ldr	r3, [r6, #0]
 800a81a:	0608      	lsls	r0, r1, #24
 800a81c:	f853 5b04 	ldr.w	r5, [r3], #4
 800a820:	d402      	bmi.n	800a828 <_printf_i+0xe8>
 800a822:	0649      	lsls	r1, r1, #25
 800a824:	bf48      	it	mi
 800a826:	b2ad      	uxthmi	r5, r5
 800a828:	2f6f      	cmp	r7, #111	@ 0x6f
 800a82a:	4853      	ldr	r0, [pc, #332]	@ (800a978 <_printf_i+0x238>)
 800a82c:	6033      	str	r3, [r6, #0]
 800a82e:	bf14      	ite	ne
 800a830:	230a      	movne	r3, #10
 800a832:	2308      	moveq	r3, #8
 800a834:	2100      	movs	r1, #0
 800a836:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a83a:	6866      	ldr	r6, [r4, #4]
 800a83c:	60a6      	str	r6, [r4, #8]
 800a83e:	2e00      	cmp	r6, #0
 800a840:	bfa2      	ittt	ge
 800a842:	6821      	ldrge	r1, [r4, #0]
 800a844:	f021 0104 	bicge.w	r1, r1, #4
 800a848:	6021      	strge	r1, [r4, #0]
 800a84a:	b90d      	cbnz	r5, 800a850 <_printf_i+0x110>
 800a84c:	2e00      	cmp	r6, #0
 800a84e:	d04b      	beq.n	800a8e8 <_printf_i+0x1a8>
 800a850:	4616      	mov	r6, r2
 800a852:	fbb5 f1f3 	udiv	r1, r5, r3
 800a856:	fb03 5711 	mls	r7, r3, r1, r5
 800a85a:	5dc7      	ldrb	r7, [r0, r7]
 800a85c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a860:	462f      	mov	r7, r5
 800a862:	42bb      	cmp	r3, r7
 800a864:	460d      	mov	r5, r1
 800a866:	d9f4      	bls.n	800a852 <_printf_i+0x112>
 800a868:	2b08      	cmp	r3, #8
 800a86a:	d10b      	bne.n	800a884 <_printf_i+0x144>
 800a86c:	6823      	ldr	r3, [r4, #0]
 800a86e:	07df      	lsls	r7, r3, #31
 800a870:	d508      	bpl.n	800a884 <_printf_i+0x144>
 800a872:	6923      	ldr	r3, [r4, #16]
 800a874:	6861      	ldr	r1, [r4, #4]
 800a876:	4299      	cmp	r1, r3
 800a878:	bfde      	ittt	le
 800a87a:	2330      	movle	r3, #48	@ 0x30
 800a87c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a880:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800a884:	1b92      	subs	r2, r2, r6
 800a886:	6122      	str	r2, [r4, #16]
 800a888:	f8cd a000 	str.w	sl, [sp]
 800a88c:	464b      	mov	r3, r9
 800a88e:	aa03      	add	r2, sp, #12
 800a890:	4621      	mov	r1, r4
 800a892:	4640      	mov	r0, r8
 800a894:	f7ff fee6 	bl	800a664 <_printf_common>
 800a898:	3001      	adds	r0, #1
 800a89a:	d14a      	bne.n	800a932 <_printf_i+0x1f2>
 800a89c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a8a0:	b004      	add	sp, #16
 800a8a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8a6:	6823      	ldr	r3, [r4, #0]
 800a8a8:	f043 0320 	orr.w	r3, r3, #32
 800a8ac:	6023      	str	r3, [r4, #0]
 800a8ae:	4833      	ldr	r0, [pc, #204]	@ (800a97c <_printf_i+0x23c>)
 800a8b0:	2778      	movs	r7, #120	@ 0x78
 800a8b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a8b6:	6823      	ldr	r3, [r4, #0]
 800a8b8:	6831      	ldr	r1, [r6, #0]
 800a8ba:	061f      	lsls	r7, r3, #24
 800a8bc:	f851 5b04 	ldr.w	r5, [r1], #4
 800a8c0:	d402      	bmi.n	800a8c8 <_printf_i+0x188>
 800a8c2:	065f      	lsls	r7, r3, #25
 800a8c4:	bf48      	it	mi
 800a8c6:	b2ad      	uxthmi	r5, r5
 800a8c8:	6031      	str	r1, [r6, #0]
 800a8ca:	07d9      	lsls	r1, r3, #31
 800a8cc:	bf44      	itt	mi
 800a8ce:	f043 0320 	orrmi.w	r3, r3, #32
 800a8d2:	6023      	strmi	r3, [r4, #0]
 800a8d4:	b11d      	cbz	r5, 800a8de <_printf_i+0x19e>
 800a8d6:	2310      	movs	r3, #16
 800a8d8:	e7ac      	b.n	800a834 <_printf_i+0xf4>
 800a8da:	4827      	ldr	r0, [pc, #156]	@ (800a978 <_printf_i+0x238>)
 800a8dc:	e7e9      	b.n	800a8b2 <_printf_i+0x172>
 800a8de:	6823      	ldr	r3, [r4, #0]
 800a8e0:	f023 0320 	bic.w	r3, r3, #32
 800a8e4:	6023      	str	r3, [r4, #0]
 800a8e6:	e7f6      	b.n	800a8d6 <_printf_i+0x196>
 800a8e8:	4616      	mov	r6, r2
 800a8ea:	e7bd      	b.n	800a868 <_printf_i+0x128>
 800a8ec:	6833      	ldr	r3, [r6, #0]
 800a8ee:	6825      	ldr	r5, [r4, #0]
 800a8f0:	6961      	ldr	r1, [r4, #20]
 800a8f2:	1d18      	adds	r0, r3, #4
 800a8f4:	6030      	str	r0, [r6, #0]
 800a8f6:	062e      	lsls	r6, r5, #24
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	d501      	bpl.n	800a900 <_printf_i+0x1c0>
 800a8fc:	6019      	str	r1, [r3, #0]
 800a8fe:	e002      	b.n	800a906 <_printf_i+0x1c6>
 800a900:	0668      	lsls	r0, r5, #25
 800a902:	d5fb      	bpl.n	800a8fc <_printf_i+0x1bc>
 800a904:	8019      	strh	r1, [r3, #0]
 800a906:	2300      	movs	r3, #0
 800a908:	6123      	str	r3, [r4, #16]
 800a90a:	4616      	mov	r6, r2
 800a90c:	e7bc      	b.n	800a888 <_printf_i+0x148>
 800a90e:	6833      	ldr	r3, [r6, #0]
 800a910:	1d1a      	adds	r2, r3, #4
 800a912:	6032      	str	r2, [r6, #0]
 800a914:	681e      	ldr	r6, [r3, #0]
 800a916:	6862      	ldr	r2, [r4, #4]
 800a918:	2100      	movs	r1, #0
 800a91a:	4630      	mov	r0, r6
 800a91c:	f7f5 fc58 	bl	80001d0 <memchr>
 800a920:	b108      	cbz	r0, 800a926 <_printf_i+0x1e6>
 800a922:	1b80      	subs	r0, r0, r6
 800a924:	6060      	str	r0, [r4, #4]
 800a926:	6863      	ldr	r3, [r4, #4]
 800a928:	6123      	str	r3, [r4, #16]
 800a92a:	2300      	movs	r3, #0
 800a92c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a930:	e7aa      	b.n	800a888 <_printf_i+0x148>
 800a932:	6923      	ldr	r3, [r4, #16]
 800a934:	4632      	mov	r2, r6
 800a936:	4649      	mov	r1, r9
 800a938:	4640      	mov	r0, r8
 800a93a:	47d0      	blx	sl
 800a93c:	3001      	adds	r0, #1
 800a93e:	d0ad      	beq.n	800a89c <_printf_i+0x15c>
 800a940:	6823      	ldr	r3, [r4, #0]
 800a942:	079b      	lsls	r3, r3, #30
 800a944:	d413      	bmi.n	800a96e <_printf_i+0x22e>
 800a946:	68e0      	ldr	r0, [r4, #12]
 800a948:	9b03      	ldr	r3, [sp, #12]
 800a94a:	4298      	cmp	r0, r3
 800a94c:	bfb8      	it	lt
 800a94e:	4618      	movlt	r0, r3
 800a950:	e7a6      	b.n	800a8a0 <_printf_i+0x160>
 800a952:	2301      	movs	r3, #1
 800a954:	4632      	mov	r2, r6
 800a956:	4649      	mov	r1, r9
 800a958:	4640      	mov	r0, r8
 800a95a:	47d0      	blx	sl
 800a95c:	3001      	adds	r0, #1
 800a95e:	d09d      	beq.n	800a89c <_printf_i+0x15c>
 800a960:	3501      	adds	r5, #1
 800a962:	68e3      	ldr	r3, [r4, #12]
 800a964:	9903      	ldr	r1, [sp, #12]
 800a966:	1a5b      	subs	r3, r3, r1
 800a968:	42ab      	cmp	r3, r5
 800a96a:	dcf2      	bgt.n	800a952 <_printf_i+0x212>
 800a96c:	e7eb      	b.n	800a946 <_printf_i+0x206>
 800a96e:	2500      	movs	r5, #0
 800a970:	f104 0619 	add.w	r6, r4, #25
 800a974:	e7f5      	b.n	800a962 <_printf_i+0x222>
 800a976:	bf00      	nop
 800a978:	08022af2 	.word	0x08022af2
 800a97c:	08022b03 	.word	0x08022b03

0800a980 <siprintf>:
 800a980:	b40e      	push	{r1, r2, r3}
 800a982:	b500      	push	{lr}
 800a984:	b09c      	sub	sp, #112	@ 0x70
 800a986:	ab1d      	add	r3, sp, #116	@ 0x74
 800a988:	9002      	str	r0, [sp, #8]
 800a98a:	9006      	str	r0, [sp, #24]
 800a98c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a990:	4809      	ldr	r0, [pc, #36]	@ (800a9b8 <siprintf+0x38>)
 800a992:	9107      	str	r1, [sp, #28]
 800a994:	9104      	str	r1, [sp, #16]
 800a996:	4909      	ldr	r1, [pc, #36]	@ (800a9bc <siprintf+0x3c>)
 800a998:	f853 2b04 	ldr.w	r2, [r3], #4
 800a99c:	9105      	str	r1, [sp, #20]
 800a99e:	6800      	ldr	r0, [r0, #0]
 800a9a0:	9301      	str	r3, [sp, #4]
 800a9a2:	a902      	add	r1, sp, #8
 800a9a4:	f001 f92c 	bl	800bc00 <_svfiprintf_r>
 800a9a8:	9b02      	ldr	r3, [sp, #8]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	701a      	strb	r2, [r3, #0]
 800a9ae:	b01c      	add	sp, #112	@ 0x70
 800a9b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a9b4:	b003      	add	sp, #12
 800a9b6:	4770      	bx	lr
 800a9b8:	20000018 	.word	0x20000018
 800a9bc:	ffff0208 	.word	0xffff0208

0800a9c0 <std>:
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	b510      	push	{r4, lr}
 800a9c4:	4604      	mov	r4, r0
 800a9c6:	e9c0 3300 	strd	r3, r3, [r0]
 800a9ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a9ce:	6083      	str	r3, [r0, #8]
 800a9d0:	8181      	strh	r1, [r0, #12]
 800a9d2:	6643      	str	r3, [r0, #100]	@ 0x64
 800a9d4:	81c2      	strh	r2, [r0, #14]
 800a9d6:	6183      	str	r3, [r0, #24]
 800a9d8:	4619      	mov	r1, r3
 800a9da:	2208      	movs	r2, #8
 800a9dc:	305c      	adds	r0, #92	@ 0x5c
 800a9de:	f000 fa01 	bl	800ade4 <memset>
 800a9e2:	4b0d      	ldr	r3, [pc, #52]	@ (800aa18 <std+0x58>)
 800a9e4:	6263      	str	r3, [r4, #36]	@ 0x24
 800a9e6:	4b0d      	ldr	r3, [pc, #52]	@ (800aa1c <std+0x5c>)
 800a9e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a9ea:	4b0d      	ldr	r3, [pc, #52]	@ (800aa20 <std+0x60>)
 800a9ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a9ee:	4b0d      	ldr	r3, [pc, #52]	@ (800aa24 <std+0x64>)
 800a9f0:	6323      	str	r3, [r4, #48]	@ 0x30
 800a9f2:	4b0d      	ldr	r3, [pc, #52]	@ (800aa28 <std+0x68>)
 800a9f4:	6224      	str	r4, [r4, #32]
 800a9f6:	429c      	cmp	r4, r3
 800a9f8:	d006      	beq.n	800aa08 <std+0x48>
 800a9fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a9fe:	4294      	cmp	r4, r2
 800aa00:	d002      	beq.n	800aa08 <std+0x48>
 800aa02:	33d0      	adds	r3, #208	@ 0xd0
 800aa04:	429c      	cmp	r4, r3
 800aa06:	d105      	bne.n	800aa14 <std+0x54>
 800aa08:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800aa0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa10:	f000 ba1e 	b.w	800ae50 <__retarget_lock_init_recursive>
 800aa14:	bd10      	pop	{r4, pc}
 800aa16:	bf00      	nop
 800aa18:	0800ca45 	.word	0x0800ca45
 800aa1c:	0800ca67 	.word	0x0800ca67
 800aa20:	0800ca9f 	.word	0x0800ca9f
 800aa24:	0800cac3 	.word	0x0800cac3
 800aa28:	20003574 	.word	0x20003574

0800aa2c <stdio_exit_handler>:
 800aa2c:	4a02      	ldr	r2, [pc, #8]	@ (800aa38 <stdio_exit_handler+0xc>)
 800aa2e:	4903      	ldr	r1, [pc, #12]	@ (800aa3c <stdio_exit_handler+0x10>)
 800aa30:	4803      	ldr	r0, [pc, #12]	@ (800aa40 <stdio_exit_handler+0x14>)
 800aa32:	f000 b8ed 	b.w	800ac10 <_fwalk_sglue>
 800aa36:	bf00      	nop
 800aa38:	2000000c 	.word	0x2000000c
 800aa3c:	0800c2d9 	.word	0x0800c2d9
 800aa40:	2000001c 	.word	0x2000001c

0800aa44 <cleanup_stdio>:
 800aa44:	6841      	ldr	r1, [r0, #4]
 800aa46:	4b0c      	ldr	r3, [pc, #48]	@ (800aa78 <cleanup_stdio+0x34>)
 800aa48:	4299      	cmp	r1, r3
 800aa4a:	b510      	push	{r4, lr}
 800aa4c:	4604      	mov	r4, r0
 800aa4e:	d001      	beq.n	800aa54 <cleanup_stdio+0x10>
 800aa50:	f001 fc42 	bl	800c2d8 <_fflush_r>
 800aa54:	68a1      	ldr	r1, [r4, #8]
 800aa56:	4b09      	ldr	r3, [pc, #36]	@ (800aa7c <cleanup_stdio+0x38>)
 800aa58:	4299      	cmp	r1, r3
 800aa5a:	d002      	beq.n	800aa62 <cleanup_stdio+0x1e>
 800aa5c:	4620      	mov	r0, r4
 800aa5e:	f001 fc3b 	bl	800c2d8 <_fflush_r>
 800aa62:	68e1      	ldr	r1, [r4, #12]
 800aa64:	4b06      	ldr	r3, [pc, #24]	@ (800aa80 <cleanup_stdio+0x3c>)
 800aa66:	4299      	cmp	r1, r3
 800aa68:	d004      	beq.n	800aa74 <cleanup_stdio+0x30>
 800aa6a:	4620      	mov	r0, r4
 800aa6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa70:	f001 bc32 	b.w	800c2d8 <_fflush_r>
 800aa74:	bd10      	pop	{r4, pc}
 800aa76:	bf00      	nop
 800aa78:	20003574 	.word	0x20003574
 800aa7c:	200035dc 	.word	0x200035dc
 800aa80:	20003644 	.word	0x20003644

0800aa84 <global_stdio_init.part.0>:
 800aa84:	b510      	push	{r4, lr}
 800aa86:	4b0b      	ldr	r3, [pc, #44]	@ (800aab4 <global_stdio_init.part.0+0x30>)
 800aa88:	4c0b      	ldr	r4, [pc, #44]	@ (800aab8 <global_stdio_init.part.0+0x34>)
 800aa8a:	4a0c      	ldr	r2, [pc, #48]	@ (800aabc <global_stdio_init.part.0+0x38>)
 800aa8c:	601a      	str	r2, [r3, #0]
 800aa8e:	4620      	mov	r0, r4
 800aa90:	2200      	movs	r2, #0
 800aa92:	2104      	movs	r1, #4
 800aa94:	f7ff ff94 	bl	800a9c0 <std>
 800aa98:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800aa9c:	2201      	movs	r2, #1
 800aa9e:	2109      	movs	r1, #9
 800aaa0:	f7ff ff8e 	bl	800a9c0 <std>
 800aaa4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800aaa8:	2202      	movs	r2, #2
 800aaaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aaae:	2112      	movs	r1, #18
 800aab0:	f7ff bf86 	b.w	800a9c0 <std>
 800aab4:	200036ac 	.word	0x200036ac
 800aab8:	20003574 	.word	0x20003574
 800aabc:	0800aa2d 	.word	0x0800aa2d

0800aac0 <__sfp_lock_acquire>:
 800aac0:	4801      	ldr	r0, [pc, #4]	@ (800aac8 <__sfp_lock_acquire+0x8>)
 800aac2:	f000 b9c6 	b.w	800ae52 <__retarget_lock_acquire_recursive>
 800aac6:	bf00      	nop
 800aac8:	200036b1 	.word	0x200036b1

0800aacc <__sfp_lock_release>:
 800aacc:	4801      	ldr	r0, [pc, #4]	@ (800aad4 <__sfp_lock_release+0x8>)
 800aace:	f000 b9c1 	b.w	800ae54 <__retarget_lock_release_recursive>
 800aad2:	bf00      	nop
 800aad4:	200036b1 	.word	0x200036b1

0800aad8 <__sinit>:
 800aad8:	b510      	push	{r4, lr}
 800aada:	4604      	mov	r4, r0
 800aadc:	f7ff fff0 	bl	800aac0 <__sfp_lock_acquire>
 800aae0:	6a23      	ldr	r3, [r4, #32]
 800aae2:	b11b      	cbz	r3, 800aaec <__sinit+0x14>
 800aae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aae8:	f7ff bff0 	b.w	800aacc <__sfp_lock_release>
 800aaec:	4b04      	ldr	r3, [pc, #16]	@ (800ab00 <__sinit+0x28>)
 800aaee:	6223      	str	r3, [r4, #32]
 800aaf0:	4b04      	ldr	r3, [pc, #16]	@ (800ab04 <__sinit+0x2c>)
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d1f5      	bne.n	800aae4 <__sinit+0xc>
 800aaf8:	f7ff ffc4 	bl	800aa84 <global_stdio_init.part.0>
 800aafc:	e7f2      	b.n	800aae4 <__sinit+0xc>
 800aafe:	bf00      	nop
 800ab00:	0800aa45 	.word	0x0800aa45
 800ab04:	200036ac 	.word	0x200036ac

0800ab08 <_strtol_l.constprop.0>:
 800ab08:	2b24      	cmp	r3, #36	@ 0x24
 800ab0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab0e:	4686      	mov	lr, r0
 800ab10:	4690      	mov	r8, r2
 800ab12:	d801      	bhi.n	800ab18 <_strtol_l.constprop.0+0x10>
 800ab14:	2b01      	cmp	r3, #1
 800ab16:	d106      	bne.n	800ab26 <_strtol_l.constprop.0+0x1e>
 800ab18:	f000 f970 	bl	800adfc <__errno>
 800ab1c:	2316      	movs	r3, #22
 800ab1e:	6003      	str	r3, [r0, #0]
 800ab20:	2000      	movs	r0, #0
 800ab22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab26:	4834      	ldr	r0, [pc, #208]	@ (800abf8 <_strtol_l.constprop.0+0xf0>)
 800ab28:	460d      	mov	r5, r1
 800ab2a:	462a      	mov	r2, r5
 800ab2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ab30:	5d06      	ldrb	r6, [r0, r4]
 800ab32:	f016 0608 	ands.w	r6, r6, #8
 800ab36:	d1f8      	bne.n	800ab2a <_strtol_l.constprop.0+0x22>
 800ab38:	2c2d      	cmp	r4, #45	@ 0x2d
 800ab3a:	d12d      	bne.n	800ab98 <_strtol_l.constprop.0+0x90>
 800ab3c:	782c      	ldrb	r4, [r5, #0]
 800ab3e:	2601      	movs	r6, #1
 800ab40:	1c95      	adds	r5, r2, #2
 800ab42:	f033 0210 	bics.w	r2, r3, #16
 800ab46:	d109      	bne.n	800ab5c <_strtol_l.constprop.0+0x54>
 800ab48:	2c30      	cmp	r4, #48	@ 0x30
 800ab4a:	d12a      	bne.n	800aba2 <_strtol_l.constprop.0+0x9a>
 800ab4c:	782a      	ldrb	r2, [r5, #0]
 800ab4e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ab52:	2a58      	cmp	r2, #88	@ 0x58
 800ab54:	d125      	bne.n	800aba2 <_strtol_l.constprop.0+0x9a>
 800ab56:	786c      	ldrb	r4, [r5, #1]
 800ab58:	2310      	movs	r3, #16
 800ab5a:	3502      	adds	r5, #2
 800ab5c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ab60:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800ab64:	2200      	movs	r2, #0
 800ab66:	fbbc f9f3 	udiv	r9, ip, r3
 800ab6a:	4610      	mov	r0, r2
 800ab6c:	fb03 ca19 	mls	sl, r3, r9, ip
 800ab70:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ab74:	2f09      	cmp	r7, #9
 800ab76:	d81b      	bhi.n	800abb0 <_strtol_l.constprop.0+0xa8>
 800ab78:	463c      	mov	r4, r7
 800ab7a:	42a3      	cmp	r3, r4
 800ab7c:	dd27      	ble.n	800abce <_strtol_l.constprop.0+0xc6>
 800ab7e:	1c57      	adds	r7, r2, #1
 800ab80:	d007      	beq.n	800ab92 <_strtol_l.constprop.0+0x8a>
 800ab82:	4581      	cmp	r9, r0
 800ab84:	d320      	bcc.n	800abc8 <_strtol_l.constprop.0+0xc0>
 800ab86:	d101      	bne.n	800ab8c <_strtol_l.constprop.0+0x84>
 800ab88:	45a2      	cmp	sl, r4
 800ab8a:	db1d      	blt.n	800abc8 <_strtol_l.constprop.0+0xc0>
 800ab8c:	fb00 4003 	mla	r0, r0, r3, r4
 800ab90:	2201      	movs	r2, #1
 800ab92:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ab96:	e7eb      	b.n	800ab70 <_strtol_l.constprop.0+0x68>
 800ab98:	2c2b      	cmp	r4, #43	@ 0x2b
 800ab9a:	bf04      	itt	eq
 800ab9c:	782c      	ldrbeq	r4, [r5, #0]
 800ab9e:	1c95      	addeq	r5, r2, #2
 800aba0:	e7cf      	b.n	800ab42 <_strtol_l.constprop.0+0x3a>
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d1da      	bne.n	800ab5c <_strtol_l.constprop.0+0x54>
 800aba6:	2c30      	cmp	r4, #48	@ 0x30
 800aba8:	bf0c      	ite	eq
 800abaa:	2308      	moveq	r3, #8
 800abac:	230a      	movne	r3, #10
 800abae:	e7d5      	b.n	800ab5c <_strtol_l.constprop.0+0x54>
 800abb0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800abb4:	2f19      	cmp	r7, #25
 800abb6:	d801      	bhi.n	800abbc <_strtol_l.constprop.0+0xb4>
 800abb8:	3c37      	subs	r4, #55	@ 0x37
 800abba:	e7de      	b.n	800ab7a <_strtol_l.constprop.0+0x72>
 800abbc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800abc0:	2f19      	cmp	r7, #25
 800abc2:	d804      	bhi.n	800abce <_strtol_l.constprop.0+0xc6>
 800abc4:	3c57      	subs	r4, #87	@ 0x57
 800abc6:	e7d8      	b.n	800ab7a <_strtol_l.constprop.0+0x72>
 800abc8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800abcc:	e7e1      	b.n	800ab92 <_strtol_l.constprop.0+0x8a>
 800abce:	1c53      	adds	r3, r2, #1
 800abd0:	d108      	bne.n	800abe4 <_strtol_l.constprop.0+0xdc>
 800abd2:	2322      	movs	r3, #34	@ 0x22
 800abd4:	f8ce 3000 	str.w	r3, [lr]
 800abd8:	4660      	mov	r0, ip
 800abda:	f1b8 0f00 	cmp.w	r8, #0
 800abde:	d0a0      	beq.n	800ab22 <_strtol_l.constprop.0+0x1a>
 800abe0:	1e69      	subs	r1, r5, #1
 800abe2:	e006      	b.n	800abf2 <_strtol_l.constprop.0+0xea>
 800abe4:	b106      	cbz	r6, 800abe8 <_strtol_l.constprop.0+0xe0>
 800abe6:	4240      	negs	r0, r0
 800abe8:	f1b8 0f00 	cmp.w	r8, #0
 800abec:	d099      	beq.n	800ab22 <_strtol_l.constprop.0+0x1a>
 800abee:	2a00      	cmp	r2, #0
 800abf0:	d1f6      	bne.n	800abe0 <_strtol_l.constprop.0+0xd8>
 800abf2:	f8c8 1000 	str.w	r1, [r8]
 800abf6:	e794      	b.n	800ab22 <_strtol_l.constprop.0+0x1a>
 800abf8:	08022b86 	.word	0x08022b86

0800abfc <strtol>:
 800abfc:	4613      	mov	r3, r2
 800abfe:	460a      	mov	r2, r1
 800ac00:	4601      	mov	r1, r0
 800ac02:	4802      	ldr	r0, [pc, #8]	@ (800ac0c <strtol+0x10>)
 800ac04:	6800      	ldr	r0, [r0, #0]
 800ac06:	f7ff bf7f 	b.w	800ab08 <_strtol_l.constprop.0>
 800ac0a:	bf00      	nop
 800ac0c:	20000018 	.word	0x20000018

0800ac10 <_fwalk_sglue>:
 800ac10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac14:	4607      	mov	r7, r0
 800ac16:	4688      	mov	r8, r1
 800ac18:	4614      	mov	r4, r2
 800ac1a:	2600      	movs	r6, #0
 800ac1c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ac20:	f1b9 0901 	subs.w	r9, r9, #1
 800ac24:	d505      	bpl.n	800ac32 <_fwalk_sglue+0x22>
 800ac26:	6824      	ldr	r4, [r4, #0]
 800ac28:	2c00      	cmp	r4, #0
 800ac2a:	d1f7      	bne.n	800ac1c <_fwalk_sglue+0xc>
 800ac2c:	4630      	mov	r0, r6
 800ac2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac32:	89ab      	ldrh	r3, [r5, #12]
 800ac34:	2b01      	cmp	r3, #1
 800ac36:	d907      	bls.n	800ac48 <_fwalk_sglue+0x38>
 800ac38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac3c:	3301      	adds	r3, #1
 800ac3e:	d003      	beq.n	800ac48 <_fwalk_sglue+0x38>
 800ac40:	4629      	mov	r1, r5
 800ac42:	4638      	mov	r0, r7
 800ac44:	47c0      	blx	r8
 800ac46:	4306      	orrs	r6, r0
 800ac48:	3568      	adds	r5, #104	@ 0x68
 800ac4a:	e7e9      	b.n	800ac20 <_fwalk_sglue+0x10>

0800ac4c <iprintf>:
 800ac4c:	b40f      	push	{r0, r1, r2, r3}
 800ac4e:	b507      	push	{r0, r1, r2, lr}
 800ac50:	4906      	ldr	r1, [pc, #24]	@ (800ac6c <iprintf+0x20>)
 800ac52:	ab04      	add	r3, sp, #16
 800ac54:	6808      	ldr	r0, [r1, #0]
 800ac56:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac5a:	6881      	ldr	r1, [r0, #8]
 800ac5c:	9301      	str	r3, [sp, #4]
 800ac5e:	f001 f8f5 	bl	800be4c <_vfiprintf_r>
 800ac62:	b003      	add	sp, #12
 800ac64:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac68:	b004      	add	sp, #16
 800ac6a:	4770      	bx	lr
 800ac6c:	20000018 	.word	0x20000018

0800ac70 <_puts_r>:
 800ac70:	6a03      	ldr	r3, [r0, #32]
 800ac72:	b570      	push	{r4, r5, r6, lr}
 800ac74:	6884      	ldr	r4, [r0, #8]
 800ac76:	4605      	mov	r5, r0
 800ac78:	460e      	mov	r6, r1
 800ac7a:	b90b      	cbnz	r3, 800ac80 <_puts_r+0x10>
 800ac7c:	f7ff ff2c 	bl	800aad8 <__sinit>
 800ac80:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ac82:	07db      	lsls	r3, r3, #31
 800ac84:	d405      	bmi.n	800ac92 <_puts_r+0x22>
 800ac86:	89a3      	ldrh	r3, [r4, #12]
 800ac88:	0598      	lsls	r0, r3, #22
 800ac8a:	d402      	bmi.n	800ac92 <_puts_r+0x22>
 800ac8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac8e:	f000 f8e0 	bl	800ae52 <__retarget_lock_acquire_recursive>
 800ac92:	89a3      	ldrh	r3, [r4, #12]
 800ac94:	0719      	lsls	r1, r3, #28
 800ac96:	d502      	bpl.n	800ac9e <_puts_r+0x2e>
 800ac98:	6923      	ldr	r3, [r4, #16]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d135      	bne.n	800ad0a <_puts_r+0x9a>
 800ac9e:	4621      	mov	r1, r4
 800aca0:	4628      	mov	r0, r5
 800aca2:	f001 ff91 	bl	800cbc8 <__swsetup_r>
 800aca6:	b380      	cbz	r0, 800ad0a <_puts_r+0x9a>
 800aca8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800acac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800acae:	07da      	lsls	r2, r3, #31
 800acb0:	d405      	bmi.n	800acbe <_puts_r+0x4e>
 800acb2:	89a3      	ldrh	r3, [r4, #12]
 800acb4:	059b      	lsls	r3, r3, #22
 800acb6:	d402      	bmi.n	800acbe <_puts_r+0x4e>
 800acb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800acba:	f000 f8cb 	bl	800ae54 <__retarget_lock_release_recursive>
 800acbe:	4628      	mov	r0, r5
 800acc0:	bd70      	pop	{r4, r5, r6, pc}
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	da04      	bge.n	800acd0 <_puts_r+0x60>
 800acc6:	69a2      	ldr	r2, [r4, #24]
 800acc8:	429a      	cmp	r2, r3
 800acca:	dc17      	bgt.n	800acfc <_puts_r+0x8c>
 800accc:	290a      	cmp	r1, #10
 800acce:	d015      	beq.n	800acfc <_puts_r+0x8c>
 800acd0:	6823      	ldr	r3, [r4, #0]
 800acd2:	1c5a      	adds	r2, r3, #1
 800acd4:	6022      	str	r2, [r4, #0]
 800acd6:	7019      	strb	r1, [r3, #0]
 800acd8:	68a3      	ldr	r3, [r4, #8]
 800acda:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800acde:	3b01      	subs	r3, #1
 800ace0:	60a3      	str	r3, [r4, #8]
 800ace2:	2900      	cmp	r1, #0
 800ace4:	d1ed      	bne.n	800acc2 <_puts_r+0x52>
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	da11      	bge.n	800ad0e <_puts_r+0x9e>
 800acea:	4622      	mov	r2, r4
 800acec:	210a      	movs	r1, #10
 800acee:	4628      	mov	r0, r5
 800acf0:	f001 ff2c 	bl	800cb4c <__swbuf_r>
 800acf4:	3001      	adds	r0, #1
 800acf6:	d0d7      	beq.n	800aca8 <_puts_r+0x38>
 800acf8:	250a      	movs	r5, #10
 800acfa:	e7d7      	b.n	800acac <_puts_r+0x3c>
 800acfc:	4622      	mov	r2, r4
 800acfe:	4628      	mov	r0, r5
 800ad00:	f001 ff24 	bl	800cb4c <__swbuf_r>
 800ad04:	3001      	adds	r0, #1
 800ad06:	d1e7      	bne.n	800acd8 <_puts_r+0x68>
 800ad08:	e7ce      	b.n	800aca8 <_puts_r+0x38>
 800ad0a:	3e01      	subs	r6, #1
 800ad0c:	e7e4      	b.n	800acd8 <_puts_r+0x68>
 800ad0e:	6823      	ldr	r3, [r4, #0]
 800ad10:	1c5a      	adds	r2, r3, #1
 800ad12:	6022      	str	r2, [r4, #0]
 800ad14:	220a      	movs	r2, #10
 800ad16:	701a      	strb	r2, [r3, #0]
 800ad18:	e7ee      	b.n	800acf8 <_puts_r+0x88>
	...

0800ad1c <puts>:
 800ad1c:	4b02      	ldr	r3, [pc, #8]	@ (800ad28 <puts+0xc>)
 800ad1e:	4601      	mov	r1, r0
 800ad20:	6818      	ldr	r0, [r3, #0]
 800ad22:	f7ff bfa5 	b.w	800ac70 <_puts_r>
 800ad26:	bf00      	nop
 800ad28:	20000018 	.word	0x20000018

0800ad2c <strtok>:
 800ad2c:	4b16      	ldr	r3, [pc, #88]	@ (800ad88 <strtok+0x5c>)
 800ad2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad32:	681f      	ldr	r7, [r3, #0]
 800ad34:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800ad36:	4605      	mov	r5, r0
 800ad38:	460e      	mov	r6, r1
 800ad3a:	b9ec      	cbnz	r4, 800ad78 <strtok+0x4c>
 800ad3c:	2050      	movs	r0, #80	@ 0x50
 800ad3e:	f001 f99d 	bl	800c07c <malloc>
 800ad42:	4602      	mov	r2, r0
 800ad44:	6478      	str	r0, [r7, #68]	@ 0x44
 800ad46:	b920      	cbnz	r0, 800ad52 <strtok+0x26>
 800ad48:	4b10      	ldr	r3, [pc, #64]	@ (800ad8c <strtok+0x60>)
 800ad4a:	4811      	ldr	r0, [pc, #68]	@ (800ad90 <strtok+0x64>)
 800ad4c:	215b      	movs	r1, #91	@ 0x5b
 800ad4e:	f000 f891 	bl	800ae74 <__assert_func>
 800ad52:	e9c0 4400 	strd	r4, r4, [r0]
 800ad56:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800ad5a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800ad5e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800ad62:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800ad66:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800ad6a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800ad6e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800ad72:	6184      	str	r4, [r0, #24]
 800ad74:	7704      	strb	r4, [r0, #28]
 800ad76:	6244      	str	r4, [r0, #36]	@ 0x24
 800ad78:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ad7a:	4631      	mov	r1, r6
 800ad7c:	4628      	mov	r0, r5
 800ad7e:	2301      	movs	r3, #1
 800ad80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad84:	f000 b806 	b.w	800ad94 <__strtok_r>
 800ad88:	20000018 	.word	0x20000018
 800ad8c:	08022b14 	.word	0x08022b14
 800ad90:	08022b2b 	.word	0x08022b2b

0800ad94 <__strtok_r>:
 800ad94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad96:	4604      	mov	r4, r0
 800ad98:	b908      	cbnz	r0, 800ad9e <__strtok_r+0xa>
 800ad9a:	6814      	ldr	r4, [r2, #0]
 800ad9c:	b144      	cbz	r4, 800adb0 <__strtok_r+0x1c>
 800ad9e:	4620      	mov	r0, r4
 800ada0:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ada4:	460f      	mov	r7, r1
 800ada6:	f817 6b01 	ldrb.w	r6, [r7], #1
 800adaa:	b91e      	cbnz	r6, 800adb4 <__strtok_r+0x20>
 800adac:	b965      	cbnz	r5, 800adc8 <__strtok_r+0x34>
 800adae:	6015      	str	r5, [r2, #0]
 800adb0:	2000      	movs	r0, #0
 800adb2:	e005      	b.n	800adc0 <__strtok_r+0x2c>
 800adb4:	42b5      	cmp	r5, r6
 800adb6:	d1f6      	bne.n	800ada6 <__strtok_r+0x12>
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d1f0      	bne.n	800ad9e <__strtok_r+0xa>
 800adbc:	6014      	str	r4, [r2, #0]
 800adbe:	7003      	strb	r3, [r0, #0]
 800adc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800adc2:	461c      	mov	r4, r3
 800adc4:	e00c      	b.n	800ade0 <__strtok_r+0x4c>
 800adc6:	b915      	cbnz	r5, 800adce <__strtok_r+0x3a>
 800adc8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800adcc:	460e      	mov	r6, r1
 800adce:	f816 5b01 	ldrb.w	r5, [r6], #1
 800add2:	42ab      	cmp	r3, r5
 800add4:	d1f7      	bne.n	800adc6 <__strtok_r+0x32>
 800add6:	2b00      	cmp	r3, #0
 800add8:	d0f3      	beq.n	800adc2 <__strtok_r+0x2e>
 800adda:	2300      	movs	r3, #0
 800addc:	f804 3c01 	strb.w	r3, [r4, #-1]
 800ade0:	6014      	str	r4, [r2, #0]
 800ade2:	e7ed      	b.n	800adc0 <__strtok_r+0x2c>

0800ade4 <memset>:
 800ade4:	4402      	add	r2, r0
 800ade6:	4603      	mov	r3, r0
 800ade8:	4293      	cmp	r3, r2
 800adea:	d100      	bne.n	800adee <memset+0xa>
 800adec:	4770      	bx	lr
 800adee:	f803 1b01 	strb.w	r1, [r3], #1
 800adf2:	e7f9      	b.n	800ade8 <memset+0x4>

0800adf4 <_localeconv_r>:
 800adf4:	4800      	ldr	r0, [pc, #0]	@ (800adf8 <_localeconv_r+0x4>)
 800adf6:	4770      	bx	lr
 800adf8:	20000158 	.word	0x20000158

0800adfc <__errno>:
 800adfc:	4b01      	ldr	r3, [pc, #4]	@ (800ae04 <__errno+0x8>)
 800adfe:	6818      	ldr	r0, [r3, #0]
 800ae00:	4770      	bx	lr
 800ae02:	bf00      	nop
 800ae04:	20000018 	.word	0x20000018

0800ae08 <__libc_init_array>:
 800ae08:	b570      	push	{r4, r5, r6, lr}
 800ae0a:	4d0d      	ldr	r5, [pc, #52]	@ (800ae40 <__libc_init_array+0x38>)
 800ae0c:	4c0d      	ldr	r4, [pc, #52]	@ (800ae44 <__libc_init_array+0x3c>)
 800ae0e:	1b64      	subs	r4, r4, r5
 800ae10:	10a4      	asrs	r4, r4, #2
 800ae12:	2600      	movs	r6, #0
 800ae14:	42a6      	cmp	r6, r4
 800ae16:	d109      	bne.n	800ae2c <__libc_init_array+0x24>
 800ae18:	4d0b      	ldr	r5, [pc, #44]	@ (800ae48 <__libc_init_array+0x40>)
 800ae1a:	4c0c      	ldr	r4, [pc, #48]	@ (800ae4c <__libc_init_array+0x44>)
 800ae1c:	f002 f8f0 	bl	800d000 <_init>
 800ae20:	1b64      	subs	r4, r4, r5
 800ae22:	10a4      	asrs	r4, r4, #2
 800ae24:	2600      	movs	r6, #0
 800ae26:	42a6      	cmp	r6, r4
 800ae28:	d105      	bne.n	800ae36 <__libc_init_array+0x2e>
 800ae2a:	bd70      	pop	{r4, r5, r6, pc}
 800ae2c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae30:	4798      	blx	r3
 800ae32:	3601      	adds	r6, #1
 800ae34:	e7ee      	b.n	800ae14 <__libc_init_array+0xc>
 800ae36:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae3a:	4798      	blx	r3
 800ae3c:	3601      	adds	r6, #1
 800ae3e:	e7f2      	b.n	800ae26 <__libc_init_array+0x1e>
 800ae40:	08022eb4 	.word	0x08022eb4
 800ae44:	08022eb4 	.word	0x08022eb4
 800ae48:	08022eb4 	.word	0x08022eb4
 800ae4c:	08022eb8 	.word	0x08022eb8

0800ae50 <__retarget_lock_init_recursive>:
 800ae50:	4770      	bx	lr

0800ae52 <__retarget_lock_acquire_recursive>:
 800ae52:	4770      	bx	lr

0800ae54 <__retarget_lock_release_recursive>:
 800ae54:	4770      	bx	lr

0800ae56 <memcpy>:
 800ae56:	440a      	add	r2, r1
 800ae58:	4291      	cmp	r1, r2
 800ae5a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800ae5e:	d100      	bne.n	800ae62 <memcpy+0xc>
 800ae60:	4770      	bx	lr
 800ae62:	b510      	push	{r4, lr}
 800ae64:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae68:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae6c:	4291      	cmp	r1, r2
 800ae6e:	d1f9      	bne.n	800ae64 <memcpy+0xe>
 800ae70:	bd10      	pop	{r4, pc}
	...

0800ae74 <__assert_func>:
 800ae74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae76:	4614      	mov	r4, r2
 800ae78:	461a      	mov	r2, r3
 800ae7a:	4b09      	ldr	r3, [pc, #36]	@ (800aea0 <__assert_func+0x2c>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	4605      	mov	r5, r0
 800ae80:	68d8      	ldr	r0, [r3, #12]
 800ae82:	b954      	cbnz	r4, 800ae9a <__assert_func+0x26>
 800ae84:	4b07      	ldr	r3, [pc, #28]	@ (800aea4 <__assert_func+0x30>)
 800ae86:	461c      	mov	r4, r3
 800ae88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ae8c:	9100      	str	r1, [sp, #0]
 800ae8e:	462b      	mov	r3, r5
 800ae90:	4905      	ldr	r1, [pc, #20]	@ (800aea8 <__assert_func+0x34>)
 800ae92:	f001 fe1b 	bl	800cacc <fiprintf>
 800ae96:	f001 ffe1 	bl	800ce5c <abort>
 800ae9a:	4b04      	ldr	r3, [pc, #16]	@ (800aeac <__assert_func+0x38>)
 800ae9c:	e7f4      	b.n	800ae88 <__assert_func+0x14>
 800ae9e:	bf00      	nop
 800aea0:	20000018 	.word	0x20000018
 800aea4:	08022cc1 	.word	0x08022cc1
 800aea8:	08022c93 	.word	0x08022c93
 800aeac:	08022c86 	.word	0x08022c86

0800aeb0 <quorem>:
 800aeb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeb4:	6903      	ldr	r3, [r0, #16]
 800aeb6:	690c      	ldr	r4, [r1, #16]
 800aeb8:	42a3      	cmp	r3, r4
 800aeba:	4607      	mov	r7, r0
 800aebc:	db7e      	blt.n	800afbc <quorem+0x10c>
 800aebe:	3c01      	subs	r4, #1
 800aec0:	f101 0814 	add.w	r8, r1, #20
 800aec4:	00a3      	lsls	r3, r4, #2
 800aec6:	f100 0514 	add.w	r5, r0, #20
 800aeca:	9300      	str	r3, [sp, #0]
 800aecc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aed0:	9301      	str	r3, [sp, #4]
 800aed2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aed6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aeda:	3301      	adds	r3, #1
 800aedc:	429a      	cmp	r2, r3
 800aede:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aee2:	fbb2 f6f3 	udiv	r6, r2, r3
 800aee6:	d32e      	bcc.n	800af46 <quorem+0x96>
 800aee8:	f04f 0a00 	mov.w	sl, #0
 800aeec:	46c4      	mov	ip, r8
 800aeee:	46ae      	mov	lr, r5
 800aef0:	46d3      	mov	fp, sl
 800aef2:	f85c 3b04 	ldr.w	r3, [ip], #4
 800aef6:	b298      	uxth	r0, r3
 800aef8:	fb06 a000 	mla	r0, r6, r0, sl
 800aefc:	0c02      	lsrs	r2, r0, #16
 800aefe:	0c1b      	lsrs	r3, r3, #16
 800af00:	fb06 2303 	mla	r3, r6, r3, r2
 800af04:	f8de 2000 	ldr.w	r2, [lr]
 800af08:	b280      	uxth	r0, r0
 800af0a:	b292      	uxth	r2, r2
 800af0c:	1a12      	subs	r2, r2, r0
 800af0e:	445a      	add	r2, fp
 800af10:	f8de 0000 	ldr.w	r0, [lr]
 800af14:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800af18:	b29b      	uxth	r3, r3
 800af1a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800af1e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800af22:	b292      	uxth	r2, r2
 800af24:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800af28:	45e1      	cmp	r9, ip
 800af2a:	f84e 2b04 	str.w	r2, [lr], #4
 800af2e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800af32:	d2de      	bcs.n	800aef2 <quorem+0x42>
 800af34:	9b00      	ldr	r3, [sp, #0]
 800af36:	58eb      	ldr	r3, [r5, r3]
 800af38:	b92b      	cbnz	r3, 800af46 <quorem+0x96>
 800af3a:	9b01      	ldr	r3, [sp, #4]
 800af3c:	3b04      	subs	r3, #4
 800af3e:	429d      	cmp	r5, r3
 800af40:	461a      	mov	r2, r3
 800af42:	d32f      	bcc.n	800afa4 <quorem+0xf4>
 800af44:	613c      	str	r4, [r7, #16]
 800af46:	4638      	mov	r0, r7
 800af48:	f001 fc74 	bl	800c834 <__mcmp>
 800af4c:	2800      	cmp	r0, #0
 800af4e:	db25      	blt.n	800af9c <quorem+0xec>
 800af50:	4629      	mov	r1, r5
 800af52:	2000      	movs	r0, #0
 800af54:	f858 2b04 	ldr.w	r2, [r8], #4
 800af58:	f8d1 c000 	ldr.w	ip, [r1]
 800af5c:	fa1f fe82 	uxth.w	lr, r2
 800af60:	fa1f f38c 	uxth.w	r3, ip
 800af64:	eba3 030e 	sub.w	r3, r3, lr
 800af68:	4403      	add	r3, r0
 800af6a:	0c12      	lsrs	r2, r2, #16
 800af6c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800af70:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800af74:	b29b      	uxth	r3, r3
 800af76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af7a:	45c1      	cmp	r9, r8
 800af7c:	f841 3b04 	str.w	r3, [r1], #4
 800af80:	ea4f 4022 	mov.w	r0, r2, asr #16
 800af84:	d2e6      	bcs.n	800af54 <quorem+0xa4>
 800af86:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800af8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800af8e:	b922      	cbnz	r2, 800af9a <quorem+0xea>
 800af90:	3b04      	subs	r3, #4
 800af92:	429d      	cmp	r5, r3
 800af94:	461a      	mov	r2, r3
 800af96:	d30b      	bcc.n	800afb0 <quorem+0x100>
 800af98:	613c      	str	r4, [r7, #16]
 800af9a:	3601      	adds	r6, #1
 800af9c:	4630      	mov	r0, r6
 800af9e:	b003      	add	sp, #12
 800afa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afa4:	6812      	ldr	r2, [r2, #0]
 800afa6:	3b04      	subs	r3, #4
 800afa8:	2a00      	cmp	r2, #0
 800afaa:	d1cb      	bne.n	800af44 <quorem+0x94>
 800afac:	3c01      	subs	r4, #1
 800afae:	e7c6      	b.n	800af3e <quorem+0x8e>
 800afb0:	6812      	ldr	r2, [r2, #0]
 800afb2:	3b04      	subs	r3, #4
 800afb4:	2a00      	cmp	r2, #0
 800afb6:	d1ef      	bne.n	800af98 <quorem+0xe8>
 800afb8:	3c01      	subs	r4, #1
 800afba:	e7ea      	b.n	800af92 <quorem+0xe2>
 800afbc:	2000      	movs	r0, #0
 800afbe:	e7ee      	b.n	800af9e <quorem+0xee>

0800afc0 <_dtoa_r>:
 800afc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afc4:	69c7      	ldr	r7, [r0, #28]
 800afc6:	b099      	sub	sp, #100	@ 0x64
 800afc8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800afcc:	ec55 4b10 	vmov	r4, r5, d0
 800afd0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800afd2:	9109      	str	r1, [sp, #36]	@ 0x24
 800afd4:	4683      	mov	fp, r0
 800afd6:	920e      	str	r2, [sp, #56]	@ 0x38
 800afd8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800afda:	b97f      	cbnz	r7, 800affc <_dtoa_r+0x3c>
 800afdc:	2010      	movs	r0, #16
 800afde:	f001 f84d 	bl	800c07c <malloc>
 800afe2:	4602      	mov	r2, r0
 800afe4:	f8cb 001c 	str.w	r0, [fp, #28]
 800afe8:	b920      	cbnz	r0, 800aff4 <_dtoa_r+0x34>
 800afea:	4ba7      	ldr	r3, [pc, #668]	@ (800b288 <_dtoa_r+0x2c8>)
 800afec:	21ef      	movs	r1, #239	@ 0xef
 800afee:	48a7      	ldr	r0, [pc, #668]	@ (800b28c <_dtoa_r+0x2cc>)
 800aff0:	f7ff ff40 	bl	800ae74 <__assert_func>
 800aff4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800aff8:	6007      	str	r7, [r0, #0]
 800affa:	60c7      	str	r7, [r0, #12]
 800affc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b000:	6819      	ldr	r1, [r3, #0]
 800b002:	b159      	cbz	r1, 800b01c <_dtoa_r+0x5c>
 800b004:	685a      	ldr	r2, [r3, #4]
 800b006:	604a      	str	r2, [r1, #4]
 800b008:	2301      	movs	r3, #1
 800b00a:	4093      	lsls	r3, r2
 800b00c:	608b      	str	r3, [r1, #8]
 800b00e:	4658      	mov	r0, fp
 800b010:	f001 f9d6 	bl	800c3c0 <_Bfree>
 800b014:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b018:	2200      	movs	r2, #0
 800b01a:	601a      	str	r2, [r3, #0]
 800b01c:	1e2b      	subs	r3, r5, #0
 800b01e:	bfb9      	ittee	lt
 800b020:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b024:	9303      	strlt	r3, [sp, #12]
 800b026:	2300      	movge	r3, #0
 800b028:	6033      	strge	r3, [r6, #0]
 800b02a:	9f03      	ldr	r7, [sp, #12]
 800b02c:	4b98      	ldr	r3, [pc, #608]	@ (800b290 <_dtoa_r+0x2d0>)
 800b02e:	bfbc      	itt	lt
 800b030:	2201      	movlt	r2, #1
 800b032:	6032      	strlt	r2, [r6, #0]
 800b034:	43bb      	bics	r3, r7
 800b036:	d112      	bne.n	800b05e <_dtoa_r+0x9e>
 800b038:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b03a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b03e:	6013      	str	r3, [r2, #0]
 800b040:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b044:	4323      	orrs	r3, r4
 800b046:	f000 854d 	beq.w	800bae4 <_dtoa_r+0xb24>
 800b04a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b04c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b2a4 <_dtoa_r+0x2e4>
 800b050:	2b00      	cmp	r3, #0
 800b052:	f000 854f 	beq.w	800baf4 <_dtoa_r+0xb34>
 800b056:	f10a 0303 	add.w	r3, sl, #3
 800b05a:	f000 bd49 	b.w	800baf0 <_dtoa_r+0xb30>
 800b05e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b062:	2200      	movs	r2, #0
 800b064:	ec51 0b17 	vmov	r0, r1, d7
 800b068:	2300      	movs	r3, #0
 800b06a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b06e:	f7f5 fd2b 	bl	8000ac8 <__aeabi_dcmpeq>
 800b072:	4680      	mov	r8, r0
 800b074:	b158      	cbz	r0, 800b08e <_dtoa_r+0xce>
 800b076:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b078:	2301      	movs	r3, #1
 800b07a:	6013      	str	r3, [r2, #0]
 800b07c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b07e:	b113      	cbz	r3, 800b086 <_dtoa_r+0xc6>
 800b080:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b082:	4b84      	ldr	r3, [pc, #528]	@ (800b294 <_dtoa_r+0x2d4>)
 800b084:	6013      	str	r3, [r2, #0]
 800b086:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b2a8 <_dtoa_r+0x2e8>
 800b08a:	f000 bd33 	b.w	800baf4 <_dtoa_r+0xb34>
 800b08e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b092:	aa16      	add	r2, sp, #88	@ 0x58
 800b094:	a917      	add	r1, sp, #92	@ 0x5c
 800b096:	4658      	mov	r0, fp
 800b098:	f001 fc7c 	bl	800c994 <__d2b>
 800b09c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b0a0:	4681      	mov	r9, r0
 800b0a2:	2e00      	cmp	r6, #0
 800b0a4:	d077      	beq.n	800b196 <_dtoa_r+0x1d6>
 800b0a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b0a8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b0ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b0b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b0b4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b0b8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b0bc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b0c0:	4619      	mov	r1, r3
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	4b74      	ldr	r3, [pc, #464]	@ (800b298 <_dtoa_r+0x2d8>)
 800b0c6:	f7f5 f8df 	bl	8000288 <__aeabi_dsub>
 800b0ca:	a369      	add	r3, pc, #420	@ (adr r3, 800b270 <_dtoa_r+0x2b0>)
 800b0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0d0:	f7f5 fa92 	bl	80005f8 <__aeabi_dmul>
 800b0d4:	a368      	add	r3, pc, #416	@ (adr r3, 800b278 <_dtoa_r+0x2b8>)
 800b0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0da:	f7f5 f8d7 	bl	800028c <__adddf3>
 800b0de:	4604      	mov	r4, r0
 800b0e0:	4630      	mov	r0, r6
 800b0e2:	460d      	mov	r5, r1
 800b0e4:	f7f5 fa1e 	bl	8000524 <__aeabi_i2d>
 800b0e8:	a365      	add	r3, pc, #404	@ (adr r3, 800b280 <_dtoa_r+0x2c0>)
 800b0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ee:	f7f5 fa83 	bl	80005f8 <__aeabi_dmul>
 800b0f2:	4602      	mov	r2, r0
 800b0f4:	460b      	mov	r3, r1
 800b0f6:	4620      	mov	r0, r4
 800b0f8:	4629      	mov	r1, r5
 800b0fa:	f7f5 f8c7 	bl	800028c <__adddf3>
 800b0fe:	4604      	mov	r4, r0
 800b100:	460d      	mov	r5, r1
 800b102:	f7f5 fd29 	bl	8000b58 <__aeabi_d2iz>
 800b106:	2200      	movs	r2, #0
 800b108:	4607      	mov	r7, r0
 800b10a:	2300      	movs	r3, #0
 800b10c:	4620      	mov	r0, r4
 800b10e:	4629      	mov	r1, r5
 800b110:	f7f5 fce4 	bl	8000adc <__aeabi_dcmplt>
 800b114:	b140      	cbz	r0, 800b128 <_dtoa_r+0x168>
 800b116:	4638      	mov	r0, r7
 800b118:	f7f5 fa04 	bl	8000524 <__aeabi_i2d>
 800b11c:	4622      	mov	r2, r4
 800b11e:	462b      	mov	r3, r5
 800b120:	f7f5 fcd2 	bl	8000ac8 <__aeabi_dcmpeq>
 800b124:	b900      	cbnz	r0, 800b128 <_dtoa_r+0x168>
 800b126:	3f01      	subs	r7, #1
 800b128:	2f16      	cmp	r7, #22
 800b12a:	d851      	bhi.n	800b1d0 <_dtoa_r+0x210>
 800b12c:	4b5b      	ldr	r3, [pc, #364]	@ (800b29c <_dtoa_r+0x2dc>)
 800b12e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b136:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b13a:	f7f5 fccf 	bl	8000adc <__aeabi_dcmplt>
 800b13e:	2800      	cmp	r0, #0
 800b140:	d048      	beq.n	800b1d4 <_dtoa_r+0x214>
 800b142:	3f01      	subs	r7, #1
 800b144:	2300      	movs	r3, #0
 800b146:	9312      	str	r3, [sp, #72]	@ 0x48
 800b148:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b14a:	1b9b      	subs	r3, r3, r6
 800b14c:	1e5a      	subs	r2, r3, #1
 800b14e:	bf44      	itt	mi
 800b150:	f1c3 0801 	rsbmi	r8, r3, #1
 800b154:	2300      	movmi	r3, #0
 800b156:	9208      	str	r2, [sp, #32]
 800b158:	bf54      	ite	pl
 800b15a:	f04f 0800 	movpl.w	r8, #0
 800b15e:	9308      	strmi	r3, [sp, #32]
 800b160:	2f00      	cmp	r7, #0
 800b162:	db39      	blt.n	800b1d8 <_dtoa_r+0x218>
 800b164:	9b08      	ldr	r3, [sp, #32]
 800b166:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b168:	443b      	add	r3, r7
 800b16a:	9308      	str	r3, [sp, #32]
 800b16c:	2300      	movs	r3, #0
 800b16e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b170:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b172:	2b09      	cmp	r3, #9
 800b174:	d864      	bhi.n	800b240 <_dtoa_r+0x280>
 800b176:	2b05      	cmp	r3, #5
 800b178:	bfc4      	itt	gt
 800b17a:	3b04      	subgt	r3, #4
 800b17c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b17e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b180:	f1a3 0302 	sub.w	r3, r3, #2
 800b184:	bfcc      	ite	gt
 800b186:	2400      	movgt	r4, #0
 800b188:	2401      	movle	r4, #1
 800b18a:	2b03      	cmp	r3, #3
 800b18c:	d863      	bhi.n	800b256 <_dtoa_r+0x296>
 800b18e:	e8df f003 	tbb	[pc, r3]
 800b192:	372a      	.short	0x372a
 800b194:	5535      	.short	0x5535
 800b196:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b19a:	441e      	add	r6, r3
 800b19c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b1a0:	2b20      	cmp	r3, #32
 800b1a2:	bfc1      	itttt	gt
 800b1a4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b1a8:	409f      	lslgt	r7, r3
 800b1aa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b1ae:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b1b2:	bfd6      	itet	le
 800b1b4:	f1c3 0320 	rsble	r3, r3, #32
 800b1b8:	ea47 0003 	orrgt.w	r0, r7, r3
 800b1bc:	fa04 f003 	lslle.w	r0, r4, r3
 800b1c0:	f7f5 f9a0 	bl	8000504 <__aeabi_ui2d>
 800b1c4:	2201      	movs	r2, #1
 800b1c6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b1ca:	3e01      	subs	r6, #1
 800b1cc:	9214      	str	r2, [sp, #80]	@ 0x50
 800b1ce:	e777      	b.n	800b0c0 <_dtoa_r+0x100>
 800b1d0:	2301      	movs	r3, #1
 800b1d2:	e7b8      	b.n	800b146 <_dtoa_r+0x186>
 800b1d4:	9012      	str	r0, [sp, #72]	@ 0x48
 800b1d6:	e7b7      	b.n	800b148 <_dtoa_r+0x188>
 800b1d8:	427b      	negs	r3, r7
 800b1da:	930a      	str	r3, [sp, #40]	@ 0x28
 800b1dc:	2300      	movs	r3, #0
 800b1de:	eba8 0807 	sub.w	r8, r8, r7
 800b1e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b1e4:	e7c4      	b.n	800b170 <_dtoa_r+0x1b0>
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b1ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	dc35      	bgt.n	800b25c <_dtoa_r+0x29c>
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	9300      	str	r3, [sp, #0]
 800b1f4:	9307      	str	r3, [sp, #28]
 800b1f6:	461a      	mov	r2, r3
 800b1f8:	920e      	str	r2, [sp, #56]	@ 0x38
 800b1fa:	e00b      	b.n	800b214 <_dtoa_r+0x254>
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	e7f3      	b.n	800b1e8 <_dtoa_r+0x228>
 800b200:	2300      	movs	r3, #0
 800b202:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b204:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b206:	18fb      	adds	r3, r7, r3
 800b208:	9300      	str	r3, [sp, #0]
 800b20a:	3301      	adds	r3, #1
 800b20c:	2b01      	cmp	r3, #1
 800b20e:	9307      	str	r3, [sp, #28]
 800b210:	bfb8      	it	lt
 800b212:	2301      	movlt	r3, #1
 800b214:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b218:	2100      	movs	r1, #0
 800b21a:	2204      	movs	r2, #4
 800b21c:	f102 0514 	add.w	r5, r2, #20
 800b220:	429d      	cmp	r5, r3
 800b222:	d91f      	bls.n	800b264 <_dtoa_r+0x2a4>
 800b224:	6041      	str	r1, [r0, #4]
 800b226:	4658      	mov	r0, fp
 800b228:	f001 f88a 	bl	800c340 <_Balloc>
 800b22c:	4682      	mov	sl, r0
 800b22e:	2800      	cmp	r0, #0
 800b230:	d13c      	bne.n	800b2ac <_dtoa_r+0x2ec>
 800b232:	4b1b      	ldr	r3, [pc, #108]	@ (800b2a0 <_dtoa_r+0x2e0>)
 800b234:	4602      	mov	r2, r0
 800b236:	f240 11af 	movw	r1, #431	@ 0x1af
 800b23a:	e6d8      	b.n	800afee <_dtoa_r+0x2e>
 800b23c:	2301      	movs	r3, #1
 800b23e:	e7e0      	b.n	800b202 <_dtoa_r+0x242>
 800b240:	2401      	movs	r4, #1
 800b242:	2300      	movs	r3, #0
 800b244:	9309      	str	r3, [sp, #36]	@ 0x24
 800b246:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b248:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b24c:	9300      	str	r3, [sp, #0]
 800b24e:	9307      	str	r3, [sp, #28]
 800b250:	2200      	movs	r2, #0
 800b252:	2312      	movs	r3, #18
 800b254:	e7d0      	b.n	800b1f8 <_dtoa_r+0x238>
 800b256:	2301      	movs	r3, #1
 800b258:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b25a:	e7f5      	b.n	800b248 <_dtoa_r+0x288>
 800b25c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b25e:	9300      	str	r3, [sp, #0]
 800b260:	9307      	str	r3, [sp, #28]
 800b262:	e7d7      	b.n	800b214 <_dtoa_r+0x254>
 800b264:	3101      	adds	r1, #1
 800b266:	0052      	lsls	r2, r2, #1
 800b268:	e7d8      	b.n	800b21c <_dtoa_r+0x25c>
 800b26a:	bf00      	nop
 800b26c:	f3af 8000 	nop.w
 800b270:	636f4361 	.word	0x636f4361
 800b274:	3fd287a7 	.word	0x3fd287a7
 800b278:	8b60c8b3 	.word	0x8b60c8b3
 800b27c:	3fc68a28 	.word	0x3fc68a28
 800b280:	509f79fb 	.word	0x509f79fb
 800b284:	3fd34413 	.word	0x3fd34413
 800b288:	08022b14 	.word	0x08022b14
 800b28c:	08022ccf 	.word	0x08022ccf
 800b290:	7ff00000 	.word	0x7ff00000
 800b294:	08022af1 	.word	0x08022af1
 800b298:	3ff80000 	.word	0x3ff80000
 800b29c:	08022dd8 	.word	0x08022dd8
 800b2a0:	08022d27 	.word	0x08022d27
 800b2a4:	08022ccb 	.word	0x08022ccb
 800b2a8:	08022af0 	.word	0x08022af0
 800b2ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b2b0:	6018      	str	r0, [r3, #0]
 800b2b2:	9b07      	ldr	r3, [sp, #28]
 800b2b4:	2b0e      	cmp	r3, #14
 800b2b6:	f200 80a4 	bhi.w	800b402 <_dtoa_r+0x442>
 800b2ba:	2c00      	cmp	r4, #0
 800b2bc:	f000 80a1 	beq.w	800b402 <_dtoa_r+0x442>
 800b2c0:	2f00      	cmp	r7, #0
 800b2c2:	dd33      	ble.n	800b32c <_dtoa_r+0x36c>
 800b2c4:	4bad      	ldr	r3, [pc, #692]	@ (800b57c <_dtoa_r+0x5bc>)
 800b2c6:	f007 020f 	and.w	r2, r7, #15
 800b2ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b2ce:	ed93 7b00 	vldr	d7, [r3]
 800b2d2:	05f8      	lsls	r0, r7, #23
 800b2d4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b2d8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b2dc:	d516      	bpl.n	800b30c <_dtoa_r+0x34c>
 800b2de:	4ba8      	ldr	r3, [pc, #672]	@ (800b580 <_dtoa_r+0x5c0>)
 800b2e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b2e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b2e8:	f7f5 fab0 	bl	800084c <__aeabi_ddiv>
 800b2ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2f0:	f004 040f 	and.w	r4, r4, #15
 800b2f4:	2603      	movs	r6, #3
 800b2f6:	4da2      	ldr	r5, [pc, #648]	@ (800b580 <_dtoa_r+0x5c0>)
 800b2f8:	b954      	cbnz	r4, 800b310 <_dtoa_r+0x350>
 800b2fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b2fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b302:	f7f5 faa3 	bl	800084c <__aeabi_ddiv>
 800b306:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b30a:	e028      	b.n	800b35e <_dtoa_r+0x39e>
 800b30c:	2602      	movs	r6, #2
 800b30e:	e7f2      	b.n	800b2f6 <_dtoa_r+0x336>
 800b310:	07e1      	lsls	r1, r4, #31
 800b312:	d508      	bpl.n	800b326 <_dtoa_r+0x366>
 800b314:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b318:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b31c:	f7f5 f96c 	bl	80005f8 <__aeabi_dmul>
 800b320:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b324:	3601      	adds	r6, #1
 800b326:	1064      	asrs	r4, r4, #1
 800b328:	3508      	adds	r5, #8
 800b32a:	e7e5      	b.n	800b2f8 <_dtoa_r+0x338>
 800b32c:	f000 80d2 	beq.w	800b4d4 <_dtoa_r+0x514>
 800b330:	427c      	negs	r4, r7
 800b332:	4b92      	ldr	r3, [pc, #584]	@ (800b57c <_dtoa_r+0x5bc>)
 800b334:	4d92      	ldr	r5, [pc, #584]	@ (800b580 <_dtoa_r+0x5c0>)
 800b336:	f004 020f 	and.w	r2, r4, #15
 800b33a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b33e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b342:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b346:	f7f5 f957 	bl	80005f8 <__aeabi_dmul>
 800b34a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b34e:	1124      	asrs	r4, r4, #4
 800b350:	2300      	movs	r3, #0
 800b352:	2602      	movs	r6, #2
 800b354:	2c00      	cmp	r4, #0
 800b356:	f040 80b2 	bne.w	800b4be <_dtoa_r+0x4fe>
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d1d3      	bne.n	800b306 <_dtoa_r+0x346>
 800b35e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b360:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b364:	2b00      	cmp	r3, #0
 800b366:	f000 80b7 	beq.w	800b4d8 <_dtoa_r+0x518>
 800b36a:	4b86      	ldr	r3, [pc, #536]	@ (800b584 <_dtoa_r+0x5c4>)
 800b36c:	2200      	movs	r2, #0
 800b36e:	4620      	mov	r0, r4
 800b370:	4629      	mov	r1, r5
 800b372:	f7f5 fbb3 	bl	8000adc <__aeabi_dcmplt>
 800b376:	2800      	cmp	r0, #0
 800b378:	f000 80ae 	beq.w	800b4d8 <_dtoa_r+0x518>
 800b37c:	9b07      	ldr	r3, [sp, #28]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	f000 80aa 	beq.w	800b4d8 <_dtoa_r+0x518>
 800b384:	9b00      	ldr	r3, [sp, #0]
 800b386:	2b00      	cmp	r3, #0
 800b388:	dd37      	ble.n	800b3fa <_dtoa_r+0x43a>
 800b38a:	1e7b      	subs	r3, r7, #1
 800b38c:	9304      	str	r3, [sp, #16]
 800b38e:	4620      	mov	r0, r4
 800b390:	4b7d      	ldr	r3, [pc, #500]	@ (800b588 <_dtoa_r+0x5c8>)
 800b392:	2200      	movs	r2, #0
 800b394:	4629      	mov	r1, r5
 800b396:	f7f5 f92f 	bl	80005f8 <__aeabi_dmul>
 800b39a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b39e:	9c00      	ldr	r4, [sp, #0]
 800b3a0:	3601      	adds	r6, #1
 800b3a2:	4630      	mov	r0, r6
 800b3a4:	f7f5 f8be 	bl	8000524 <__aeabi_i2d>
 800b3a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b3ac:	f7f5 f924 	bl	80005f8 <__aeabi_dmul>
 800b3b0:	4b76      	ldr	r3, [pc, #472]	@ (800b58c <_dtoa_r+0x5cc>)
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	f7f4 ff6a 	bl	800028c <__adddf3>
 800b3b8:	4605      	mov	r5, r0
 800b3ba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b3be:	2c00      	cmp	r4, #0
 800b3c0:	f040 808d 	bne.w	800b4de <_dtoa_r+0x51e>
 800b3c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3c8:	4b71      	ldr	r3, [pc, #452]	@ (800b590 <_dtoa_r+0x5d0>)
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	f7f4 ff5c 	bl	8000288 <__aeabi_dsub>
 800b3d0:	4602      	mov	r2, r0
 800b3d2:	460b      	mov	r3, r1
 800b3d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b3d8:	462a      	mov	r2, r5
 800b3da:	4633      	mov	r3, r6
 800b3dc:	f7f5 fb9c 	bl	8000b18 <__aeabi_dcmpgt>
 800b3e0:	2800      	cmp	r0, #0
 800b3e2:	f040 828b 	bne.w	800b8fc <_dtoa_r+0x93c>
 800b3e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3ea:	462a      	mov	r2, r5
 800b3ec:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b3f0:	f7f5 fb74 	bl	8000adc <__aeabi_dcmplt>
 800b3f4:	2800      	cmp	r0, #0
 800b3f6:	f040 8128 	bne.w	800b64a <_dtoa_r+0x68a>
 800b3fa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b3fe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b402:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b404:	2b00      	cmp	r3, #0
 800b406:	f2c0 815a 	blt.w	800b6be <_dtoa_r+0x6fe>
 800b40a:	2f0e      	cmp	r7, #14
 800b40c:	f300 8157 	bgt.w	800b6be <_dtoa_r+0x6fe>
 800b410:	4b5a      	ldr	r3, [pc, #360]	@ (800b57c <_dtoa_r+0x5bc>)
 800b412:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b416:	ed93 7b00 	vldr	d7, [r3]
 800b41a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	ed8d 7b00 	vstr	d7, [sp]
 800b422:	da03      	bge.n	800b42c <_dtoa_r+0x46c>
 800b424:	9b07      	ldr	r3, [sp, #28]
 800b426:	2b00      	cmp	r3, #0
 800b428:	f340 8101 	ble.w	800b62e <_dtoa_r+0x66e>
 800b42c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b430:	4656      	mov	r6, sl
 800b432:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b436:	4620      	mov	r0, r4
 800b438:	4629      	mov	r1, r5
 800b43a:	f7f5 fa07 	bl	800084c <__aeabi_ddiv>
 800b43e:	f7f5 fb8b 	bl	8000b58 <__aeabi_d2iz>
 800b442:	4680      	mov	r8, r0
 800b444:	f7f5 f86e 	bl	8000524 <__aeabi_i2d>
 800b448:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b44c:	f7f5 f8d4 	bl	80005f8 <__aeabi_dmul>
 800b450:	4602      	mov	r2, r0
 800b452:	460b      	mov	r3, r1
 800b454:	4620      	mov	r0, r4
 800b456:	4629      	mov	r1, r5
 800b458:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b45c:	f7f4 ff14 	bl	8000288 <__aeabi_dsub>
 800b460:	f806 4b01 	strb.w	r4, [r6], #1
 800b464:	9d07      	ldr	r5, [sp, #28]
 800b466:	eba6 040a 	sub.w	r4, r6, sl
 800b46a:	42a5      	cmp	r5, r4
 800b46c:	4602      	mov	r2, r0
 800b46e:	460b      	mov	r3, r1
 800b470:	f040 8117 	bne.w	800b6a2 <_dtoa_r+0x6e2>
 800b474:	f7f4 ff0a 	bl	800028c <__adddf3>
 800b478:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b47c:	4604      	mov	r4, r0
 800b47e:	460d      	mov	r5, r1
 800b480:	f7f5 fb4a 	bl	8000b18 <__aeabi_dcmpgt>
 800b484:	2800      	cmp	r0, #0
 800b486:	f040 80f9 	bne.w	800b67c <_dtoa_r+0x6bc>
 800b48a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b48e:	4620      	mov	r0, r4
 800b490:	4629      	mov	r1, r5
 800b492:	f7f5 fb19 	bl	8000ac8 <__aeabi_dcmpeq>
 800b496:	b118      	cbz	r0, 800b4a0 <_dtoa_r+0x4e0>
 800b498:	f018 0f01 	tst.w	r8, #1
 800b49c:	f040 80ee 	bne.w	800b67c <_dtoa_r+0x6bc>
 800b4a0:	4649      	mov	r1, r9
 800b4a2:	4658      	mov	r0, fp
 800b4a4:	f000 ff8c 	bl	800c3c0 <_Bfree>
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	7033      	strb	r3, [r6, #0]
 800b4ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b4ae:	3701      	adds	r7, #1
 800b4b0:	601f      	str	r7, [r3, #0]
 800b4b2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	f000 831d 	beq.w	800baf4 <_dtoa_r+0xb34>
 800b4ba:	601e      	str	r6, [r3, #0]
 800b4bc:	e31a      	b.n	800baf4 <_dtoa_r+0xb34>
 800b4be:	07e2      	lsls	r2, r4, #31
 800b4c0:	d505      	bpl.n	800b4ce <_dtoa_r+0x50e>
 800b4c2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b4c6:	f7f5 f897 	bl	80005f8 <__aeabi_dmul>
 800b4ca:	3601      	adds	r6, #1
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	1064      	asrs	r4, r4, #1
 800b4d0:	3508      	adds	r5, #8
 800b4d2:	e73f      	b.n	800b354 <_dtoa_r+0x394>
 800b4d4:	2602      	movs	r6, #2
 800b4d6:	e742      	b.n	800b35e <_dtoa_r+0x39e>
 800b4d8:	9c07      	ldr	r4, [sp, #28]
 800b4da:	9704      	str	r7, [sp, #16]
 800b4dc:	e761      	b.n	800b3a2 <_dtoa_r+0x3e2>
 800b4de:	4b27      	ldr	r3, [pc, #156]	@ (800b57c <_dtoa_r+0x5bc>)
 800b4e0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b4e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b4e6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b4ea:	4454      	add	r4, sl
 800b4ec:	2900      	cmp	r1, #0
 800b4ee:	d053      	beq.n	800b598 <_dtoa_r+0x5d8>
 800b4f0:	4928      	ldr	r1, [pc, #160]	@ (800b594 <_dtoa_r+0x5d4>)
 800b4f2:	2000      	movs	r0, #0
 800b4f4:	f7f5 f9aa 	bl	800084c <__aeabi_ddiv>
 800b4f8:	4633      	mov	r3, r6
 800b4fa:	462a      	mov	r2, r5
 800b4fc:	f7f4 fec4 	bl	8000288 <__aeabi_dsub>
 800b500:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b504:	4656      	mov	r6, sl
 800b506:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b50a:	f7f5 fb25 	bl	8000b58 <__aeabi_d2iz>
 800b50e:	4605      	mov	r5, r0
 800b510:	f7f5 f808 	bl	8000524 <__aeabi_i2d>
 800b514:	4602      	mov	r2, r0
 800b516:	460b      	mov	r3, r1
 800b518:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b51c:	f7f4 feb4 	bl	8000288 <__aeabi_dsub>
 800b520:	3530      	adds	r5, #48	@ 0x30
 800b522:	4602      	mov	r2, r0
 800b524:	460b      	mov	r3, r1
 800b526:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b52a:	f806 5b01 	strb.w	r5, [r6], #1
 800b52e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b532:	f7f5 fad3 	bl	8000adc <__aeabi_dcmplt>
 800b536:	2800      	cmp	r0, #0
 800b538:	d171      	bne.n	800b61e <_dtoa_r+0x65e>
 800b53a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b53e:	4911      	ldr	r1, [pc, #68]	@ (800b584 <_dtoa_r+0x5c4>)
 800b540:	2000      	movs	r0, #0
 800b542:	f7f4 fea1 	bl	8000288 <__aeabi_dsub>
 800b546:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b54a:	f7f5 fac7 	bl	8000adc <__aeabi_dcmplt>
 800b54e:	2800      	cmp	r0, #0
 800b550:	f040 8095 	bne.w	800b67e <_dtoa_r+0x6be>
 800b554:	42a6      	cmp	r6, r4
 800b556:	f43f af50 	beq.w	800b3fa <_dtoa_r+0x43a>
 800b55a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b55e:	4b0a      	ldr	r3, [pc, #40]	@ (800b588 <_dtoa_r+0x5c8>)
 800b560:	2200      	movs	r2, #0
 800b562:	f7f5 f849 	bl	80005f8 <__aeabi_dmul>
 800b566:	4b08      	ldr	r3, [pc, #32]	@ (800b588 <_dtoa_r+0x5c8>)
 800b568:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b56c:	2200      	movs	r2, #0
 800b56e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b572:	f7f5 f841 	bl	80005f8 <__aeabi_dmul>
 800b576:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b57a:	e7c4      	b.n	800b506 <_dtoa_r+0x546>
 800b57c:	08022dd8 	.word	0x08022dd8
 800b580:	08022db0 	.word	0x08022db0
 800b584:	3ff00000 	.word	0x3ff00000
 800b588:	40240000 	.word	0x40240000
 800b58c:	401c0000 	.word	0x401c0000
 800b590:	40140000 	.word	0x40140000
 800b594:	3fe00000 	.word	0x3fe00000
 800b598:	4631      	mov	r1, r6
 800b59a:	4628      	mov	r0, r5
 800b59c:	f7f5 f82c 	bl	80005f8 <__aeabi_dmul>
 800b5a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b5a4:	9415      	str	r4, [sp, #84]	@ 0x54
 800b5a6:	4656      	mov	r6, sl
 800b5a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5ac:	f7f5 fad4 	bl	8000b58 <__aeabi_d2iz>
 800b5b0:	4605      	mov	r5, r0
 800b5b2:	f7f4 ffb7 	bl	8000524 <__aeabi_i2d>
 800b5b6:	4602      	mov	r2, r0
 800b5b8:	460b      	mov	r3, r1
 800b5ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5be:	f7f4 fe63 	bl	8000288 <__aeabi_dsub>
 800b5c2:	3530      	adds	r5, #48	@ 0x30
 800b5c4:	f806 5b01 	strb.w	r5, [r6], #1
 800b5c8:	4602      	mov	r2, r0
 800b5ca:	460b      	mov	r3, r1
 800b5cc:	42a6      	cmp	r6, r4
 800b5ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b5d2:	f04f 0200 	mov.w	r2, #0
 800b5d6:	d124      	bne.n	800b622 <_dtoa_r+0x662>
 800b5d8:	4bac      	ldr	r3, [pc, #688]	@ (800b88c <_dtoa_r+0x8cc>)
 800b5da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b5de:	f7f4 fe55 	bl	800028c <__adddf3>
 800b5e2:	4602      	mov	r2, r0
 800b5e4:	460b      	mov	r3, r1
 800b5e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5ea:	f7f5 fa95 	bl	8000b18 <__aeabi_dcmpgt>
 800b5ee:	2800      	cmp	r0, #0
 800b5f0:	d145      	bne.n	800b67e <_dtoa_r+0x6be>
 800b5f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b5f6:	49a5      	ldr	r1, [pc, #660]	@ (800b88c <_dtoa_r+0x8cc>)
 800b5f8:	2000      	movs	r0, #0
 800b5fa:	f7f4 fe45 	bl	8000288 <__aeabi_dsub>
 800b5fe:	4602      	mov	r2, r0
 800b600:	460b      	mov	r3, r1
 800b602:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b606:	f7f5 fa69 	bl	8000adc <__aeabi_dcmplt>
 800b60a:	2800      	cmp	r0, #0
 800b60c:	f43f aef5 	beq.w	800b3fa <_dtoa_r+0x43a>
 800b610:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b612:	1e73      	subs	r3, r6, #1
 800b614:	9315      	str	r3, [sp, #84]	@ 0x54
 800b616:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b61a:	2b30      	cmp	r3, #48	@ 0x30
 800b61c:	d0f8      	beq.n	800b610 <_dtoa_r+0x650>
 800b61e:	9f04      	ldr	r7, [sp, #16]
 800b620:	e73e      	b.n	800b4a0 <_dtoa_r+0x4e0>
 800b622:	4b9b      	ldr	r3, [pc, #620]	@ (800b890 <_dtoa_r+0x8d0>)
 800b624:	f7f4 ffe8 	bl	80005f8 <__aeabi_dmul>
 800b628:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b62c:	e7bc      	b.n	800b5a8 <_dtoa_r+0x5e8>
 800b62e:	d10c      	bne.n	800b64a <_dtoa_r+0x68a>
 800b630:	4b98      	ldr	r3, [pc, #608]	@ (800b894 <_dtoa_r+0x8d4>)
 800b632:	2200      	movs	r2, #0
 800b634:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b638:	f7f4 ffde 	bl	80005f8 <__aeabi_dmul>
 800b63c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b640:	f7f5 fa60 	bl	8000b04 <__aeabi_dcmpge>
 800b644:	2800      	cmp	r0, #0
 800b646:	f000 8157 	beq.w	800b8f8 <_dtoa_r+0x938>
 800b64a:	2400      	movs	r4, #0
 800b64c:	4625      	mov	r5, r4
 800b64e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b650:	43db      	mvns	r3, r3
 800b652:	9304      	str	r3, [sp, #16]
 800b654:	4656      	mov	r6, sl
 800b656:	2700      	movs	r7, #0
 800b658:	4621      	mov	r1, r4
 800b65a:	4658      	mov	r0, fp
 800b65c:	f000 feb0 	bl	800c3c0 <_Bfree>
 800b660:	2d00      	cmp	r5, #0
 800b662:	d0dc      	beq.n	800b61e <_dtoa_r+0x65e>
 800b664:	b12f      	cbz	r7, 800b672 <_dtoa_r+0x6b2>
 800b666:	42af      	cmp	r7, r5
 800b668:	d003      	beq.n	800b672 <_dtoa_r+0x6b2>
 800b66a:	4639      	mov	r1, r7
 800b66c:	4658      	mov	r0, fp
 800b66e:	f000 fea7 	bl	800c3c0 <_Bfree>
 800b672:	4629      	mov	r1, r5
 800b674:	4658      	mov	r0, fp
 800b676:	f000 fea3 	bl	800c3c0 <_Bfree>
 800b67a:	e7d0      	b.n	800b61e <_dtoa_r+0x65e>
 800b67c:	9704      	str	r7, [sp, #16]
 800b67e:	4633      	mov	r3, r6
 800b680:	461e      	mov	r6, r3
 800b682:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b686:	2a39      	cmp	r2, #57	@ 0x39
 800b688:	d107      	bne.n	800b69a <_dtoa_r+0x6da>
 800b68a:	459a      	cmp	sl, r3
 800b68c:	d1f8      	bne.n	800b680 <_dtoa_r+0x6c0>
 800b68e:	9a04      	ldr	r2, [sp, #16]
 800b690:	3201      	adds	r2, #1
 800b692:	9204      	str	r2, [sp, #16]
 800b694:	2230      	movs	r2, #48	@ 0x30
 800b696:	f88a 2000 	strb.w	r2, [sl]
 800b69a:	781a      	ldrb	r2, [r3, #0]
 800b69c:	3201      	adds	r2, #1
 800b69e:	701a      	strb	r2, [r3, #0]
 800b6a0:	e7bd      	b.n	800b61e <_dtoa_r+0x65e>
 800b6a2:	4b7b      	ldr	r3, [pc, #492]	@ (800b890 <_dtoa_r+0x8d0>)
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	f7f4 ffa7 	bl	80005f8 <__aeabi_dmul>
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	4604      	mov	r4, r0
 800b6b0:	460d      	mov	r5, r1
 800b6b2:	f7f5 fa09 	bl	8000ac8 <__aeabi_dcmpeq>
 800b6b6:	2800      	cmp	r0, #0
 800b6b8:	f43f aebb 	beq.w	800b432 <_dtoa_r+0x472>
 800b6bc:	e6f0      	b.n	800b4a0 <_dtoa_r+0x4e0>
 800b6be:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b6c0:	2a00      	cmp	r2, #0
 800b6c2:	f000 80db 	beq.w	800b87c <_dtoa_r+0x8bc>
 800b6c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b6c8:	2a01      	cmp	r2, #1
 800b6ca:	f300 80bf 	bgt.w	800b84c <_dtoa_r+0x88c>
 800b6ce:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b6d0:	2a00      	cmp	r2, #0
 800b6d2:	f000 80b7 	beq.w	800b844 <_dtoa_r+0x884>
 800b6d6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b6da:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b6dc:	4646      	mov	r6, r8
 800b6de:	9a08      	ldr	r2, [sp, #32]
 800b6e0:	2101      	movs	r1, #1
 800b6e2:	441a      	add	r2, r3
 800b6e4:	4658      	mov	r0, fp
 800b6e6:	4498      	add	r8, r3
 800b6e8:	9208      	str	r2, [sp, #32]
 800b6ea:	f000 ff1d 	bl	800c528 <__i2b>
 800b6ee:	4605      	mov	r5, r0
 800b6f0:	b15e      	cbz	r6, 800b70a <_dtoa_r+0x74a>
 800b6f2:	9b08      	ldr	r3, [sp, #32]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	dd08      	ble.n	800b70a <_dtoa_r+0x74a>
 800b6f8:	42b3      	cmp	r3, r6
 800b6fa:	9a08      	ldr	r2, [sp, #32]
 800b6fc:	bfa8      	it	ge
 800b6fe:	4633      	movge	r3, r6
 800b700:	eba8 0803 	sub.w	r8, r8, r3
 800b704:	1af6      	subs	r6, r6, r3
 800b706:	1ad3      	subs	r3, r2, r3
 800b708:	9308      	str	r3, [sp, #32]
 800b70a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b70c:	b1f3      	cbz	r3, 800b74c <_dtoa_r+0x78c>
 800b70e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b710:	2b00      	cmp	r3, #0
 800b712:	f000 80b7 	beq.w	800b884 <_dtoa_r+0x8c4>
 800b716:	b18c      	cbz	r4, 800b73c <_dtoa_r+0x77c>
 800b718:	4629      	mov	r1, r5
 800b71a:	4622      	mov	r2, r4
 800b71c:	4658      	mov	r0, fp
 800b71e:	f000 ffc3 	bl	800c6a8 <__pow5mult>
 800b722:	464a      	mov	r2, r9
 800b724:	4601      	mov	r1, r0
 800b726:	4605      	mov	r5, r0
 800b728:	4658      	mov	r0, fp
 800b72a:	f000 ff13 	bl	800c554 <__multiply>
 800b72e:	4649      	mov	r1, r9
 800b730:	9004      	str	r0, [sp, #16]
 800b732:	4658      	mov	r0, fp
 800b734:	f000 fe44 	bl	800c3c0 <_Bfree>
 800b738:	9b04      	ldr	r3, [sp, #16]
 800b73a:	4699      	mov	r9, r3
 800b73c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b73e:	1b1a      	subs	r2, r3, r4
 800b740:	d004      	beq.n	800b74c <_dtoa_r+0x78c>
 800b742:	4649      	mov	r1, r9
 800b744:	4658      	mov	r0, fp
 800b746:	f000 ffaf 	bl	800c6a8 <__pow5mult>
 800b74a:	4681      	mov	r9, r0
 800b74c:	2101      	movs	r1, #1
 800b74e:	4658      	mov	r0, fp
 800b750:	f000 feea 	bl	800c528 <__i2b>
 800b754:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b756:	4604      	mov	r4, r0
 800b758:	2b00      	cmp	r3, #0
 800b75a:	f000 81cf 	beq.w	800bafc <_dtoa_r+0xb3c>
 800b75e:	461a      	mov	r2, r3
 800b760:	4601      	mov	r1, r0
 800b762:	4658      	mov	r0, fp
 800b764:	f000 ffa0 	bl	800c6a8 <__pow5mult>
 800b768:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b76a:	2b01      	cmp	r3, #1
 800b76c:	4604      	mov	r4, r0
 800b76e:	f300 8095 	bgt.w	800b89c <_dtoa_r+0x8dc>
 800b772:	9b02      	ldr	r3, [sp, #8]
 800b774:	2b00      	cmp	r3, #0
 800b776:	f040 8087 	bne.w	800b888 <_dtoa_r+0x8c8>
 800b77a:	9b03      	ldr	r3, [sp, #12]
 800b77c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b780:	2b00      	cmp	r3, #0
 800b782:	f040 8089 	bne.w	800b898 <_dtoa_r+0x8d8>
 800b786:	9b03      	ldr	r3, [sp, #12]
 800b788:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b78c:	0d1b      	lsrs	r3, r3, #20
 800b78e:	051b      	lsls	r3, r3, #20
 800b790:	b12b      	cbz	r3, 800b79e <_dtoa_r+0x7de>
 800b792:	9b08      	ldr	r3, [sp, #32]
 800b794:	3301      	adds	r3, #1
 800b796:	9308      	str	r3, [sp, #32]
 800b798:	f108 0801 	add.w	r8, r8, #1
 800b79c:	2301      	movs	r3, #1
 800b79e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b7a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	f000 81b0 	beq.w	800bb08 <_dtoa_r+0xb48>
 800b7a8:	6923      	ldr	r3, [r4, #16]
 800b7aa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b7ae:	6918      	ldr	r0, [r3, #16]
 800b7b0:	f000 fe6e 	bl	800c490 <__hi0bits>
 800b7b4:	f1c0 0020 	rsb	r0, r0, #32
 800b7b8:	9b08      	ldr	r3, [sp, #32]
 800b7ba:	4418      	add	r0, r3
 800b7bc:	f010 001f 	ands.w	r0, r0, #31
 800b7c0:	d077      	beq.n	800b8b2 <_dtoa_r+0x8f2>
 800b7c2:	f1c0 0320 	rsb	r3, r0, #32
 800b7c6:	2b04      	cmp	r3, #4
 800b7c8:	dd6b      	ble.n	800b8a2 <_dtoa_r+0x8e2>
 800b7ca:	9b08      	ldr	r3, [sp, #32]
 800b7cc:	f1c0 001c 	rsb	r0, r0, #28
 800b7d0:	4403      	add	r3, r0
 800b7d2:	4480      	add	r8, r0
 800b7d4:	4406      	add	r6, r0
 800b7d6:	9308      	str	r3, [sp, #32]
 800b7d8:	f1b8 0f00 	cmp.w	r8, #0
 800b7dc:	dd05      	ble.n	800b7ea <_dtoa_r+0x82a>
 800b7de:	4649      	mov	r1, r9
 800b7e0:	4642      	mov	r2, r8
 800b7e2:	4658      	mov	r0, fp
 800b7e4:	f000 ffba 	bl	800c75c <__lshift>
 800b7e8:	4681      	mov	r9, r0
 800b7ea:	9b08      	ldr	r3, [sp, #32]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	dd05      	ble.n	800b7fc <_dtoa_r+0x83c>
 800b7f0:	4621      	mov	r1, r4
 800b7f2:	461a      	mov	r2, r3
 800b7f4:	4658      	mov	r0, fp
 800b7f6:	f000 ffb1 	bl	800c75c <__lshift>
 800b7fa:	4604      	mov	r4, r0
 800b7fc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d059      	beq.n	800b8b6 <_dtoa_r+0x8f6>
 800b802:	4621      	mov	r1, r4
 800b804:	4648      	mov	r0, r9
 800b806:	f001 f815 	bl	800c834 <__mcmp>
 800b80a:	2800      	cmp	r0, #0
 800b80c:	da53      	bge.n	800b8b6 <_dtoa_r+0x8f6>
 800b80e:	1e7b      	subs	r3, r7, #1
 800b810:	9304      	str	r3, [sp, #16]
 800b812:	4649      	mov	r1, r9
 800b814:	2300      	movs	r3, #0
 800b816:	220a      	movs	r2, #10
 800b818:	4658      	mov	r0, fp
 800b81a:	f000 fdf3 	bl	800c404 <__multadd>
 800b81e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b820:	4681      	mov	r9, r0
 800b822:	2b00      	cmp	r3, #0
 800b824:	f000 8172 	beq.w	800bb0c <_dtoa_r+0xb4c>
 800b828:	2300      	movs	r3, #0
 800b82a:	4629      	mov	r1, r5
 800b82c:	220a      	movs	r2, #10
 800b82e:	4658      	mov	r0, fp
 800b830:	f000 fde8 	bl	800c404 <__multadd>
 800b834:	9b00      	ldr	r3, [sp, #0]
 800b836:	2b00      	cmp	r3, #0
 800b838:	4605      	mov	r5, r0
 800b83a:	dc67      	bgt.n	800b90c <_dtoa_r+0x94c>
 800b83c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b83e:	2b02      	cmp	r3, #2
 800b840:	dc41      	bgt.n	800b8c6 <_dtoa_r+0x906>
 800b842:	e063      	b.n	800b90c <_dtoa_r+0x94c>
 800b844:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b846:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b84a:	e746      	b.n	800b6da <_dtoa_r+0x71a>
 800b84c:	9b07      	ldr	r3, [sp, #28]
 800b84e:	1e5c      	subs	r4, r3, #1
 800b850:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b852:	42a3      	cmp	r3, r4
 800b854:	bfbf      	itttt	lt
 800b856:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b858:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b85a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b85c:	1ae3      	sublt	r3, r4, r3
 800b85e:	bfb4      	ite	lt
 800b860:	18d2      	addlt	r2, r2, r3
 800b862:	1b1c      	subge	r4, r3, r4
 800b864:	9b07      	ldr	r3, [sp, #28]
 800b866:	bfbc      	itt	lt
 800b868:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b86a:	2400      	movlt	r4, #0
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	bfb5      	itete	lt
 800b870:	eba8 0603 	sublt.w	r6, r8, r3
 800b874:	9b07      	ldrge	r3, [sp, #28]
 800b876:	2300      	movlt	r3, #0
 800b878:	4646      	movge	r6, r8
 800b87a:	e730      	b.n	800b6de <_dtoa_r+0x71e>
 800b87c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b87e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b880:	4646      	mov	r6, r8
 800b882:	e735      	b.n	800b6f0 <_dtoa_r+0x730>
 800b884:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b886:	e75c      	b.n	800b742 <_dtoa_r+0x782>
 800b888:	2300      	movs	r3, #0
 800b88a:	e788      	b.n	800b79e <_dtoa_r+0x7de>
 800b88c:	3fe00000 	.word	0x3fe00000
 800b890:	40240000 	.word	0x40240000
 800b894:	40140000 	.word	0x40140000
 800b898:	9b02      	ldr	r3, [sp, #8]
 800b89a:	e780      	b.n	800b79e <_dtoa_r+0x7de>
 800b89c:	2300      	movs	r3, #0
 800b89e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b8a0:	e782      	b.n	800b7a8 <_dtoa_r+0x7e8>
 800b8a2:	d099      	beq.n	800b7d8 <_dtoa_r+0x818>
 800b8a4:	9a08      	ldr	r2, [sp, #32]
 800b8a6:	331c      	adds	r3, #28
 800b8a8:	441a      	add	r2, r3
 800b8aa:	4498      	add	r8, r3
 800b8ac:	441e      	add	r6, r3
 800b8ae:	9208      	str	r2, [sp, #32]
 800b8b0:	e792      	b.n	800b7d8 <_dtoa_r+0x818>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	e7f6      	b.n	800b8a4 <_dtoa_r+0x8e4>
 800b8b6:	9b07      	ldr	r3, [sp, #28]
 800b8b8:	9704      	str	r7, [sp, #16]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	dc20      	bgt.n	800b900 <_dtoa_r+0x940>
 800b8be:	9300      	str	r3, [sp, #0]
 800b8c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8c2:	2b02      	cmp	r3, #2
 800b8c4:	dd1e      	ble.n	800b904 <_dtoa_r+0x944>
 800b8c6:	9b00      	ldr	r3, [sp, #0]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	f47f aec0 	bne.w	800b64e <_dtoa_r+0x68e>
 800b8ce:	4621      	mov	r1, r4
 800b8d0:	2205      	movs	r2, #5
 800b8d2:	4658      	mov	r0, fp
 800b8d4:	f000 fd96 	bl	800c404 <__multadd>
 800b8d8:	4601      	mov	r1, r0
 800b8da:	4604      	mov	r4, r0
 800b8dc:	4648      	mov	r0, r9
 800b8de:	f000 ffa9 	bl	800c834 <__mcmp>
 800b8e2:	2800      	cmp	r0, #0
 800b8e4:	f77f aeb3 	ble.w	800b64e <_dtoa_r+0x68e>
 800b8e8:	4656      	mov	r6, sl
 800b8ea:	2331      	movs	r3, #49	@ 0x31
 800b8ec:	f806 3b01 	strb.w	r3, [r6], #1
 800b8f0:	9b04      	ldr	r3, [sp, #16]
 800b8f2:	3301      	adds	r3, #1
 800b8f4:	9304      	str	r3, [sp, #16]
 800b8f6:	e6ae      	b.n	800b656 <_dtoa_r+0x696>
 800b8f8:	9c07      	ldr	r4, [sp, #28]
 800b8fa:	9704      	str	r7, [sp, #16]
 800b8fc:	4625      	mov	r5, r4
 800b8fe:	e7f3      	b.n	800b8e8 <_dtoa_r+0x928>
 800b900:	9b07      	ldr	r3, [sp, #28]
 800b902:	9300      	str	r3, [sp, #0]
 800b904:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b906:	2b00      	cmp	r3, #0
 800b908:	f000 8104 	beq.w	800bb14 <_dtoa_r+0xb54>
 800b90c:	2e00      	cmp	r6, #0
 800b90e:	dd05      	ble.n	800b91c <_dtoa_r+0x95c>
 800b910:	4629      	mov	r1, r5
 800b912:	4632      	mov	r2, r6
 800b914:	4658      	mov	r0, fp
 800b916:	f000 ff21 	bl	800c75c <__lshift>
 800b91a:	4605      	mov	r5, r0
 800b91c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d05a      	beq.n	800b9d8 <_dtoa_r+0xa18>
 800b922:	6869      	ldr	r1, [r5, #4]
 800b924:	4658      	mov	r0, fp
 800b926:	f000 fd0b 	bl	800c340 <_Balloc>
 800b92a:	4606      	mov	r6, r0
 800b92c:	b928      	cbnz	r0, 800b93a <_dtoa_r+0x97a>
 800b92e:	4b84      	ldr	r3, [pc, #528]	@ (800bb40 <_dtoa_r+0xb80>)
 800b930:	4602      	mov	r2, r0
 800b932:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b936:	f7ff bb5a 	b.w	800afee <_dtoa_r+0x2e>
 800b93a:	692a      	ldr	r2, [r5, #16]
 800b93c:	3202      	adds	r2, #2
 800b93e:	0092      	lsls	r2, r2, #2
 800b940:	f105 010c 	add.w	r1, r5, #12
 800b944:	300c      	adds	r0, #12
 800b946:	f7ff fa86 	bl	800ae56 <memcpy>
 800b94a:	2201      	movs	r2, #1
 800b94c:	4631      	mov	r1, r6
 800b94e:	4658      	mov	r0, fp
 800b950:	f000 ff04 	bl	800c75c <__lshift>
 800b954:	f10a 0301 	add.w	r3, sl, #1
 800b958:	9307      	str	r3, [sp, #28]
 800b95a:	9b00      	ldr	r3, [sp, #0]
 800b95c:	4453      	add	r3, sl
 800b95e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b960:	9b02      	ldr	r3, [sp, #8]
 800b962:	f003 0301 	and.w	r3, r3, #1
 800b966:	462f      	mov	r7, r5
 800b968:	930a      	str	r3, [sp, #40]	@ 0x28
 800b96a:	4605      	mov	r5, r0
 800b96c:	9b07      	ldr	r3, [sp, #28]
 800b96e:	4621      	mov	r1, r4
 800b970:	3b01      	subs	r3, #1
 800b972:	4648      	mov	r0, r9
 800b974:	9300      	str	r3, [sp, #0]
 800b976:	f7ff fa9b 	bl	800aeb0 <quorem>
 800b97a:	4639      	mov	r1, r7
 800b97c:	9002      	str	r0, [sp, #8]
 800b97e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b982:	4648      	mov	r0, r9
 800b984:	f000 ff56 	bl	800c834 <__mcmp>
 800b988:	462a      	mov	r2, r5
 800b98a:	9008      	str	r0, [sp, #32]
 800b98c:	4621      	mov	r1, r4
 800b98e:	4658      	mov	r0, fp
 800b990:	f000 ff6c 	bl	800c86c <__mdiff>
 800b994:	68c2      	ldr	r2, [r0, #12]
 800b996:	4606      	mov	r6, r0
 800b998:	bb02      	cbnz	r2, 800b9dc <_dtoa_r+0xa1c>
 800b99a:	4601      	mov	r1, r0
 800b99c:	4648      	mov	r0, r9
 800b99e:	f000 ff49 	bl	800c834 <__mcmp>
 800b9a2:	4602      	mov	r2, r0
 800b9a4:	4631      	mov	r1, r6
 800b9a6:	4658      	mov	r0, fp
 800b9a8:	920e      	str	r2, [sp, #56]	@ 0x38
 800b9aa:	f000 fd09 	bl	800c3c0 <_Bfree>
 800b9ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9b0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b9b2:	9e07      	ldr	r6, [sp, #28]
 800b9b4:	ea43 0102 	orr.w	r1, r3, r2
 800b9b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b9ba:	4319      	orrs	r1, r3
 800b9bc:	d110      	bne.n	800b9e0 <_dtoa_r+0xa20>
 800b9be:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b9c2:	d029      	beq.n	800ba18 <_dtoa_r+0xa58>
 800b9c4:	9b08      	ldr	r3, [sp, #32]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	dd02      	ble.n	800b9d0 <_dtoa_r+0xa10>
 800b9ca:	9b02      	ldr	r3, [sp, #8]
 800b9cc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b9d0:	9b00      	ldr	r3, [sp, #0]
 800b9d2:	f883 8000 	strb.w	r8, [r3]
 800b9d6:	e63f      	b.n	800b658 <_dtoa_r+0x698>
 800b9d8:	4628      	mov	r0, r5
 800b9da:	e7bb      	b.n	800b954 <_dtoa_r+0x994>
 800b9dc:	2201      	movs	r2, #1
 800b9de:	e7e1      	b.n	800b9a4 <_dtoa_r+0x9e4>
 800b9e0:	9b08      	ldr	r3, [sp, #32]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	db04      	blt.n	800b9f0 <_dtoa_r+0xa30>
 800b9e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b9e8:	430b      	orrs	r3, r1
 800b9ea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b9ec:	430b      	orrs	r3, r1
 800b9ee:	d120      	bne.n	800ba32 <_dtoa_r+0xa72>
 800b9f0:	2a00      	cmp	r2, #0
 800b9f2:	dded      	ble.n	800b9d0 <_dtoa_r+0xa10>
 800b9f4:	4649      	mov	r1, r9
 800b9f6:	2201      	movs	r2, #1
 800b9f8:	4658      	mov	r0, fp
 800b9fa:	f000 feaf 	bl	800c75c <__lshift>
 800b9fe:	4621      	mov	r1, r4
 800ba00:	4681      	mov	r9, r0
 800ba02:	f000 ff17 	bl	800c834 <__mcmp>
 800ba06:	2800      	cmp	r0, #0
 800ba08:	dc03      	bgt.n	800ba12 <_dtoa_r+0xa52>
 800ba0a:	d1e1      	bne.n	800b9d0 <_dtoa_r+0xa10>
 800ba0c:	f018 0f01 	tst.w	r8, #1
 800ba10:	d0de      	beq.n	800b9d0 <_dtoa_r+0xa10>
 800ba12:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ba16:	d1d8      	bne.n	800b9ca <_dtoa_r+0xa0a>
 800ba18:	9a00      	ldr	r2, [sp, #0]
 800ba1a:	2339      	movs	r3, #57	@ 0x39
 800ba1c:	7013      	strb	r3, [r2, #0]
 800ba1e:	4633      	mov	r3, r6
 800ba20:	461e      	mov	r6, r3
 800ba22:	3b01      	subs	r3, #1
 800ba24:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ba28:	2a39      	cmp	r2, #57	@ 0x39
 800ba2a:	d052      	beq.n	800bad2 <_dtoa_r+0xb12>
 800ba2c:	3201      	adds	r2, #1
 800ba2e:	701a      	strb	r2, [r3, #0]
 800ba30:	e612      	b.n	800b658 <_dtoa_r+0x698>
 800ba32:	2a00      	cmp	r2, #0
 800ba34:	dd07      	ble.n	800ba46 <_dtoa_r+0xa86>
 800ba36:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ba3a:	d0ed      	beq.n	800ba18 <_dtoa_r+0xa58>
 800ba3c:	9a00      	ldr	r2, [sp, #0]
 800ba3e:	f108 0301 	add.w	r3, r8, #1
 800ba42:	7013      	strb	r3, [r2, #0]
 800ba44:	e608      	b.n	800b658 <_dtoa_r+0x698>
 800ba46:	9b07      	ldr	r3, [sp, #28]
 800ba48:	9a07      	ldr	r2, [sp, #28]
 800ba4a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ba4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba50:	4293      	cmp	r3, r2
 800ba52:	d028      	beq.n	800baa6 <_dtoa_r+0xae6>
 800ba54:	4649      	mov	r1, r9
 800ba56:	2300      	movs	r3, #0
 800ba58:	220a      	movs	r2, #10
 800ba5a:	4658      	mov	r0, fp
 800ba5c:	f000 fcd2 	bl	800c404 <__multadd>
 800ba60:	42af      	cmp	r7, r5
 800ba62:	4681      	mov	r9, r0
 800ba64:	f04f 0300 	mov.w	r3, #0
 800ba68:	f04f 020a 	mov.w	r2, #10
 800ba6c:	4639      	mov	r1, r7
 800ba6e:	4658      	mov	r0, fp
 800ba70:	d107      	bne.n	800ba82 <_dtoa_r+0xac2>
 800ba72:	f000 fcc7 	bl	800c404 <__multadd>
 800ba76:	4607      	mov	r7, r0
 800ba78:	4605      	mov	r5, r0
 800ba7a:	9b07      	ldr	r3, [sp, #28]
 800ba7c:	3301      	adds	r3, #1
 800ba7e:	9307      	str	r3, [sp, #28]
 800ba80:	e774      	b.n	800b96c <_dtoa_r+0x9ac>
 800ba82:	f000 fcbf 	bl	800c404 <__multadd>
 800ba86:	4629      	mov	r1, r5
 800ba88:	4607      	mov	r7, r0
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	220a      	movs	r2, #10
 800ba8e:	4658      	mov	r0, fp
 800ba90:	f000 fcb8 	bl	800c404 <__multadd>
 800ba94:	4605      	mov	r5, r0
 800ba96:	e7f0      	b.n	800ba7a <_dtoa_r+0xaba>
 800ba98:	9b00      	ldr	r3, [sp, #0]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	bfcc      	ite	gt
 800ba9e:	461e      	movgt	r6, r3
 800baa0:	2601      	movle	r6, #1
 800baa2:	4456      	add	r6, sl
 800baa4:	2700      	movs	r7, #0
 800baa6:	4649      	mov	r1, r9
 800baa8:	2201      	movs	r2, #1
 800baaa:	4658      	mov	r0, fp
 800baac:	f000 fe56 	bl	800c75c <__lshift>
 800bab0:	4621      	mov	r1, r4
 800bab2:	4681      	mov	r9, r0
 800bab4:	f000 febe 	bl	800c834 <__mcmp>
 800bab8:	2800      	cmp	r0, #0
 800baba:	dcb0      	bgt.n	800ba1e <_dtoa_r+0xa5e>
 800babc:	d102      	bne.n	800bac4 <_dtoa_r+0xb04>
 800babe:	f018 0f01 	tst.w	r8, #1
 800bac2:	d1ac      	bne.n	800ba1e <_dtoa_r+0xa5e>
 800bac4:	4633      	mov	r3, r6
 800bac6:	461e      	mov	r6, r3
 800bac8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bacc:	2a30      	cmp	r2, #48	@ 0x30
 800bace:	d0fa      	beq.n	800bac6 <_dtoa_r+0xb06>
 800bad0:	e5c2      	b.n	800b658 <_dtoa_r+0x698>
 800bad2:	459a      	cmp	sl, r3
 800bad4:	d1a4      	bne.n	800ba20 <_dtoa_r+0xa60>
 800bad6:	9b04      	ldr	r3, [sp, #16]
 800bad8:	3301      	adds	r3, #1
 800bada:	9304      	str	r3, [sp, #16]
 800badc:	2331      	movs	r3, #49	@ 0x31
 800bade:	f88a 3000 	strb.w	r3, [sl]
 800bae2:	e5b9      	b.n	800b658 <_dtoa_r+0x698>
 800bae4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bae6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800bb44 <_dtoa_r+0xb84>
 800baea:	b11b      	cbz	r3, 800baf4 <_dtoa_r+0xb34>
 800baec:	f10a 0308 	add.w	r3, sl, #8
 800baf0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800baf2:	6013      	str	r3, [r2, #0]
 800baf4:	4650      	mov	r0, sl
 800baf6:	b019      	add	sp, #100	@ 0x64
 800baf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bafc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bafe:	2b01      	cmp	r3, #1
 800bb00:	f77f ae37 	ble.w	800b772 <_dtoa_r+0x7b2>
 800bb04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb06:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb08:	2001      	movs	r0, #1
 800bb0a:	e655      	b.n	800b7b8 <_dtoa_r+0x7f8>
 800bb0c:	9b00      	ldr	r3, [sp, #0]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	f77f aed6 	ble.w	800b8c0 <_dtoa_r+0x900>
 800bb14:	4656      	mov	r6, sl
 800bb16:	4621      	mov	r1, r4
 800bb18:	4648      	mov	r0, r9
 800bb1a:	f7ff f9c9 	bl	800aeb0 <quorem>
 800bb1e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bb22:	f806 8b01 	strb.w	r8, [r6], #1
 800bb26:	9b00      	ldr	r3, [sp, #0]
 800bb28:	eba6 020a 	sub.w	r2, r6, sl
 800bb2c:	4293      	cmp	r3, r2
 800bb2e:	ddb3      	ble.n	800ba98 <_dtoa_r+0xad8>
 800bb30:	4649      	mov	r1, r9
 800bb32:	2300      	movs	r3, #0
 800bb34:	220a      	movs	r2, #10
 800bb36:	4658      	mov	r0, fp
 800bb38:	f000 fc64 	bl	800c404 <__multadd>
 800bb3c:	4681      	mov	r9, r0
 800bb3e:	e7ea      	b.n	800bb16 <_dtoa_r+0xb56>
 800bb40:	08022d27 	.word	0x08022d27
 800bb44:	08022cc2 	.word	0x08022cc2

0800bb48 <__ssputs_r>:
 800bb48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb4c:	688e      	ldr	r6, [r1, #8]
 800bb4e:	461f      	mov	r7, r3
 800bb50:	42be      	cmp	r6, r7
 800bb52:	680b      	ldr	r3, [r1, #0]
 800bb54:	4682      	mov	sl, r0
 800bb56:	460c      	mov	r4, r1
 800bb58:	4690      	mov	r8, r2
 800bb5a:	d82d      	bhi.n	800bbb8 <__ssputs_r+0x70>
 800bb5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bb60:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bb64:	d026      	beq.n	800bbb4 <__ssputs_r+0x6c>
 800bb66:	6965      	ldr	r5, [r4, #20]
 800bb68:	6909      	ldr	r1, [r1, #16]
 800bb6a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bb6e:	eba3 0901 	sub.w	r9, r3, r1
 800bb72:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bb76:	1c7b      	adds	r3, r7, #1
 800bb78:	444b      	add	r3, r9
 800bb7a:	106d      	asrs	r5, r5, #1
 800bb7c:	429d      	cmp	r5, r3
 800bb7e:	bf38      	it	cc
 800bb80:	461d      	movcc	r5, r3
 800bb82:	0553      	lsls	r3, r2, #21
 800bb84:	d527      	bpl.n	800bbd6 <__ssputs_r+0x8e>
 800bb86:	4629      	mov	r1, r5
 800bb88:	f000 faa2 	bl	800c0d0 <_malloc_r>
 800bb8c:	4606      	mov	r6, r0
 800bb8e:	b360      	cbz	r0, 800bbea <__ssputs_r+0xa2>
 800bb90:	6921      	ldr	r1, [r4, #16]
 800bb92:	464a      	mov	r2, r9
 800bb94:	f7ff f95f 	bl	800ae56 <memcpy>
 800bb98:	89a3      	ldrh	r3, [r4, #12]
 800bb9a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bb9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bba2:	81a3      	strh	r3, [r4, #12]
 800bba4:	6126      	str	r6, [r4, #16]
 800bba6:	6165      	str	r5, [r4, #20]
 800bba8:	444e      	add	r6, r9
 800bbaa:	eba5 0509 	sub.w	r5, r5, r9
 800bbae:	6026      	str	r6, [r4, #0]
 800bbb0:	60a5      	str	r5, [r4, #8]
 800bbb2:	463e      	mov	r6, r7
 800bbb4:	42be      	cmp	r6, r7
 800bbb6:	d900      	bls.n	800bbba <__ssputs_r+0x72>
 800bbb8:	463e      	mov	r6, r7
 800bbba:	6820      	ldr	r0, [r4, #0]
 800bbbc:	4632      	mov	r2, r6
 800bbbe:	4641      	mov	r1, r8
 800bbc0:	f001 f8ba 	bl	800cd38 <memmove>
 800bbc4:	68a3      	ldr	r3, [r4, #8]
 800bbc6:	1b9b      	subs	r3, r3, r6
 800bbc8:	60a3      	str	r3, [r4, #8]
 800bbca:	6823      	ldr	r3, [r4, #0]
 800bbcc:	4433      	add	r3, r6
 800bbce:	6023      	str	r3, [r4, #0]
 800bbd0:	2000      	movs	r0, #0
 800bbd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbd6:	462a      	mov	r2, r5
 800bbd8:	f000 ff8a 	bl	800caf0 <_realloc_r>
 800bbdc:	4606      	mov	r6, r0
 800bbde:	2800      	cmp	r0, #0
 800bbe0:	d1e0      	bne.n	800bba4 <__ssputs_r+0x5c>
 800bbe2:	6921      	ldr	r1, [r4, #16]
 800bbe4:	4650      	mov	r0, sl
 800bbe6:	f001 f955 	bl	800ce94 <_free_r>
 800bbea:	230c      	movs	r3, #12
 800bbec:	f8ca 3000 	str.w	r3, [sl]
 800bbf0:	89a3      	ldrh	r3, [r4, #12]
 800bbf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbf6:	81a3      	strh	r3, [r4, #12]
 800bbf8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bbfc:	e7e9      	b.n	800bbd2 <__ssputs_r+0x8a>
	...

0800bc00 <_svfiprintf_r>:
 800bc00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc04:	4698      	mov	r8, r3
 800bc06:	898b      	ldrh	r3, [r1, #12]
 800bc08:	061b      	lsls	r3, r3, #24
 800bc0a:	b09d      	sub	sp, #116	@ 0x74
 800bc0c:	4607      	mov	r7, r0
 800bc0e:	460d      	mov	r5, r1
 800bc10:	4614      	mov	r4, r2
 800bc12:	d510      	bpl.n	800bc36 <_svfiprintf_r+0x36>
 800bc14:	690b      	ldr	r3, [r1, #16]
 800bc16:	b973      	cbnz	r3, 800bc36 <_svfiprintf_r+0x36>
 800bc18:	2140      	movs	r1, #64	@ 0x40
 800bc1a:	f000 fa59 	bl	800c0d0 <_malloc_r>
 800bc1e:	6028      	str	r0, [r5, #0]
 800bc20:	6128      	str	r0, [r5, #16]
 800bc22:	b930      	cbnz	r0, 800bc32 <_svfiprintf_r+0x32>
 800bc24:	230c      	movs	r3, #12
 800bc26:	603b      	str	r3, [r7, #0]
 800bc28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bc2c:	b01d      	add	sp, #116	@ 0x74
 800bc2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc32:	2340      	movs	r3, #64	@ 0x40
 800bc34:	616b      	str	r3, [r5, #20]
 800bc36:	2300      	movs	r3, #0
 800bc38:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc3a:	2320      	movs	r3, #32
 800bc3c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bc40:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc44:	2330      	movs	r3, #48	@ 0x30
 800bc46:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bde4 <_svfiprintf_r+0x1e4>
 800bc4a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bc4e:	f04f 0901 	mov.w	r9, #1
 800bc52:	4623      	mov	r3, r4
 800bc54:	469a      	mov	sl, r3
 800bc56:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc5a:	b10a      	cbz	r2, 800bc60 <_svfiprintf_r+0x60>
 800bc5c:	2a25      	cmp	r2, #37	@ 0x25
 800bc5e:	d1f9      	bne.n	800bc54 <_svfiprintf_r+0x54>
 800bc60:	ebba 0b04 	subs.w	fp, sl, r4
 800bc64:	d00b      	beq.n	800bc7e <_svfiprintf_r+0x7e>
 800bc66:	465b      	mov	r3, fp
 800bc68:	4622      	mov	r2, r4
 800bc6a:	4629      	mov	r1, r5
 800bc6c:	4638      	mov	r0, r7
 800bc6e:	f7ff ff6b 	bl	800bb48 <__ssputs_r>
 800bc72:	3001      	adds	r0, #1
 800bc74:	f000 80a7 	beq.w	800bdc6 <_svfiprintf_r+0x1c6>
 800bc78:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc7a:	445a      	add	r2, fp
 800bc7c:	9209      	str	r2, [sp, #36]	@ 0x24
 800bc7e:	f89a 3000 	ldrb.w	r3, [sl]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	f000 809f 	beq.w	800bdc6 <_svfiprintf_r+0x1c6>
 800bc88:	2300      	movs	r3, #0
 800bc8a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bc8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc92:	f10a 0a01 	add.w	sl, sl, #1
 800bc96:	9304      	str	r3, [sp, #16]
 800bc98:	9307      	str	r3, [sp, #28]
 800bc9a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bc9e:	931a      	str	r3, [sp, #104]	@ 0x68
 800bca0:	4654      	mov	r4, sl
 800bca2:	2205      	movs	r2, #5
 800bca4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bca8:	484e      	ldr	r0, [pc, #312]	@ (800bde4 <_svfiprintf_r+0x1e4>)
 800bcaa:	f7f4 fa91 	bl	80001d0 <memchr>
 800bcae:	9a04      	ldr	r2, [sp, #16]
 800bcb0:	b9d8      	cbnz	r0, 800bcea <_svfiprintf_r+0xea>
 800bcb2:	06d0      	lsls	r0, r2, #27
 800bcb4:	bf44      	itt	mi
 800bcb6:	2320      	movmi	r3, #32
 800bcb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bcbc:	0711      	lsls	r1, r2, #28
 800bcbe:	bf44      	itt	mi
 800bcc0:	232b      	movmi	r3, #43	@ 0x2b
 800bcc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bcc6:	f89a 3000 	ldrb.w	r3, [sl]
 800bcca:	2b2a      	cmp	r3, #42	@ 0x2a
 800bccc:	d015      	beq.n	800bcfa <_svfiprintf_r+0xfa>
 800bcce:	9a07      	ldr	r2, [sp, #28]
 800bcd0:	4654      	mov	r4, sl
 800bcd2:	2000      	movs	r0, #0
 800bcd4:	f04f 0c0a 	mov.w	ip, #10
 800bcd8:	4621      	mov	r1, r4
 800bcda:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bcde:	3b30      	subs	r3, #48	@ 0x30
 800bce0:	2b09      	cmp	r3, #9
 800bce2:	d94b      	bls.n	800bd7c <_svfiprintf_r+0x17c>
 800bce4:	b1b0      	cbz	r0, 800bd14 <_svfiprintf_r+0x114>
 800bce6:	9207      	str	r2, [sp, #28]
 800bce8:	e014      	b.n	800bd14 <_svfiprintf_r+0x114>
 800bcea:	eba0 0308 	sub.w	r3, r0, r8
 800bcee:	fa09 f303 	lsl.w	r3, r9, r3
 800bcf2:	4313      	orrs	r3, r2
 800bcf4:	9304      	str	r3, [sp, #16]
 800bcf6:	46a2      	mov	sl, r4
 800bcf8:	e7d2      	b.n	800bca0 <_svfiprintf_r+0xa0>
 800bcfa:	9b03      	ldr	r3, [sp, #12]
 800bcfc:	1d19      	adds	r1, r3, #4
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	9103      	str	r1, [sp, #12]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	bfbb      	ittet	lt
 800bd06:	425b      	neglt	r3, r3
 800bd08:	f042 0202 	orrlt.w	r2, r2, #2
 800bd0c:	9307      	strge	r3, [sp, #28]
 800bd0e:	9307      	strlt	r3, [sp, #28]
 800bd10:	bfb8      	it	lt
 800bd12:	9204      	strlt	r2, [sp, #16]
 800bd14:	7823      	ldrb	r3, [r4, #0]
 800bd16:	2b2e      	cmp	r3, #46	@ 0x2e
 800bd18:	d10a      	bne.n	800bd30 <_svfiprintf_r+0x130>
 800bd1a:	7863      	ldrb	r3, [r4, #1]
 800bd1c:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd1e:	d132      	bne.n	800bd86 <_svfiprintf_r+0x186>
 800bd20:	9b03      	ldr	r3, [sp, #12]
 800bd22:	1d1a      	adds	r2, r3, #4
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	9203      	str	r2, [sp, #12]
 800bd28:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bd2c:	3402      	adds	r4, #2
 800bd2e:	9305      	str	r3, [sp, #20]
 800bd30:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bdf4 <_svfiprintf_r+0x1f4>
 800bd34:	7821      	ldrb	r1, [r4, #0]
 800bd36:	2203      	movs	r2, #3
 800bd38:	4650      	mov	r0, sl
 800bd3a:	f7f4 fa49 	bl	80001d0 <memchr>
 800bd3e:	b138      	cbz	r0, 800bd50 <_svfiprintf_r+0x150>
 800bd40:	9b04      	ldr	r3, [sp, #16]
 800bd42:	eba0 000a 	sub.w	r0, r0, sl
 800bd46:	2240      	movs	r2, #64	@ 0x40
 800bd48:	4082      	lsls	r2, r0
 800bd4a:	4313      	orrs	r3, r2
 800bd4c:	3401      	adds	r4, #1
 800bd4e:	9304      	str	r3, [sp, #16]
 800bd50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd54:	4824      	ldr	r0, [pc, #144]	@ (800bde8 <_svfiprintf_r+0x1e8>)
 800bd56:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bd5a:	2206      	movs	r2, #6
 800bd5c:	f7f4 fa38 	bl	80001d0 <memchr>
 800bd60:	2800      	cmp	r0, #0
 800bd62:	d036      	beq.n	800bdd2 <_svfiprintf_r+0x1d2>
 800bd64:	4b21      	ldr	r3, [pc, #132]	@ (800bdec <_svfiprintf_r+0x1ec>)
 800bd66:	bb1b      	cbnz	r3, 800bdb0 <_svfiprintf_r+0x1b0>
 800bd68:	9b03      	ldr	r3, [sp, #12]
 800bd6a:	3307      	adds	r3, #7
 800bd6c:	f023 0307 	bic.w	r3, r3, #7
 800bd70:	3308      	adds	r3, #8
 800bd72:	9303      	str	r3, [sp, #12]
 800bd74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd76:	4433      	add	r3, r6
 800bd78:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd7a:	e76a      	b.n	800bc52 <_svfiprintf_r+0x52>
 800bd7c:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd80:	460c      	mov	r4, r1
 800bd82:	2001      	movs	r0, #1
 800bd84:	e7a8      	b.n	800bcd8 <_svfiprintf_r+0xd8>
 800bd86:	2300      	movs	r3, #0
 800bd88:	3401      	adds	r4, #1
 800bd8a:	9305      	str	r3, [sp, #20]
 800bd8c:	4619      	mov	r1, r3
 800bd8e:	f04f 0c0a 	mov.w	ip, #10
 800bd92:	4620      	mov	r0, r4
 800bd94:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd98:	3a30      	subs	r2, #48	@ 0x30
 800bd9a:	2a09      	cmp	r2, #9
 800bd9c:	d903      	bls.n	800bda6 <_svfiprintf_r+0x1a6>
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d0c6      	beq.n	800bd30 <_svfiprintf_r+0x130>
 800bda2:	9105      	str	r1, [sp, #20]
 800bda4:	e7c4      	b.n	800bd30 <_svfiprintf_r+0x130>
 800bda6:	fb0c 2101 	mla	r1, ip, r1, r2
 800bdaa:	4604      	mov	r4, r0
 800bdac:	2301      	movs	r3, #1
 800bdae:	e7f0      	b.n	800bd92 <_svfiprintf_r+0x192>
 800bdb0:	ab03      	add	r3, sp, #12
 800bdb2:	9300      	str	r3, [sp, #0]
 800bdb4:	462a      	mov	r2, r5
 800bdb6:	4b0e      	ldr	r3, [pc, #56]	@ (800bdf0 <_svfiprintf_r+0x1f0>)
 800bdb8:	a904      	add	r1, sp, #16
 800bdba:	4638      	mov	r0, r7
 800bdbc:	f7fe fa28 	bl	800a210 <_printf_float>
 800bdc0:	1c42      	adds	r2, r0, #1
 800bdc2:	4606      	mov	r6, r0
 800bdc4:	d1d6      	bne.n	800bd74 <_svfiprintf_r+0x174>
 800bdc6:	89ab      	ldrh	r3, [r5, #12]
 800bdc8:	065b      	lsls	r3, r3, #25
 800bdca:	f53f af2d 	bmi.w	800bc28 <_svfiprintf_r+0x28>
 800bdce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bdd0:	e72c      	b.n	800bc2c <_svfiprintf_r+0x2c>
 800bdd2:	ab03      	add	r3, sp, #12
 800bdd4:	9300      	str	r3, [sp, #0]
 800bdd6:	462a      	mov	r2, r5
 800bdd8:	4b05      	ldr	r3, [pc, #20]	@ (800bdf0 <_svfiprintf_r+0x1f0>)
 800bdda:	a904      	add	r1, sp, #16
 800bddc:	4638      	mov	r0, r7
 800bdde:	f7fe fcaf 	bl	800a740 <_printf_i>
 800bde2:	e7ed      	b.n	800bdc0 <_svfiprintf_r+0x1c0>
 800bde4:	08022d38 	.word	0x08022d38
 800bde8:	08022d42 	.word	0x08022d42
 800bdec:	0800a211 	.word	0x0800a211
 800bdf0:	0800bb49 	.word	0x0800bb49
 800bdf4:	08022d3e 	.word	0x08022d3e

0800bdf8 <__sfputc_r>:
 800bdf8:	6893      	ldr	r3, [r2, #8]
 800bdfa:	3b01      	subs	r3, #1
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	b410      	push	{r4}
 800be00:	6093      	str	r3, [r2, #8]
 800be02:	da08      	bge.n	800be16 <__sfputc_r+0x1e>
 800be04:	6994      	ldr	r4, [r2, #24]
 800be06:	42a3      	cmp	r3, r4
 800be08:	db01      	blt.n	800be0e <__sfputc_r+0x16>
 800be0a:	290a      	cmp	r1, #10
 800be0c:	d103      	bne.n	800be16 <__sfputc_r+0x1e>
 800be0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be12:	f000 be9b 	b.w	800cb4c <__swbuf_r>
 800be16:	6813      	ldr	r3, [r2, #0]
 800be18:	1c58      	adds	r0, r3, #1
 800be1a:	6010      	str	r0, [r2, #0]
 800be1c:	7019      	strb	r1, [r3, #0]
 800be1e:	4608      	mov	r0, r1
 800be20:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be24:	4770      	bx	lr

0800be26 <__sfputs_r>:
 800be26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be28:	4606      	mov	r6, r0
 800be2a:	460f      	mov	r7, r1
 800be2c:	4614      	mov	r4, r2
 800be2e:	18d5      	adds	r5, r2, r3
 800be30:	42ac      	cmp	r4, r5
 800be32:	d101      	bne.n	800be38 <__sfputs_r+0x12>
 800be34:	2000      	movs	r0, #0
 800be36:	e007      	b.n	800be48 <__sfputs_r+0x22>
 800be38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be3c:	463a      	mov	r2, r7
 800be3e:	4630      	mov	r0, r6
 800be40:	f7ff ffda 	bl	800bdf8 <__sfputc_r>
 800be44:	1c43      	adds	r3, r0, #1
 800be46:	d1f3      	bne.n	800be30 <__sfputs_r+0xa>
 800be48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800be4c <_vfiprintf_r>:
 800be4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be50:	460d      	mov	r5, r1
 800be52:	b09d      	sub	sp, #116	@ 0x74
 800be54:	4614      	mov	r4, r2
 800be56:	4698      	mov	r8, r3
 800be58:	4606      	mov	r6, r0
 800be5a:	b118      	cbz	r0, 800be64 <_vfiprintf_r+0x18>
 800be5c:	6a03      	ldr	r3, [r0, #32]
 800be5e:	b90b      	cbnz	r3, 800be64 <_vfiprintf_r+0x18>
 800be60:	f7fe fe3a 	bl	800aad8 <__sinit>
 800be64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800be66:	07d9      	lsls	r1, r3, #31
 800be68:	d405      	bmi.n	800be76 <_vfiprintf_r+0x2a>
 800be6a:	89ab      	ldrh	r3, [r5, #12]
 800be6c:	059a      	lsls	r2, r3, #22
 800be6e:	d402      	bmi.n	800be76 <_vfiprintf_r+0x2a>
 800be70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800be72:	f7fe ffee 	bl	800ae52 <__retarget_lock_acquire_recursive>
 800be76:	89ab      	ldrh	r3, [r5, #12]
 800be78:	071b      	lsls	r3, r3, #28
 800be7a:	d501      	bpl.n	800be80 <_vfiprintf_r+0x34>
 800be7c:	692b      	ldr	r3, [r5, #16]
 800be7e:	b99b      	cbnz	r3, 800bea8 <_vfiprintf_r+0x5c>
 800be80:	4629      	mov	r1, r5
 800be82:	4630      	mov	r0, r6
 800be84:	f000 fea0 	bl	800cbc8 <__swsetup_r>
 800be88:	b170      	cbz	r0, 800bea8 <_vfiprintf_r+0x5c>
 800be8a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800be8c:	07dc      	lsls	r4, r3, #31
 800be8e:	d504      	bpl.n	800be9a <_vfiprintf_r+0x4e>
 800be90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800be94:	b01d      	add	sp, #116	@ 0x74
 800be96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be9a:	89ab      	ldrh	r3, [r5, #12]
 800be9c:	0598      	lsls	r0, r3, #22
 800be9e:	d4f7      	bmi.n	800be90 <_vfiprintf_r+0x44>
 800bea0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bea2:	f7fe ffd7 	bl	800ae54 <__retarget_lock_release_recursive>
 800bea6:	e7f3      	b.n	800be90 <_vfiprintf_r+0x44>
 800bea8:	2300      	movs	r3, #0
 800beaa:	9309      	str	r3, [sp, #36]	@ 0x24
 800beac:	2320      	movs	r3, #32
 800beae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800beb2:	f8cd 800c 	str.w	r8, [sp, #12]
 800beb6:	2330      	movs	r3, #48	@ 0x30
 800beb8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c068 <_vfiprintf_r+0x21c>
 800bebc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bec0:	f04f 0901 	mov.w	r9, #1
 800bec4:	4623      	mov	r3, r4
 800bec6:	469a      	mov	sl, r3
 800bec8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800becc:	b10a      	cbz	r2, 800bed2 <_vfiprintf_r+0x86>
 800bece:	2a25      	cmp	r2, #37	@ 0x25
 800bed0:	d1f9      	bne.n	800bec6 <_vfiprintf_r+0x7a>
 800bed2:	ebba 0b04 	subs.w	fp, sl, r4
 800bed6:	d00b      	beq.n	800bef0 <_vfiprintf_r+0xa4>
 800bed8:	465b      	mov	r3, fp
 800beda:	4622      	mov	r2, r4
 800bedc:	4629      	mov	r1, r5
 800bede:	4630      	mov	r0, r6
 800bee0:	f7ff ffa1 	bl	800be26 <__sfputs_r>
 800bee4:	3001      	adds	r0, #1
 800bee6:	f000 80a7 	beq.w	800c038 <_vfiprintf_r+0x1ec>
 800beea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800beec:	445a      	add	r2, fp
 800beee:	9209      	str	r2, [sp, #36]	@ 0x24
 800bef0:	f89a 3000 	ldrb.w	r3, [sl]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	f000 809f 	beq.w	800c038 <_vfiprintf_r+0x1ec>
 800befa:	2300      	movs	r3, #0
 800befc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bf00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf04:	f10a 0a01 	add.w	sl, sl, #1
 800bf08:	9304      	str	r3, [sp, #16]
 800bf0a:	9307      	str	r3, [sp, #28]
 800bf0c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bf10:	931a      	str	r3, [sp, #104]	@ 0x68
 800bf12:	4654      	mov	r4, sl
 800bf14:	2205      	movs	r2, #5
 800bf16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf1a:	4853      	ldr	r0, [pc, #332]	@ (800c068 <_vfiprintf_r+0x21c>)
 800bf1c:	f7f4 f958 	bl	80001d0 <memchr>
 800bf20:	9a04      	ldr	r2, [sp, #16]
 800bf22:	b9d8      	cbnz	r0, 800bf5c <_vfiprintf_r+0x110>
 800bf24:	06d1      	lsls	r1, r2, #27
 800bf26:	bf44      	itt	mi
 800bf28:	2320      	movmi	r3, #32
 800bf2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf2e:	0713      	lsls	r3, r2, #28
 800bf30:	bf44      	itt	mi
 800bf32:	232b      	movmi	r3, #43	@ 0x2b
 800bf34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf38:	f89a 3000 	ldrb.w	r3, [sl]
 800bf3c:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf3e:	d015      	beq.n	800bf6c <_vfiprintf_r+0x120>
 800bf40:	9a07      	ldr	r2, [sp, #28]
 800bf42:	4654      	mov	r4, sl
 800bf44:	2000      	movs	r0, #0
 800bf46:	f04f 0c0a 	mov.w	ip, #10
 800bf4a:	4621      	mov	r1, r4
 800bf4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf50:	3b30      	subs	r3, #48	@ 0x30
 800bf52:	2b09      	cmp	r3, #9
 800bf54:	d94b      	bls.n	800bfee <_vfiprintf_r+0x1a2>
 800bf56:	b1b0      	cbz	r0, 800bf86 <_vfiprintf_r+0x13a>
 800bf58:	9207      	str	r2, [sp, #28]
 800bf5a:	e014      	b.n	800bf86 <_vfiprintf_r+0x13a>
 800bf5c:	eba0 0308 	sub.w	r3, r0, r8
 800bf60:	fa09 f303 	lsl.w	r3, r9, r3
 800bf64:	4313      	orrs	r3, r2
 800bf66:	9304      	str	r3, [sp, #16]
 800bf68:	46a2      	mov	sl, r4
 800bf6a:	e7d2      	b.n	800bf12 <_vfiprintf_r+0xc6>
 800bf6c:	9b03      	ldr	r3, [sp, #12]
 800bf6e:	1d19      	adds	r1, r3, #4
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	9103      	str	r1, [sp, #12]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	bfbb      	ittet	lt
 800bf78:	425b      	neglt	r3, r3
 800bf7a:	f042 0202 	orrlt.w	r2, r2, #2
 800bf7e:	9307      	strge	r3, [sp, #28]
 800bf80:	9307      	strlt	r3, [sp, #28]
 800bf82:	bfb8      	it	lt
 800bf84:	9204      	strlt	r2, [sp, #16]
 800bf86:	7823      	ldrb	r3, [r4, #0]
 800bf88:	2b2e      	cmp	r3, #46	@ 0x2e
 800bf8a:	d10a      	bne.n	800bfa2 <_vfiprintf_r+0x156>
 800bf8c:	7863      	ldrb	r3, [r4, #1]
 800bf8e:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf90:	d132      	bne.n	800bff8 <_vfiprintf_r+0x1ac>
 800bf92:	9b03      	ldr	r3, [sp, #12]
 800bf94:	1d1a      	adds	r2, r3, #4
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	9203      	str	r2, [sp, #12]
 800bf9a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bf9e:	3402      	adds	r4, #2
 800bfa0:	9305      	str	r3, [sp, #20]
 800bfa2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c078 <_vfiprintf_r+0x22c>
 800bfa6:	7821      	ldrb	r1, [r4, #0]
 800bfa8:	2203      	movs	r2, #3
 800bfaa:	4650      	mov	r0, sl
 800bfac:	f7f4 f910 	bl	80001d0 <memchr>
 800bfb0:	b138      	cbz	r0, 800bfc2 <_vfiprintf_r+0x176>
 800bfb2:	9b04      	ldr	r3, [sp, #16]
 800bfb4:	eba0 000a 	sub.w	r0, r0, sl
 800bfb8:	2240      	movs	r2, #64	@ 0x40
 800bfba:	4082      	lsls	r2, r0
 800bfbc:	4313      	orrs	r3, r2
 800bfbe:	3401      	adds	r4, #1
 800bfc0:	9304      	str	r3, [sp, #16]
 800bfc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfc6:	4829      	ldr	r0, [pc, #164]	@ (800c06c <_vfiprintf_r+0x220>)
 800bfc8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bfcc:	2206      	movs	r2, #6
 800bfce:	f7f4 f8ff 	bl	80001d0 <memchr>
 800bfd2:	2800      	cmp	r0, #0
 800bfd4:	d03f      	beq.n	800c056 <_vfiprintf_r+0x20a>
 800bfd6:	4b26      	ldr	r3, [pc, #152]	@ (800c070 <_vfiprintf_r+0x224>)
 800bfd8:	bb1b      	cbnz	r3, 800c022 <_vfiprintf_r+0x1d6>
 800bfda:	9b03      	ldr	r3, [sp, #12]
 800bfdc:	3307      	adds	r3, #7
 800bfde:	f023 0307 	bic.w	r3, r3, #7
 800bfe2:	3308      	adds	r3, #8
 800bfe4:	9303      	str	r3, [sp, #12]
 800bfe6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfe8:	443b      	add	r3, r7
 800bfea:	9309      	str	r3, [sp, #36]	@ 0x24
 800bfec:	e76a      	b.n	800bec4 <_vfiprintf_r+0x78>
 800bfee:	fb0c 3202 	mla	r2, ip, r2, r3
 800bff2:	460c      	mov	r4, r1
 800bff4:	2001      	movs	r0, #1
 800bff6:	e7a8      	b.n	800bf4a <_vfiprintf_r+0xfe>
 800bff8:	2300      	movs	r3, #0
 800bffa:	3401      	adds	r4, #1
 800bffc:	9305      	str	r3, [sp, #20]
 800bffe:	4619      	mov	r1, r3
 800c000:	f04f 0c0a 	mov.w	ip, #10
 800c004:	4620      	mov	r0, r4
 800c006:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c00a:	3a30      	subs	r2, #48	@ 0x30
 800c00c:	2a09      	cmp	r2, #9
 800c00e:	d903      	bls.n	800c018 <_vfiprintf_r+0x1cc>
 800c010:	2b00      	cmp	r3, #0
 800c012:	d0c6      	beq.n	800bfa2 <_vfiprintf_r+0x156>
 800c014:	9105      	str	r1, [sp, #20]
 800c016:	e7c4      	b.n	800bfa2 <_vfiprintf_r+0x156>
 800c018:	fb0c 2101 	mla	r1, ip, r1, r2
 800c01c:	4604      	mov	r4, r0
 800c01e:	2301      	movs	r3, #1
 800c020:	e7f0      	b.n	800c004 <_vfiprintf_r+0x1b8>
 800c022:	ab03      	add	r3, sp, #12
 800c024:	9300      	str	r3, [sp, #0]
 800c026:	462a      	mov	r2, r5
 800c028:	4b12      	ldr	r3, [pc, #72]	@ (800c074 <_vfiprintf_r+0x228>)
 800c02a:	a904      	add	r1, sp, #16
 800c02c:	4630      	mov	r0, r6
 800c02e:	f7fe f8ef 	bl	800a210 <_printf_float>
 800c032:	4607      	mov	r7, r0
 800c034:	1c78      	adds	r0, r7, #1
 800c036:	d1d6      	bne.n	800bfe6 <_vfiprintf_r+0x19a>
 800c038:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c03a:	07d9      	lsls	r1, r3, #31
 800c03c:	d405      	bmi.n	800c04a <_vfiprintf_r+0x1fe>
 800c03e:	89ab      	ldrh	r3, [r5, #12]
 800c040:	059a      	lsls	r2, r3, #22
 800c042:	d402      	bmi.n	800c04a <_vfiprintf_r+0x1fe>
 800c044:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c046:	f7fe ff05 	bl	800ae54 <__retarget_lock_release_recursive>
 800c04a:	89ab      	ldrh	r3, [r5, #12]
 800c04c:	065b      	lsls	r3, r3, #25
 800c04e:	f53f af1f 	bmi.w	800be90 <_vfiprintf_r+0x44>
 800c052:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c054:	e71e      	b.n	800be94 <_vfiprintf_r+0x48>
 800c056:	ab03      	add	r3, sp, #12
 800c058:	9300      	str	r3, [sp, #0]
 800c05a:	462a      	mov	r2, r5
 800c05c:	4b05      	ldr	r3, [pc, #20]	@ (800c074 <_vfiprintf_r+0x228>)
 800c05e:	a904      	add	r1, sp, #16
 800c060:	4630      	mov	r0, r6
 800c062:	f7fe fb6d 	bl	800a740 <_printf_i>
 800c066:	e7e4      	b.n	800c032 <_vfiprintf_r+0x1e6>
 800c068:	08022d38 	.word	0x08022d38
 800c06c:	08022d42 	.word	0x08022d42
 800c070:	0800a211 	.word	0x0800a211
 800c074:	0800be27 	.word	0x0800be27
 800c078:	08022d3e 	.word	0x08022d3e

0800c07c <malloc>:
 800c07c:	4b02      	ldr	r3, [pc, #8]	@ (800c088 <malloc+0xc>)
 800c07e:	4601      	mov	r1, r0
 800c080:	6818      	ldr	r0, [r3, #0]
 800c082:	f000 b825 	b.w	800c0d0 <_malloc_r>
 800c086:	bf00      	nop
 800c088:	20000018 	.word	0x20000018

0800c08c <sbrk_aligned>:
 800c08c:	b570      	push	{r4, r5, r6, lr}
 800c08e:	4e0f      	ldr	r6, [pc, #60]	@ (800c0cc <sbrk_aligned+0x40>)
 800c090:	460c      	mov	r4, r1
 800c092:	6831      	ldr	r1, [r6, #0]
 800c094:	4605      	mov	r5, r0
 800c096:	b911      	cbnz	r1, 800c09e <sbrk_aligned+0x12>
 800c098:	f000 febe 	bl	800ce18 <_sbrk_r>
 800c09c:	6030      	str	r0, [r6, #0]
 800c09e:	4621      	mov	r1, r4
 800c0a0:	4628      	mov	r0, r5
 800c0a2:	f000 feb9 	bl	800ce18 <_sbrk_r>
 800c0a6:	1c43      	adds	r3, r0, #1
 800c0a8:	d103      	bne.n	800c0b2 <sbrk_aligned+0x26>
 800c0aa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c0ae:	4620      	mov	r0, r4
 800c0b0:	bd70      	pop	{r4, r5, r6, pc}
 800c0b2:	1cc4      	adds	r4, r0, #3
 800c0b4:	f024 0403 	bic.w	r4, r4, #3
 800c0b8:	42a0      	cmp	r0, r4
 800c0ba:	d0f8      	beq.n	800c0ae <sbrk_aligned+0x22>
 800c0bc:	1a21      	subs	r1, r4, r0
 800c0be:	4628      	mov	r0, r5
 800c0c0:	f000 feaa 	bl	800ce18 <_sbrk_r>
 800c0c4:	3001      	adds	r0, #1
 800c0c6:	d1f2      	bne.n	800c0ae <sbrk_aligned+0x22>
 800c0c8:	e7ef      	b.n	800c0aa <sbrk_aligned+0x1e>
 800c0ca:	bf00      	nop
 800c0cc:	200036b4 	.word	0x200036b4

0800c0d0 <_malloc_r>:
 800c0d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0d4:	1ccd      	adds	r5, r1, #3
 800c0d6:	f025 0503 	bic.w	r5, r5, #3
 800c0da:	3508      	adds	r5, #8
 800c0dc:	2d0c      	cmp	r5, #12
 800c0de:	bf38      	it	cc
 800c0e0:	250c      	movcc	r5, #12
 800c0e2:	2d00      	cmp	r5, #0
 800c0e4:	4606      	mov	r6, r0
 800c0e6:	db01      	blt.n	800c0ec <_malloc_r+0x1c>
 800c0e8:	42a9      	cmp	r1, r5
 800c0ea:	d904      	bls.n	800c0f6 <_malloc_r+0x26>
 800c0ec:	230c      	movs	r3, #12
 800c0ee:	6033      	str	r3, [r6, #0]
 800c0f0:	2000      	movs	r0, #0
 800c0f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c1cc <_malloc_r+0xfc>
 800c0fa:	f000 f915 	bl	800c328 <__malloc_lock>
 800c0fe:	f8d8 3000 	ldr.w	r3, [r8]
 800c102:	461c      	mov	r4, r3
 800c104:	bb44      	cbnz	r4, 800c158 <_malloc_r+0x88>
 800c106:	4629      	mov	r1, r5
 800c108:	4630      	mov	r0, r6
 800c10a:	f7ff ffbf 	bl	800c08c <sbrk_aligned>
 800c10e:	1c43      	adds	r3, r0, #1
 800c110:	4604      	mov	r4, r0
 800c112:	d158      	bne.n	800c1c6 <_malloc_r+0xf6>
 800c114:	f8d8 4000 	ldr.w	r4, [r8]
 800c118:	4627      	mov	r7, r4
 800c11a:	2f00      	cmp	r7, #0
 800c11c:	d143      	bne.n	800c1a6 <_malloc_r+0xd6>
 800c11e:	2c00      	cmp	r4, #0
 800c120:	d04b      	beq.n	800c1ba <_malloc_r+0xea>
 800c122:	6823      	ldr	r3, [r4, #0]
 800c124:	4639      	mov	r1, r7
 800c126:	4630      	mov	r0, r6
 800c128:	eb04 0903 	add.w	r9, r4, r3
 800c12c:	f000 fe74 	bl	800ce18 <_sbrk_r>
 800c130:	4581      	cmp	r9, r0
 800c132:	d142      	bne.n	800c1ba <_malloc_r+0xea>
 800c134:	6821      	ldr	r1, [r4, #0]
 800c136:	1a6d      	subs	r5, r5, r1
 800c138:	4629      	mov	r1, r5
 800c13a:	4630      	mov	r0, r6
 800c13c:	f7ff ffa6 	bl	800c08c <sbrk_aligned>
 800c140:	3001      	adds	r0, #1
 800c142:	d03a      	beq.n	800c1ba <_malloc_r+0xea>
 800c144:	6823      	ldr	r3, [r4, #0]
 800c146:	442b      	add	r3, r5
 800c148:	6023      	str	r3, [r4, #0]
 800c14a:	f8d8 3000 	ldr.w	r3, [r8]
 800c14e:	685a      	ldr	r2, [r3, #4]
 800c150:	bb62      	cbnz	r2, 800c1ac <_malloc_r+0xdc>
 800c152:	f8c8 7000 	str.w	r7, [r8]
 800c156:	e00f      	b.n	800c178 <_malloc_r+0xa8>
 800c158:	6822      	ldr	r2, [r4, #0]
 800c15a:	1b52      	subs	r2, r2, r5
 800c15c:	d420      	bmi.n	800c1a0 <_malloc_r+0xd0>
 800c15e:	2a0b      	cmp	r2, #11
 800c160:	d917      	bls.n	800c192 <_malloc_r+0xc2>
 800c162:	1961      	adds	r1, r4, r5
 800c164:	42a3      	cmp	r3, r4
 800c166:	6025      	str	r5, [r4, #0]
 800c168:	bf18      	it	ne
 800c16a:	6059      	strne	r1, [r3, #4]
 800c16c:	6863      	ldr	r3, [r4, #4]
 800c16e:	bf08      	it	eq
 800c170:	f8c8 1000 	streq.w	r1, [r8]
 800c174:	5162      	str	r2, [r4, r5]
 800c176:	604b      	str	r3, [r1, #4]
 800c178:	4630      	mov	r0, r6
 800c17a:	f000 f8db 	bl	800c334 <__malloc_unlock>
 800c17e:	f104 000b 	add.w	r0, r4, #11
 800c182:	1d23      	adds	r3, r4, #4
 800c184:	f020 0007 	bic.w	r0, r0, #7
 800c188:	1ac2      	subs	r2, r0, r3
 800c18a:	bf1c      	itt	ne
 800c18c:	1a1b      	subne	r3, r3, r0
 800c18e:	50a3      	strne	r3, [r4, r2]
 800c190:	e7af      	b.n	800c0f2 <_malloc_r+0x22>
 800c192:	6862      	ldr	r2, [r4, #4]
 800c194:	42a3      	cmp	r3, r4
 800c196:	bf0c      	ite	eq
 800c198:	f8c8 2000 	streq.w	r2, [r8]
 800c19c:	605a      	strne	r2, [r3, #4]
 800c19e:	e7eb      	b.n	800c178 <_malloc_r+0xa8>
 800c1a0:	4623      	mov	r3, r4
 800c1a2:	6864      	ldr	r4, [r4, #4]
 800c1a4:	e7ae      	b.n	800c104 <_malloc_r+0x34>
 800c1a6:	463c      	mov	r4, r7
 800c1a8:	687f      	ldr	r7, [r7, #4]
 800c1aa:	e7b6      	b.n	800c11a <_malloc_r+0x4a>
 800c1ac:	461a      	mov	r2, r3
 800c1ae:	685b      	ldr	r3, [r3, #4]
 800c1b0:	42a3      	cmp	r3, r4
 800c1b2:	d1fb      	bne.n	800c1ac <_malloc_r+0xdc>
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	6053      	str	r3, [r2, #4]
 800c1b8:	e7de      	b.n	800c178 <_malloc_r+0xa8>
 800c1ba:	230c      	movs	r3, #12
 800c1bc:	6033      	str	r3, [r6, #0]
 800c1be:	4630      	mov	r0, r6
 800c1c0:	f000 f8b8 	bl	800c334 <__malloc_unlock>
 800c1c4:	e794      	b.n	800c0f0 <_malloc_r+0x20>
 800c1c6:	6005      	str	r5, [r0, #0]
 800c1c8:	e7d6      	b.n	800c178 <_malloc_r+0xa8>
 800c1ca:	bf00      	nop
 800c1cc:	200036b8 	.word	0x200036b8

0800c1d0 <__sflush_r>:
 800c1d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c1d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1d8:	0716      	lsls	r6, r2, #28
 800c1da:	4605      	mov	r5, r0
 800c1dc:	460c      	mov	r4, r1
 800c1de:	d454      	bmi.n	800c28a <__sflush_r+0xba>
 800c1e0:	684b      	ldr	r3, [r1, #4]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	dc02      	bgt.n	800c1ec <__sflush_r+0x1c>
 800c1e6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	dd48      	ble.n	800c27e <__sflush_r+0xae>
 800c1ec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c1ee:	2e00      	cmp	r6, #0
 800c1f0:	d045      	beq.n	800c27e <__sflush_r+0xae>
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c1f8:	682f      	ldr	r7, [r5, #0]
 800c1fa:	6a21      	ldr	r1, [r4, #32]
 800c1fc:	602b      	str	r3, [r5, #0]
 800c1fe:	d030      	beq.n	800c262 <__sflush_r+0x92>
 800c200:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c202:	89a3      	ldrh	r3, [r4, #12]
 800c204:	0759      	lsls	r1, r3, #29
 800c206:	d505      	bpl.n	800c214 <__sflush_r+0x44>
 800c208:	6863      	ldr	r3, [r4, #4]
 800c20a:	1ad2      	subs	r2, r2, r3
 800c20c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c20e:	b10b      	cbz	r3, 800c214 <__sflush_r+0x44>
 800c210:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c212:	1ad2      	subs	r2, r2, r3
 800c214:	2300      	movs	r3, #0
 800c216:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c218:	6a21      	ldr	r1, [r4, #32]
 800c21a:	4628      	mov	r0, r5
 800c21c:	47b0      	blx	r6
 800c21e:	1c43      	adds	r3, r0, #1
 800c220:	89a3      	ldrh	r3, [r4, #12]
 800c222:	d106      	bne.n	800c232 <__sflush_r+0x62>
 800c224:	6829      	ldr	r1, [r5, #0]
 800c226:	291d      	cmp	r1, #29
 800c228:	d82b      	bhi.n	800c282 <__sflush_r+0xb2>
 800c22a:	4a2a      	ldr	r2, [pc, #168]	@ (800c2d4 <__sflush_r+0x104>)
 800c22c:	410a      	asrs	r2, r1
 800c22e:	07d6      	lsls	r6, r2, #31
 800c230:	d427      	bmi.n	800c282 <__sflush_r+0xb2>
 800c232:	2200      	movs	r2, #0
 800c234:	6062      	str	r2, [r4, #4]
 800c236:	04d9      	lsls	r1, r3, #19
 800c238:	6922      	ldr	r2, [r4, #16]
 800c23a:	6022      	str	r2, [r4, #0]
 800c23c:	d504      	bpl.n	800c248 <__sflush_r+0x78>
 800c23e:	1c42      	adds	r2, r0, #1
 800c240:	d101      	bne.n	800c246 <__sflush_r+0x76>
 800c242:	682b      	ldr	r3, [r5, #0]
 800c244:	b903      	cbnz	r3, 800c248 <__sflush_r+0x78>
 800c246:	6560      	str	r0, [r4, #84]	@ 0x54
 800c248:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c24a:	602f      	str	r7, [r5, #0]
 800c24c:	b1b9      	cbz	r1, 800c27e <__sflush_r+0xae>
 800c24e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c252:	4299      	cmp	r1, r3
 800c254:	d002      	beq.n	800c25c <__sflush_r+0x8c>
 800c256:	4628      	mov	r0, r5
 800c258:	f000 fe1c 	bl	800ce94 <_free_r>
 800c25c:	2300      	movs	r3, #0
 800c25e:	6363      	str	r3, [r4, #52]	@ 0x34
 800c260:	e00d      	b.n	800c27e <__sflush_r+0xae>
 800c262:	2301      	movs	r3, #1
 800c264:	4628      	mov	r0, r5
 800c266:	47b0      	blx	r6
 800c268:	4602      	mov	r2, r0
 800c26a:	1c50      	adds	r0, r2, #1
 800c26c:	d1c9      	bne.n	800c202 <__sflush_r+0x32>
 800c26e:	682b      	ldr	r3, [r5, #0]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d0c6      	beq.n	800c202 <__sflush_r+0x32>
 800c274:	2b1d      	cmp	r3, #29
 800c276:	d001      	beq.n	800c27c <__sflush_r+0xac>
 800c278:	2b16      	cmp	r3, #22
 800c27a:	d11e      	bne.n	800c2ba <__sflush_r+0xea>
 800c27c:	602f      	str	r7, [r5, #0]
 800c27e:	2000      	movs	r0, #0
 800c280:	e022      	b.n	800c2c8 <__sflush_r+0xf8>
 800c282:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c286:	b21b      	sxth	r3, r3
 800c288:	e01b      	b.n	800c2c2 <__sflush_r+0xf2>
 800c28a:	690f      	ldr	r7, [r1, #16]
 800c28c:	2f00      	cmp	r7, #0
 800c28e:	d0f6      	beq.n	800c27e <__sflush_r+0xae>
 800c290:	0793      	lsls	r3, r2, #30
 800c292:	680e      	ldr	r6, [r1, #0]
 800c294:	bf08      	it	eq
 800c296:	694b      	ldreq	r3, [r1, #20]
 800c298:	600f      	str	r7, [r1, #0]
 800c29a:	bf18      	it	ne
 800c29c:	2300      	movne	r3, #0
 800c29e:	eba6 0807 	sub.w	r8, r6, r7
 800c2a2:	608b      	str	r3, [r1, #8]
 800c2a4:	f1b8 0f00 	cmp.w	r8, #0
 800c2a8:	dde9      	ble.n	800c27e <__sflush_r+0xae>
 800c2aa:	6a21      	ldr	r1, [r4, #32]
 800c2ac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c2ae:	4643      	mov	r3, r8
 800c2b0:	463a      	mov	r2, r7
 800c2b2:	4628      	mov	r0, r5
 800c2b4:	47b0      	blx	r6
 800c2b6:	2800      	cmp	r0, #0
 800c2b8:	dc08      	bgt.n	800c2cc <__sflush_r+0xfc>
 800c2ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c2c2:	81a3      	strh	r3, [r4, #12]
 800c2c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c2c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2cc:	4407      	add	r7, r0
 800c2ce:	eba8 0800 	sub.w	r8, r8, r0
 800c2d2:	e7e7      	b.n	800c2a4 <__sflush_r+0xd4>
 800c2d4:	dfbffffe 	.word	0xdfbffffe

0800c2d8 <_fflush_r>:
 800c2d8:	b538      	push	{r3, r4, r5, lr}
 800c2da:	690b      	ldr	r3, [r1, #16]
 800c2dc:	4605      	mov	r5, r0
 800c2de:	460c      	mov	r4, r1
 800c2e0:	b913      	cbnz	r3, 800c2e8 <_fflush_r+0x10>
 800c2e2:	2500      	movs	r5, #0
 800c2e4:	4628      	mov	r0, r5
 800c2e6:	bd38      	pop	{r3, r4, r5, pc}
 800c2e8:	b118      	cbz	r0, 800c2f2 <_fflush_r+0x1a>
 800c2ea:	6a03      	ldr	r3, [r0, #32]
 800c2ec:	b90b      	cbnz	r3, 800c2f2 <_fflush_r+0x1a>
 800c2ee:	f7fe fbf3 	bl	800aad8 <__sinit>
 800c2f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d0f3      	beq.n	800c2e2 <_fflush_r+0xa>
 800c2fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c2fc:	07d0      	lsls	r0, r2, #31
 800c2fe:	d404      	bmi.n	800c30a <_fflush_r+0x32>
 800c300:	0599      	lsls	r1, r3, #22
 800c302:	d402      	bmi.n	800c30a <_fflush_r+0x32>
 800c304:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c306:	f7fe fda4 	bl	800ae52 <__retarget_lock_acquire_recursive>
 800c30a:	4628      	mov	r0, r5
 800c30c:	4621      	mov	r1, r4
 800c30e:	f7ff ff5f 	bl	800c1d0 <__sflush_r>
 800c312:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c314:	07da      	lsls	r2, r3, #31
 800c316:	4605      	mov	r5, r0
 800c318:	d4e4      	bmi.n	800c2e4 <_fflush_r+0xc>
 800c31a:	89a3      	ldrh	r3, [r4, #12]
 800c31c:	059b      	lsls	r3, r3, #22
 800c31e:	d4e1      	bmi.n	800c2e4 <_fflush_r+0xc>
 800c320:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c322:	f7fe fd97 	bl	800ae54 <__retarget_lock_release_recursive>
 800c326:	e7dd      	b.n	800c2e4 <_fflush_r+0xc>

0800c328 <__malloc_lock>:
 800c328:	4801      	ldr	r0, [pc, #4]	@ (800c330 <__malloc_lock+0x8>)
 800c32a:	f7fe bd92 	b.w	800ae52 <__retarget_lock_acquire_recursive>
 800c32e:	bf00      	nop
 800c330:	200036b0 	.word	0x200036b0

0800c334 <__malloc_unlock>:
 800c334:	4801      	ldr	r0, [pc, #4]	@ (800c33c <__malloc_unlock+0x8>)
 800c336:	f7fe bd8d 	b.w	800ae54 <__retarget_lock_release_recursive>
 800c33a:	bf00      	nop
 800c33c:	200036b0 	.word	0x200036b0

0800c340 <_Balloc>:
 800c340:	b570      	push	{r4, r5, r6, lr}
 800c342:	69c6      	ldr	r6, [r0, #28]
 800c344:	4604      	mov	r4, r0
 800c346:	460d      	mov	r5, r1
 800c348:	b976      	cbnz	r6, 800c368 <_Balloc+0x28>
 800c34a:	2010      	movs	r0, #16
 800c34c:	f7ff fe96 	bl	800c07c <malloc>
 800c350:	4602      	mov	r2, r0
 800c352:	61e0      	str	r0, [r4, #28]
 800c354:	b920      	cbnz	r0, 800c360 <_Balloc+0x20>
 800c356:	4b18      	ldr	r3, [pc, #96]	@ (800c3b8 <_Balloc+0x78>)
 800c358:	4818      	ldr	r0, [pc, #96]	@ (800c3bc <_Balloc+0x7c>)
 800c35a:	216b      	movs	r1, #107	@ 0x6b
 800c35c:	f7fe fd8a 	bl	800ae74 <__assert_func>
 800c360:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c364:	6006      	str	r6, [r0, #0]
 800c366:	60c6      	str	r6, [r0, #12]
 800c368:	69e6      	ldr	r6, [r4, #28]
 800c36a:	68f3      	ldr	r3, [r6, #12]
 800c36c:	b183      	cbz	r3, 800c390 <_Balloc+0x50>
 800c36e:	69e3      	ldr	r3, [r4, #28]
 800c370:	68db      	ldr	r3, [r3, #12]
 800c372:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c376:	b9b8      	cbnz	r0, 800c3a8 <_Balloc+0x68>
 800c378:	2101      	movs	r1, #1
 800c37a:	fa01 f605 	lsl.w	r6, r1, r5
 800c37e:	1d72      	adds	r2, r6, #5
 800c380:	0092      	lsls	r2, r2, #2
 800c382:	4620      	mov	r0, r4
 800c384:	f000 fd71 	bl	800ce6a <_calloc_r>
 800c388:	b160      	cbz	r0, 800c3a4 <_Balloc+0x64>
 800c38a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c38e:	e00e      	b.n	800c3ae <_Balloc+0x6e>
 800c390:	2221      	movs	r2, #33	@ 0x21
 800c392:	2104      	movs	r1, #4
 800c394:	4620      	mov	r0, r4
 800c396:	f000 fd68 	bl	800ce6a <_calloc_r>
 800c39a:	69e3      	ldr	r3, [r4, #28]
 800c39c:	60f0      	str	r0, [r6, #12]
 800c39e:	68db      	ldr	r3, [r3, #12]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d1e4      	bne.n	800c36e <_Balloc+0x2e>
 800c3a4:	2000      	movs	r0, #0
 800c3a6:	bd70      	pop	{r4, r5, r6, pc}
 800c3a8:	6802      	ldr	r2, [r0, #0]
 800c3aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c3b4:	e7f7      	b.n	800c3a6 <_Balloc+0x66>
 800c3b6:	bf00      	nop
 800c3b8:	08022b14 	.word	0x08022b14
 800c3bc:	08022d49 	.word	0x08022d49

0800c3c0 <_Bfree>:
 800c3c0:	b570      	push	{r4, r5, r6, lr}
 800c3c2:	69c6      	ldr	r6, [r0, #28]
 800c3c4:	4605      	mov	r5, r0
 800c3c6:	460c      	mov	r4, r1
 800c3c8:	b976      	cbnz	r6, 800c3e8 <_Bfree+0x28>
 800c3ca:	2010      	movs	r0, #16
 800c3cc:	f7ff fe56 	bl	800c07c <malloc>
 800c3d0:	4602      	mov	r2, r0
 800c3d2:	61e8      	str	r0, [r5, #28]
 800c3d4:	b920      	cbnz	r0, 800c3e0 <_Bfree+0x20>
 800c3d6:	4b09      	ldr	r3, [pc, #36]	@ (800c3fc <_Bfree+0x3c>)
 800c3d8:	4809      	ldr	r0, [pc, #36]	@ (800c400 <_Bfree+0x40>)
 800c3da:	218f      	movs	r1, #143	@ 0x8f
 800c3dc:	f7fe fd4a 	bl	800ae74 <__assert_func>
 800c3e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c3e4:	6006      	str	r6, [r0, #0]
 800c3e6:	60c6      	str	r6, [r0, #12]
 800c3e8:	b13c      	cbz	r4, 800c3fa <_Bfree+0x3a>
 800c3ea:	69eb      	ldr	r3, [r5, #28]
 800c3ec:	6862      	ldr	r2, [r4, #4]
 800c3ee:	68db      	ldr	r3, [r3, #12]
 800c3f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c3f4:	6021      	str	r1, [r4, #0]
 800c3f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c3fa:	bd70      	pop	{r4, r5, r6, pc}
 800c3fc:	08022b14 	.word	0x08022b14
 800c400:	08022d49 	.word	0x08022d49

0800c404 <__multadd>:
 800c404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c408:	690d      	ldr	r5, [r1, #16]
 800c40a:	4607      	mov	r7, r0
 800c40c:	460c      	mov	r4, r1
 800c40e:	461e      	mov	r6, r3
 800c410:	f101 0c14 	add.w	ip, r1, #20
 800c414:	2000      	movs	r0, #0
 800c416:	f8dc 3000 	ldr.w	r3, [ip]
 800c41a:	b299      	uxth	r1, r3
 800c41c:	fb02 6101 	mla	r1, r2, r1, r6
 800c420:	0c1e      	lsrs	r6, r3, #16
 800c422:	0c0b      	lsrs	r3, r1, #16
 800c424:	fb02 3306 	mla	r3, r2, r6, r3
 800c428:	b289      	uxth	r1, r1
 800c42a:	3001      	adds	r0, #1
 800c42c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c430:	4285      	cmp	r5, r0
 800c432:	f84c 1b04 	str.w	r1, [ip], #4
 800c436:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c43a:	dcec      	bgt.n	800c416 <__multadd+0x12>
 800c43c:	b30e      	cbz	r6, 800c482 <__multadd+0x7e>
 800c43e:	68a3      	ldr	r3, [r4, #8]
 800c440:	42ab      	cmp	r3, r5
 800c442:	dc19      	bgt.n	800c478 <__multadd+0x74>
 800c444:	6861      	ldr	r1, [r4, #4]
 800c446:	4638      	mov	r0, r7
 800c448:	3101      	adds	r1, #1
 800c44a:	f7ff ff79 	bl	800c340 <_Balloc>
 800c44e:	4680      	mov	r8, r0
 800c450:	b928      	cbnz	r0, 800c45e <__multadd+0x5a>
 800c452:	4602      	mov	r2, r0
 800c454:	4b0c      	ldr	r3, [pc, #48]	@ (800c488 <__multadd+0x84>)
 800c456:	480d      	ldr	r0, [pc, #52]	@ (800c48c <__multadd+0x88>)
 800c458:	21ba      	movs	r1, #186	@ 0xba
 800c45a:	f7fe fd0b 	bl	800ae74 <__assert_func>
 800c45e:	6922      	ldr	r2, [r4, #16]
 800c460:	3202      	adds	r2, #2
 800c462:	f104 010c 	add.w	r1, r4, #12
 800c466:	0092      	lsls	r2, r2, #2
 800c468:	300c      	adds	r0, #12
 800c46a:	f7fe fcf4 	bl	800ae56 <memcpy>
 800c46e:	4621      	mov	r1, r4
 800c470:	4638      	mov	r0, r7
 800c472:	f7ff ffa5 	bl	800c3c0 <_Bfree>
 800c476:	4644      	mov	r4, r8
 800c478:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c47c:	3501      	adds	r5, #1
 800c47e:	615e      	str	r6, [r3, #20]
 800c480:	6125      	str	r5, [r4, #16]
 800c482:	4620      	mov	r0, r4
 800c484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c488:	08022d27 	.word	0x08022d27
 800c48c:	08022d49 	.word	0x08022d49

0800c490 <__hi0bits>:
 800c490:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c494:	4603      	mov	r3, r0
 800c496:	bf36      	itet	cc
 800c498:	0403      	lslcc	r3, r0, #16
 800c49a:	2000      	movcs	r0, #0
 800c49c:	2010      	movcc	r0, #16
 800c49e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c4a2:	bf3c      	itt	cc
 800c4a4:	021b      	lslcc	r3, r3, #8
 800c4a6:	3008      	addcc	r0, #8
 800c4a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c4ac:	bf3c      	itt	cc
 800c4ae:	011b      	lslcc	r3, r3, #4
 800c4b0:	3004      	addcc	r0, #4
 800c4b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c4b6:	bf3c      	itt	cc
 800c4b8:	009b      	lslcc	r3, r3, #2
 800c4ba:	3002      	addcc	r0, #2
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	db05      	blt.n	800c4cc <__hi0bits+0x3c>
 800c4c0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c4c4:	f100 0001 	add.w	r0, r0, #1
 800c4c8:	bf08      	it	eq
 800c4ca:	2020      	moveq	r0, #32
 800c4cc:	4770      	bx	lr

0800c4ce <__lo0bits>:
 800c4ce:	6803      	ldr	r3, [r0, #0]
 800c4d0:	4602      	mov	r2, r0
 800c4d2:	f013 0007 	ands.w	r0, r3, #7
 800c4d6:	d00b      	beq.n	800c4f0 <__lo0bits+0x22>
 800c4d8:	07d9      	lsls	r1, r3, #31
 800c4da:	d421      	bmi.n	800c520 <__lo0bits+0x52>
 800c4dc:	0798      	lsls	r0, r3, #30
 800c4de:	bf49      	itett	mi
 800c4e0:	085b      	lsrmi	r3, r3, #1
 800c4e2:	089b      	lsrpl	r3, r3, #2
 800c4e4:	2001      	movmi	r0, #1
 800c4e6:	6013      	strmi	r3, [r2, #0]
 800c4e8:	bf5c      	itt	pl
 800c4ea:	6013      	strpl	r3, [r2, #0]
 800c4ec:	2002      	movpl	r0, #2
 800c4ee:	4770      	bx	lr
 800c4f0:	b299      	uxth	r1, r3
 800c4f2:	b909      	cbnz	r1, 800c4f8 <__lo0bits+0x2a>
 800c4f4:	0c1b      	lsrs	r3, r3, #16
 800c4f6:	2010      	movs	r0, #16
 800c4f8:	b2d9      	uxtb	r1, r3
 800c4fa:	b909      	cbnz	r1, 800c500 <__lo0bits+0x32>
 800c4fc:	3008      	adds	r0, #8
 800c4fe:	0a1b      	lsrs	r3, r3, #8
 800c500:	0719      	lsls	r1, r3, #28
 800c502:	bf04      	itt	eq
 800c504:	091b      	lsreq	r3, r3, #4
 800c506:	3004      	addeq	r0, #4
 800c508:	0799      	lsls	r1, r3, #30
 800c50a:	bf04      	itt	eq
 800c50c:	089b      	lsreq	r3, r3, #2
 800c50e:	3002      	addeq	r0, #2
 800c510:	07d9      	lsls	r1, r3, #31
 800c512:	d403      	bmi.n	800c51c <__lo0bits+0x4e>
 800c514:	085b      	lsrs	r3, r3, #1
 800c516:	f100 0001 	add.w	r0, r0, #1
 800c51a:	d003      	beq.n	800c524 <__lo0bits+0x56>
 800c51c:	6013      	str	r3, [r2, #0]
 800c51e:	4770      	bx	lr
 800c520:	2000      	movs	r0, #0
 800c522:	4770      	bx	lr
 800c524:	2020      	movs	r0, #32
 800c526:	4770      	bx	lr

0800c528 <__i2b>:
 800c528:	b510      	push	{r4, lr}
 800c52a:	460c      	mov	r4, r1
 800c52c:	2101      	movs	r1, #1
 800c52e:	f7ff ff07 	bl	800c340 <_Balloc>
 800c532:	4602      	mov	r2, r0
 800c534:	b928      	cbnz	r0, 800c542 <__i2b+0x1a>
 800c536:	4b05      	ldr	r3, [pc, #20]	@ (800c54c <__i2b+0x24>)
 800c538:	4805      	ldr	r0, [pc, #20]	@ (800c550 <__i2b+0x28>)
 800c53a:	f240 1145 	movw	r1, #325	@ 0x145
 800c53e:	f7fe fc99 	bl	800ae74 <__assert_func>
 800c542:	2301      	movs	r3, #1
 800c544:	6144      	str	r4, [r0, #20]
 800c546:	6103      	str	r3, [r0, #16]
 800c548:	bd10      	pop	{r4, pc}
 800c54a:	bf00      	nop
 800c54c:	08022d27 	.word	0x08022d27
 800c550:	08022d49 	.word	0x08022d49

0800c554 <__multiply>:
 800c554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c558:	4614      	mov	r4, r2
 800c55a:	690a      	ldr	r2, [r1, #16]
 800c55c:	6923      	ldr	r3, [r4, #16]
 800c55e:	429a      	cmp	r2, r3
 800c560:	bfa8      	it	ge
 800c562:	4623      	movge	r3, r4
 800c564:	460f      	mov	r7, r1
 800c566:	bfa4      	itt	ge
 800c568:	460c      	movge	r4, r1
 800c56a:	461f      	movge	r7, r3
 800c56c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c570:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c574:	68a3      	ldr	r3, [r4, #8]
 800c576:	6861      	ldr	r1, [r4, #4]
 800c578:	eb0a 0609 	add.w	r6, sl, r9
 800c57c:	42b3      	cmp	r3, r6
 800c57e:	b085      	sub	sp, #20
 800c580:	bfb8      	it	lt
 800c582:	3101      	addlt	r1, #1
 800c584:	f7ff fedc 	bl	800c340 <_Balloc>
 800c588:	b930      	cbnz	r0, 800c598 <__multiply+0x44>
 800c58a:	4602      	mov	r2, r0
 800c58c:	4b44      	ldr	r3, [pc, #272]	@ (800c6a0 <__multiply+0x14c>)
 800c58e:	4845      	ldr	r0, [pc, #276]	@ (800c6a4 <__multiply+0x150>)
 800c590:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c594:	f7fe fc6e 	bl	800ae74 <__assert_func>
 800c598:	f100 0514 	add.w	r5, r0, #20
 800c59c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c5a0:	462b      	mov	r3, r5
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	4543      	cmp	r3, r8
 800c5a6:	d321      	bcc.n	800c5ec <__multiply+0x98>
 800c5a8:	f107 0114 	add.w	r1, r7, #20
 800c5ac:	f104 0214 	add.w	r2, r4, #20
 800c5b0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c5b4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c5b8:	9302      	str	r3, [sp, #8]
 800c5ba:	1b13      	subs	r3, r2, r4
 800c5bc:	3b15      	subs	r3, #21
 800c5be:	f023 0303 	bic.w	r3, r3, #3
 800c5c2:	3304      	adds	r3, #4
 800c5c4:	f104 0715 	add.w	r7, r4, #21
 800c5c8:	42ba      	cmp	r2, r7
 800c5ca:	bf38      	it	cc
 800c5cc:	2304      	movcc	r3, #4
 800c5ce:	9301      	str	r3, [sp, #4]
 800c5d0:	9b02      	ldr	r3, [sp, #8]
 800c5d2:	9103      	str	r1, [sp, #12]
 800c5d4:	428b      	cmp	r3, r1
 800c5d6:	d80c      	bhi.n	800c5f2 <__multiply+0x9e>
 800c5d8:	2e00      	cmp	r6, #0
 800c5da:	dd03      	ble.n	800c5e4 <__multiply+0x90>
 800c5dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d05b      	beq.n	800c69c <__multiply+0x148>
 800c5e4:	6106      	str	r6, [r0, #16]
 800c5e6:	b005      	add	sp, #20
 800c5e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5ec:	f843 2b04 	str.w	r2, [r3], #4
 800c5f0:	e7d8      	b.n	800c5a4 <__multiply+0x50>
 800c5f2:	f8b1 a000 	ldrh.w	sl, [r1]
 800c5f6:	f1ba 0f00 	cmp.w	sl, #0
 800c5fa:	d024      	beq.n	800c646 <__multiply+0xf2>
 800c5fc:	f104 0e14 	add.w	lr, r4, #20
 800c600:	46a9      	mov	r9, r5
 800c602:	f04f 0c00 	mov.w	ip, #0
 800c606:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c60a:	f8d9 3000 	ldr.w	r3, [r9]
 800c60e:	fa1f fb87 	uxth.w	fp, r7
 800c612:	b29b      	uxth	r3, r3
 800c614:	fb0a 330b 	mla	r3, sl, fp, r3
 800c618:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c61c:	f8d9 7000 	ldr.w	r7, [r9]
 800c620:	4463      	add	r3, ip
 800c622:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c626:	fb0a c70b 	mla	r7, sl, fp, ip
 800c62a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c62e:	b29b      	uxth	r3, r3
 800c630:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c634:	4572      	cmp	r2, lr
 800c636:	f849 3b04 	str.w	r3, [r9], #4
 800c63a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c63e:	d8e2      	bhi.n	800c606 <__multiply+0xb2>
 800c640:	9b01      	ldr	r3, [sp, #4]
 800c642:	f845 c003 	str.w	ip, [r5, r3]
 800c646:	9b03      	ldr	r3, [sp, #12]
 800c648:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c64c:	3104      	adds	r1, #4
 800c64e:	f1b9 0f00 	cmp.w	r9, #0
 800c652:	d021      	beq.n	800c698 <__multiply+0x144>
 800c654:	682b      	ldr	r3, [r5, #0]
 800c656:	f104 0c14 	add.w	ip, r4, #20
 800c65a:	46ae      	mov	lr, r5
 800c65c:	f04f 0a00 	mov.w	sl, #0
 800c660:	f8bc b000 	ldrh.w	fp, [ip]
 800c664:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c668:	fb09 770b 	mla	r7, r9, fp, r7
 800c66c:	4457      	add	r7, sl
 800c66e:	b29b      	uxth	r3, r3
 800c670:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c674:	f84e 3b04 	str.w	r3, [lr], #4
 800c678:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c67c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c680:	f8be 3000 	ldrh.w	r3, [lr]
 800c684:	fb09 330a 	mla	r3, r9, sl, r3
 800c688:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c68c:	4562      	cmp	r2, ip
 800c68e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c692:	d8e5      	bhi.n	800c660 <__multiply+0x10c>
 800c694:	9f01      	ldr	r7, [sp, #4]
 800c696:	51eb      	str	r3, [r5, r7]
 800c698:	3504      	adds	r5, #4
 800c69a:	e799      	b.n	800c5d0 <__multiply+0x7c>
 800c69c:	3e01      	subs	r6, #1
 800c69e:	e79b      	b.n	800c5d8 <__multiply+0x84>
 800c6a0:	08022d27 	.word	0x08022d27
 800c6a4:	08022d49 	.word	0x08022d49

0800c6a8 <__pow5mult>:
 800c6a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6ac:	4615      	mov	r5, r2
 800c6ae:	f012 0203 	ands.w	r2, r2, #3
 800c6b2:	4607      	mov	r7, r0
 800c6b4:	460e      	mov	r6, r1
 800c6b6:	d007      	beq.n	800c6c8 <__pow5mult+0x20>
 800c6b8:	4c25      	ldr	r4, [pc, #148]	@ (800c750 <__pow5mult+0xa8>)
 800c6ba:	3a01      	subs	r2, #1
 800c6bc:	2300      	movs	r3, #0
 800c6be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c6c2:	f7ff fe9f 	bl	800c404 <__multadd>
 800c6c6:	4606      	mov	r6, r0
 800c6c8:	10ad      	asrs	r5, r5, #2
 800c6ca:	d03d      	beq.n	800c748 <__pow5mult+0xa0>
 800c6cc:	69fc      	ldr	r4, [r7, #28]
 800c6ce:	b97c      	cbnz	r4, 800c6f0 <__pow5mult+0x48>
 800c6d0:	2010      	movs	r0, #16
 800c6d2:	f7ff fcd3 	bl	800c07c <malloc>
 800c6d6:	4602      	mov	r2, r0
 800c6d8:	61f8      	str	r0, [r7, #28]
 800c6da:	b928      	cbnz	r0, 800c6e8 <__pow5mult+0x40>
 800c6dc:	4b1d      	ldr	r3, [pc, #116]	@ (800c754 <__pow5mult+0xac>)
 800c6de:	481e      	ldr	r0, [pc, #120]	@ (800c758 <__pow5mult+0xb0>)
 800c6e0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c6e4:	f7fe fbc6 	bl	800ae74 <__assert_func>
 800c6e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c6ec:	6004      	str	r4, [r0, #0]
 800c6ee:	60c4      	str	r4, [r0, #12]
 800c6f0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c6f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c6f8:	b94c      	cbnz	r4, 800c70e <__pow5mult+0x66>
 800c6fa:	f240 2171 	movw	r1, #625	@ 0x271
 800c6fe:	4638      	mov	r0, r7
 800c700:	f7ff ff12 	bl	800c528 <__i2b>
 800c704:	2300      	movs	r3, #0
 800c706:	f8c8 0008 	str.w	r0, [r8, #8]
 800c70a:	4604      	mov	r4, r0
 800c70c:	6003      	str	r3, [r0, #0]
 800c70e:	f04f 0900 	mov.w	r9, #0
 800c712:	07eb      	lsls	r3, r5, #31
 800c714:	d50a      	bpl.n	800c72c <__pow5mult+0x84>
 800c716:	4631      	mov	r1, r6
 800c718:	4622      	mov	r2, r4
 800c71a:	4638      	mov	r0, r7
 800c71c:	f7ff ff1a 	bl	800c554 <__multiply>
 800c720:	4631      	mov	r1, r6
 800c722:	4680      	mov	r8, r0
 800c724:	4638      	mov	r0, r7
 800c726:	f7ff fe4b 	bl	800c3c0 <_Bfree>
 800c72a:	4646      	mov	r6, r8
 800c72c:	106d      	asrs	r5, r5, #1
 800c72e:	d00b      	beq.n	800c748 <__pow5mult+0xa0>
 800c730:	6820      	ldr	r0, [r4, #0]
 800c732:	b938      	cbnz	r0, 800c744 <__pow5mult+0x9c>
 800c734:	4622      	mov	r2, r4
 800c736:	4621      	mov	r1, r4
 800c738:	4638      	mov	r0, r7
 800c73a:	f7ff ff0b 	bl	800c554 <__multiply>
 800c73e:	6020      	str	r0, [r4, #0]
 800c740:	f8c0 9000 	str.w	r9, [r0]
 800c744:	4604      	mov	r4, r0
 800c746:	e7e4      	b.n	800c712 <__pow5mult+0x6a>
 800c748:	4630      	mov	r0, r6
 800c74a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c74e:	bf00      	nop
 800c750:	08022da4 	.word	0x08022da4
 800c754:	08022b14 	.word	0x08022b14
 800c758:	08022d49 	.word	0x08022d49

0800c75c <__lshift>:
 800c75c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c760:	460c      	mov	r4, r1
 800c762:	6849      	ldr	r1, [r1, #4]
 800c764:	6923      	ldr	r3, [r4, #16]
 800c766:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c76a:	68a3      	ldr	r3, [r4, #8]
 800c76c:	4607      	mov	r7, r0
 800c76e:	4691      	mov	r9, r2
 800c770:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c774:	f108 0601 	add.w	r6, r8, #1
 800c778:	42b3      	cmp	r3, r6
 800c77a:	db0b      	blt.n	800c794 <__lshift+0x38>
 800c77c:	4638      	mov	r0, r7
 800c77e:	f7ff fddf 	bl	800c340 <_Balloc>
 800c782:	4605      	mov	r5, r0
 800c784:	b948      	cbnz	r0, 800c79a <__lshift+0x3e>
 800c786:	4602      	mov	r2, r0
 800c788:	4b28      	ldr	r3, [pc, #160]	@ (800c82c <__lshift+0xd0>)
 800c78a:	4829      	ldr	r0, [pc, #164]	@ (800c830 <__lshift+0xd4>)
 800c78c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c790:	f7fe fb70 	bl	800ae74 <__assert_func>
 800c794:	3101      	adds	r1, #1
 800c796:	005b      	lsls	r3, r3, #1
 800c798:	e7ee      	b.n	800c778 <__lshift+0x1c>
 800c79a:	2300      	movs	r3, #0
 800c79c:	f100 0114 	add.w	r1, r0, #20
 800c7a0:	f100 0210 	add.w	r2, r0, #16
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	4553      	cmp	r3, sl
 800c7a8:	db33      	blt.n	800c812 <__lshift+0xb6>
 800c7aa:	6920      	ldr	r0, [r4, #16]
 800c7ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c7b0:	f104 0314 	add.w	r3, r4, #20
 800c7b4:	f019 091f 	ands.w	r9, r9, #31
 800c7b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c7bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c7c0:	d02b      	beq.n	800c81a <__lshift+0xbe>
 800c7c2:	f1c9 0e20 	rsb	lr, r9, #32
 800c7c6:	468a      	mov	sl, r1
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	6818      	ldr	r0, [r3, #0]
 800c7cc:	fa00 f009 	lsl.w	r0, r0, r9
 800c7d0:	4310      	orrs	r0, r2
 800c7d2:	f84a 0b04 	str.w	r0, [sl], #4
 800c7d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7da:	459c      	cmp	ip, r3
 800c7dc:	fa22 f20e 	lsr.w	r2, r2, lr
 800c7e0:	d8f3      	bhi.n	800c7ca <__lshift+0x6e>
 800c7e2:	ebac 0304 	sub.w	r3, ip, r4
 800c7e6:	3b15      	subs	r3, #21
 800c7e8:	f023 0303 	bic.w	r3, r3, #3
 800c7ec:	3304      	adds	r3, #4
 800c7ee:	f104 0015 	add.w	r0, r4, #21
 800c7f2:	4584      	cmp	ip, r0
 800c7f4:	bf38      	it	cc
 800c7f6:	2304      	movcc	r3, #4
 800c7f8:	50ca      	str	r2, [r1, r3]
 800c7fa:	b10a      	cbz	r2, 800c800 <__lshift+0xa4>
 800c7fc:	f108 0602 	add.w	r6, r8, #2
 800c800:	3e01      	subs	r6, #1
 800c802:	4638      	mov	r0, r7
 800c804:	612e      	str	r6, [r5, #16]
 800c806:	4621      	mov	r1, r4
 800c808:	f7ff fdda 	bl	800c3c0 <_Bfree>
 800c80c:	4628      	mov	r0, r5
 800c80e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c812:	f842 0f04 	str.w	r0, [r2, #4]!
 800c816:	3301      	adds	r3, #1
 800c818:	e7c5      	b.n	800c7a6 <__lshift+0x4a>
 800c81a:	3904      	subs	r1, #4
 800c81c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c820:	f841 2f04 	str.w	r2, [r1, #4]!
 800c824:	459c      	cmp	ip, r3
 800c826:	d8f9      	bhi.n	800c81c <__lshift+0xc0>
 800c828:	e7ea      	b.n	800c800 <__lshift+0xa4>
 800c82a:	bf00      	nop
 800c82c:	08022d27 	.word	0x08022d27
 800c830:	08022d49 	.word	0x08022d49

0800c834 <__mcmp>:
 800c834:	690a      	ldr	r2, [r1, #16]
 800c836:	4603      	mov	r3, r0
 800c838:	6900      	ldr	r0, [r0, #16]
 800c83a:	1a80      	subs	r0, r0, r2
 800c83c:	b530      	push	{r4, r5, lr}
 800c83e:	d10e      	bne.n	800c85e <__mcmp+0x2a>
 800c840:	3314      	adds	r3, #20
 800c842:	3114      	adds	r1, #20
 800c844:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c848:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c84c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c850:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c854:	4295      	cmp	r5, r2
 800c856:	d003      	beq.n	800c860 <__mcmp+0x2c>
 800c858:	d205      	bcs.n	800c866 <__mcmp+0x32>
 800c85a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c85e:	bd30      	pop	{r4, r5, pc}
 800c860:	42a3      	cmp	r3, r4
 800c862:	d3f3      	bcc.n	800c84c <__mcmp+0x18>
 800c864:	e7fb      	b.n	800c85e <__mcmp+0x2a>
 800c866:	2001      	movs	r0, #1
 800c868:	e7f9      	b.n	800c85e <__mcmp+0x2a>
	...

0800c86c <__mdiff>:
 800c86c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c870:	4689      	mov	r9, r1
 800c872:	4606      	mov	r6, r0
 800c874:	4611      	mov	r1, r2
 800c876:	4648      	mov	r0, r9
 800c878:	4614      	mov	r4, r2
 800c87a:	f7ff ffdb 	bl	800c834 <__mcmp>
 800c87e:	1e05      	subs	r5, r0, #0
 800c880:	d112      	bne.n	800c8a8 <__mdiff+0x3c>
 800c882:	4629      	mov	r1, r5
 800c884:	4630      	mov	r0, r6
 800c886:	f7ff fd5b 	bl	800c340 <_Balloc>
 800c88a:	4602      	mov	r2, r0
 800c88c:	b928      	cbnz	r0, 800c89a <__mdiff+0x2e>
 800c88e:	4b3f      	ldr	r3, [pc, #252]	@ (800c98c <__mdiff+0x120>)
 800c890:	f240 2137 	movw	r1, #567	@ 0x237
 800c894:	483e      	ldr	r0, [pc, #248]	@ (800c990 <__mdiff+0x124>)
 800c896:	f7fe faed 	bl	800ae74 <__assert_func>
 800c89a:	2301      	movs	r3, #1
 800c89c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c8a0:	4610      	mov	r0, r2
 800c8a2:	b003      	add	sp, #12
 800c8a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8a8:	bfbc      	itt	lt
 800c8aa:	464b      	movlt	r3, r9
 800c8ac:	46a1      	movlt	r9, r4
 800c8ae:	4630      	mov	r0, r6
 800c8b0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c8b4:	bfba      	itte	lt
 800c8b6:	461c      	movlt	r4, r3
 800c8b8:	2501      	movlt	r5, #1
 800c8ba:	2500      	movge	r5, #0
 800c8bc:	f7ff fd40 	bl	800c340 <_Balloc>
 800c8c0:	4602      	mov	r2, r0
 800c8c2:	b918      	cbnz	r0, 800c8cc <__mdiff+0x60>
 800c8c4:	4b31      	ldr	r3, [pc, #196]	@ (800c98c <__mdiff+0x120>)
 800c8c6:	f240 2145 	movw	r1, #581	@ 0x245
 800c8ca:	e7e3      	b.n	800c894 <__mdiff+0x28>
 800c8cc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c8d0:	6926      	ldr	r6, [r4, #16]
 800c8d2:	60c5      	str	r5, [r0, #12]
 800c8d4:	f109 0310 	add.w	r3, r9, #16
 800c8d8:	f109 0514 	add.w	r5, r9, #20
 800c8dc:	f104 0e14 	add.w	lr, r4, #20
 800c8e0:	f100 0b14 	add.w	fp, r0, #20
 800c8e4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c8e8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c8ec:	9301      	str	r3, [sp, #4]
 800c8ee:	46d9      	mov	r9, fp
 800c8f0:	f04f 0c00 	mov.w	ip, #0
 800c8f4:	9b01      	ldr	r3, [sp, #4]
 800c8f6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c8fa:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c8fe:	9301      	str	r3, [sp, #4]
 800c900:	fa1f f38a 	uxth.w	r3, sl
 800c904:	4619      	mov	r1, r3
 800c906:	b283      	uxth	r3, r0
 800c908:	1acb      	subs	r3, r1, r3
 800c90a:	0c00      	lsrs	r0, r0, #16
 800c90c:	4463      	add	r3, ip
 800c90e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c912:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c916:	b29b      	uxth	r3, r3
 800c918:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c91c:	4576      	cmp	r6, lr
 800c91e:	f849 3b04 	str.w	r3, [r9], #4
 800c922:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c926:	d8e5      	bhi.n	800c8f4 <__mdiff+0x88>
 800c928:	1b33      	subs	r3, r6, r4
 800c92a:	3b15      	subs	r3, #21
 800c92c:	f023 0303 	bic.w	r3, r3, #3
 800c930:	3415      	adds	r4, #21
 800c932:	3304      	adds	r3, #4
 800c934:	42a6      	cmp	r6, r4
 800c936:	bf38      	it	cc
 800c938:	2304      	movcc	r3, #4
 800c93a:	441d      	add	r5, r3
 800c93c:	445b      	add	r3, fp
 800c93e:	461e      	mov	r6, r3
 800c940:	462c      	mov	r4, r5
 800c942:	4544      	cmp	r4, r8
 800c944:	d30e      	bcc.n	800c964 <__mdiff+0xf8>
 800c946:	f108 0103 	add.w	r1, r8, #3
 800c94a:	1b49      	subs	r1, r1, r5
 800c94c:	f021 0103 	bic.w	r1, r1, #3
 800c950:	3d03      	subs	r5, #3
 800c952:	45a8      	cmp	r8, r5
 800c954:	bf38      	it	cc
 800c956:	2100      	movcc	r1, #0
 800c958:	440b      	add	r3, r1
 800c95a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c95e:	b191      	cbz	r1, 800c986 <__mdiff+0x11a>
 800c960:	6117      	str	r7, [r2, #16]
 800c962:	e79d      	b.n	800c8a0 <__mdiff+0x34>
 800c964:	f854 1b04 	ldr.w	r1, [r4], #4
 800c968:	46e6      	mov	lr, ip
 800c96a:	0c08      	lsrs	r0, r1, #16
 800c96c:	fa1c fc81 	uxtah	ip, ip, r1
 800c970:	4471      	add	r1, lr
 800c972:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c976:	b289      	uxth	r1, r1
 800c978:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c97c:	f846 1b04 	str.w	r1, [r6], #4
 800c980:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c984:	e7dd      	b.n	800c942 <__mdiff+0xd6>
 800c986:	3f01      	subs	r7, #1
 800c988:	e7e7      	b.n	800c95a <__mdiff+0xee>
 800c98a:	bf00      	nop
 800c98c:	08022d27 	.word	0x08022d27
 800c990:	08022d49 	.word	0x08022d49

0800c994 <__d2b>:
 800c994:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c998:	460f      	mov	r7, r1
 800c99a:	2101      	movs	r1, #1
 800c99c:	ec59 8b10 	vmov	r8, r9, d0
 800c9a0:	4616      	mov	r6, r2
 800c9a2:	f7ff fccd 	bl	800c340 <_Balloc>
 800c9a6:	4604      	mov	r4, r0
 800c9a8:	b930      	cbnz	r0, 800c9b8 <__d2b+0x24>
 800c9aa:	4602      	mov	r2, r0
 800c9ac:	4b23      	ldr	r3, [pc, #140]	@ (800ca3c <__d2b+0xa8>)
 800c9ae:	4824      	ldr	r0, [pc, #144]	@ (800ca40 <__d2b+0xac>)
 800c9b0:	f240 310f 	movw	r1, #783	@ 0x30f
 800c9b4:	f7fe fa5e 	bl	800ae74 <__assert_func>
 800c9b8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c9bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c9c0:	b10d      	cbz	r5, 800c9c6 <__d2b+0x32>
 800c9c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c9c6:	9301      	str	r3, [sp, #4]
 800c9c8:	f1b8 0300 	subs.w	r3, r8, #0
 800c9cc:	d023      	beq.n	800ca16 <__d2b+0x82>
 800c9ce:	4668      	mov	r0, sp
 800c9d0:	9300      	str	r3, [sp, #0]
 800c9d2:	f7ff fd7c 	bl	800c4ce <__lo0bits>
 800c9d6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c9da:	b1d0      	cbz	r0, 800ca12 <__d2b+0x7e>
 800c9dc:	f1c0 0320 	rsb	r3, r0, #32
 800c9e0:	fa02 f303 	lsl.w	r3, r2, r3
 800c9e4:	430b      	orrs	r3, r1
 800c9e6:	40c2      	lsrs	r2, r0
 800c9e8:	6163      	str	r3, [r4, #20]
 800c9ea:	9201      	str	r2, [sp, #4]
 800c9ec:	9b01      	ldr	r3, [sp, #4]
 800c9ee:	61a3      	str	r3, [r4, #24]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	bf0c      	ite	eq
 800c9f4:	2201      	moveq	r2, #1
 800c9f6:	2202      	movne	r2, #2
 800c9f8:	6122      	str	r2, [r4, #16]
 800c9fa:	b1a5      	cbz	r5, 800ca26 <__d2b+0x92>
 800c9fc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ca00:	4405      	add	r5, r0
 800ca02:	603d      	str	r5, [r7, #0]
 800ca04:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ca08:	6030      	str	r0, [r6, #0]
 800ca0a:	4620      	mov	r0, r4
 800ca0c:	b003      	add	sp, #12
 800ca0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca12:	6161      	str	r1, [r4, #20]
 800ca14:	e7ea      	b.n	800c9ec <__d2b+0x58>
 800ca16:	a801      	add	r0, sp, #4
 800ca18:	f7ff fd59 	bl	800c4ce <__lo0bits>
 800ca1c:	9b01      	ldr	r3, [sp, #4]
 800ca1e:	6163      	str	r3, [r4, #20]
 800ca20:	3020      	adds	r0, #32
 800ca22:	2201      	movs	r2, #1
 800ca24:	e7e8      	b.n	800c9f8 <__d2b+0x64>
 800ca26:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ca2a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ca2e:	6038      	str	r0, [r7, #0]
 800ca30:	6918      	ldr	r0, [r3, #16]
 800ca32:	f7ff fd2d 	bl	800c490 <__hi0bits>
 800ca36:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ca3a:	e7e5      	b.n	800ca08 <__d2b+0x74>
 800ca3c:	08022d27 	.word	0x08022d27
 800ca40:	08022d49 	.word	0x08022d49

0800ca44 <__sread>:
 800ca44:	b510      	push	{r4, lr}
 800ca46:	460c      	mov	r4, r1
 800ca48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca4c:	f000 f9d2 	bl	800cdf4 <_read_r>
 800ca50:	2800      	cmp	r0, #0
 800ca52:	bfab      	itete	ge
 800ca54:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ca56:	89a3      	ldrhlt	r3, [r4, #12]
 800ca58:	181b      	addge	r3, r3, r0
 800ca5a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ca5e:	bfac      	ite	ge
 800ca60:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ca62:	81a3      	strhlt	r3, [r4, #12]
 800ca64:	bd10      	pop	{r4, pc}

0800ca66 <__swrite>:
 800ca66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca6a:	461f      	mov	r7, r3
 800ca6c:	898b      	ldrh	r3, [r1, #12]
 800ca6e:	05db      	lsls	r3, r3, #23
 800ca70:	4605      	mov	r5, r0
 800ca72:	460c      	mov	r4, r1
 800ca74:	4616      	mov	r6, r2
 800ca76:	d505      	bpl.n	800ca84 <__swrite+0x1e>
 800ca78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca7c:	2302      	movs	r3, #2
 800ca7e:	2200      	movs	r2, #0
 800ca80:	f000 f9a6 	bl	800cdd0 <_lseek_r>
 800ca84:	89a3      	ldrh	r3, [r4, #12]
 800ca86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca8a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ca8e:	81a3      	strh	r3, [r4, #12]
 800ca90:	4632      	mov	r2, r6
 800ca92:	463b      	mov	r3, r7
 800ca94:	4628      	mov	r0, r5
 800ca96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca9a:	f000 b9cd 	b.w	800ce38 <_write_r>

0800ca9e <__sseek>:
 800ca9e:	b510      	push	{r4, lr}
 800caa0:	460c      	mov	r4, r1
 800caa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800caa6:	f000 f993 	bl	800cdd0 <_lseek_r>
 800caaa:	1c43      	adds	r3, r0, #1
 800caac:	89a3      	ldrh	r3, [r4, #12]
 800caae:	bf15      	itete	ne
 800cab0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cab2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cab6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800caba:	81a3      	strheq	r3, [r4, #12]
 800cabc:	bf18      	it	ne
 800cabe:	81a3      	strhne	r3, [r4, #12]
 800cac0:	bd10      	pop	{r4, pc}

0800cac2 <__sclose>:
 800cac2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cac6:	f000 b951 	b.w	800cd6c <_close_r>
	...

0800cacc <fiprintf>:
 800cacc:	b40e      	push	{r1, r2, r3}
 800cace:	b503      	push	{r0, r1, lr}
 800cad0:	4601      	mov	r1, r0
 800cad2:	ab03      	add	r3, sp, #12
 800cad4:	4805      	ldr	r0, [pc, #20]	@ (800caec <fiprintf+0x20>)
 800cad6:	f853 2b04 	ldr.w	r2, [r3], #4
 800cada:	6800      	ldr	r0, [r0, #0]
 800cadc:	9301      	str	r3, [sp, #4]
 800cade:	f7ff f9b5 	bl	800be4c <_vfiprintf_r>
 800cae2:	b002      	add	sp, #8
 800cae4:	f85d eb04 	ldr.w	lr, [sp], #4
 800cae8:	b003      	add	sp, #12
 800caea:	4770      	bx	lr
 800caec:	20000018 	.word	0x20000018

0800caf0 <_realloc_r>:
 800caf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800caf4:	4680      	mov	r8, r0
 800caf6:	4615      	mov	r5, r2
 800caf8:	460c      	mov	r4, r1
 800cafa:	b921      	cbnz	r1, 800cb06 <_realloc_r+0x16>
 800cafc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb00:	4611      	mov	r1, r2
 800cb02:	f7ff bae5 	b.w	800c0d0 <_malloc_r>
 800cb06:	b92a      	cbnz	r2, 800cb14 <_realloc_r+0x24>
 800cb08:	f000 f9c4 	bl	800ce94 <_free_r>
 800cb0c:	2400      	movs	r4, #0
 800cb0e:	4620      	mov	r0, r4
 800cb10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb14:	f000 fa1a 	bl	800cf4c <_malloc_usable_size_r>
 800cb18:	4285      	cmp	r5, r0
 800cb1a:	4606      	mov	r6, r0
 800cb1c:	d802      	bhi.n	800cb24 <_realloc_r+0x34>
 800cb1e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cb22:	d8f4      	bhi.n	800cb0e <_realloc_r+0x1e>
 800cb24:	4629      	mov	r1, r5
 800cb26:	4640      	mov	r0, r8
 800cb28:	f7ff fad2 	bl	800c0d0 <_malloc_r>
 800cb2c:	4607      	mov	r7, r0
 800cb2e:	2800      	cmp	r0, #0
 800cb30:	d0ec      	beq.n	800cb0c <_realloc_r+0x1c>
 800cb32:	42b5      	cmp	r5, r6
 800cb34:	462a      	mov	r2, r5
 800cb36:	4621      	mov	r1, r4
 800cb38:	bf28      	it	cs
 800cb3a:	4632      	movcs	r2, r6
 800cb3c:	f7fe f98b 	bl	800ae56 <memcpy>
 800cb40:	4621      	mov	r1, r4
 800cb42:	4640      	mov	r0, r8
 800cb44:	f000 f9a6 	bl	800ce94 <_free_r>
 800cb48:	463c      	mov	r4, r7
 800cb4a:	e7e0      	b.n	800cb0e <_realloc_r+0x1e>

0800cb4c <__swbuf_r>:
 800cb4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb4e:	460e      	mov	r6, r1
 800cb50:	4614      	mov	r4, r2
 800cb52:	4605      	mov	r5, r0
 800cb54:	b118      	cbz	r0, 800cb5e <__swbuf_r+0x12>
 800cb56:	6a03      	ldr	r3, [r0, #32]
 800cb58:	b90b      	cbnz	r3, 800cb5e <__swbuf_r+0x12>
 800cb5a:	f7fd ffbd 	bl	800aad8 <__sinit>
 800cb5e:	69a3      	ldr	r3, [r4, #24]
 800cb60:	60a3      	str	r3, [r4, #8]
 800cb62:	89a3      	ldrh	r3, [r4, #12]
 800cb64:	071a      	lsls	r2, r3, #28
 800cb66:	d501      	bpl.n	800cb6c <__swbuf_r+0x20>
 800cb68:	6923      	ldr	r3, [r4, #16]
 800cb6a:	b943      	cbnz	r3, 800cb7e <__swbuf_r+0x32>
 800cb6c:	4621      	mov	r1, r4
 800cb6e:	4628      	mov	r0, r5
 800cb70:	f000 f82a 	bl	800cbc8 <__swsetup_r>
 800cb74:	b118      	cbz	r0, 800cb7e <__swbuf_r+0x32>
 800cb76:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800cb7a:	4638      	mov	r0, r7
 800cb7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb7e:	6823      	ldr	r3, [r4, #0]
 800cb80:	6922      	ldr	r2, [r4, #16]
 800cb82:	1a98      	subs	r0, r3, r2
 800cb84:	6963      	ldr	r3, [r4, #20]
 800cb86:	b2f6      	uxtb	r6, r6
 800cb88:	4283      	cmp	r3, r0
 800cb8a:	4637      	mov	r7, r6
 800cb8c:	dc05      	bgt.n	800cb9a <__swbuf_r+0x4e>
 800cb8e:	4621      	mov	r1, r4
 800cb90:	4628      	mov	r0, r5
 800cb92:	f7ff fba1 	bl	800c2d8 <_fflush_r>
 800cb96:	2800      	cmp	r0, #0
 800cb98:	d1ed      	bne.n	800cb76 <__swbuf_r+0x2a>
 800cb9a:	68a3      	ldr	r3, [r4, #8]
 800cb9c:	3b01      	subs	r3, #1
 800cb9e:	60a3      	str	r3, [r4, #8]
 800cba0:	6823      	ldr	r3, [r4, #0]
 800cba2:	1c5a      	adds	r2, r3, #1
 800cba4:	6022      	str	r2, [r4, #0]
 800cba6:	701e      	strb	r6, [r3, #0]
 800cba8:	6962      	ldr	r2, [r4, #20]
 800cbaa:	1c43      	adds	r3, r0, #1
 800cbac:	429a      	cmp	r2, r3
 800cbae:	d004      	beq.n	800cbba <__swbuf_r+0x6e>
 800cbb0:	89a3      	ldrh	r3, [r4, #12]
 800cbb2:	07db      	lsls	r3, r3, #31
 800cbb4:	d5e1      	bpl.n	800cb7a <__swbuf_r+0x2e>
 800cbb6:	2e0a      	cmp	r6, #10
 800cbb8:	d1df      	bne.n	800cb7a <__swbuf_r+0x2e>
 800cbba:	4621      	mov	r1, r4
 800cbbc:	4628      	mov	r0, r5
 800cbbe:	f7ff fb8b 	bl	800c2d8 <_fflush_r>
 800cbc2:	2800      	cmp	r0, #0
 800cbc4:	d0d9      	beq.n	800cb7a <__swbuf_r+0x2e>
 800cbc6:	e7d6      	b.n	800cb76 <__swbuf_r+0x2a>

0800cbc8 <__swsetup_r>:
 800cbc8:	b538      	push	{r3, r4, r5, lr}
 800cbca:	4b29      	ldr	r3, [pc, #164]	@ (800cc70 <__swsetup_r+0xa8>)
 800cbcc:	4605      	mov	r5, r0
 800cbce:	6818      	ldr	r0, [r3, #0]
 800cbd0:	460c      	mov	r4, r1
 800cbd2:	b118      	cbz	r0, 800cbdc <__swsetup_r+0x14>
 800cbd4:	6a03      	ldr	r3, [r0, #32]
 800cbd6:	b90b      	cbnz	r3, 800cbdc <__swsetup_r+0x14>
 800cbd8:	f7fd ff7e 	bl	800aad8 <__sinit>
 800cbdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbe0:	0719      	lsls	r1, r3, #28
 800cbe2:	d422      	bmi.n	800cc2a <__swsetup_r+0x62>
 800cbe4:	06da      	lsls	r2, r3, #27
 800cbe6:	d407      	bmi.n	800cbf8 <__swsetup_r+0x30>
 800cbe8:	2209      	movs	r2, #9
 800cbea:	602a      	str	r2, [r5, #0]
 800cbec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cbf0:	81a3      	strh	r3, [r4, #12]
 800cbf2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cbf6:	e033      	b.n	800cc60 <__swsetup_r+0x98>
 800cbf8:	0758      	lsls	r0, r3, #29
 800cbfa:	d512      	bpl.n	800cc22 <__swsetup_r+0x5a>
 800cbfc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cbfe:	b141      	cbz	r1, 800cc12 <__swsetup_r+0x4a>
 800cc00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cc04:	4299      	cmp	r1, r3
 800cc06:	d002      	beq.n	800cc0e <__swsetup_r+0x46>
 800cc08:	4628      	mov	r0, r5
 800cc0a:	f000 f943 	bl	800ce94 <_free_r>
 800cc0e:	2300      	movs	r3, #0
 800cc10:	6363      	str	r3, [r4, #52]	@ 0x34
 800cc12:	89a3      	ldrh	r3, [r4, #12]
 800cc14:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cc18:	81a3      	strh	r3, [r4, #12]
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	6063      	str	r3, [r4, #4]
 800cc1e:	6923      	ldr	r3, [r4, #16]
 800cc20:	6023      	str	r3, [r4, #0]
 800cc22:	89a3      	ldrh	r3, [r4, #12]
 800cc24:	f043 0308 	orr.w	r3, r3, #8
 800cc28:	81a3      	strh	r3, [r4, #12]
 800cc2a:	6923      	ldr	r3, [r4, #16]
 800cc2c:	b94b      	cbnz	r3, 800cc42 <__swsetup_r+0x7a>
 800cc2e:	89a3      	ldrh	r3, [r4, #12]
 800cc30:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cc34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cc38:	d003      	beq.n	800cc42 <__swsetup_r+0x7a>
 800cc3a:	4621      	mov	r1, r4
 800cc3c:	4628      	mov	r0, r5
 800cc3e:	f000 f83f 	bl	800ccc0 <__smakebuf_r>
 800cc42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc46:	f013 0201 	ands.w	r2, r3, #1
 800cc4a:	d00a      	beq.n	800cc62 <__swsetup_r+0x9a>
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	60a2      	str	r2, [r4, #8]
 800cc50:	6962      	ldr	r2, [r4, #20]
 800cc52:	4252      	negs	r2, r2
 800cc54:	61a2      	str	r2, [r4, #24]
 800cc56:	6922      	ldr	r2, [r4, #16]
 800cc58:	b942      	cbnz	r2, 800cc6c <__swsetup_r+0xa4>
 800cc5a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cc5e:	d1c5      	bne.n	800cbec <__swsetup_r+0x24>
 800cc60:	bd38      	pop	{r3, r4, r5, pc}
 800cc62:	0799      	lsls	r1, r3, #30
 800cc64:	bf58      	it	pl
 800cc66:	6962      	ldrpl	r2, [r4, #20]
 800cc68:	60a2      	str	r2, [r4, #8]
 800cc6a:	e7f4      	b.n	800cc56 <__swsetup_r+0x8e>
 800cc6c:	2000      	movs	r0, #0
 800cc6e:	e7f7      	b.n	800cc60 <__swsetup_r+0x98>
 800cc70:	20000018 	.word	0x20000018

0800cc74 <__swhatbuf_r>:
 800cc74:	b570      	push	{r4, r5, r6, lr}
 800cc76:	460c      	mov	r4, r1
 800cc78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc7c:	2900      	cmp	r1, #0
 800cc7e:	b096      	sub	sp, #88	@ 0x58
 800cc80:	4615      	mov	r5, r2
 800cc82:	461e      	mov	r6, r3
 800cc84:	da0d      	bge.n	800cca2 <__swhatbuf_r+0x2e>
 800cc86:	89a3      	ldrh	r3, [r4, #12]
 800cc88:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cc8c:	f04f 0100 	mov.w	r1, #0
 800cc90:	bf14      	ite	ne
 800cc92:	2340      	movne	r3, #64	@ 0x40
 800cc94:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cc98:	2000      	movs	r0, #0
 800cc9a:	6031      	str	r1, [r6, #0]
 800cc9c:	602b      	str	r3, [r5, #0]
 800cc9e:	b016      	add	sp, #88	@ 0x58
 800cca0:	bd70      	pop	{r4, r5, r6, pc}
 800cca2:	466a      	mov	r2, sp
 800cca4:	f000 f872 	bl	800cd8c <_fstat_r>
 800cca8:	2800      	cmp	r0, #0
 800ccaa:	dbec      	blt.n	800cc86 <__swhatbuf_r+0x12>
 800ccac:	9901      	ldr	r1, [sp, #4]
 800ccae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ccb2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ccb6:	4259      	negs	r1, r3
 800ccb8:	4159      	adcs	r1, r3
 800ccba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ccbe:	e7eb      	b.n	800cc98 <__swhatbuf_r+0x24>

0800ccc0 <__smakebuf_r>:
 800ccc0:	898b      	ldrh	r3, [r1, #12]
 800ccc2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ccc4:	079d      	lsls	r5, r3, #30
 800ccc6:	4606      	mov	r6, r0
 800ccc8:	460c      	mov	r4, r1
 800ccca:	d507      	bpl.n	800ccdc <__smakebuf_r+0x1c>
 800cccc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ccd0:	6023      	str	r3, [r4, #0]
 800ccd2:	6123      	str	r3, [r4, #16]
 800ccd4:	2301      	movs	r3, #1
 800ccd6:	6163      	str	r3, [r4, #20]
 800ccd8:	b003      	add	sp, #12
 800ccda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccdc:	ab01      	add	r3, sp, #4
 800ccde:	466a      	mov	r2, sp
 800cce0:	f7ff ffc8 	bl	800cc74 <__swhatbuf_r>
 800cce4:	9f00      	ldr	r7, [sp, #0]
 800cce6:	4605      	mov	r5, r0
 800cce8:	4639      	mov	r1, r7
 800ccea:	4630      	mov	r0, r6
 800ccec:	f7ff f9f0 	bl	800c0d0 <_malloc_r>
 800ccf0:	b948      	cbnz	r0, 800cd06 <__smakebuf_r+0x46>
 800ccf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ccf6:	059a      	lsls	r2, r3, #22
 800ccf8:	d4ee      	bmi.n	800ccd8 <__smakebuf_r+0x18>
 800ccfa:	f023 0303 	bic.w	r3, r3, #3
 800ccfe:	f043 0302 	orr.w	r3, r3, #2
 800cd02:	81a3      	strh	r3, [r4, #12]
 800cd04:	e7e2      	b.n	800cccc <__smakebuf_r+0xc>
 800cd06:	89a3      	ldrh	r3, [r4, #12]
 800cd08:	6020      	str	r0, [r4, #0]
 800cd0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd0e:	81a3      	strh	r3, [r4, #12]
 800cd10:	9b01      	ldr	r3, [sp, #4]
 800cd12:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cd16:	b15b      	cbz	r3, 800cd30 <__smakebuf_r+0x70>
 800cd18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd1c:	4630      	mov	r0, r6
 800cd1e:	f000 f847 	bl	800cdb0 <_isatty_r>
 800cd22:	b128      	cbz	r0, 800cd30 <__smakebuf_r+0x70>
 800cd24:	89a3      	ldrh	r3, [r4, #12]
 800cd26:	f023 0303 	bic.w	r3, r3, #3
 800cd2a:	f043 0301 	orr.w	r3, r3, #1
 800cd2e:	81a3      	strh	r3, [r4, #12]
 800cd30:	89a3      	ldrh	r3, [r4, #12]
 800cd32:	431d      	orrs	r5, r3
 800cd34:	81a5      	strh	r5, [r4, #12]
 800cd36:	e7cf      	b.n	800ccd8 <__smakebuf_r+0x18>

0800cd38 <memmove>:
 800cd38:	4288      	cmp	r0, r1
 800cd3a:	b510      	push	{r4, lr}
 800cd3c:	eb01 0402 	add.w	r4, r1, r2
 800cd40:	d902      	bls.n	800cd48 <memmove+0x10>
 800cd42:	4284      	cmp	r4, r0
 800cd44:	4623      	mov	r3, r4
 800cd46:	d807      	bhi.n	800cd58 <memmove+0x20>
 800cd48:	1e43      	subs	r3, r0, #1
 800cd4a:	42a1      	cmp	r1, r4
 800cd4c:	d008      	beq.n	800cd60 <memmove+0x28>
 800cd4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cd52:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cd56:	e7f8      	b.n	800cd4a <memmove+0x12>
 800cd58:	4402      	add	r2, r0
 800cd5a:	4601      	mov	r1, r0
 800cd5c:	428a      	cmp	r2, r1
 800cd5e:	d100      	bne.n	800cd62 <memmove+0x2a>
 800cd60:	bd10      	pop	{r4, pc}
 800cd62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cd66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cd6a:	e7f7      	b.n	800cd5c <memmove+0x24>

0800cd6c <_close_r>:
 800cd6c:	b538      	push	{r3, r4, r5, lr}
 800cd6e:	4d06      	ldr	r5, [pc, #24]	@ (800cd88 <_close_r+0x1c>)
 800cd70:	2300      	movs	r3, #0
 800cd72:	4604      	mov	r4, r0
 800cd74:	4608      	mov	r0, r1
 800cd76:	602b      	str	r3, [r5, #0]
 800cd78:	f7f5 face 	bl	8002318 <_close>
 800cd7c:	1c43      	adds	r3, r0, #1
 800cd7e:	d102      	bne.n	800cd86 <_close_r+0x1a>
 800cd80:	682b      	ldr	r3, [r5, #0]
 800cd82:	b103      	cbz	r3, 800cd86 <_close_r+0x1a>
 800cd84:	6023      	str	r3, [r4, #0]
 800cd86:	bd38      	pop	{r3, r4, r5, pc}
 800cd88:	200036bc 	.word	0x200036bc

0800cd8c <_fstat_r>:
 800cd8c:	b538      	push	{r3, r4, r5, lr}
 800cd8e:	4d07      	ldr	r5, [pc, #28]	@ (800cdac <_fstat_r+0x20>)
 800cd90:	2300      	movs	r3, #0
 800cd92:	4604      	mov	r4, r0
 800cd94:	4608      	mov	r0, r1
 800cd96:	4611      	mov	r1, r2
 800cd98:	602b      	str	r3, [r5, #0]
 800cd9a:	f7f5 fac9 	bl	8002330 <_fstat>
 800cd9e:	1c43      	adds	r3, r0, #1
 800cda0:	d102      	bne.n	800cda8 <_fstat_r+0x1c>
 800cda2:	682b      	ldr	r3, [r5, #0]
 800cda4:	b103      	cbz	r3, 800cda8 <_fstat_r+0x1c>
 800cda6:	6023      	str	r3, [r4, #0]
 800cda8:	bd38      	pop	{r3, r4, r5, pc}
 800cdaa:	bf00      	nop
 800cdac:	200036bc 	.word	0x200036bc

0800cdb0 <_isatty_r>:
 800cdb0:	b538      	push	{r3, r4, r5, lr}
 800cdb2:	4d06      	ldr	r5, [pc, #24]	@ (800cdcc <_isatty_r+0x1c>)
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	4604      	mov	r4, r0
 800cdb8:	4608      	mov	r0, r1
 800cdba:	602b      	str	r3, [r5, #0]
 800cdbc:	f7f5 fac8 	bl	8002350 <_isatty>
 800cdc0:	1c43      	adds	r3, r0, #1
 800cdc2:	d102      	bne.n	800cdca <_isatty_r+0x1a>
 800cdc4:	682b      	ldr	r3, [r5, #0]
 800cdc6:	b103      	cbz	r3, 800cdca <_isatty_r+0x1a>
 800cdc8:	6023      	str	r3, [r4, #0]
 800cdca:	bd38      	pop	{r3, r4, r5, pc}
 800cdcc:	200036bc 	.word	0x200036bc

0800cdd0 <_lseek_r>:
 800cdd0:	b538      	push	{r3, r4, r5, lr}
 800cdd2:	4d07      	ldr	r5, [pc, #28]	@ (800cdf0 <_lseek_r+0x20>)
 800cdd4:	4604      	mov	r4, r0
 800cdd6:	4608      	mov	r0, r1
 800cdd8:	4611      	mov	r1, r2
 800cdda:	2200      	movs	r2, #0
 800cddc:	602a      	str	r2, [r5, #0]
 800cdde:	461a      	mov	r2, r3
 800cde0:	f7f5 fac1 	bl	8002366 <_lseek>
 800cde4:	1c43      	adds	r3, r0, #1
 800cde6:	d102      	bne.n	800cdee <_lseek_r+0x1e>
 800cde8:	682b      	ldr	r3, [r5, #0]
 800cdea:	b103      	cbz	r3, 800cdee <_lseek_r+0x1e>
 800cdec:	6023      	str	r3, [r4, #0]
 800cdee:	bd38      	pop	{r3, r4, r5, pc}
 800cdf0:	200036bc 	.word	0x200036bc

0800cdf4 <_read_r>:
 800cdf4:	b538      	push	{r3, r4, r5, lr}
 800cdf6:	4d07      	ldr	r5, [pc, #28]	@ (800ce14 <_read_r+0x20>)
 800cdf8:	4604      	mov	r4, r0
 800cdfa:	4608      	mov	r0, r1
 800cdfc:	4611      	mov	r1, r2
 800cdfe:	2200      	movs	r2, #0
 800ce00:	602a      	str	r2, [r5, #0]
 800ce02:	461a      	mov	r2, r3
 800ce04:	f7f5 fa6b 	bl	80022de <_read>
 800ce08:	1c43      	adds	r3, r0, #1
 800ce0a:	d102      	bne.n	800ce12 <_read_r+0x1e>
 800ce0c:	682b      	ldr	r3, [r5, #0]
 800ce0e:	b103      	cbz	r3, 800ce12 <_read_r+0x1e>
 800ce10:	6023      	str	r3, [r4, #0]
 800ce12:	bd38      	pop	{r3, r4, r5, pc}
 800ce14:	200036bc 	.word	0x200036bc

0800ce18 <_sbrk_r>:
 800ce18:	b538      	push	{r3, r4, r5, lr}
 800ce1a:	4d06      	ldr	r5, [pc, #24]	@ (800ce34 <_sbrk_r+0x1c>)
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	4604      	mov	r4, r0
 800ce20:	4608      	mov	r0, r1
 800ce22:	602b      	str	r3, [r5, #0]
 800ce24:	f7f5 faac 	bl	8002380 <_sbrk>
 800ce28:	1c43      	adds	r3, r0, #1
 800ce2a:	d102      	bne.n	800ce32 <_sbrk_r+0x1a>
 800ce2c:	682b      	ldr	r3, [r5, #0]
 800ce2e:	b103      	cbz	r3, 800ce32 <_sbrk_r+0x1a>
 800ce30:	6023      	str	r3, [r4, #0]
 800ce32:	bd38      	pop	{r3, r4, r5, pc}
 800ce34:	200036bc 	.word	0x200036bc

0800ce38 <_write_r>:
 800ce38:	b538      	push	{r3, r4, r5, lr}
 800ce3a:	4d07      	ldr	r5, [pc, #28]	@ (800ce58 <_write_r+0x20>)
 800ce3c:	4604      	mov	r4, r0
 800ce3e:	4608      	mov	r0, r1
 800ce40:	4611      	mov	r1, r2
 800ce42:	2200      	movs	r2, #0
 800ce44:	602a      	str	r2, [r5, #0]
 800ce46:	461a      	mov	r2, r3
 800ce48:	f7f4 fb7e 	bl	8001548 <_write>
 800ce4c:	1c43      	adds	r3, r0, #1
 800ce4e:	d102      	bne.n	800ce56 <_write_r+0x1e>
 800ce50:	682b      	ldr	r3, [r5, #0]
 800ce52:	b103      	cbz	r3, 800ce56 <_write_r+0x1e>
 800ce54:	6023      	str	r3, [r4, #0]
 800ce56:	bd38      	pop	{r3, r4, r5, pc}
 800ce58:	200036bc 	.word	0x200036bc

0800ce5c <abort>:
 800ce5c:	b508      	push	{r3, lr}
 800ce5e:	2006      	movs	r0, #6
 800ce60:	f000 f8b2 	bl	800cfc8 <raise>
 800ce64:	2001      	movs	r0, #1
 800ce66:	f7f5 fa2f 	bl	80022c8 <_exit>

0800ce6a <_calloc_r>:
 800ce6a:	b570      	push	{r4, r5, r6, lr}
 800ce6c:	fba1 5402 	umull	r5, r4, r1, r2
 800ce70:	b93c      	cbnz	r4, 800ce82 <_calloc_r+0x18>
 800ce72:	4629      	mov	r1, r5
 800ce74:	f7ff f92c 	bl	800c0d0 <_malloc_r>
 800ce78:	4606      	mov	r6, r0
 800ce7a:	b928      	cbnz	r0, 800ce88 <_calloc_r+0x1e>
 800ce7c:	2600      	movs	r6, #0
 800ce7e:	4630      	mov	r0, r6
 800ce80:	bd70      	pop	{r4, r5, r6, pc}
 800ce82:	220c      	movs	r2, #12
 800ce84:	6002      	str	r2, [r0, #0]
 800ce86:	e7f9      	b.n	800ce7c <_calloc_r+0x12>
 800ce88:	462a      	mov	r2, r5
 800ce8a:	4621      	mov	r1, r4
 800ce8c:	f7fd ffaa 	bl	800ade4 <memset>
 800ce90:	e7f5      	b.n	800ce7e <_calloc_r+0x14>
	...

0800ce94 <_free_r>:
 800ce94:	b538      	push	{r3, r4, r5, lr}
 800ce96:	4605      	mov	r5, r0
 800ce98:	2900      	cmp	r1, #0
 800ce9a:	d041      	beq.n	800cf20 <_free_r+0x8c>
 800ce9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cea0:	1f0c      	subs	r4, r1, #4
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	bfb8      	it	lt
 800cea6:	18e4      	addlt	r4, r4, r3
 800cea8:	f7ff fa3e 	bl	800c328 <__malloc_lock>
 800ceac:	4a1d      	ldr	r2, [pc, #116]	@ (800cf24 <_free_r+0x90>)
 800ceae:	6813      	ldr	r3, [r2, #0]
 800ceb0:	b933      	cbnz	r3, 800cec0 <_free_r+0x2c>
 800ceb2:	6063      	str	r3, [r4, #4]
 800ceb4:	6014      	str	r4, [r2, #0]
 800ceb6:	4628      	mov	r0, r5
 800ceb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cebc:	f7ff ba3a 	b.w	800c334 <__malloc_unlock>
 800cec0:	42a3      	cmp	r3, r4
 800cec2:	d908      	bls.n	800ced6 <_free_r+0x42>
 800cec4:	6820      	ldr	r0, [r4, #0]
 800cec6:	1821      	adds	r1, r4, r0
 800cec8:	428b      	cmp	r3, r1
 800ceca:	bf01      	itttt	eq
 800cecc:	6819      	ldreq	r1, [r3, #0]
 800cece:	685b      	ldreq	r3, [r3, #4]
 800ced0:	1809      	addeq	r1, r1, r0
 800ced2:	6021      	streq	r1, [r4, #0]
 800ced4:	e7ed      	b.n	800ceb2 <_free_r+0x1e>
 800ced6:	461a      	mov	r2, r3
 800ced8:	685b      	ldr	r3, [r3, #4]
 800ceda:	b10b      	cbz	r3, 800cee0 <_free_r+0x4c>
 800cedc:	42a3      	cmp	r3, r4
 800cede:	d9fa      	bls.n	800ced6 <_free_r+0x42>
 800cee0:	6811      	ldr	r1, [r2, #0]
 800cee2:	1850      	adds	r0, r2, r1
 800cee4:	42a0      	cmp	r0, r4
 800cee6:	d10b      	bne.n	800cf00 <_free_r+0x6c>
 800cee8:	6820      	ldr	r0, [r4, #0]
 800ceea:	4401      	add	r1, r0
 800ceec:	1850      	adds	r0, r2, r1
 800ceee:	4283      	cmp	r3, r0
 800cef0:	6011      	str	r1, [r2, #0]
 800cef2:	d1e0      	bne.n	800ceb6 <_free_r+0x22>
 800cef4:	6818      	ldr	r0, [r3, #0]
 800cef6:	685b      	ldr	r3, [r3, #4]
 800cef8:	6053      	str	r3, [r2, #4]
 800cefa:	4408      	add	r0, r1
 800cefc:	6010      	str	r0, [r2, #0]
 800cefe:	e7da      	b.n	800ceb6 <_free_r+0x22>
 800cf00:	d902      	bls.n	800cf08 <_free_r+0x74>
 800cf02:	230c      	movs	r3, #12
 800cf04:	602b      	str	r3, [r5, #0]
 800cf06:	e7d6      	b.n	800ceb6 <_free_r+0x22>
 800cf08:	6820      	ldr	r0, [r4, #0]
 800cf0a:	1821      	adds	r1, r4, r0
 800cf0c:	428b      	cmp	r3, r1
 800cf0e:	bf04      	itt	eq
 800cf10:	6819      	ldreq	r1, [r3, #0]
 800cf12:	685b      	ldreq	r3, [r3, #4]
 800cf14:	6063      	str	r3, [r4, #4]
 800cf16:	bf04      	itt	eq
 800cf18:	1809      	addeq	r1, r1, r0
 800cf1a:	6021      	streq	r1, [r4, #0]
 800cf1c:	6054      	str	r4, [r2, #4]
 800cf1e:	e7ca      	b.n	800ceb6 <_free_r+0x22>
 800cf20:	bd38      	pop	{r3, r4, r5, pc}
 800cf22:	bf00      	nop
 800cf24:	200036b8 	.word	0x200036b8

0800cf28 <__ascii_mbtowc>:
 800cf28:	b082      	sub	sp, #8
 800cf2a:	b901      	cbnz	r1, 800cf2e <__ascii_mbtowc+0x6>
 800cf2c:	a901      	add	r1, sp, #4
 800cf2e:	b142      	cbz	r2, 800cf42 <__ascii_mbtowc+0x1a>
 800cf30:	b14b      	cbz	r3, 800cf46 <__ascii_mbtowc+0x1e>
 800cf32:	7813      	ldrb	r3, [r2, #0]
 800cf34:	600b      	str	r3, [r1, #0]
 800cf36:	7812      	ldrb	r2, [r2, #0]
 800cf38:	1e10      	subs	r0, r2, #0
 800cf3a:	bf18      	it	ne
 800cf3c:	2001      	movne	r0, #1
 800cf3e:	b002      	add	sp, #8
 800cf40:	4770      	bx	lr
 800cf42:	4610      	mov	r0, r2
 800cf44:	e7fb      	b.n	800cf3e <__ascii_mbtowc+0x16>
 800cf46:	f06f 0001 	mvn.w	r0, #1
 800cf4a:	e7f8      	b.n	800cf3e <__ascii_mbtowc+0x16>

0800cf4c <_malloc_usable_size_r>:
 800cf4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf50:	1f18      	subs	r0, r3, #4
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	bfbc      	itt	lt
 800cf56:	580b      	ldrlt	r3, [r1, r0]
 800cf58:	18c0      	addlt	r0, r0, r3
 800cf5a:	4770      	bx	lr

0800cf5c <__ascii_wctomb>:
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	4608      	mov	r0, r1
 800cf60:	b141      	cbz	r1, 800cf74 <__ascii_wctomb+0x18>
 800cf62:	2aff      	cmp	r2, #255	@ 0xff
 800cf64:	d904      	bls.n	800cf70 <__ascii_wctomb+0x14>
 800cf66:	228a      	movs	r2, #138	@ 0x8a
 800cf68:	601a      	str	r2, [r3, #0]
 800cf6a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cf6e:	4770      	bx	lr
 800cf70:	700a      	strb	r2, [r1, #0]
 800cf72:	2001      	movs	r0, #1
 800cf74:	4770      	bx	lr

0800cf76 <_raise_r>:
 800cf76:	291f      	cmp	r1, #31
 800cf78:	b538      	push	{r3, r4, r5, lr}
 800cf7a:	4605      	mov	r5, r0
 800cf7c:	460c      	mov	r4, r1
 800cf7e:	d904      	bls.n	800cf8a <_raise_r+0x14>
 800cf80:	2316      	movs	r3, #22
 800cf82:	6003      	str	r3, [r0, #0]
 800cf84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cf88:	bd38      	pop	{r3, r4, r5, pc}
 800cf8a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cf8c:	b112      	cbz	r2, 800cf94 <_raise_r+0x1e>
 800cf8e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cf92:	b94b      	cbnz	r3, 800cfa8 <_raise_r+0x32>
 800cf94:	4628      	mov	r0, r5
 800cf96:	f000 f831 	bl	800cffc <_getpid_r>
 800cf9a:	4622      	mov	r2, r4
 800cf9c:	4601      	mov	r1, r0
 800cf9e:	4628      	mov	r0, r5
 800cfa0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cfa4:	f000 b818 	b.w	800cfd8 <_kill_r>
 800cfa8:	2b01      	cmp	r3, #1
 800cfaa:	d00a      	beq.n	800cfc2 <_raise_r+0x4c>
 800cfac:	1c59      	adds	r1, r3, #1
 800cfae:	d103      	bne.n	800cfb8 <_raise_r+0x42>
 800cfb0:	2316      	movs	r3, #22
 800cfb2:	6003      	str	r3, [r0, #0]
 800cfb4:	2001      	movs	r0, #1
 800cfb6:	e7e7      	b.n	800cf88 <_raise_r+0x12>
 800cfb8:	2100      	movs	r1, #0
 800cfba:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cfbe:	4620      	mov	r0, r4
 800cfc0:	4798      	blx	r3
 800cfc2:	2000      	movs	r0, #0
 800cfc4:	e7e0      	b.n	800cf88 <_raise_r+0x12>
	...

0800cfc8 <raise>:
 800cfc8:	4b02      	ldr	r3, [pc, #8]	@ (800cfd4 <raise+0xc>)
 800cfca:	4601      	mov	r1, r0
 800cfcc:	6818      	ldr	r0, [r3, #0]
 800cfce:	f7ff bfd2 	b.w	800cf76 <_raise_r>
 800cfd2:	bf00      	nop
 800cfd4:	20000018 	.word	0x20000018

0800cfd8 <_kill_r>:
 800cfd8:	b538      	push	{r3, r4, r5, lr}
 800cfda:	4d07      	ldr	r5, [pc, #28]	@ (800cff8 <_kill_r+0x20>)
 800cfdc:	2300      	movs	r3, #0
 800cfde:	4604      	mov	r4, r0
 800cfe0:	4608      	mov	r0, r1
 800cfe2:	4611      	mov	r1, r2
 800cfe4:	602b      	str	r3, [r5, #0]
 800cfe6:	f7f5 f95f 	bl	80022a8 <_kill>
 800cfea:	1c43      	adds	r3, r0, #1
 800cfec:	d102      	bne.n	800cff4 <_kill_r+0x1c>
 800cfee:	682b      	ldr	r3, [r5, #0]
 800cff0:	b103      	cbz	r3, 800cff4 <_kill_r+0x1c>
 800cff2:	6023      	str	r3, [r4, #0]
 800cff4:	bd38      	pop	{r3, r4, r5, pc}
 800cff6:	bf00      	nop
 800cff8:	200036bc 	.word	0x200036bc

0800cffc <_getpid_r>:
 800cffc:	f7f5 b94c 	b.w	8002298 <_getpid>

0800d000 <_init>:
 800d000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d002:	bf00      	nop
 800d004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d006:	bc08      	pop	{r3}
 800d008:	469e      	mov	lr, r3
 800d00a:	4770      	bx	lr

0800d00c <_fini>:
 800d00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d00e:	bf00      	nop
 800d010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d012:	bc08      	pop	{r3}
 800d014:	469e      	mov	lr, r3
 800d016:	4770      	bx	lr
