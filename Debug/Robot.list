
Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c570  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00016048  0800c700  0800c700  0000d700  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022748  08022748  000241d8  2**0
                  CONTENTS
  4 .ARM          00000008  08022748  08022748  00023748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022750  08022750  000241d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08022750  08022750  00023750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08022754  08022754  00023754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08022758  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001424  200001d8  08022930  000241d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015fc  08022930  000245fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000241d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001882a  00000000  00000000  00024208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000357d  00000000  00000000  0003ca32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001590  00000000  00000000  0003ffb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010d3  00000000  00000000  00041540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029706  00000000  00000000  00042613  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b151  00000000  00000000  0006bd19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f97a8  00000000  00000000  00086e6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00180612  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c7c  00000000  00000000  00180658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001872d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c6e8 	.word	0x0800c6e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800c6e8 	.word	0x0800c6e8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08a      	sub	sp, #40	@ 0x28
 8000e9c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9e:	f107 0314 	add.w	r3, r7, #20
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
 8000eaa:	60da      	str	r2, [r3, #12]
 8000eac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eae:	4b3c      	ldr	r3, [pc, #240]	@ (8000fa0 <MX_GPIO_Init+0x108>)
 8000eb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb2:	4a3b      	ldr	r2, [pc, #236]	@ (8000fa0 <MX_GPIO_Init+0x108>)
 8000eb4:	f043 0304 	orr.w	r3, r3, #4
 8000eb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eba:	4b39      	ldr	r3, [pc, #228]	@ (8000fa0 <MX_GPIO_Init+0x108>)
 8000ebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ebe:	f003 0304 	and.w	r3, r3, #4
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ec6:	4b36      	ldr	r3, [pc, #216]	@ (8000fa0 <MX_GPIO_Init+0x108>)
 8000ec8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eca:	4a35      	ldr	r2, [pc, #212]	@ (8000fa0 <MX_GPIO_Init+0x108>)
 8000ecc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ed0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ed2:	4b33      	ldr	r3, [pc, #204]	@ (8000fa0 <MX_GPIO_Init+0x108>)
 8000ed4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ede:	4b30      	ldr	r3, [pc, #192]	@ (8000fa0 <MX_GPIO_Init+0x108>)
 8000ee0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ee2:	4a2f      	ldr	r2, [pc, #188]	@ (8000fa0 <MX_GPIO_Init+0x108>)
 8000ee4:	f043 0301 	orr.w	r3, r3, #1
 8000ee8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eea:	4b2d      	ldr	r3, [pc, #180]	@ (8000fa0 <MX_GPIO_Init+0x108>)
 8000eec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	60bb      	str	r3, [r7, #8]
 8000ef4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef6:	4b2a      	ldr	r3, [pc, #168]	@ (8000fa0 <MX_GPIO_Init+0x108>)
 8000ef8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000efa:	4a29      	ldr	r2, [pc, #164]	@ (8000fa0 <MX_GPIO_Init+0x108>)
 8000efc:	f043 0302 	orr.w	r3, r3, #2
 8000f00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f02:	4b27      	ldr	r3, [pc, #156]	@ (8000fa0 <MX_GPIO_Init+0x108>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f06:	f003 0302 	and.w	r3, r3, #2
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f44f 715a 	mov.w	r1, #872	@ 0x368
 8000f14:	4823      	ldr	r0, [pc, #140]	@ (8000fa4 <MX_GPIO_Init+0x10c>)
 8000f16:	f001 fe09 	bl	8002b2c <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2120      	movs	r1, #32
 8000f1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f22:	f001 fe03 	bl	8002b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f26:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f2c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000f30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f36:	f107 0314 	add.w	r3, r7, #20
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4819      	ldr	r0, [pc, #100]	@ (8000fa4 <MX_GPIO_Init+0x10c>)
 8000f3e:	f001 fc4b 	bl	80027d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC3 PC5 PC6 PC8
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8
 8000f42:	f44f 735a 	mov.w	r3, #872	@ 0x368
 8000f46:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f50:	2300      	movs	r3, #0
 8000f52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4812      	ldr	r0, [pc, #72]	@ (8000fa4 <MX_GPIO_Init+0x10c>)
 8000f5c:	f001 fc3c 	bl	80027d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f60:	2320      	movs	r3, #32
 8000f62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f64:	2301      	movs	r3, #1
 8000f66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	4619      	mov	r1, r3
 8000f76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f7a:	f001 fc2d 	bl	80027d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f7e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f8c:	f107 0314 	add.w	r3, r7, #20
 8000f90:	4619      	mov	r1, r3
 8000f92:	4805      	ldr	r0, [pc, #20]	@ (8000fa8 <MX_GPIO_Init+0x110>)
 8000f94:	f001 fc20 	bl	80027d8 <HAL_GPIO_Init>

}
 8000f98:	bf00      	nop
 8000f9a:	3728      	adds	r7, #40	@ 0x28
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	48000800 	.word	0x48000800
 8000fa8:	48000400 	.word	0x48000400

08000fac <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000fb0:	4b1b      	ldr	r3, [pc, #108]	@ (8001020 <MX_I2C3_Init+0x74>)
 8000fb2:	4a1c      	ldr	r2, [pc, #112]	@ (8001024 <MX_I2C3_Init+0x78>)
 8000fb4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00F12981;
 8000fb6:	4b1a      	ldr	r3, [pc, #104]	@ (8001020 <MX_I2C3_Init+0x74>)
 8000fb8:	4a1b      	ldr	r2, [pc, #108]	@ (8001028 <MX_I2C3_Init+0x7c>)
 8000fba:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000fbc:	4b18      	ldr	r3, [pc, #96]	@ (8001020 <MX_I2C3_Init+0x74>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fc2:	4b17      	ldr	r3, [pc, #92]	@ (8001020 <MX_I2C3_Init+0x74>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fc8:	4b15      	ldr	r3, [pc, #84]	@ (8001020 <MX_I2C3_Init+0x74>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000fce:	4b14      	ldr	r3, [pc, #80]	@ (8001020 <MX_I2C3_Init+0x74>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fd4:	4b12      	ldr	r3, [pc, #72]	@ (8001020 <MX_I2C3_Init+0x74>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fda:	4b11      	ldr	r3, [pc, #68]	@ (8001020 <MX_I2C3_Init+0x74>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fe0:	4b0f      	ldr	r3, [pc, #60]	@ (8001020 <MX_I2C3_Init+0x74>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000fe6:	480e      	ldr	r0, [pc, #56]	@ (8001020 <MX_I2C3_Init+0x74>)
 8000fe8:	f001 fdb8 	bl	8002b5c <HAL_I2C_Init>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000ff2:	f000 fca9 	bl	8001948 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	4809      	ldr	r0, [pc, #36]	@ (8001020 <MX_I2C3_Init+0x74>)
 8000ffa:	f002 fc27 	bl	800384c <HAL_I2CEx_ConfigAnalogFilter>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001004:	f000 fca0 	bl	8001948 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001008:	2100      	movs	r1, #0
 800100a:	4805      	ldr	r0, [pc, #20]	@ (8001020 <MX_I2C3_Init+0x74>)
 800100c:	f002 fc69 	bl	80038e2 <HAL_I2CEx_ConfigDigitalFilter>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001016:	f000 fc97 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	200001f4 	.word	0x200001f4
 8001024:	40005c00 	.word	0x40005c00
 8001028:	00f12981 	.word	0x00f12981

0800102c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b0ac      	sub	sp, #176	@ 0xb0
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001044:	f107 0314 	add.w	r3, r7, #20
 8001048:	2288      	movs	r2, #136	@ 0x88
 800104a:	2100      	movs	r1, #0
 800104c:	4618      	mov	r0, r3
 800104e:	f009 fa3f 	bl	800a4d0 <memset>
  if(i2cHandle->Instance==I2C3)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a21      	ldr	r2, [pc, #132]	@ (80010dc <HAL_I2C_MspInit+0xb0>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d13b      	bne.n	80010d4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800105c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001060:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001062:	2300      	movs	r3, #0
 8001064:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001066:	f107 0314 	add.w	r3, r7, #20
 800106a:	4618      	mov	r0, r3
 800106c:	f003 faea 	bl	8004644 <HAL_RCCEx_PeriphCLKConfig>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001076:	f000 fc67 	bl	8001948 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800107a:	4b19      	ldr	r3, [pc, #100]	@ (80010e0 <HAL_I2C_MspInit+0xb4>)
 800107c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800107e:	4a18      	ldr	r2, [pc, #96]	@ (80010e0 <HAL_I2C_MspInit+0xb4>)
 8001080:	f043 0304 	orr.w	r3, r3, #4
 8001084:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001086:	4b16      	ldr	r3, [pc, #88]	@ (80010e0 <HAL_I2C_MspInit+0xb4>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800108a:	f003 0304 	and.w	r3, r3, #4
 800108e:	613b      	str	r3, [r7, #16]
 8001090:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001092:	2303      	movs	r3, #3
 8001094:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001098:	2312      	movs	r3, #18
 800109a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a4:	2303      	movs	r3, #3
 80010a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80010aa:	2304      	movs	r3, #4
 80010ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010b0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010b4:	4619      	mov	r1, r3
 80010b6:	480b      	ldr	r0, [pc, #44]	@ (80010e4 <HAL_I2C_MspInit+0xb8>)
 80010b8:	f001 fb8e 	bl	80027d8 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80010bc:	4b08      	ldr	r3, [pc, #32]	@ (80010e0 <HAL_I2C_MspInit+0xb4>)
 80010be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010c0:	4a07      	ldr	r2, [pc, #28]	@ (80010e0 <HAL_I2C_MspInit+0xb4>)
 80010c2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80010c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80010c8:	4b05      	ldr	r3, [pc, #20]	@ (80010e0 <HAL_I2C_MspInit+0xb4>)
 80010ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80010d4:	bf00      	nop
 80010d6:	37b0      	adds	r7, #176	@ 0xb0
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40005c00 	.word	0x40005c00
 80010e0:	40021000 	.word	0x40021000
 80010e4:	48000800 	.word	0x48000800

080010e8 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Funkcja do obsługi printf przez UART
int _write(int file, char* ptr, int len){
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	b29a      	uxth	r2, r3
 80010f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010fc:	68b9      	ldr	r1, [r7, #8]
 80010fe:	4804      	ldr	r0, [pc, #16]	@ (8001110 <_write+0x28>)
 8001100:	f005 fa0e 	bl	8006520 <HAL_UART_Transmit>
    return len;
 8001104:	687b      	ldr	r3, [r7, #4]
}
 8001106:	4618      	mov	r0, r3
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20001424 	.word	0x20001424

08001114 <HAL_TIM_PeriodElapsedCallback>:

// Funkcja wywoływana przy przepełnieniu timera
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
    if (htim == &htim6) {
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4a11      	ldr	r2, [pc, #68]	@ (8001164 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d119      	bne.n	8001158 <HAL_TIM_PeriodElapsedCallback+0x44>

        count = __HAL_TIM_GET_COUNTER(&htim2);
 8001124:	4b10      	ldr	r3, [pc, #64]	@ (8001168 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800112a:	4a10      	ldr	r2, [pc, #64]	@ (800116c <HAL_TIM_PeriodElapsedCallback+0x58>)
 800112c:	6013      	str	r3, [r2, #0]
        count1 = __HAL_TIM_GET_COUNTER(&htim3);
 800112e:	4b10      	ldr	r3, [pc, #64]	@ (8001170 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001134:	4a0f      	ldr	r2, [pc, #60]	@ (8001174 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001136:	6013      	str	r3, [r2, #0]

        htim2.Instance->CNT = 0;
 8001138:	4b0b      	ldr	r3, [pc, #44]	@ (8001168 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2200      	movs	r2, #0
 800113e:	625a      	str	r2, [r3, #36]	@ 0x24
        htim3.Instance->CNT = 0;
 8001140:	4b0b      	ldr	r3, [pc, #44]	@ (8001170 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2200      	movs	r2, #0
 8001146:	625a      	str	r2, [r3, #36]	@ 0x24

        // Obliczanie prędkości na podstawie enkoderów
        speed_L = count;   // Dostosuj zgodnie z rozdzielczością enkodera
 8001148:	4b08      	ldr	r3, [pc, #32]	@ (800116c <HAL_TIM_PeriodElapsedCallback+0x58>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a0a      	ldr	r2, [pc, #40]	@ (8001178 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800114e:	6013      	str	r3, [r2, #0]
        speed_R = count1;
 8001150:	4b08      	ldr	r3, [pc, #32]	@ (8001174 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a09      	ldr	r2, [pc, #36]	@ (800117c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001156:	6013      	str	r3, [r2, #0]

        // Tutaj możesz dodać dodatkowe obliczenia prędkości
    }
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	200013d8 	.word	0x200013d8
 8001168:	20001340 	.word	0x20001340
 800116c:	20001250 	.word	0x20001250
 8001170:	2000138c 	.word	0x2000138c
 8001174:	20001254 	.word	0x20001254
 8001178:	20001248 	.word	0x20001248
 800117c:	2000124c 	.word	0x2000124c

08001180 <ProcessReceivedData>:

// Funkcja do przetwarzania danych odebranych przez UART
void ProcessReceivedData(uint8_t* data, uint16_t length)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	460b      	mov	r3, r1
 800118a:	807b      	strh	r3, [r7, #2]
    if (length >= sizeof(float) * 2) {
 800118c:	887b      	ldrh	r3, [r7, #2]
 800118e:	2b07      	cmp	r3, #7
 8001190:	d910      	bls.n	80011b4 <ProcessReceivedData+0x34>
        float targetX, targetY;
        memcpy(&targetX, data, sizeof(float));
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	60fb      	str	r3, [r7, #12]
        memcpy(&targetY, data + sizeof(float), sizeof(float));
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3304      	adds	r3, #4
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	60bb      	str	r3, [r7, #8]
        SetTarget(targetX, targetY);
 80011a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80011a4:	ed97 7a02 	vldr	s14, [r7, #8]
 80011a8:	eef0 0a47 	vmov.f32	s1, s14
 80011ac:	eeb0 0a67 	vmov.f32	s0, s15
 80011b0:	f000 f864 	bl	800127c <SetTarget>
    }
}
 80011b4:	bf00      	nop
 80011b6:	3710      	adds	r7, #16
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <HAL_UART_RxCpltCallback>:

// Callback dla przerwania UART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a07      	ldr	r2, [pc, #28]	@ (80011e8 <HAL_UART_RxCpltCallback+0x2c>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d108      	bne.n	80011e0 <HAL_UART_RxCpltCallback+0x24>
        ProcessReceivedData(uartBuffer, UART_BUFFER_SIZE);
 80011ce:	2140      	movs	r1, #64	@ 0x40
 80011d0:	4806      	ldr	r0, [pc, #24]	@ (80011ec <HAL_UART_RxCpltCallback+0x30>)
 80011d2:	f7ff ffd5 	bl	8001180 <ProcessReceivedData>
        HAL_UART_Receive_IT(&huart2, uartBuffer, UART_BUFFER_SIZE);
 80011d6:	2240      	movs	r2, #64	@ 0x40
 80011d8:	4904      	ldr	r1, [pc, #16]	@ (80011ec <HAL_UART_RxCpltCallback+0x30>)
 80011da:	4805      	ldr	r0, [pc, #20]	@ (80011f0 <HAL_UART_RxCpltCallback+0x34>)
 80011dc:	f005 fa2a 	bl	8006634 <HAL_UART_Receive_IT>
    }
}
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40004400 	.word	0x40004400
 80011ec:	20001258 	.word	0x20001258
 80011f0:	20001424 	.word	0x20001424

080011f4 <PID_Init>:

// Inicjalizacja regulatora PID
void PID_Init(PID_TypeDef *pid, float Kp, float Ki, float Kd, float setpoint) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6178      	str	r0, [r7, #20]
 80011fc:	ed87 0a04 	vstr	s0, [r7, #16]
 8001200:	edc7 0a03 	vstr	s1, [r7, #12]
 8001204:	ed87 1a02 	vstr	s2, [r7, #8]
 8001208:	edc7 1a01 	vstr	s3, [r7, #4]
    pid->Kp = Kp;
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	601a      	str	r2, [r3, #0]
    pid->Ki = Ki;
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	68fa      	ldr	r2, [r7, #12]
 8001216:	605a      	str	r2, [r3, #4]
    pid->Kd = Kd;
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	68ba      	ldr	r2, [r7, #8]
 800121c:	609a      	str	r2, [r3, #8]
    pid->setpoint = setpoint;
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	60da      	str	r2, [r3, #12]
    pid->prev_error = 0;
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	f04f 0200 	mov.w	r2, #0
 800122a:	611a      	str	r2, [r3, #16]
    pid->integral = 0;
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	f04f 0200 	mov.w	r2, #0
 8001232:	615a      	str	r2, [r3, #20]
    pid->output = 0;
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	f04f 0200 	mov.w	r2, #0
 800123a:	619a      	str	r2, [r3, #24]
    pid->prev_time = HAL_GetTick();
 800123c:	f001 f90c 	bl	8002458 <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	61da      	str	r2, [r3, #28]
}
 8001246:	bf00      	nop
 8001248:	3718      	adds	r7, #24
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <Odometry_Init>:
void SetSpeed(PID_TypeDef *pid, float setpoint) {
    pid->setpoint = setpoint;
}

// Inicjalizacja odometrii
void Odometry_Init(Odometry_TypeDef *odom) {
 800124e:	b480      	push	{r7}
 8001250:	b083      	sub	sp, #12
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
    odom->x = 0.0f;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f04f 0200 	mov.w	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
    odom->y = 0.0f;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f04f 0200 	mov.w	r2, #0
 8001264:	605a      	str	r2, [r3, #4]
    odom->theta = 0.0f;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f04f 0200 	mov.w	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
	...

0800127c <SetTarget>:
    odom->x += v * cos(odom->theta) * dt;
    odom->y += v * sin(odom->theta) * dt;
}

// Ustawienie nowego celu
void SetTarget(float x, float y) {
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	ed87 0a01 	vstr	s0, [r7, #4]
 8001286:	edc7 0a00 	vstr	s1, [r7]
    target.x = x;
 800128a:	4a06      	ldr	r2, [pc, #24]	@ (80012a4 <SetTarget+0x28>)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6013      	str	r3, [r2, #0]
    target.y = y;
 8001290:	4a04      	ldr	r2, [pc, #16]	@ (80012a4 <SetTarget+0x28>)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	6053      	str	r3, [r2, #4]
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	200012e8 	.word	0x200012e8

080012a8 <SetMotorDirection>:
    *speed_L_target = linear_speed - (WHEEL_BASE / 2) * angular_speed;
    *speed_R_target = linear_speed + (WHEEL_BASE / 2) * angular_speed;
}

// Ustawienie kierunku obrotu silników
void SetMotorDirection(int direction_L, int direction_R) {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
    if (direction_L == 1) {
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d10b      	bne.n	80012d0 <SetMotorDirection+0x28>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80012b8:	2201      	movs	r2, #1
 80012ba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012be:	4819      	ldr	r0, [pc, #100]	@ (8001324 <SetMotorDirection+0x7c>)
 80012c0:	f001 fc34 	bl	8002b2c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 80012c4:	2200      	movs	r2, #0
 80012c6:	2120      	movs	r1, #32
 80012c8:	4816      	ldr	r0, [pc, #88]	@ (8001324 <SetMotorDirection+0x7c>)
 80012ca:	f001 fc2f 	bl	8002b2c <HAL_GPIO_WritePin>
 80012ce:	e00a      	b.n	80012e6 <SetMotorDirection+0x3e>
    } else {
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80012d0:	2200      	movs	r2, #0
 80012d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012d6:	4813      	ldr	r0, [pc, #76]	@ (8001324 <SetMotorDirection+0x7c>)
 80012d8:	f001 fc28 	bl	8002b2c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 80012dc:	2201      	movs	r2, #1
 80012de:	2120      	movs	r1, #32
 80012e0:	4810      	ldr	r0, [pc, #64]	@ (8001324 <SetMotorDirection+0x7c>)
 80012e2:	f001 fc23 	bl	8002b2c <HAL_GPIO_WritePin>
    }

    if (direction_R == 1) {
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d10b      	bne.n	8001304 <SetMotorDirection+0x5c>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80012ec:	2200      	movs	r2, #0
 80012ee:	2140      	movs	r1, #64	@ 0x40
 80012f0:	480c      	ldr	r0, [pc, #48]	@ (8001324 <SetMotorDirection+0x7c>)
 80012f2:	f001 fc1b 	bl	8002b2c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80012f6:	2201      	movs	r2, #1
 80012f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012fc:	4809      	ldr	r0, [pc, #36]	@ (8001324 <SetMotorDirection+0x7c>)
 80012fe:	f001 fc15 	bl	8002b2c <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
    }
}
 8001302:	e00a      	b.n	800131a <SetMotorDirection+0x72>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8001304:	2201      	movs	r2, #1
 8001306:	2140      	movs	r1, #64	@ 0x40
 8001308:	4806      	ldr	r0, [pc, #24]	@ (8001324 <SetMotorDirection+0x7c>)
 800130a:	f001 fc0f 	bl	8002b2c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800130e:	2200      	movs	r2, #0
 8001310:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001314:	4803      	ldr	r0, [pc, #12]	@ (8001324 <SetMotorDirection+0x7c>)
 8001316:	f001 fc09 	bl	8002b2c <HAL_GPIO_WritePin>
}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	48000800 	.word	0x48000800

08001328 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  // Inicjalizacja zmiennych, struktur, PID itd.
  Odometry_Init(&odom);
 800132e:	4875      	ldr	r0, [pc, #468]	@ (8001504 <main+0x1dc>)
 8001330:	f7ff ff8d 	bl	800124e <Odometry_Init>
  PID_Init(&pid_L, 6, 1.5, 0.1, 1);
 8001334:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 8001338:	ed9f 1a73 	vldr	s2, [pc, #460]	@ 8001508 <main+0x1e0>
 800133c:	eef7 0a08 	vmov.f32	s1, #120	@ 0x3fc00000  1.5
 8001340:	eeb1 0a08 	vmov.f32	s0, #24	@ 0x40c00000  6.0
 8001344:	4871      	ldr	r0, [pc, #452]	@ (800150c <main+0x1e4>)
 8001346:	f7ff ff55 	bl	80011f4 <PID_Init>
  PID_Init(&pid_R, 6, 1.5, 0.3, 1);
 800134a:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 800134e:	ed9f 1a70 	vldr	s2, [pc, #448]	@ 8001510 <main+0x1e8>
 8001352:	eef7 0a08 	vmov.f32	s1, #120	@ 0x3fc00000  1.5
 8001356:	eeb1 0a08 	vmov.f32	s0, #24	@ 0x40c00000  6.0
 800135a:	486e      	ldr	r0, [pc, #440]	@ (8001514 <main+0x1ec>)
 800135c:	f7ff ff4a 	bl	80011f4 <PID_Init>
  SetTarget(0.5f, 0);
 8001360:	eddf 0a6d 	vldr	s1, [pc, #436]	@ 8001518 <main+0x1f0>
 8001364:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8001368:	f7ff ff88 	bl	800127c <SetTarget>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800136c:	f001 f804 	bl	8002378 <HAL_Init>
  /* USER CODE BEGIN Init */
  // Twoja inicjalizacja
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001370:	f000 f8fe 	bl	8001570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  // Dodatkowa konfiguracja systemu, jeśli potrzebna
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001374:	f7ff fd90 	bl	8000e98 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001378:	f000 ff40 	bl	80021fc <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800137c:	f000 fcd0 	bl	8001d20 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001380:	f000 fd6a 	bl	8001e58 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001384:	f000 fdbc 	bl	8001f00 <MX_TIM3_Init>
  MX_TIM6_Init();
 8001388:	f000 fe10 	bl	8001fac <MX_TIM6_Init>
  MX_I2C3_Init();
 800138c:	f7ff fe0e 	bl	8000fac <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart2, uartBuffer, UART_BUFFER_SIZE);
 8001390:	2240      	movs	r2, #64	@ 0x40
 8001392:	4962      	ldr	r1, [pc, #392]	@ (800151c <main+0x1f4>)
 8001394:	4862      	ldr	r0, [pc, #392]	@ (8001520 <main+0x1f8>)
 8001396:	f005 f94d 	bl	8006634 <HAL_UART_Receive_IT>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800139a:	2100      	movs	r1, #0
 800139c:	4861      	ldr	r0, [pc, #388]	@ (8001524 <main+0x1fc>)
 800139e:	f003 ff2d 	bl	80051fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80013a2:	2104      	movs	r1, #4
 80013a4:	485f      	ldr	r0, [pc, #380]	@ (8001524 <main+0x1fc>)
 80013a6:	f003 ff29 	bl	80051fc <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80013aa:	213c      	movs	r1, #60	@ 0x3c
 80013ac:	485e      	ldr	r0, [pc, #376]	@ (8001528 <main+0x200>)
 80013ae:	f004 f8d1 	bl	8005554 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80013b2:	213c      	movs	r1, #60	@ 0x3c
 80013b4:	485d      	ldr	r0, [pc, #372]	@ (800152c <main+0x204>)
 80013b6:	f004 f8cd 	bl	8005554 <HAL_TIM_Encoder_Start>

  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 200);
 80013ba:	4b5a      	ldr	r3, [pc, #360]	@ (8001524 <main+0x1fc>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	22c8      	movs	r2, #200	@ 0xc8
 80013c0:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 200);
 80013c2:	4b58      	ldr	r3, [pc, #352]	@ (8001524 <main+0x1fc>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	22c8      	movs	r2, #200	@ 0xc8
 80013c8:	639a      	str	r2, [r3, #56]	@ 0x38

  HAL_TIM_Base_Start_IT(&htim6);
 80013ca:	4859      	ldr	r0, [pc, #356]	@ (8001530 <main+0x208>)
 80013cc:	f003 fe4e 	bl	800506c <HAL_TIM_Base_Start_IT>

  // Skanowanie urządzeń I2C
  I2C_ResetBus();
 80013d0:	f000 faa4 	bl	800191c <I2C_ResetBus>

  Scan_I2C_Devices();
 80013d4:	f000 f9f2 	bl	80017bc <Scan_I2C_Devices>

  ScanAndInitializeSensors();
 80013d8:	f000 f974 	bl	80016c4 <ScanAndInitializeSensors>



  // Inicjalizacja czujnika
  Initialize_Two_Sensors();
 80013dc:	f000 fa34 	bl	8001848 <Initialize_Two_Sensors>

  // Start pomiarów z czujnika
  printf("Rozpoczynanie pomiarów...\r\n");
 80013e0:	4854      	ldr	r0, [pc, #336]	@ (8001534 <main+0x20c>)
 80013e2:	f009 f86d 	bl	800a4c0 <puts>
  int status = vl53l5cx_start_ranging(&dev);
 80013e6:	4854      	ldr	r0, [pc, #336]	@ (8001538 <main+0x210>)
 80013e8:	f007 fc96 	bl	8008d18 <vl53l5cx_start_ranging>
 80013ec:	4603      	mov	r3, r0
 80013ee:	60bb      	str	r3, [r7, #8]
  if (status == VL53L5CX_STATUS_OK) {
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d103      	bne.n	80013fe <main+0xd6>
      printf("Pomiary rozpoczęte pomyślnie\r\n");
 80013f6:	4851      	ldr	r0, [pc, #324]	@ (800153c <main+0x214>)
 80013f8:	f009 f862 	bl	800a4c0 <puts>
 80013fc:	e003      	b.n	8001406 <main+0xde>
  } else {
      printf("Błąd rozpoczynania pomiarów, kod błędu: %d\r\n", status);
 80013fe:	68b9      	ldr	r1, [r7, #8]
 8001400:	484f      	ldr	r0, [pc, #316]	@ (8001540 <main+0x218>)
 8001402:	f008 fff5 	bl	800a3f0 <iprintf>
  }

  SetMotorDirection(0,0);
 8001406:	2100      	movs	r1, #0
 8001408:	2000      	movs	r0, #0
 800140a:	f7ff ff4d 	bl	80012a8 <SetMotorDirection>

  uint32_t prev_time = HAL_GetTick();
 800140e:	f001 f823 	bl	8002458 <HAL_GetTick>
 8001412:	60f8      	str	r0, [r7, #12]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    // Odczyt danych z pierwszego czujnika
	  dev.platform.address = sensor1_addr;
 8001414:	4b4b      	ldr	r3, [pc, #300]	@ (8001544 <main+0x21c>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	461a      	mov	r2, r3
 800141a:	4b47      	ldr	r3, [pc, #284]	@ (8001538 <main+0x210>)
 800141c:	801a      	strh	r2, [r3, #0]
	    uint8_t isReady = 0;
 800141e:	2300      	movs	r3, #0
 8001420:	70fb      	strb	r3, [r7, #3]
	    status = vl53l5cx_check_data_ready(&dev, &isReady);
 8001422:	1cfb      	adds	r3, r7, #3
 8001424:	4619      	mov	r1, r3
 8001426:	4844      	ldr	r0, [pc, #272]	@ (8001538 <main+0x210>)
 8001428:	f007 fdf0 	bl	800900c <vl53l5cx_check_data_ready>
 800142c:	4603      	mov	r3, r0
 800142e:	60bb      	str	r3, [r7, #8]
	    if (status == VL53L5CX_STATUS_OK && isReady) {
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d117      	bne.n	8001466 <main+0x13e>
 8001436:	78fb      	ldrb	r3, [r7, #3]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d014      	beq.n	8001466 <main+0x13e>
	        status = vl53l5cx_get_ranging_data(&dev, &results);
 800143c:	4942      	ldr	r1, [pc, #264]	@ (8001548 <main+0x220>)
 800143e:	483e      	ldr	r0, [pc, #248]	@ (8001538 <main+0x210>)
 8001440:	f007 fe34 	bl	80090ac <vl53l5cx_get_ranging_data>
 8001444:	4603      	mov	r3, r0
 8001446:	60bb      	str	r3, [r7, #8]
	        if (status == VL53L5CX_STATUS_OK) {
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d106      	bne.n	800145c <main+0x134>
	            printf("Czujnik 1 wysyła dane:\r\n");
 800144e:	483f      	ldr	r0, [pc, #252]	@ (800154c <main+0x224>)
 8001450:	f009 f836 	bl	800a4c0 <puts>
	            ProcessData(&results);
 8001454:	483c      	ldr	r0, [pc, #240]	@ (8001548 <main+0x220>)
 8001456:	f000 f8dd 	bl	8001614 <ProcessData>
	        if (status == VL53L5CX_STATUS_OK) {
 800145a:	e007      	b.n	800146c <main+0x144>
	        } else {
	            printf("Błąd odczytu danych z Czujnika 1, kod błędu: %d\r\n", status);
 800145c:	68b9      	ldr	r1, [r7, #8]
 800145e:	483c      	ldr	r0, [pc, #240]	@ (8001550 <main+0x228>)
 8001460:	f008 ffc6 	bl	800a3f0 <iprintf>
	        if (status == VL53L5CX_STATUS_OK) {
 8001464:	e002      	b.n	800146c <main+0x144>
	        }
	    } else {
	        printf("Czujnik 1 nie ma nowych danych do odczytu\r\n");
 8001466:	483b      	ldr	r0, [pc, #236]	@ (8001554 <main+0x22c>)
 8001468:	f009 f82a 	bl	800a4c0 <puts>
	    }

	    // Odczyt danych z drugiego czujnika
	    dev.platform.address = sensor2_addr;
 800146c:	4b3a      	ldr	r3, [pc, #232]	@ (8001558 <main+0x230>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	461a      	mov	r2, r3
 8001472:	4b31      	ldr	r3, [pc, #196]	@ (8001538 <main+0x210>)
 8001474:	801a      	strh	r2, [r3, #0]
	    isReady = 0;
 8001476:	2300      	movs	r3, #0
 8001478:	70fb      	strb	r3, [r7, #3]
	    status = vl53l5cx_check_data_ready(&dev, &isReady);
 800147a:	1cfb      	adds	r3, r7, #3
 800147c:	4619      	mov	r1, r3
 800147e:	482e      	ldr	r0, [pc, #184]	@ (8001538 <main+0x210>)
 8001480:	f007 fdc4 	bl	800900c <vl53l5cx_check_data_ready>
 8001484:	4603      	mov	r3, r0
 8001486:	60bb      	str	r3, [r7, #8]
	    if (status == VL53L5CX_STATUS_OK && isReady) {
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d117      	bne.n	80014be <main+0x196>
 800148e:	78fb      	ldrb	r3, [r7, #3]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d014      	beq.n	80014be <main+0x196>
	        status = vl53l5cx_get_ranging_data(&dev, &results);
 8001494:	492c      	ldr	r1, [pc, #176]	@ (8001548 <main+0x220>)
 8001496:	4828      	ldr	r0, [pc, #160]	@ (8001538 <main+0x210>)
 8001498:	f007 fe08 	bl	80090ac <vl53l5cx_get_ranging_data>
 800149c:	4603      	mov	r3, r0
 800149e:	60bb      	str	r3, [r7, #8]
	        if (status == VL53L5CX_STATUS_OK) {
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d106      	bne.n	80014b4 <main+0x18c>
	            printf("Czujnik 2 wysyła dane:\r\n");
 80014a6:	482d      	ldr	r0, [pc, #180]	@ (800155c <main+0x234>)
 80014a8:	f009 f80a 	bl	800a4c0 <puts>
	            ProcessData(&results);
 80014ac:	4826      	ldr	r0, [pc, #152]	@ (8001548 <main+0x220>)
 80014ae:	f000 f8b1 	bl	8001614 <ProcessData>
	        if (status == VL53L5CX_STATUS_OK) {
 80014b2:	e007      	b.n	80014c4 <main+0x19c>
	        } else {
	            printf("Błąd odczytu danych z Czujnika 2, kod błędu: %d\r\n", status);
 80014b4:	68b9      	ldr	r1, [r7, #8]
 80014b6:	482a      	ldr	r0, [pc, #168]	@ (8001560 <main+0x238>)
 80014b8:	f008 ff9a 	bl	800a3f0 <iprintf>
	        if (status == VL53L5CX_STATUS_OK) {
 80014bc:	e002      	b.n	80014c4 <main+0x19c>
	        }
	    } else {
	        printf("Czujnik 2 nie ma nowych danych do odczytu\r\n");
 80014be:	4829      	ldr	r0, [pc, #164]	@ (8001564 <main+0x23c>)
 80014c0:	f008 fffe 	bl	800a4c0 <puts>
	    }

	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 200);
 80014c4:	4b17      	ldr	r3, [pc, #92]	@ (8001524 <main+0x1fc>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	22c8      	movs	r2, #200	@ 0xc8
 80014ca:	635a      	str	r2, [r3, #52]	@ 0x34
	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 200);
 80014cc:	4b15      	ldr	r3, [pc, #84]	@ (8001524 <main+0x1fc>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	22c8      	movs	r2, #200	@ 0xc8
 80014d2:	639a      	str	r2, [r3, #56]	@ 0x38

	    uint32_t current_time = HAL_GetTick();
 80014d4:	f000 ffc0 	bl	8002458 <HAL_GetTick>
 80014d8:	6078      	str	r0, [r7, #4]
	    dt = (current_time - prev_time) / 1000.0f;
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	ee07 3a90 	vmov	s15, r3
 80014e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014e8:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8001568 <main+0x240>
 80014ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014f0:	4b1e      	ldr	r3, [pc, #120]	@ (800156c <main+0x244>)
 80014f2:	edc3 7a00 	vstr	s15, [r3]
	    prev_time = current_time;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	60fb      	str	r3, [r7, #12]
      //__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, (uint32_t)pwm_R);

      // Wysyłanie danych do aplikacji Qt
      //SendDataToQt(&odom, &target, pwm_L, pwm_R, speed_L, speed_R);

      HAL_Delay(3000); // Odpowiedni delay, aby nie przeciążać magistrali I2C
 80014fa:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80014fe:	f000 ffb7 	bl	8002470 <HAL_Delay>
  {
 8001502:	e787      	b.n	8001414 <main+0xec>
 8001504:	200012dc 	.word	0x200012dc
 8001508:	3dcccccd 	.word	0x3dcccccd
 800150c:	2000129c 	.word	0x2000129c
 8001510:	3e99999a 	.word	0x3e99999a
 8001514:	200012bc 	.word	0x200012bc
 8001518:	00000000 	.word	0x00000000
 800151c:	20001258 	.word	0x20001258
 8001520:	20001424 	.word	0x20001424
 8001524:	200012f4 	.word	0x200012f4
 8001528:	20001340 	.word	0x20001340
 800152c:	2000138c 	.word	0x2000138c
 8001530:	200013d8 	.word	0x200013d8
 8001534:	0800c730 	.word	0x0800c730
 8001538:	20000248 	.word	0x20000248
 800153c:	0800c74c 	.word	0x0800c74c
 8001540:	0800c76c 	.word	0x0800c76c
 8001544:	20000000 	.word	0x20000000
 8001548:	20000cf8 	.word	0x20000cf8
 800154c:	0800c7a0 	.word	0x0800c7a0
 8001550:	0800c7bc 	.word	0x0800c7bc
 8001554:	0800c7f4 	.word	0x0800c7f4
 8001558:	20000001 	.word	0x20000001
 800155c:	0800c820 	.word	0x0800c820
 8001560:	0800c83c 	.word	0x0800c83c
 8001564:	0800c874 	.word	0x0800c874
 8001568:	447a0000 	.word	0x447a0000
 800156c:	20001298 	.word	0x20001298

08001570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b096      	sub	sp, #88	@ 0x58
 8001574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001576:	f107 0314 	add.w	r3, r7, #20
 800157a:	2244      	movs	r2, #68	@ 0x44
 800157c:	2100      	movs	r1, #0
 800157e:	4618      	mov	r0, r3
 8001580:	f008 ffa6 	bl	800a4d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001584:	463b      	mov	r3, r7
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	60da      	str	r2, [r3, #12]
 8001590:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001592:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001596:	f002 f9ff 	bl	8003998 <HAL_PWREx_ControlVoltageScaling>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80015a0:	f000 f9d2 	bl	8001948 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015a4:	2302      	movs	r3, #2
 80015a6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015ac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015ae:	2310      	movs	r3, #16
 80015b0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015b2:	2302      	movs	r3, #2
 80015b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015b6:	2302      	movs	r3, #2
 80015b8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80015ba:	2301      	movs	r3, #1
 80015bc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80015be:	230a      	movs	r3, #10
 80015c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80015c2:	2307      	movs	r3, #7
 80015c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015c6:	2302      	movs	r3, #2
 80015c8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015ca:	2302      	movs	r3, #2
 80015cc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ce:	f107 0314 	add.w	r3, r7, #20
 80015d2:	4618      	mov	r0, r3
 80015d4:	f002 fa36 	bl	8003a44 <HAL_RCC_OscConfig>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80015de:	f000 f9b3 	bl	8001948 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015e2:	230f      	movs	r3, #15
 80015e4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015e6:	2303      	movs	r3, #3
 80015e8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015ea:	2300      	movs	r3, #0
 80015ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015ee:	2300      	movs	r3, #0
 80015f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015f2:	2300      	movs	r3, #0
 80015f4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80015f6:	463b      	mov	r3, r7
 80015f8:	2104      	movs	r1, #4
 80015fa:	4618      	mov	r0, r3
 80015fc:	f002 fdfe 	bl	80041fc <HAL_RCC_ClockConfig>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001606:	f000 f99f 	bl	8001948 <Error_Handler>
  }
}
 800160a:	bf00      	nop
 800160c:	3758      	adds	r7, #88	@ 0x58
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
	...

08001614 <ProcessData>:

/* USER CODE BEGIN 4 */

// Funkcja do przetwarzania danych z czujnika
void ProcessData(VL53L5CX_ResultsData *results) {
 8001614:	b580      	push	{r7, lr}
 8001616:	f5ad 6d82 	sub.w	sp, sp, #1040	@ 0x410
 800161a:	af00      	add	r7, sp, #0
 800161c:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001620:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8001624:	6018      	str	r0, [r3, #0]
    char buffer[1024];

    for (int i = 0; i < 64; i++) {
 8001626:	2300      	movs	r3, #0
 8001628:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c
 800162c:	e026      	b.n	800167c <ProcessData+0x68>
        sprintf(buffer, "%d ", results->distance_mm[i]);
 800162e:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001632:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 800163c:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	4413      	add	r3, r2
 8001644:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001648:	461a      	mov	r2, r3
 800164a:	f107 030c 	add.w	r3, r7, #12
 800164e:	491a      	ldr	r1, [pc, #104]	@ (80016b8 <ProcessData+0xa4>)
 8001650:	4618      	mov	r0, r3
 8001652:	f008 fdeb 	bl	800a22c <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001656:	f107 030c 	add.w	r3, r7, #12
 800165a:	4618      	mov	r0, r3
 800165c:	f7fe fe08 	bl	8000270 <strlen>
 8001660:	4603      	mov	r3, r0
 8001662:	b29a      	uxth	r2, r3
 8001664:	f107 010c 	add.w	r1, r7, #12
 8001668:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800166c:	4813      	ldr	r0, [pc, #76]	@ (80016bc <ProcessData+0xa8>)
 800166e:	f004 ff57 	bl	8006520 <HAL_UART_Transmit>
    for (int i = 0; i < 64; i++) {
 8001672:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 8001676:	3301      	adds	r3, #1
 8001678:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c
 800167c:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 8001680:	2b3f      	cmp	r3, #63	@ 0x3f
 8001682:	ddd4      	ble.n	800162e <ProcessData+0x1a>
    }

    // Dodanie nowej linii, aby oznaczyć koniec macierzy
    sprintf(buffer, "\n");
 8001684:	f107 030c 	add.w	r3, r7, #12
 8001688:	490d      	ldr	r1, [pc, #52]	@ (80016c0 <ProcessData+0xac>)
 800168a:	4618      	mov	r0, r3
 800168c:	f008 fdce 	bl	800a22c <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001690:	f107 030c 	add.w	r3, r7, #12
 8001694:	4618      	mov	r0, r3
 8001696:	f7fe fdeb 	bl	8000270 <strlen>
 800169a:	4603      	mov	r3, r0
 800169c:	b29a      	uxth	r2, r3
 800169e:	f107 010c 	add.w	r1, r7, #12
 80016a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016a6:	4805      	ldr	r0, [pc, #20]	@ (80016bc <ProcessData+0xa8>)
 80016a8:	f004 ff3a 	bl	8006520 <HAL_UART_Transmit>
}
 80016ac:	bf00      	nop
 80016ae:	f507 6782 	add.w	r7, r7, #1040	@ 0x410
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	0800c8a0 	.word	0x0800c8a0
 80016bc:	20001424 	.word	0x20001424
 80016c0:	0800c8a4 	.word	0x0800c8a4

080016c4 <ScanAndInitializeSensors>:


// Funkcja do inicjalizacji czujnika
void ScanAndInitializeSensors(void) {
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
    printf("Rozpoczynanie skanowania i inicjalizacji czujników I2C...\r\n");
 80016ca:	4833      	ldr	r0, [pc, #204]	@ (8001798 <ScanAndInitializeSensors+0xd4>)
 80016cc:	f008 fef8 	bl	800a4c0 <puts>
    HAL_StatusTypeDef result;
    uint8_t is_alive;
    uint8_t status;

    // Skanowanie w poszukiwaniu urządzeń I2C
    for (uint8_t i = 1; i < 128; i++) {
 80016d0:	2301      	movs	r3, #1
 80016d2:	71fb      	strb	r3, [r7, #7]
 80016d4:	e015      	b.n	8001702 <ScanAndInitializeSensors+0x3e>
        result = HAL_I2C_IsDeviceReady(&hi2c3, (uint16_t)(i << 1), 1, 10);
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	b29b      	uxth	r3, r3
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	b299      	uxth	r1, r3
 80016de:	230a      	movs	r3, #10
 80016e0:	2201      	movs	r2, #1
 80016e2:	482e      	ldr	r0, [pc, #184]	@ (800179c <ScanAndInitializeSensors+0xd8>)
 80016e4:	f001 fd04 	bl	80030f0 <HAL_I2C_IsDeviceReady>
 80016e8:	4603      	mov	r3, r0
 80016ea:	717b      	strb	r3, [r7, #5]
        if (result == HAL_OK) {
 80016ec:	797b      	ldrb	r3, [r7, #5]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d104      	bne.n	80016fc <ScanAndInitializeSensors+0x38>
            printf("Urządzenie znalezione pod adresem: 0x%02X\r\n", i);
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	4619      	mov	r1, r3
 80016f6:	482a      	ldr	r0, [pc, #168]	@ (80017a0 <ScanAndInitializeSensors+0xdc>)
 80016f8:	f008 fe7a 	bl	800a3f0 <iprintf>
    for (uint8_t i = 1; i < 128; i++) {
 80016fc:	79fb      	ldrb	r3, [r7, #7]
 80016fe:	3301      	adds	r3, #1
 8001700:	71fb      	strb	r3, [r7, #7]
 8001702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001706:	2b00      	cmp	r3, #0
 8001708:	dae5      	bge.n	80016d6 <ScanAndInitializeSensors+0x12>
        }
    }

    // Inicjalizacja pierwszego czujnika z rozdzielczością 8x8
    dev.platform.address = DEFAULT_SENSOR_1_ADDR;
 800170a:	4b26      	ldr	r3, [pc, #152]	@ (80017a4 <ScanAndInitializeSensors+0xe0>)
 800170c:	2229      	movs	r2, #41	@ 0x29
 800170e:	801a      	strh	r2, [r3, #0]
    status = vl53l5cx_is_alive(&dev, &is_alive);
 8001710:	1d3b      	adds	r3, r7, #4
 8001712:	4619      	mov	r1, r3
 8001714:	4823      	ldr	r0, [pc, #140]	@ (80017a4 <ScanAndInitializeSensors+0xe0>)
 8001716:	f006 fe49 	bl	80083ac <vl53l5cx_is_alive>
 800171a:	4603      	mov	r3, r0
 800171c:	71bb      	strb	r3, [r7, #6]
    if (status == VL53L5CX_STATUS_OK && is_alive) {
 800171e:	79bb      	ldrb	r3, [r7, #6]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d10e      	bne.n	8001742 <ScanAndInitializeSensors+0x7e>
 8001724:	793b      	ldrb	r3, [r7, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d00b      	beq.n	8001742 <ScanAndInitializeSensors+0x7e>
        vl53l5cx_init(&dev);
 800172a:	481e      	ldr	r0, [pc, #120]	@ (80017a4 <ScanAndInitializeSensors+0xe0>)
 800172c:	f006 fe88 	bl	8008440 <vl53l5cx_init>
        vl53l5cx_set_resolution(&dev, VL53L5CX_RESOLUTION_8X8);  // Ustawienie rozdzielczości 8x8
 8001730:	2140      	movs	r1, #64	@ 0x40
 8001732:	481c      	ldr	r0, [pc, #112]	@ (80017a4 <ScanAndInitializeSensors+0xe0>)
 8001734:	f007 fef9 	bl	800952a <vl53l5cx_set_resolution>
        printf("Pierwszy czujnik zainicjalizowany na adresie 0x%02X z rozdzielczością 8x8\r\n", DEFAULT_SENSOR_1_ADDR);
 8001738:	2129      	movs	r1, #41	@ 0x29
 800173a:	481b      	ldr	r0, [pc, #108]	@ (80017a8 <ScanAndInitializeSensors+0xe4>)
 800173c:	f008 fe58 	bl	800a3f0 <iprintf>
 8001740:	e003      	b.n	800174a <ScanAndInitializeSensors+0x86>
    } else {
        printf("Błąd inicjalizacji pierwszego czujnika na adresie 0x%02X\r\n", DEFAULT_SENSOR_1_ADDR);
 8001742:	2129      	movs	r1, #41	@ 0x29
 8001744:	4819      	ldr	r0, [pc, #100]	@ (80017ac <ScanAndInitializeSensors+0xe8>)
 8001746:	f008 fe53 	bl	800a3f0 <iprintf>
    }

    // Inicjalizacja drugiego czujnika z rozdzielczością 8x8
    dev.platform.address = DEFAULT_SENSOR_2_ADDR;
 800174a:	4b16      	ldr	r3, [pc, #88]	@ (80017a4 <ScanAndInitializeSensors+0xe0>)
 800174c:	2254      	movs	r2, #84	@ 0x54
 800174e:	801a      	strh	r2, [r3, #0]
    status = vl53l5cx_is_alive(&dev, &is_alive);
 8001750:	1d3b      	adds	r3, r7, #4
 8001752:	4619      	mov	r1, r3
 8001754:	4813      	ldr	r0, [pc, #76]	@ (80017a4 <ScanAndInitializeSensors+0xe0>)
 8001756:	f006 fe29 	bl	80083ac <vl53l5cx_is_alive>
 800175a:	4603      	mov	r3, r0
 800175c:	71bb      	strb	r3, [r7, #6]
    if (status == VL53L5CX_STATUS_OK && is_alive) {
 800175e:	79bb      	ldrb	r3, [r7, #6]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d10e      	bne.n	8001782 <ScanAndInitializeSensors+0xbe>
 8001764:	793b      	ldrb	r3, [r7, #4]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d00b      	beq.n	8001782 <ScanAndInitializeSensors+0xbe>
        vl53l5cx_init(&dev);
 800176a:	480e      	ldr	r0, [pc, #56]	@ (80017a4 <ScanAndInitializeSensors+0xe0>)
 800176c:	f006 fe68 	bl	8008440 <vl53l5cx_init>
        vl53l5cx_set_resolution(&dev, VL53L5CX_RESOLUTION_8X8);  // Ustawienie rozdzielczości 8x8
 8001770:	2140      	movs	r1, #64	@ 0x40
 8001772:	480c      	ldr	r0, [pc, #48]	@ (80017a4 <ScanAndInitializeSensors+0xe0>)
 8001774:	f007 fed9 	bl	800952a <vl53l5cx_set_resolution>
        printf("Drugi czujnik zainicjalizowany na adresie 0x%02X z rozdzielczością 8x8\r\n", DEFAULT_SENSOR_2_ADDR);
 8001778:	2154      	movs	r1, #84	@ 0x54
 800177a:	480d      	ldr	r0, [pc, #52]	@ (80017b0 <ScanAndInitializeSensors+0xec>)
 800177c:	f008 fe38 	bl	800a3f0 <iprintf>
 8001780:	e003      	b.n	800178a <ScanAndInitializeSensors+0xc6>
    } else {
        printf("Błąd inicjalizacji drugiego czujnika na adresie 0x%02X\r\n", DEFAULT_SENSOR_2_ADDR);
 8001782:	2154      	movs	r1, #84	@ 0x54
 8001784:	480b      	ldr	r0, [pc, #44]	@ (80017b4 <ScanAndInitializeSensors+0xf0>)
 8001786:	f008 fe33 	bl	800a3f0 <iprintf>
    }

    printf("Skanowanie i inicjalizacja czujników zakończona.\r\n");
 800178a:	480b      	ldr	r0, [pc, #44]	@ (80017b8 <ScanAndInitializeSensors+0xf4>)
 800178c:	f008 fe98 	bl	800a4c0 <puts>
}
 8001790:	bf00      	nop
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	0800c8a8 	.word	0x0800c8a8
 800179c:	200001f4 	.word	0x200001f4
 80017a0:	0800c8e4 	.word	0x0800c8e4
 80017a4:	20000248 	.word	0x20000248
 80017a8:	0800c914 	.word	0x0800c914
 80017ac:	0800c964 	.word	0x0800c964
 80017b0:	0800c9a4 	.word	0x0800c9a4
 80017b4:	0800c9f0 	.word	0x0800c9f0
 80017b8:	0800ca2c 	.word	0x0800ca2c

080017bc <Scan_I2C_Devices>:



// Funkcja do skanowania magistrali I2C
void Scan_I2C_Devices(void) {
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
    printf("Skanowanie urządzeń I2C...\r\n");
 80017c2:	481c      	ldr	r0, [pc, #112]	@ (8001834 <Scan_I2C_Devices+0x78>)
 80017c4:	f008 fe7c 	bl	800a4c0 <puts>
    HAL_StatusTypeDef result;
    uint8_t foundDevices = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	71fb      	strb	r3, [r7, #7]

    // Przeskanuj wszystkie możliwe adresy (1-127)
    for (uint8_t i = 1; i < 128; i++) {
 80017cc:	2301      	movs	r3, #1
 80017ce:	71bb      	strb	r3, [r7, #6]
 80017d0:	e018      	b.n	8001804 <Scan_I2C_Devices+0x48>
        result = HAL_I2C_IsDeviceReady(&hi2c3, (uint16_t)(i << 1), 1, 10);
 80017d2:	79bb      	ldrb	r3, [r7, #6]
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	b299      	uxth	r1, r3
 80017da:	230a      	movs	r3, #10
 80017dc:	2201      	movs	r2, #1
 80017de:	4816      	ldr	r0, [pc, #88]	@ (8001838 <Scan_I2C_Devices+0x7c>)
 80017e0:	f001 fc86 	bl	80030f0 <HAL_I2C_IsDeviceReady>
 80017e4:	4603      	mov	r3, r0
 80017e6:	717b      	strb	r3, [r7, #5]
        if (result == HAL_OK) {
 80017e8:	797b      	ldrb	r3, [r7, #5]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d107      	bne.n	80017fe <Scan_I2C_Devices+0x42>
            printf("Urządzenie znalezione pod adresem: 0x%02X\r\n", i);
 80017ee:	79bb      	ldrb	r3, [r7, #6]
 80017f0:	4619      	mov	r1, r3
 80017f2:	4812      	ldr	r0, [pc, #72]	@ (800183c <Scan_I2C_Devices+0x80>)
 80017f4:	f008 fdfc 	bl	800a3f0 <iprintf>
            foundDevices++;
 80017f8:	79fb      	ldrb	r3, [r7, #7]
 80017fa:	3301      	adds	r3, #1
 80017fc:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 1; i < 128; i++) {
 80017fe:	79bb      	ldrb	r3, [r7, #6]
 8001800:	3301      	adds	r3, #1
 8001802:	71bb      	strb	r3, [r7, #6]
 8001804:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001808:	2b00      	cmp	r3, #0
 800180a:	dae2      	bge.n	80017d2 <Scan_I2C_Devices+0x16>
        }
    }

    // Sprawdź, czy jakiekolwiek urządzenia zostały znalezione
    if (foundDevices == 0) {
 800180c:	79fb      	ldrb	r3, [r7, #7]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d103      	bne.n	800181a <Scan_I2C_Devices+0x5e>
        printf("Nie znaleziono żadnych urządzeń I2C na magistrali.\r\n");
 8001812:	480b      	ldr	r0, [pc, #44]	@ (8001840 <Scan_I2C_Devices+0x84>)
 8001814:	f008 fe54 	bl	800a4c0 <puts>
 8001818:	e004      	b.n	8001824 <Scan_I2C_Devices+0x68>
    } else {
        printf("Skanowanie zakończone: znaleziono %d urządzeń.\r\n", foundDevices);
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	4619      	mov	r1, r3
 800181e:	4809      	ldr	r0, [pc, #36]	@ (8001844 <Scan_I2C_Devices+0x88>)
 8001820:	f008 fde6 	bl	800a3f0 <iprintf>
    }

    HAL_Delay(1000);  // Krótkie opóźnienie przed kontynuacją
 8001824:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001828:	f000 fe22 	bl	8002470 <HAL_Delay>
}
 800182c:	bf00      	nop
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	0800ca60 	.word	0x0800ca60
 8001838:	200001f4 	.word	0x200001f4
 800183c:	0800c8e4 	.word	0x0800c8e4
 8001840:	0800ca80 	.word	0x0800ca80
 8001844:	0800cab8 	.word	0x0800cab8

08001848 <Initialize_Two_Sensors>:


void Initialize_Two_Sensors(void) {
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
    uint8_t status, is_alive;

    printf("Inicjalizacja pierwszego czujnika na adresie: 0x%02X\r\n", sensor1_addr);
 800184e:	4b2a      	ldr	r3, [pc, #168]	@ (80018f8 <Initialize_Two_Sensors+0xb0>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	4619      	mov	r1, r3
 8001854:	4829      	ldr	r0, [pc, #164]	@ (80018fc <Initialize_Two_Sensors+0xb4>)
 8001856:	f008 fdcb 	bl	800a3f0 <iprintf>
    dev.platform.address = sensor1_addr;
 800185a:	4b27      	ldr	r3, [pc, #156]	@ (80018f8 <Initialize_Two_Sensors+0xb0>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	461a      	mov	r2, r3
 8001860:	4b27      	ldr	r3, [pc, #156]	@ (8001900 <Initialize_Two_Sensors+0xb8>)
 8001862:	801a      	strh	r2, [r3, #0]
    status = vl53l5cx_is_alive(&dev, &is_alive);
 8001864:	1dbb      	adds	r3, r7, #6
 8001866:	4619      	mov	r1, r3
 8001868:	4825      	ldr	r0, [pc, #148]	@ (8001900 <Initialize_Two_Sensors+0xb8>)
 800186a:	f006 fd9f 	bl	80083ac <vl53l5cx_is_alive>
 800186e:	4603      	mov	r3, r0
 8001870:	71fb      	strb	r3, [r7, #7]
    if (status == VL53L5CX_STATUS_OK && is_alive) {
 8001872:	79fb      	ldrb	r3, [r7, #7]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d10c      	bne.n	8001892 <Initialize_Two_Sensors+0x4a>
 8001878:	79bb      	ldrb	r3, [r7, #6]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d009      	beq.n	8001892 <Initialize_Two_Sensors+0x4a>
        vl53l5cx_init(&dev);
 800187e:	4820      	ldr	r0, [pc, #128]	@ (8001900 <Initialize_Two_Sensors+0xb8>)
 8001880:	f006 fdde 	bl	8008440 <vl53l5cx_init>
        printf("Pierwszy czujnik zainicjalizowany na 0x%02X\r\n", sensor1_addr);
 8001884:	4b1c      	ldr	r3, [pc, #112]	@ (80018f8 <Initialize_Two_Sensors+0xb0>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	4619      	mov	r1, r3
 800188a:	481e      	ldr	r0, [pc, #120]	@ (8001904 <Initialize_Two_Sensors+0xbc>)
 800188c:	f008 fdb0 	bl	800a3f0 <iprintf>
 8001890:	e005      	b.n	800189e <Initialize_Two_Sensors+0x56>
    } else {
        printf("Błąd inicjalizacji pierwszego czujnika na 0x%02X\r\n", sensor1_addr);
 8001892:	4b19      	ldr	r3, [pc, #100]	@ (80018f8 <Initialize_Two_Sensors+0xb0>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	4619      	mov	r1, r3
 8001898:	481b      	ldr	r0, [pc, #108]	@ (8001908 <Initialize_Two_Sensors+0xc0>)
 800189a:	f008 fda9 	bl	800a3f0 <iprintf>
    }

    printf("Inicjalizacja drugiego czujnika na adresie: 0x%02X\r\n", sensor2_addr);
 800189e:	4b1b      	ldr	r3, [pc, #108]	@ (800190c <Initialize_Two_Sensors+0xc4>)
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	4619      	mov	r1, r3
 80018a4:	481a      	ldr	r0, [pc, #104]	@ (8001910 <Initialize_Two_Sensors+0xc8>)
 80018a6:	f008 fda3 	bl	800a3f0 <iprintf>
    dev.platform.address = sensor2_addr;
 80018aa:	4b18      	ldr	r3, [pc, #96]	@ (800190c <Initialize_Two_Sensors+0xc4>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	461a      	mov	r2, r3
 80018b0:	4b13      	ldr	r3, [pc, #76]	@ (8001900 <Initialize_Two_Sensors+0xb8>)
 80018b2:	801a      	strh	r2, [r3, #0]
    status = vl53l5cx_is_alive(&dev, &is_alive);
 80018b4:	1dbb      	adds	r3, r7, #6
 80018b6:	4619      	mov	r1, r3
 80018b8:	4811      	ldr	r0, [pc, #68]	@ (8001900 <Initialize_Two_Sensors+0xb8>)
 80018ba:	f006 fd77 	bl	80083ac <vl53l5cx_is_alive>
 80018be:	4603      	mov	r3, r0
 80018c0:	71fb      	strb	r3, [r7, #7]
    if (status == VL53L5CX_STATUS_OK && is_alive) {
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d10c      	bne.n	80018e2 <Initialize_Two_Sensors+0x9a>
 80018c8:	79bb      	ldrb	r3, [r7, #6]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d009      	beq.n	80018e2 <Initialize_Two_Sensors+0x9a>
        vl53l5cx_init(&dev);
 80018ce:	480c      	ldr	r0, [pc, #48]	@ (8001900 <Initialize_Two_Sensors+0xb8>)
 80018d0:	f006 fdb6 	bl	8008440 <vl53l5cx_init>
        printf("Drugi czujnik zainicjalizowany na 0x%02X\r\n", sensor2_addr);
 80018d4:	4b0d      	ldr	r3, [pc, #52]	@ (800190c <Initialize_Two_Sensors+0xc4>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	4619      	mov	r1, r3
 80018da:	480e      	ldr	r0, [pc, #56]	@ (8001914 <Initialize_Two_Sensors+0xcc>)
 80018dc:	f008 fd88 	bl	800a3f0 <iprintf>
 80018e0:	e006      	b.n	80018f0 <Initialize_Two_Sensors+0xa8>
    } else {
        printf("Błąd inicjalizacji drugiego czujnika na 0x%02X\r\n", sensor2_addr);
 80018e2:	4b0a      	ldr	r3, [pc, #40]	@ (800190c <Initialize_Two_Sensors+0xc4>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	4619      	mov	r1, r3
 80018e8:	480b      	ldr	r0, [pc, #44]	@ (8001918 <Initialize_Two_Sensors+0xd0>)
 80018ea:	f008 fd81 	bl	800a3f0 <iprintf>
    }
}
 80018ee:	bf00      	nop
 80018f0:	bf00      	nop
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	20000000 	.word	0x20000000
 80018fc:	0800caec 	.word	0x0800caec
 8001900:	20000248 	.word	0x20000248
 8001904:	0800cb24 	.word	0x0800cb24
 8001908:	0800cb54 	.word	0x0800cb54
 800190c:	20000001 	.word	0x20000001
 8001910:	0800cb8c 	.word	0x0800cb8c
 8001914:	0800cbc4 	.word	0x0800cbc4
 8001918:	0800cbf0 	.word	0x0800cbf0

0800191c <I2C_ResetBus>:

void I2C_ResetBus(void) {
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
    // Set the reset pin low to disable devices
    HAL_GPIO_WritePin(I2C_RESET_PORT, I2C_RESET_PIN, GPIO_PIN_RESET);
 8001920:	2200      	movs	r2, #0
 8001922:	2108      	movs	r1, #8
 8001924:	4807      	ldr	r0, [pc, #28]	@ (8001944 <I2C_ResetBus+0x28>)
 8001926:	f001 f901 	bl	8002b2c <HAL_GPIO_WritePin>
    HAL_Delay(10);  // Small delay to ensure reset is registered
 800192a:	200a      	movs	r0, #10
 800192c:	f000 fda0 	bl	8002470 <HAL_Delay>

    // Set the reset pin high to enable devices
    HAL_GPIO_WritePin(I2C_RESET_PORT, I2C_RESET_PIN, GPIO_PIN_SET);
 8001930:	2201      	movs	r2, #1
 8001932:	2108      	movs	r1, #8
 8001934:	4803      	ldr	r0, [pc, #12]	@ (8001944 <I2C_ResetBus+0x28>)
 8001936:	f001 f8f9 	bl	8002b2c <HAL_GPIO_WritePin>
    HAL_Delay(10);  // Give devices time to reinitialize
 800193a:	200a      	movs	r0, #10
 800193c:	f000 fd98 	bl	8002470 <HAL_Delay>
}
 8001940:	bf00      	nop
 8001942:	bd80      	pop	{r7, pc}
 8001944:	48000800 	.word	0x48000800

08001948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800194c:	b672      	cpsid	i
}
 800194e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001950:	bf00      	nop
 8001952:	e7fd      	b.n	8001950 <Error_Handler+0x8>

08001954 <VL53L5CX_RdByte>:

uint8_t VL53L5CX_RdByte(
    VL53L5CX_Platform *p_platform,
    uint16_t RegisterAddress,
    uint8_t *p_value)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b08a      	sub	sp, #40	@ 0x28
 8001958:	af04      	add	r7, sp, #16
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	460b      	mov	r3, r1
 800195e:	607a      	str	r2, [r7, #4]
 8001960:	817b      	strh	r3, [r7, #10]
    uint8_t status;
    status = HAL_I2C_Mem_Read(&hi2c3, p_platform->address, RegisterAddress, I2C_MEMADD_SIZE_16BIT, p_value, 1, I2C_TIMEOUT);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	8819      	ldrh	r1, [r3, #0]
 8001966:	897a      	ldrh	r2, [r7, #10]
 8001968:	f241 3388 	movw	r3, #5000	@ 0x1388
 800196c:	9302      	str	r3, [sp, #8]
 800196e:	2301      	movs	r3, #1
 8001970:	9301      	str	r3, [sp, #4]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	9300      	str	r3, [sp, #0]
 8001976:	2302      	movs	r3, #2
 8001978:	4804      	ldr	r0, [pc, #16]	@ (800198c <VL53L5CX_RdByte+0x38>)
 800197a:	f001 fa9f 	bl	8002ebc <HAL_I2C_Mem_Read>
 800197e:	4603      	mov	r3, r0
 8001980:	75fb      	strb	r3, [r7, #23]
    return status;
 8001982:	7dfb      	ldrb	r3, [r7, #23]
}
 8001984:	4618      	mov	r0, r3
 8001986:	3718      	adds	r7, #24
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	200001f4 	.word	0x200001f4

08001990 <VL53L5CX_WrByte>:

uint8_t VL53L5CX_WrByte(
    VL53L5CX_Platform *p_platform,
    uint16_t RegisterAddress,
    uint8_t value)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b088      	sub	sp, #32
 8001994:	af04      	add	r7, sp, #16
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	460b      	mov	r3, r1
 800199a:	807b      	strh	r3, [r7, #2]
 800199c:	4613      	mov	r3, r2
 800199e:	707b      	strb	r3, [r7, #1]
    uint8_t status;
    status = HAL_I2C_Mem_Write(&hi2c3, p_platform->address, RegisterAddress, I2C_MEMADD_SIZE_16BIT, &value, 1, I2C_TIMEOUT);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	8819      	ldrh	r1, [r3, #0]
 80019a4:	887a      	ldrh	r2, [r7, #2]
 80019a6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80019aa:	9302      	str	r3, [sp, #8]
 80019ac:	2301      	movs	r3, #1
 80019ae:	9301      	str	r3, [sp, #4]
 80019b0:	1c7b      	adds	r3, r7, #1
 80019b2:	9300      	str	r3, [sp, #0]
 80019b4:	2302      	movs	r3, #2
 80019b6:	4805      	ldr	r0, [pc, #20]	@ (80019cc <VL53L5CX_WrByte+0x3c>)
 80019b8:	f001 f96c 	bl	8002c94 <HAL_I2C_Mem_Write>
 80019bc:	4603      	mov	r3, r0
 80019be:	73fb      	strb	r3, [r7, #15]
    return status;
 80019c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	200001f4 	.word	0x200001f4

080019d0 <VL53L5CX_WrMulti>:
uint8_t VL53L5CX_WrMulti(
    VL53L5CX_Platform *p_platform,
    uint16_t RegisterAddress,
    uint8_t *p_values,
    uint32_t size)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b08a      	sub	sp, #40	@ 0x28
 80019d4:	af04      	add	r7, sp, #16
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	607a      	str	r2, [r7, #4]
 80019da:	603b      	str	r3, [r7, #0]
 80019dc:	460b      	mov	r3, r1
 80019de:	817b      	strh	r3, [r7, #10]
    uint8_t status;
    status = HAL_I2C_Mem_Write(&hi2c3, p_platform->address, RegisterAddress, I2C_MEMADD_SIZE_16BIT, p_values, size, I2C_TIMEOUT);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	8819      	ldrh	r1, [r3, #0]
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	897a      	ldrh	r2, [r7, #10]
 80019ea:	f241 3088 	movw	r0, #5000	@ 0x1388
 80019ee:	9002      	str	r0, [sp, #8]
 80019f0:	9301      	str	r3, [sp, #4]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	9300      	str	r3, [sp, #0]
 80019f6:	2302      	movs	r3, #2
 80019f8:	4804      	ldr	r0, [pc, #16]	@ (8001a0c <VL53L5CX_WrMulti+0x3c>)
 80019fa:	f001 f94b 	bl	8002c94 <HAL_I2C_Mem_Write>
 80019fe:	4603      	mov	r3, r0
 8001a00:	75fb      	strb	r3, [r7, #23]
    return status;
 8001a02:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3718      	adds	r7, #24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	200001f4 	.word	0x200001f4

08001a10 <VL53L5CX_RdMulti>:
uint8_t VL53L5CX_RdMulti(
    VL53L5CX_Platform *p_platform,
    uint16_t RegisterAddress,
    uint8_t *p_values,
    uint32_t size)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b08a      	sub	sp, #40	@ 0x28
 8001a14:	af04      	add	r7, sp, #16
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	607a      	str	r2, [r7, #4]
 8001a1a:	603b      	str	r3, [r7, #0]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	817b      	strh	r3, [r7, #10]
    uint8_t status;
    status = HAL_I2C_Mem_Read(&hi2c3, p_platform->address, RegisterAddress, I2C_MEMADD_SIZE_16BIT, p_values, size, I2C_TIMEOUT);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	8819      	ldrh	r1, [r3, #0]
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	897a      	ldrh	r2, [r7, #10]
 8001a2a:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001a2e:	9002      	str	r0, [sp, #8]
 8001a30:	9301      	str	r3, [sp, #4]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	9300      	str	r3, [sp, #0]
 8001a36:	2302      	movs	r3, #2
 8001a38:	4804      	ldr	r0, [pc, #16]	@ (8001a4c <VL53L5CX_RdMulti+0x3c>)
 8001a3a:	f001 fa3f 	bl	8002ebc <HAL_I2C_Mem_Read>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	75fb      	strb	r3, [r7, #23]
    return status;
 8001a42:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3718      	adds	r7, #24
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	200001f4 	.word	0x200001f4

08001a50 <VL53L5CX_SwapBuffer>:
}

void VL53L5CX_SwapBuffer(
    uint8_t         *buffer,
    uint16_t          size)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	807b      	strh	r3, [r7, #2]
    uint32_t i, tmp;

    /* Przykład implementacji z użyciem <string.h> */
    for(i = 0; i < size; i = i + 4)
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	e021      	b.n	8001aa6 <VL53L5CX_SwapBuffer+0x56>
    {
        tmp = (
          buffer[i]<<24)
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	4413      	add	r3, r2
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	061a      	lsls	r2, r3, #24
        |(buffer[i+1]<<16)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	6879      	ldr	r1, [r7, #4]
 8001a72:	440b      	add	r3, r1
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	041b      	lsls	r3, r3, #16
 8001a78:	431a      	orrs	r2, r3
        |(buffer[i+2]<<8)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	3302      	adds	r3, #2
 8001a7e:	6879      	ldr	r1, [r7, #4]
 8001a80:	440b      	add	r3, r1
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	021b      	lsls	r3, r3, #8
 8001a86:	4313      	orrs	r3, r2
        |(buffer[i+3]);
 8001a88:	68fa      	ldr	r2, [r7, #12]
 8001a8a:	3203      	adds	r2, #3
 8001a8c:	6879      	ldr	r1, [r7, #4]
 8001a8e:	440a      	add	r2, r1
 8001a90:	7812      	ldrb	r2, [r2, #0]
 8001a92:	4313      	orrs	r3, r2
        tmp = (
 8001a94:	60bb      	str	r3, [r7, #8]

        memcpy(&(buffer[i]), &tmp, 4);
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	68ba      	ldr	r2, [r7, #8]
 8001a9e:	601a      	str	r2, [r3, #0]
    for(i = 0; i < size; i = i + 4)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	3304      	adds	r3, #4
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	887b      	ldrh	r3, [r7, #2]
 8001aa8:	68fa      	ldr	r2, [r7, #12]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d3d9      	bcc.n	8001a62 <VL53L5CX_SwapBuffer+0x12>
    }
}
 8001aae:	bf00      	nop
 8001ab0:	bf00      	nop
 8001ab2:	3714      	adds	r7, #20
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <VL53L5CX_WaitMs>:

uint8_t VL53L5CX_WaitMs(
    VL53L5CX_Platform *p_platform,
    uint32_t TimeMs)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
    HAL_Delay(TimeMs);
 8001ac6:	6838      	ldr	r0, [r7, #0]
 8001ac8:	f000 fcd2 	bl	8002470 <HAL_Delay>
    return 0;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
	...

08001ad8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ade:	4b0f      	ldr	r3, [pc, #60]	@ (8001b1c <HAL_MspInit+0x44>)
 8001ae0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ae2:	4a0e      	ldr	r2, [pc, #56]	@ (8001b1c <HAL_MspInit+0x44>)
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001aea:	4b0c      	ldr	r3, [pc, #48]	@ (8001b1c <HAL_MspInit+0x44>)
 8001aec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	607b      	str	r3, [r7, #4]
 8001af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001af6:	4b09      	ldr	r3, [pc, #36]	@ (8001b1c <HAL_MspInit+0x44>)
 8001af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001afa:	4a08      	ldr	r2, [pc, #32]	@ (8001b1c <HAL_MspInit+0x44>)
 8001afc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b00:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b02:	4b06      	ldr	r3, [pc, #24]	@ (8001b1c <HAL_MspInit+0x44>)
 8001b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b0a:	603b      	str	r3, [r7, #0]
 8001b0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	40021000 	.word	0x40021000

08001b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b24:	bf00      	nop
 8001b26:	e7fd      	b.n	8001b24 <NMI_Handler+0x4>

08001b28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b2c:	bf00      	nop
 8001b2e:	e7fd      	b.n	8001b2c <HardFault_Handler+0x4>

08001b30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b34:	bf00      	nop
 8001b36:	e7fd      	b.n	8001b34 <MemManage_Handler+0x4>

08001b38 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b3c:	bf00      	nop
 8001b3e:	e7fd      	b.n	8001b3c <BusFault_Handler+0x4>

08001b40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b44:	bf00      	nop
 8001b46:	e7fd      	b.n	8001b44 <UsageFault_Handler+0x4>

08001b48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b56:	b480      	push	{r7}
 8001b58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b68:	bf00      	nop
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b76:	f000 fc5b 	bl	8002430 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
	...

08001b80 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b84:	4802      	ldr	r0, [pc, #8]	@ (8001b90 <USART2_IRQHandler+0x10>)
 8001b86:	f004 fda1 	bl	80066cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20001424 	.word	0x20001424

08001b94 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b98:	4802      	ldr	r0, [pc, #8]	@ (8001ba4 <TIM6_DAC_IRQHandler+0x10>)
 8001b9a:	f003 fd69 	bl	8005670 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	200013d8 	.word	0x200013d8

08001ba8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  return 1;
 8001bac:	2301      	movs	r3, #1
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <_kill>:

int _kill(int pid, int sig)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bc2:	f008 fc91 	bl	800a4e8 <__errno>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2216      	movs	r2, #22
 8001bca:	601a      	str	r2, [r3, #0]
  return -1;
 8001bcc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <_exit>:

void _exit (int status)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001be0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f7ff ffe7 	bl	8001bb8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bea:	bf00      	nop
 8001bec:	e7fd      	b.n	8001bea <_exit+0x12>

08001bee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b086      	sub	sp, #24
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	60f8      	str	r0, [r7, #12]
 8001bf6:	60b9      	str	r1, [r7, #8]
 8001bf8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	617b      	str	r3, [r7, #20]
 8001bfe:	e00a      	b.n	8001c16 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c00:	f3af 8000 	nop.w
 8001c04:	4601      	mov	r1, r0
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	1c5a      	adds	r2, r3, #1
 8001c0a:	60ba      	str	r2, [r7, #8]
 8001c0c:	b2ca      	uxtb	r2, r1
 8001c0e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	3301      	adds	r3, #1
 8001c14:	617b      	str	r3, [r7, #20]
 8001c16:	697a      	ldr	r2, [r7, #20]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	dbf0      	blt.n	8001c00 <_read+0x12>
  }

  return len;
 8001c1e:	687b      	ldr	r3, [r7, #4]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3718      	adds	r7, #24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c30:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c50:	605a      	str	r2, [r3, #4]
  return 0;
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <_isatty>:

int _isatty(int file)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c68:	2301      	movs	r3, #1
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b085      	sub	sp, #20
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	60f8      	str	r0, [r7, #12]
 8001c7e:	60b9      	str	r1, [r7, #8]
 8001c80:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3714      	adds	r7, #20
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c98:	4a14      	ldr	r2, [pc, #80]	@ (8001cec <_sbrk+0x5c>)
 8001c9a:	4b15      	ldr	r3, [pc, #84]	@ (8001cf0 <_sbrk+0x60>)
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ca4:	4b13      	ldr	r3, [pc, #76]	@ (8001cf4 <_sbrk+0x64>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d102      	bne.n	8001cb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cac:	4b11      	ldr	r3, [pc, #68]	@ (8001cf4 <_sbrk+0x64>)
 8001cae:	4a12      	ldr	r2, [pc, #72]	@ (8001cf8 <_sbrk+0x68>)
 8001cb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cb2:	4b10      	ldr	r3, [pc, #64]	@ (8001cf4 <_sbrk+0x64>)
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4413      	add	r3, r2
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d207      	bcs.n	8001cd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cc0:	f008 fc12 	bl	800a4e8 <__errno>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	220c      	movs	r2, #12
 8001cc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001cce:	e009      	b.n	8001ce4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cd0:	4b08      	ldr	r3, [pc, #32]	@ (8001cf4 <_sbrk+0x64>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cd6:	4b07      	ldr	r3, [pc, #28]	@ (8001cf4 <_sbrk+0x64>)
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4413      	add	r3, r2
 8001cde:	4a05      	ldr	r2, [pc, #20]	@ (8001cf4 <_sbrk+0x64>)
 8001ce0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3718      	adds	r7, #24
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	20018000 	.word	0x20018000
 8001cf0:	00000400 	.word	0x00000400
 8001cf4:	200012f0 	.word	0x200012f0
 8001cf8:	20001600 	.word	0x20001600

08001cfc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d00:	4b06      	ldr	r3, [pc, #24]	@ (8001d1c <SystemInit+0x20>)
 8001d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d06:	4a05      	ldr	r2, [pc, #20]	@ (8001d1c <SystemInit+0x20>)
 8001d08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b096      	sub	sp, #88	@ 0x58
 8001d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d26:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	605a      	str	r2, [r3, #4]
 8001d30:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d32:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	605a      	str	r2, [r3, #4]
 8001d3c:	609a      	str	r2, [r3, #8]
 8001d3e:	60da      	str	r2, [r3, #12]
 8001d40:	611a      	str	r2, [r3, #16]
 8001d42:	615a      	str	r2, [r3, #20]
 8001d44:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d46:	1d3b      	adds	r3, r7, #4
 8001d48:	222c      	movs	r2, #44	@ 0x2c
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f008 fbbf 	bl	800a4d0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d52:	4b3f      	ldr	r3, [pc, #252]	@ (8001e50 <MX_TIM1_Init+0x130>)
 8001d54:	4a3f      	ldr	r2, [pc, #252]	@ (8001e54 <MX_TIM1_Init+0x134>)
 8001d56:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7999;
 8001d58:	4b3d      	ldr	r3, [pc, #244]	@ (8001e50 <MX_TIM1_Init+0x130>)
 8001d5a:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001d5e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d60:	4b3b      	ldr	r3, [pc, #236]	@ (8001e50 <MX_TIM1_Init+0x130>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001d66:	4b3a      	ldr	r3, [pc, #232]	@ (8001e50 <MX_TIM1_Init+0x130>)
 8001d68:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d6c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d6e:	4b38      	ldr	r3, [pc, #224]	@ (8001e50 <MX_TIM1_Init+0x130>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d74:	4b36      	ldr	r3, [pc, #216]	@ (8001e50 <MX_TIM1_Init+0x130>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d7a:	4b35      	ldr	r3, [pc, #212]	@ (8001e50 <MX_TIM1_Init+0x130>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001d80:	4833      	ldr	r0, [pc, #204]	@ (8001e50 <MX_TIM1_Init+0x130>)
 8001d82:	f003 f9e3 	bl	800514c <HAL_TIM_PWM_Init>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8001d8c:	f7ff fddc 	bl	8001948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d90:	2300      	movs	r3, #0
 8001d92:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d94:	2300      	movs	r3, #0
 8001d96:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d9c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001da0:	4619      	mov	r1, r3
 8001da2:	482b      	ldr	r0, [pc, #172]	@ (8001e50 <MX_TIM1_Init+0x130>)
 8001da4:	f004 fa4a 	bl	800623c <HAL_TIMEx_MasterConfigSynchronization>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001dae:	f7ff fdcb 	bl	8001948 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001db2:	2360      	movs	r3, #96	@ 0x60
 8001db4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001db6:	2300      	movs	r3, #0
 8001db8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dce:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	481e      	ldr	r0, [pc, #120]	@ (8001e50 <MX_TIM1_Init+0x130>)
 8001dd8:	f003 fd52 	bl	8005880 <HAL_TIM_PWM_ConfigChannel>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001de2:	f7ff fdb1 	bl	8001948 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001de6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001dea:	2204      	movs	r2, #4
 8001dec:	4619      	mov	r1, r3
 8001dee:	4818      	ldr	r0, [pc, #96]	@ (8001e50 <MX_TIM1_Init+0x130>)
 8001df0:	f003 fd46 	bl	8005880 <HAL_TIM_PWM_ConfigChannel>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8001dfa:	f7ff fda5 	bl	8001948 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e02:	2300      	movs	r3, #0
 8001e04:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e06:	2300      	movs	r3, #0
 8001e08:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e12:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e16:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e20:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e24:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001e26:	2300      	movs	r3, #0
 8001e28:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e2e:	1d3b      	adds	r3, r7, #4
 8001e30:	4619      	mov	r1, r3
 8001e32:	4807      	ldr	r0, [pc, #28]	@ (8001e50 <MX_TIM1_Init+0x130>)
 8001e34:	f004 fa8a 	bl	800634c <HAL_TIMEx_ConfigBreakDeadTime>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_TIM1_Init+0x122>
  {
    Error_Handler();
 8001e3e:	f7ff fd83 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001e42:	4803      	ldr	r0, [pc, #12]	@ (8001e50 <MX_TIM1_Init+0x130>)
 8001e44:	f000 f9a2 	bl	800218c <HAL_TIM_MspPostInit>

}
 8001e48:	bf00      	nop
 8001e4a:	3758      	adds	r7, #88	@ 0x58
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	200012f4 	.word	0x200012f4
 8001e54:	40012c00 	.word	0x40012c00

08001e58 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b08c      	sub	sp, #48	@ 0x30
 8001e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e5e:	f107 030c 	add.w	r3, r7, #12
 8001e62:	2224      	movs	r2, #36	@ 0x24
 8001e64:	2100      	movs	r1, #0
 8001e66:	4618      	mov	r0, r3
 8001e68:	f008 fb32 	bl	800a4d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e6c:	463b      	mov	r3, r7
 8001e6e:	2200      	movs	r2, #0
 8001e70:	601a      	str	r2, [r3, #0]
 8001e72:	605a      	str	r2, [r3, #4]
 8001e74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e76:	4b21      	ldr	r3, [pc, #132]	@ (8001efc <MX_TIM2_Init+0xa4>)
 8001e78:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e7c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001e7e:	4b1f      	ldr	r3, [pc, #124]	@ (8001efc <MX_TIM2_Init+0xa4>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e84:	4b1d      	ldr	r3, [pc, #116]	@ (8001efc <MX_TIM2_Init+0xa4>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001e8a:	4b1c      	ldr	r3, [pc, #112]	@ (8001efc <MX_TIM2_Init+0xa4>)
 8001e8c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e90:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e92:	4b1a      	ldr	r3, [pc, #104]	@ (8001efc <MX_TIM2_Init+0xa4>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e98:	4b18      	ldr	r3, [pc, #96]	@ (8001efc <MX_TIM2_Init+0xa4>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001eae:	230f      	movs	r3, #15
 8001eb0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001ec2:	f107 030c 	add.w	r3, r7, #12
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	480c      	ldr	r0, [pc, #48]	@ (8001efc <MX_TIM2_Init+0xa4>)
 8001eca:	f003 fa9d 	bl	8005408 <HAL_TIM_Encoder_Init>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001ed4:	f7ff fd38 	bl	8001948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001edc:	2300      	movs	r3, #0
 8001ede:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ee0:	463b      	mov	r3, r7
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4805      	ldr	r0, [pc, #20]	@ (8001efc <MX_TIM2_Init+0xa4>)
 8001ee6:	f004 f9a9 	bl	800623c <HAL_TIMEx_MasterConfigSynchronization>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001ef0:	f7ff fd2a 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ef4:	bf00      	nop
 8001ef6:	3730      	adds	r7, #48	@ 0x30
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	20001340 	.word	0x20001340

08001f00 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b08c      	sub	sp, #48	@ 0x30
 8001f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f06:	f107 030c 	add.w	r3, r7, #12
 8001f0a:	2224      	movs	r2, #36	@ 0x24
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f008 fade 	bl	800a4d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f14:	463b      	mov	r3, r7
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	605a      	str	r2, [r3, #4]
 8001f1c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f1e:	4b21      	ldr	r3, [pc, #132]	@ (8001fa4 <MX_TIM3_Init+0xa4>)
 8001f20:	4a21      	ldr	r2, [pc, #132]	@ (8001fa8 <MX_TIM3_Init+0xa8>)
 8001f22:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001f24:	4b1f      	ldr	r3, [pc, #124]	@ (8001fa4 <MX_TIM3_Init+0xa4>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f2a:	4b1e      	ldr	r3, [pc, #120]	@ (8001fa4 <MX_TIM3_Init+0xa4>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001f30:	4b1c      	ldr	r3, [pc, #112]	@ (8001fa4 <MX_TIM3_Init+0xa4>)
 8001f32:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f36:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f38:	4b1a      	ldr	r3, [pc, #104]	@ (8001fa4 <MX_TIM3_Init+0xa4>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f3e:	4b19      	ldr	r3, [pc, #100]	@ (8001fa4 <MX_TIM3_Init+0xa4>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001f44:	2303      	movs	r3, #3
 8001f46:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f50:	2300      	movs	r3, #0
 8001f52:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001f54:	230f      	movs	r3, #15
 8001f56:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f60:	2300      	movs	r3, #0
 8001f62:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001f64:	2300      	movs	r3, #0
 8001f66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001f68:	f107 030c 	add.w	r3, r7, #12
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	480d      	ldr	r0, [pc, #52]	@ (8001fa4 <MX_TIM3_Init+0xa4>)
 8001f70:	f003 fa4a 	bl	8005408 <HAL_TIM_Encoder_Init>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001f7a:	f7ff fce5 	bl	8001948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f82:	2300      	movs	r3, #0
 8001f84:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f86:	463b      	mov	r3, r7
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4806      	ldr	r0, [pc, #24]	@ (8001fa4 <MX_TIM3_Init+0xa4>)
 8001f8c:	f004 f956 	bl	800623c <HAL_TIMEx_MasterConfigSynchronization>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001f96:	f7ff fcd7 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f9a:	bf00      	nop
 8001f9c:	3730      	adds	r7, #48	@ 0x30
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	2000138c 	.word	0x2000138c
 8001fa8:	40000400 	.word	0x40000400

08001fac <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fb2:	1d3b      	adds	r3, r7, #4
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001fbc:	4b15      	ldr	r3, [pc, #84]	@ (8002014 <MX_TIM6_Init+0x68>)
 8001fbe:	4a16      	ldr	r2, [pc, #88]	@ (8002018 <MX_TIM6_Init+0x6c>)
 8001fc0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8001fc2:	4b14      	ldr	r3, [pc, #80]	@ (8002014 <MX_TIM6_Init+0x68>)
 8001fc4:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001fc8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fca:	4b12      	ldr	r3, [pc, #72]	@ (8002014 <MX_TIM6_Init+0x68>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8001fd0:	4b10      	ldr	r3, [pc, #64]	@ (8002014 <MX_TIM6_Init+0x68>)
 8001fd2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001fd6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fd8:	4b0e      	ldr	r3, [pc, #56]	@ (8002014 <MX_TIM6_Init+0x68>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001fde:	480d      	ldr	r0, [pc, #52]	@ (8002014 <MX_TIM6_Init+0x68>)
 8001fe0:	f002 ffec 	bl	8004fbc <HAL_TIM_Base_Init>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001fea:	f7ff fcad 	bl	8001948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001ff6:	1d3b      	adds	r3, r7, #4
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4806      	ldr	r0, [pc, #24]	@ (8002014 <MX_TIM6_Init+0x68>)
 8001ffc:	f004 f91e 	bl	800623c <HAL_TIMEx_MasterConfigSynchronization>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8002006:	f7ff fc9f 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800200a:	bf00      	nop
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	200013d8 	.word	0x200013d8
 8002018:	40001000 	.word	0x40001000

0800201c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a0a      	ldr	r2, [pc, #40]	@ (8002054 <HAL_TIM_PWM_MspInit+0x38>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d10b      	bne.n	8002046 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800202e:	4b0a      	ldr	r3, [pc, #40]	@ (8002058 <HAL_TIM_PWM_MspInit+0x3c>)
 8002030:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002032:	4a09      	ldr	r2, [pc, #36]	@ (8002058 <HAL_TIM_PWM_MspInit+0x3c>)
 8002034:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002038:	6613      	str	r3, [r2, #96]	@ 0x60
 800203a:	4b07      	ldr	r3, [pc, #28]	@ (8002058 <HAL_TIM_PWM_MspInit+0x3c>)
 800203c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800203e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002046:	bf00      	nop
 8002048:	3714      	adds	r7, #20
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	40012c00 	.word	0x40012c00
 8002058:	40021000 	.word	0x40021000

0800205c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b08c      	sub	sp, #48	@ 0x30
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002064:	f107 031c 	add.w	r3, r7, #28
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	605a      	str	r2, [r3, #4]
 800206e:	609a      	str	r2, [r3, #8]
 8002070:	60da      	str	r2, [r3, #12]
 8002072:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800207c:	d129      	bne.n	80020d2 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800207e:	4b2e      	ldr	r3, [pc, #184]	@ (8002138 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002082:	4a2d      	ldr	r2, [pc, #180]	@ (8002138 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002084:	f043 0301 	orr.w	r3, r3, #1
 8002088:	6593      	str	r3, [r2, #88]	@ 0x58
 800208a:	4b2b      	ldr	r3, [pc, #172]	@ (8002138 <HAL_TIM_Encoder_MspInit+0xdc>)
 800208c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	61bb      	str	r3, [r7, #24]
 8002094:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002096:	4b28      	ldr	r3, [pc, #160]	@ (8002138 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800209a:	4a27      	ldr	r2, [pc, #156]	@ (8002138 <HAL_TIM_Encoder_MspInit+0xdc>)
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020a2:	4b25      	ldr	r3, [pc, #148]	@ (8002138 <HAL_TIM_Encoder_MspInit+0xdc>)
 80020a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	617b      	str	r3, [r7, #20]
 80020ac:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80020ae:	2303      	movs	r3, #3
 80020b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b2:	2302      	movs	r3, #2
 80020b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ba:	2300      	movs	r3, #0
 80020bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020be:	2301      	movs	r3, #1
 80020c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c2:	f107 031c 	add.w	r3, r7, #28
 80020c6:	4619      	mov	r1, r3
 80020c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020cc:	f000 fb84 	bl	80027d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80020d0:	e02d      	b.n	800212e <HAL_TIM_Encoder_MspInit+0xd2>
  else if(tim_encoderHandle->Instance==TIM3)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a19      	ldr	r2, [pc, #100]	@ (800213c <HAL_TIM_Encoder_MspInit+0xe0>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d128      	bne.n	800212e <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020dc:	4b16      	ldr	r3, [pc, #88]	@ (8002138 <HAL_TIM_Encoder_MspInit+0xdc>)
 80020de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020e0:	4a15      	ldr	r2, [pc, #84]	@ (8002138 <HAL_TIM_Encoder_MspInit+0xdc>)
 80020e2:	f043 0302 	orr.w	r3, r3, #2
 80020e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80020e8:	4b13      	ldr	r3, [pc, #76]	@ (8002138 <HAL_TIM_Encoder_MspInit+0xdc>)
 80020ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	613b      	str	r3, [r7, #16]
 80020f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f4:	4b10      	ldr	r3, [pc, #64]	@ (8002138 <HAL_TIM_Encoder_MspInit+0xdc>)
 80020f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020f8:	4a0f      	ldr	r2, [pc, #60]	@ (8002138 <HAL_TIM_Encoder_MspInit+0xdc>)
 80020fa:	f043 0301 	orr.w	r3, r3, #1
 80020fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002100:	4b0d      	ldr	r3, [pc, #52]	@ (8002138 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002102:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800210c:	23c0      	movs	r3, #192	@ 0xc0
 800210e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002110:	2302      	movs	r3, #2
 8002112:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002114:	2300      	movs	r3, #0
 8002116:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002118:	2300      	movs	r3, #0
 800211a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800211c:	2302      	movs	r3, #2
 800211e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002120:	f107 031c 	add.w	r3, r7, #28
 8002124:	4619      	mov	r1, r3
 8002126:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800212a:	f000 fb55 	bl	80027d8 <HAL_GPIO_Init>
}
 800212e:	bf00      	nop
 8002130:	3730      	adds	r7, #48	@ 0x30
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	40021000 	.word	0x40021000
 800213c:	40000400 	.word	0x40000400

08002140 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a0d      	ldr	r2, [pc, #52]	@ (8002184 <HAL_TIM_Base_MspInit+0x44>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d113      	bne.n	800217a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002152:	4b0d      	ldr	r3, [pc, #52]	@ (8002188 <HAL_TIM_Base_MspInit+0x48>)
 8002154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002156:	4a0c      	ldr	r2, [pc, #48]	@ (8002188 <HAL_TIM_Base_MspInit+0x48>)
 8002158:	f043 0310 	orr.w	r3, r3, #16
 800215c:	6593      	str	r3, [r2, #88]	@ 0x58
 800215e:	4b0a      	ldr	r3, [pc, #40]	@ (8002188 <HAL_TIM_Base_MspInit+0x48>)
 8002160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002162:	f003 0310 	and.w	r3, r3, #16
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800216a:	2200      	movs	r2, #0
 800216c:	2100      	movs	r1, #0
 800216e:	2036      	movs	r0, #54	@ 0x36
 8002170:	f000 fa7d 	bl	800266e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002174:	2036      	movs	r0, #54	@ 0x36
 8002176:	f000 fa96 	bl	80026a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800217a:	bf00      	nop
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40001000 	.word	0x40001000
 8002188:	40021000 	.word	0x40021000

0800218c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b088      	sub	sp, #32
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002194:	f107 030c 	add.w	r3, r7, #12
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	605a      	str	r2, [r3, #4]
 800219e:	609a      	str	r2, [r3, #8]
 80021a0:	60da      	str	r2, [r3, #12]
 80021a2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a12      	ldr	r2, [pc, #72]	@ (80021f4 <HAL_TIM_MspPostInit+0x68>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d11d      	bne.n	80021ea <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ae:	4b12      	ldr	r3, [pc, #72]	@ (80021f8 <HAL_TIM_MspPostInit+0x6c>)
 80021b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021b2:	4a11      	ldr	r2, [pc, #68]	@ (80021f8 <HAL_TIM_MspPostInit+0x6c>)
 80021b4:	f043 0301 	orr.w	r3, r3, #1
 80021b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021ba:	4b0f      	ldr	r3, [pc, #60]	@ (80021f8 <HAL_TIM_MspPostInit+0x6c>)
 80021bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	60bb      	str	r3, [r7, #8]
 80021c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80021c6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80021ca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021cc:	2302      	movs	r3, #2
 80021ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d4:	2300      	movs	r3, #0
 80021d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80021d8:	2301      	movs	r3, #1
 80021da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021dc:	f107 030c 	add.w	r3, r7, #12
 80021e0:	4619      	mov	r1, r3
 80021e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021e6:	f000 faf7 	bl	80027d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80021ea:	bf00      	nop
 80021ec:	3720      	adds	r7, #32
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40012c00 	.word	0x40012c00
 80021f8:	40021000 	.word	0x40021000

080021fc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002200:	4b14      	ldr	r3, [pc, #80]	@ (8002254 <MX_USART2_UART_Init+0x58>)
 8002202:	4a15      	ldr	r2, [pc, #84]	@ (8002258 <MX_USART2_UART_Init+0x5c>)
 8002204:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002206:	4b13      	ldr	r3, [pc, #76]	@ (8002254 <MX_USART2_UART_Init+0x58>)
 8002208:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800220c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800220e:	4b11      	ldr	r3, [pc, #68]	@ (8002254 <MX_USART2_UART_Init+0x58>)
 8002210:	2200      	movs	r2, #0
 8002212:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002214:	4b0f      	ldr	r3, [pc, #60]	@ (8002254 <MX_USART2_UART_Init+0x58>)
 8002216:	2200      	movs	r2, #0
 8002218:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800221a:	4b0e      	ldr	r3, [pc, #56]	@ (8002254 <MX_USART2_UART_Init+0x58>)
 800221c:	2200      	movs	r2, #0
 800221e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002220:	4b0c      	ldr	r3, [pc, #48]	@ (8002254 <MX_USART2_UART_Init+0x58>)
 8002222:	220c      	movs	r2, #12
 8002224:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002226:	4b0b      	ldr	r3, [pc, #44]	@ (8002254 <MX_USART2_UART_Init+0x58>)
 8002228:	2200      	movs	r2, #0
 800222a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800222c:	4b09      	ldr	r3, [pc, #36]	@ (8002254 <MX_USART2_UART_Init+0x58>)
 800222e:	2200      	movs	r2, #0
 8002230:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002232:	4b08      	ldr	r3, [pc, #32]	@ (8002254 <MX_USART2_UART_Init+0x58>)
 8002234:	2200      	movs	r2, #0
 8002236:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002238:	4b06      	ldr	r3, [pc, #24]	@ (8002254 <MX_USART2_UART_Init+0x58>)
 800223a:	2200      	movs	r2, #0
 800223c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800223e:	4805      	ldr	r0, [pc, #20]	@ (8002254 <MX_USART2_UART_Init+0x58>)
 8002240:	f004 f920 	bl	8006484 <HAL_UART_Init>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800224a:	f7ff fb7d 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800224e:	bf00      	nop
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	20001424 	.word	0x20001424
 8002258:	40004400 	.word	0x40004400

0800225c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b0ac      	sub	sp, #176	@ 0xb0
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002264:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	605a      	str	r2, [r3, #4]
 800226e:	609a      	str	r2, [r3, #8]
 8002270:	60da      	str	r2, [r3, #12]
 8002272:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002274:	f107 0314 	add.w	r3, r7, #20
 8002278:	2288      	movs	r2, #136	@ 0x88
 800227a:	2100      	movs	r1, #0
 800227c:	4618      	mov	r0, r3
 800227e:	f008 f927 	bl	800a4d0 <memset>
  if(uartHandle->Instance==USART2)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a25      	ldr	r2, [pc, #148]	@ (800231c <HAL_UART_MspInit+0xc0>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d143      	bne.n	8002314 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800228c:	2302      	movs	r3, #2
 800228e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002290:	2300      	movs	r3, #0
 8002292:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002294:	f107 0314 	add.w	r3, r7, #20
 8002298:	4618      	mov	r0, r3
 800229a:	f002 f9d3 	bl	8004644 <HAL_RCCEx_PeriphCLKConfig>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80022a4:	f7ff fb50 	bl	8001948 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002320 <HAL_UART_MspInit+0xc4>)
 80022aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ac:	4a1c      	ldr	r2, [pc, #112]	@ (8002320 <HAL_UART_MspInit+0xc4>)
 80022ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80022b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002320 <HAL_UART_MspInit+0xc4>)
 80022b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022bc:	613b      	str	r3, [r7, #16]
 80022be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022c0:	4b17      	ldr	r3, [pc, #92]	@ (8002320 <HAL_UART_MspInit+0xc4>)
 80022c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022c4:	4a16      	ldr	r2, [pc, #88]	@ (8002320 <HAL_UART_MspInit+0xc4>)
 80022c6:	f043 0301 	orr.w	r3, r3, #1
 80022ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022cc:	4b14      	ldr	r3, [pc, #80]	@ (8002320 <HAL_UART_MspInit+0xc4>)
 80022ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80022d8:	230c      	movs	r3, #12
 80022da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022de:	2302      	movs	r3, #2
 80022e0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e4:	2300      	movs	r3, #0
 80022e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ea:	2303      	movs	r3, #3
 80022ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022f0:	2307      	movs	r3, #7
 80022f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80022fa:	4619      	mov	r1, r3
 80022fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002300:	f000 fa6a 	bl	80027d8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002304:	2200      	movs	r2, #0
 8002306:	2100      	movs	r1, #0
 8002308:	2026      	movs	r0, #38	@ 0x26
 800230a:	f000 f9b0 	bl	800266e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800230e:	2026      	movs	r0, #38	@ 0x26
 8002310:	f000 f9c9 	bl	80026a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002314:	bf00      	nop
 8002316:	37b0      	adds	r7, #176	@ 0xb0
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40004400 	.word	0x40004400
 8002320:	40021000 	.word	0x40021000

08002324 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002324:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800235c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002328:	f7ff fce8 	bl	8001cfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800232c:	480c      	ldr	r0, [pc, #48]	@ (8002360 <LoopForever+0x6>)
  ldr r1, =_edata
 800232e:	490d      	ldr	r1, [pc, #52]	@ (8002364 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002330:	4a0d      	ldr	r2, [pc, #52]	@ (8002368 <LoopForever+0xe>)
  movs r3, #0
 8002332:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002334:	e002      	b.n	800233c <LoopCopyDataInit>

08002336 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002336:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002338:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800233a:	3304      	adds	r3, #4

0800233c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800233c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800233e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002340:	d3f9      	bcc.n	8002336 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002342:	4a0a      	ldr	r2, [pc, #40]	@ (800236c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002344:	4c0a      	ldr	r4, [pc, #40]	@ (8002370 <LoopForever+0x16>)
  movs r3, #0
 8002346:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002348:	e001      	b.n	800234e <LoopFillZerobss>

0800234a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800234a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800234c:	3204      	adds	r2, #4

0800234e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800234e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002350:	d3fb      	bcc.n	800234a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002352:	f008 f8cf 	bl	800a4f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002356:	f7fe ffe7 	bl	8001328 <main>

0800235a <LoopForever>:

LoopForever:
    b LoopForever
 800235a:	e7fe      	b.n	800235a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800235c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002360:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002364:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002368:	08022758 	.word	0x08022758
  ldr r2, =_sbss
 800236c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002370:	200015fc 	.word	0x200015fc

08002374 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002374:	e7fe      	b.n	8002374 <ADC1_2_IRQHandler>
	...

08002378 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800237e:	2300      	movs	r3, #0
 8002380:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002382:	4b0c      	ldr	r3, [pc, #48]	@ (80023b4 <HAL_Init+0x3c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a0b      	ldr	r2, [pc, #44]	@ (80023b4 <HAL_Init+0x3c>)
 8002388:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800238c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800238e:	2003      	movs	r0, #3
 8002390:	f000 f962 	bl	8002658 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002394:	2000      	movs	r0, #0
 8002396:	f000 f80f 	bl	80023b8 <HAL_InitTick>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d002      	beq.n	80023a6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	71fb      	strb	r3, [r7, #7]
 80023a4:	e001      	b.n	80023aa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023a6:	f7ff fb97 	bl	8001ad8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023aa:	79fb      	ldrb	r3, [r7, #7]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3708      	adds	r7, #8
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40022000 	.word	0x40022000

080023b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80023c0:	2300      	movs	r3, #0
 80023c2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80023c4:	4b17      	ldr	r3, [pc, #92]	@ (8002424 <HAL_InitTick+0x6c>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d023      	beq.n	8002414 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80023cc:	4b16      	ldr	r3, [pc, #88]	@ (8002428 <HAL_InitTick+0x70>)
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	4b14      	ldr	r3, [pc, #80]	@ (8002424 <HAL_InitTick+0x6c>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	4619      	mov	r1, r3
 80023d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023da:	fbb3 f3f1 	udiv	r3, r3, r1
 80023de:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e2:	4618      	mov	r0, r3
 80023e4:	f000 f96d 	bl	80026c2 <HAL_SYSTICK_Config>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d10f      	bne.n	800240e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b0f      	cmp	r3, #15
 80023f2:	d809      	bhi.n	8002408 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023f4:	2200      	movs	r2, #0
 80023f6:	6879      	ldr	r1, [r7, #4]
 80023f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80023fc:	f000 f937 	bl	800266e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002400:	4a0a      	ldr	r2, [pc, #40]	@ (800242c <HAL_InitTick+0x74>)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6013      	str	r3, [r2, #0]
 8002406:	e007      	b.n	8002418 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	73fb      	strb	r3, [r7, #15]
 800240c:	e004      	b.n	8002418 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	73fb      	strb	r3, [r7, #15]
 8002412:	e001      	b.n	8002418 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002418:	7bfb      	ldrb	r3, [r7, #15]
}
 800241a:	4618      	mov	r0, r3
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	2000000c 	.word	0x2000000c
 8002428:	20000004 	.word	0x20000004
 800242c:	20000008 	.word	0x20000008

08002430 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002434:	4b06      	ldr	r3, [pc, #24]	@ (8002450 <HAL_IncTick+0x20>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	461a      	mov	r2, r3
 800243a:	4b06      	ldr	r3, [pc, #24]	@ (8002454 <HAL_IncTick+0x24>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4413      	add	r3, r2
 8002440:	4a04      	ldr	r2, [pc, #16]	@ (8002454 <HAL_IncTick+0x24>)
 8002442:	6013      	str	r3, [r2, #0]
}
 8002444:	bf00      	nop
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	2000000c 	.word	0x2000000c
 8002454:	200014ac 	.word	0x200014ac

08002458 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  return uwTick;
 800245c:	4b03      	ldr	r3, [pc, #12]	@ (800246c <HAL_GetTick+0x14>)
 800245e:	681b      	ldr	r3, [r3, #0]
}
 8002460:	4618      	mov	r0, r3
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	200014ac 	.word	0x200014ac

08002470 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002478:	f7ff ffee 	bl	8002458 <HAL_GetTick>
 800247c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002488:	d005      	beq.n	8002496 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800248a:	4b0a      	ldr	r3, [pc, #40]	@ (80024b4 <HAL_Delay+0x44>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	461a      	mov	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	4413      	add	r3, r2
 8002494:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002496:	bf00      	nop
 8002498:	f7ff ffde 	bl	8002458 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d8f7      	bhi.n	8002498 <HAL_Delay+0x28>
  {
  }
}
 80024a8:	bf00      	nop
 80024aa:	bf00      	nop
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	2000000c 	.word	0x2000000c

080024b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f003 0307 	and.w	r3, r3, #7
 80024c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024c8:	4b0c      	ldr	r3, [pc, #48]	@ (80024fc <__NVIC_SetPriorityGrouping+0x44>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024ce:	68ba      	ldr	r2, [r7, #8]
 80024d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024d4:	4013      	ands	r3, r2
 80024d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ea:	4a04      	ldr	r2, [pc, #16]	@ (80024fc <__NVIC_SetPriorityGrouping+0x44>)
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	60d3      	str	r3, [r2, #12]
}
 80024f0:	bf00      	nop
 80024f2:	3714      	adds	r7, #20
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	e000ed00 	.word	0xe000ed00

08002500 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002504:	4b04      	ldr	r3, [pc, #16]	@ (8002518 <__NVIC_GetPriorityGrouping+0x18>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	0a1b      	lsrs	r3, r3, #8
 800250a:	f003 0307 	and.w	r3, r3, #7
}
 800250e:	4618      	mov	r0, r3
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	e000ed00 	.word	0xe000ed00

0800251c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	4603      	mov	r3, r0
 8002524:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252a:	2b00      	cmp	r3, #0
 800252c:	db0b      	blt.n	8002546 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800252e:	79fb      	ldrb	r3, [r7, #7]
 8002530:	f003 021f 	and.w	r2, r3, #31
 8002534:	4907      	ldr	r1, [pc, #28]	@ (8002554 <__NVIC_EnableIRQ+0x38>)
 8002536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253a:	095b      	lsrs	r3, r3, #5
 800253c:	2001      	movs	r0, #1
 800253e:	fa00 f202 	lsl.w	r2, r0, r2
 8002542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002546:	bf00      	nop
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	e000e100 	.word	0xe000e100

08002558 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	4603      	mov	r3, r0
 8002560:	6039      	str	r1, [r7, #0]
 8002562:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002568:	2b00      	cmp	r3, #0
 800256a:	db0a      	blt.n	8002582 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	b2da      	uxtb	r2, r3
 8002570:	490c      	ldr	r1, [pc, #48]	@ (80025a4 <__NVIC_SetPriority+0x4c>)
 8002572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002576:	0112      	lsls	r2, r2, #4
 8002578:	b2d2      	uxtb	r2, r2
 800257a:	440b      	add	r3, r1
 800257c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002580:	e00a      	b.n	8002598 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	b2da      	uxtb	r2, r3
 8002586:	4908      	ldr	r1, [pc, #32]	@ (80025a8 <__NVIC_SetPriority+0x50>)
 8002588:	79fb      	ldrb	r3, [r7, #7]
 800258a:	f003 030f 	and.w	r3, r3, #15
 800258e:	3b04      	subs	r3, #4
 8002590:	0112      	lsls	r2, r2, #4
 8002592:	b2d2      	uxtb	r2, r2
 8002594:	440b      	add	r3, r1
 8002596:	761a      	strb	r2, [r3, #24]
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	e000e100 	.word	0xe000e100
 80025a8:	e000ed00 	.word	0xe000ed00

080025ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b089      	sub	sp, #36	@ 0x24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f003 0307 	and.w	r3, r3, #7
 80025be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	f1c3 0307 	rsb	r3, r3, #7
 80025c6:	2b04      	cmp	r3, #4
 80025c8:	bf28      	it	cs
 80025ca:	2304      	movcs	r3, #4
 80025cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	3304      	adds	r3, #4
 80025d2:	2b06      	cmp	r3, #6
 80025d4:	d902      	bls.n	80025dc <NVIC_EncodePriority+0x30>
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	3b03      	subs	r3, #3
 80025da:	e000      	b.n	80025de <NVIC_EncodePriority+0x32>
 80025dc:	2300      	movs	r3, #0
 80025de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	43da      	mvns	r2, r3
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	401a      	ands	r2, r3
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025f4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	fa01 f303 	lsl.w	r3, r1, r3
 80025fe:	43d9      	mvns	r1, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002604:	4313      	orrs	r3, r2
         );
}
 8002606:	4618      	mov	r0, r3
 8002608:	3724      	adds	r7, #36	@ 0x24
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
	...

08002614 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	3b01      	subs	r3, #1
 8002620:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002624:	d301      	bcc.n	800262a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002626:	2301      	movs	r3, #1
 8002628:	e00f      	b.n	800264a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800262a:	4a0a      	ldr	r2, [pc, #40]	@ (8002654 <SysTick_Config+0x40>)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3b01      	subs	r3, #1
 8002630:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002632:	210f      	movs	r1, #15
 8002634:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002638:	f7ff ff8e 	bl	8002558 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800263c:	4b05      	ldr	r3, [pc, #20]	@ (8002654 <SysTick_Config+0x40>)
 800263e:	2200      	movs	r2, #0
 8002640:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002642:	4b04      	ldr	r3, [pc, #16]	@ (8002654 <SysTick_Config+0x40>)
 8002644:	2207      	movs	r2, #7
 8002646:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	e000e010 	.word	0xe000e010

08002658 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f7ff ff29 	bl	80024b8 <__NVIC_SetPriorityGrouping>
}
 8002666:	bf00      	nop
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b086      	sub	sp, #24
 8002672:	af00      	add	r7, sp, #0
 8002674:	4603      	mov	r3, r0
 8002676:	60b9      	str	r1, [r7, #8]
 8002678:	607a      	str	r2, [r7, #4]
 800267a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800267c:	2300      	movs	r3, #0
 800267e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002680:	f7ff ff3e 	bl	8002500 <__NVIC_GetPriorityGrouping>
 8002684:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	68b9      	ldr	r1, [r7, #8]
 800268a:	6978      	ldr	r0, [r7, #20]
 800268c:	f7ff ff8e 	bl	80025ac <NVIC_EncodePriority>
 8002690:	4602      	mov	r2, r0
 8002692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002696:	4611      	mov	r1, r2
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff ff5d 	bl	8002558 <__NVIC_SetPriority>
}
 800269e:	bf00      	nop
 80026a0:	3718      	adds	r7, #24
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b082      	sub	sp, #8
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	4603      	mov	r3, r0
 80026ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff ff31 	bl	800251c <__NVIC_EnableIRQ>
}
 80026ba:	bf00      	nop
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b082      	sub	sp, #8
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f7ff ffa2 	bl	8002614 <SysTick_Config>
 80026d0:	4603      	mov	r3, r0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026da:	b480      	push	{r7}
 80026dc:	b085      	sub	sp, #20
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026e2:	2300      	movs	r3, #0
 80026e4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d008      	beq.n	8002704 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2204      	movs	r2, #4
 80026f6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e022      	b.n	800274a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f022 020e 	bic.w	r2, r2, #14
 8002712:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f022 0201 	bic.w	r2, r2, #1
 8002722:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002728:	f003 021c 	and.w	r2, r3, #28
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002730:	2101      	movs	r1, #1
 8002732:	fa01 f202 	lsl.w	r2, r1, r2
 8002736:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002748:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800274a:	4618      	mov	r0, r3
 800274c:	3714      	adds	r7, #20
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr

08002756 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b084      	sub	sp, #16
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800275e:	2300      	movs	r3, #0
 8002760:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d005      	beq.n	800277a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2204      	movs	r2, #4
 8002772:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	73fb      	strb	r3, [r7, #15]
 8002778:	e029      	b.n	80027ce <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 020e 	bic.w	r2, r2, #14
 8002788:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f022 0201 	bic.w	r2, r2, #1
 8002798:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800279e:	f003 021c 	and.w	r2, r3, #28
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a6:	2101      	movs	r1, #1
 80027a8:	fa01 f202 	lsl.w	r2, r1, r2
 80027ac:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	4798      	blx	r3
    }
  }
  return status;
 80027ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3710      	adds	r7, #16
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027d8:	b480      	push	{r7}
 80027da:	b087      	sub	sp, #28
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027e2:	2300      	movs	r3, #0
 80027e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027e6:	e17f      	b.n	8002ae8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	2101      	movs	r1, #1
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	fa01 f303 	lsl.w	r3, r1, r3
 80027f4:	4013      	ands	r3, r2
 80027f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f000 8171 	beq.w	8002ae2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f003 0303 	and.w	r3, r3, #3
 8002808:	2b01      	cmp	r3, #1
 800280a:	d005      	beq.n	8002818 <HAL_GPIO_Init+0x40>
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f003 0303 	and.w	r3, r3, #3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d130      	bne.n	800287a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	2203      	movs	r2, #3
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	43db      	mvns	r3, r3
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	4013      	ands	r3, r2
 800282e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	68da      	ldr	r2, [r3, #12]
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	4313      	orrs	r3, r2
 8002840:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800284e:	2201      	movs	r2, #1
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	43db      	mvns	r3, r3
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	4013      	ands	r3, r2
 800285c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	091b      	lsrs	r3, r3, #4
 8002864:	f003 0201 	and.w	r2, r3, #1
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	4313      	orrs	r3, r2
 8002872:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f003 0303 	and.w	r3, r3, #3
 8002882:	2b03      	cmp	r3, #3
 8002884:	d118      	bne.n	80028b8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800288a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800288c:	2201      	movs	r2, #1
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	43db      	mvns	r3, r3
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	4013      	ands	r3, r2
 800289a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	08db      	lsrs	r3, r3, #3
 80028a2:	f003 0201 	and.w	r2, r3, #1
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f003 0303 	and.w	r3, r3, #3
 80028c0:	2b03      	cmp	r3, #3
 80028c2:	d017      	beq.n	80028f4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	2203      	movs	r2, #3
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	43db      	mvns	r3, r3
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	4013      	ands	r3, r2
 80028da:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f003 0303 	and.w	r3, r3, #3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d123      	bne.n	8002948 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	08da      	lsrs	r2, r3, #3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	3208      	adds	r2, #8
 8002908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800290c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	220f      	movs	r2, #15
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	43db      	mvns	r3, r3
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	4013      	ands	r3, r2
 8002922:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	691a      	ldr	r2, [r3, #16]
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	f003 0307 	and.w	r3, r3, #7
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	4313      	orrs	r3, r2
 8002938:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	08da      	lsrs	r2, r3, #3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	3208      	adds	r2, #8
 8002942:	6939      	ldr	r1, [r7, #16]
 8002944:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	2203      	movs	r2, #3
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	43db      	mvns	r3, r3
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	4013      	ands	r3, r2
 800295e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f003 0203 	and.w	r2, r3, #3
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	4313      	orrs	r3, r2
 8002974:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002984:	2b00      	cmp	r3, #0
 8002986:	f000 80ac 	beq.w	8002ae2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800298a:	4b5f      	ldr	r3, [pc, #380]	@ (8002b08 <HAL_GPIO_Init+0x330>)
 800298c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800298e:	4a5e      	ldr	r2, [pc, #376]	@ (8002b08 <HAL_GPIO_Init+0x330>)
 8002990:	f043 0301 	orr.w	r3, r3, #1
 8002994:	6613      	str	r3, [r2, #96]	@ 0x60
 8002996:	4b5c      	ldr	r3, [pc, #368]	@ (8002b08 <HAL_GPIO_Init+0x330>)
 8002998:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	60bb      	str	r3, [r7, #8]
 80029a0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80029a2:	4a5a      	ldr	r2, [pc, #360]	@ (8002b0c <HAL_GPIO_Init+0x334>)
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	089b      	lsrs	r3, r3, #2
 80029a8:	3302      	adds	r3, #2
 80029aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	f003 0303 	and.w	r3, r3, #3
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	220f      	movs	r2, #15
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	43db      	mvns	r3, r3
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	4013      	ands	r3, r2
 80029c4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80029cc:	d025      	beq.n	8002a1a <HAL_GPIO_Init+0x242>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a4f      	ldr	r2, [pc, #316]	@ (8002b10 <HAL_GPIO_Init+0x338>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d01f      	beq.n	8002a16 <HAL_GPIO_Init+0x23e>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a4e      	ldr	r2, [pc, #312]	@ (8002b14 <HAL_GPIO_Init+0x33c>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d019      	beq.n	8002a12 <HAL_GPIO_Init+0x23a>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a4d      	ldr	r2, [pc, #308]	@ (8002b18 <HAL_GPIO_Init+0x340>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d013      	beq.n	8002a0e <HAL_GPIO_Init+0x236>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a4c      	ldr	r2, [pc, #304]	@ (8002b1c <HAL_GPIO_Init+0x344>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d00d      	beq.n	8002a0a <HAL_GPIO_Init+0x232>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a4b      	ldr	r2, [pc, #300]	@ (8002b20 <HAL_GPIO_Init+0x348>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d007      	beq.n	8002a06 <HAL_GPIO_Init+0x22e>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a4a      	ldr	r2, [pc, #296]	@ (8002b24 <HAL_GPIO_Init+0x34c>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d101      	bne.n	8002a02 <HAL_GPIO_Init+0x22a>
 80029fe:	2306      	movs	r3, #6
 8002a00:	e00c      	b.n	8002a1c <HAL_GPIO_Init+0x244>
 8002a02:	2307      	movs	r3, #7
 8002a04:	e00a      	b.n	8002a1c <HAL_GPIO_Init+0x244>
 8002a06:	2305      	movs	r3, #5
 8002a08:	e008      	b.n	8002a1c <HAL_GPIO_Init+0x244>
 8002a0a:	2304      	movs	r3, #4
 8002a0c:	e006      	b.n	8002a1c <HAL_GPIO_Init+0x244>
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e004      	b.n	8002a1c <HAL_GPIO_Init+0x244>
 8002a12:	2302      	movs	r3, #2
 8002a14:	e002      	b.n	8002a1c <HAL_GPIO_Init+0x244>
 8002a16:	2301      	movs	r3, #1
 8002a18:	e000      	b.n	8002a1c <HAL_GPIO_Init+0x244>
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	697a      	ldr	r2, [r7, #20]
 8002a1e:	f002 0203 	and.w	r2, r2, #3
 8002a22:	0092      	lsls	r2, r2, #2
 8002a24:	4093      	lsls	r3, r2
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a2c:	4937      	ldr	r1, [pc, #220]	@ (8002b0c <HAL_GPIO_Init+0x334>)
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	089b      	lsrs	r3, r3, #2
 8002a32:	3302      	adds	r3, #2
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a3a:	4b3b      	ldr	r3, [pc, #236]	@ (8002b28 <HAL_GPIO_Init+0x350>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	43db      	mvns	r3, r3
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	4013      	ands	r3, r2
 8002a48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a5e:	4a32      	ldr	r2, [pc, #200]	@ (8002b28 <HAL_GPIO_Init+0x350>)
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a64:	4b30      	ldr	r3, [pc, #192]	@ (8002b28 <HAL_GPIO_Init+0x350>)
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	43db      	mvns	r3, r3
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	4013      	ands	r3, r2
 8002a72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d003      	beq.n	8002a88 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a88:	4a27      	ldr	r2, [pc, #156]	@ (8002b28 <HAL_GPIO_Init+0x350>)
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002a8e:	4b26      	ldr	r3, [pc, #152]	@ (8002b28 <HAL_GPIO_Init+0x350>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	43db      	mvns	r3, r3
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d003      	beq.n	8002ab2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ab2:	4a1d      	ldr	r2, [pc, #116]	@ (8002b28 <HAL_GPIO_Init+0x350>)
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002ab8:	4b1b      	ldr	r3, [pc, #108]	@ (8002b28 <HAL_GPIO_Init+0x350>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d003      	beq.n	8002adc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002adc:	4a12      	ldr	r2, [pc, #72]	@ (8002b28 <HAL_GPIO_Init+0x350>)
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	fa22 f303 	lsr.w	r3, r2, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f47f ae78 	bne.w	80027e8 <HAL_GPIO_Init+0x10>
  }
}
 8002af8:	bf00      	nop
 8002afa:	bf00      	nop
 8002afc:	371c      	adds	r7, #28
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	40010000 	.word	0x40010000
 8002b10:	48000400 	.word	0x48000400
 8002b14:	48000800 	.word	0x48000800
 8002b18:	48000c00 	.word	0x48000c00
 8002b1c:	48001000 	.word	0x48001000
 8002b20:	48001400 	.word	0x48001400
 8002b24:	48001800 	.word	0x48001800
 8002b28:	40010400 	.word	0x40010400

08002b2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	460b      	mov	r3, r1
 8002b36:	807b      	strh	r3, [r7, #2]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b3c:	787b      	ldrb	r3, [r7, #1]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b42:	887a      	ldrh	r2, [r7, #2]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b48:	e002      	b.n	8002b50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b4a:	887a      	ldrh	r2, [r7, #2]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e08d      	b.n	8002c8a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d106      	bne.n	8002b88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f7fe fa52 	bl	800102c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2224      	movs	r2, #36	@ 0x24
 8002b8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f022 0201 	bic.w	r2, r2, #1
 8002b9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685a      	ldr	r2, [r3, #4]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002bac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002bbc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d107      	bne.n	8002bd6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689a      	ldr	r2, [r3, #8]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002bd2:	609a      	str	r2, [r3, #8]
 8002bd4:	e006      	b.n	8002be4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	689a      	ldr	r2, [r3, #8]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002be2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d108      	bne.n	8002bfe <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	685a      	ldr	r2, [r3, #4]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002bfa:	605a      	str	r2, [r3, #4]
 8002bfc:	e007      	b.n	8002c0e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	685a      	ldr	r2, [r3, #4]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c0c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	6812      	ldr	r2, [r2, #0]
 8002c18:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002c1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c20:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68da      	ldr	r2, [r3, #12]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c30:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	691a      	ldr	r2, [r3, #16]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	69d9      	ldr	r1, [r3, #28]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a1a      	ldr	r2, [r3, #32]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f042 0201 	orr.w	r2, r2, #1
 8002c6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2220      	movs	r2, #32
 8002c76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
	...

08002c94 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b088      	sub	sp, #32
 8002c98:	af02      	add	r7, sp, #8
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	4608      	mov	r0, r1
 8002c9e:	4611      	mov	r1, r2
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	817b      	strh	r3, [r7, #10]
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	813b      	strh	r3, [r7, #8]
 8002caa:	4613      	mov	r3, r2
 8002cac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b20      	cmp	r3, #32
 8002cb8:	f040 80f9 	bne.w	8002eae <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cbc:	6a3b      	ldr	r3, [r7, #32]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d002      	beq.n	8002cc8 <HAL_I2C_Mem_Write+0x34>
 8002cc2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d105      	bne.n	8002cd4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cce:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e0ed      	b.n	8002eb0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d101      	bne.n	8002ce2 <HAL_I2C_Mem_Write+0x4e>
 8002cde:	2302      	movs	r3, #2
 8002ce0:	e0e6      	b.n	8002eb0 <HAL_I2C_Mem_Write+0x21c>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002cea:	f7ff fbb5 	bl	8002458 <HAL_GetTick>
 8002cee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	9300      	str	r3, [sp, #0]
 8002cf4:	2319      	movs	r3, #25
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f000 fbaf 	bl	8003460 <I2C_WaitOnFlagUntilTimeout>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e0d1      	b.n	8002eb0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2221      	movs	r2, #33	@ 0x21
 8002d10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2240      	movs	r2, #64	@ 0x40
 8002d18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6a3a      	ldr	r2, [r7, #32]
 8002d26:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002d2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d34:	88f8      	ldrh	r0, [r7, #6]
 8002d36:	893a      	ldrh	r2, [r7, #8]
 8002d38:	8979      	ldrh	r1, [r7, #10]
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	9301      	str	r3, [sp, #4]
 8002d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d40:	9300      	str	r3, [sp, #0]
 8002d42:	4603      	mov	r3, r0
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f000 fabf 	bl	80032c8 <I2C_RequestMemoryWrite>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d005      	beq.n	8002d5c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e0a9      	b.n	8002eb0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	2bff      	cmp	r3, #255	@ 0xff
 8002d64:	d90e      	bls.n	8002d84 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	22ff      	movs	r2, #255	@ 0xff
 8002d6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d70:	b2da      	uxtb	r2, r3
 8002d72:	8979      	ldrh	r1, [r7, #10]
 8002d74:	2300      	movs	r3, #0
 8002d76:	9300      	str	r3, [sp, #0]
 8002d78:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f000 fd33 	bl	80037e8 <I2C_TransferConfig>
 8002d82:	e00f      	b.n	8002da4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	8979      	ldrh	r1, [r7, #10]
 8002d96:	2300      	movs	r3, #0
 8002d98:	9300      	str	r3, [sp, #0]
 8002d9a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d9e:	68f8      	ldr	r0, [r7, #12]
 8002da0:	f000 fd22 	bl	80037e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002da4:	697a      	ldr	r2, [r7, #20]
 8002da6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f000 fbb2 	bl	8003512 <I2C_WaitOnTXISFlagUntilTimeout>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e07b      	b.n	8002eb0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dbc:	781a      	ldrb	r2, [r3, #0]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc8:	1c5a      	adds	r2, r3, #1
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002de0:	3b01      	subs	r3, #1
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d034      	beq.n	8002e5c <HAL_I2C_Mem_Write+0x1c8>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d130      	bne.n	8002e5c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	9300      	str	r3, [sp, #0]
 8002dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e00:	2200      	movs	r2, #0
 8002e02:	2180      	movs	r1, #128	@ 0x80
 8002e04:	68f8      	ldr	r0, [r7, #12]
 8002e06:	f000 fb2b 	bl	8003460 <I2C_WaitOnFlagUntilTimeout>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e04d      	b.n	8002eb0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	2bff      	cmp	r3, #255	@ 0xff
 8002e1c:	d90e      	bls.n	8002e3c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	22ff      	movs	r2, #255	@ 0xff
 8002e22:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e28:	b2da      	uxtb	r2, r3
 8002e2a:	8979      	ldrh	r1, [r7, #10]
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	9300      	str	r3, [sp, #0]
 8002e30:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f000 fcd7 	bl	80037e8 <I2C_TransferConfig>
 8002e3a:	e00f      	b.n	8002e5c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e40:	b29a      	uxth	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e4a:	b2da      	uxtb	r2, r3
 8002e4c:	8979      	ldrh	r1, [r7, #10]
 8002e4e:	2300      	movs	r3, #0
 8002e50:	9300      	str	r3, [sp, #0]
 8002e52:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f000 fcc6 	bl	80037e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d19e      	bne.n	8002da4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f000 fb98 	bl	80035a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e01a      	b.n	8002eb0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2220      	movs	r2, #32
 8002e80:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	6859      	ldr	r1, [r3, #4]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8002eb8 <HAL_I2C_Mem_Write+0x224>)
 8002e8e:	400b      	ands	r3, r1
 8002e90:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2220      	movs	r2, #32
 8002e96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	e000      	b.n	8002eb0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002eae:	2302      	movs	r3, #2
  }
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3718      	adds	r7, #24
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	fe00e800 	.word	0xfe00e800

08002ebc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b088      	sub	sp, #32
 8002ec0:	af02      	add	r7, sp, #8
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	4608      	mov	r0, r1
 8002ec6:	4611      	mov	r1, r2
 8002ec8:	461a      	mov	r2, r3
 8002eca:	4603      	mov	r3, r0
 8002ecc:	817b      	strh	r3, [r7, #10]
 8002ece:	460b      	mov	r3, r1
 8002ed0:	813b      	strh	r3, [r7, #8]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b20      	cmp	r3, #32
 8002ee0:	f040 80fd 	bne.w	80030de <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ee4:	6a3b      	ldr	r3, [r7, #32]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d002      	beq.n	8002ef0 <HAL_I2C_Mem_Read+0x34>
 8002eea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d105      	bne.n	8002efc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ef6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e0f1      	b.n	80030e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d101      	bne.n	8002f0a <HAL_I2C_Mem_Read+0x4e>
 8002f06:	2302      	movs	r3, #2
 8002f08:	e0ea      	b.n	80030e0 <HAL_I2C_Mem_Read+0x224>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f12:	f7ff faa1 	bl	8002458 <HAL_GetTick>
 8002f16:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	9300      	str	r3, [sp, #0]
 8002f1c:	2319      	movs	r3, #25
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002f24:	68f8      	ldr	r0, [r7, #12]
 8002f26:	f000 fa9b 	bl	8003460 <I2C_WaitOnFlagUntilTimeout>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e0d5      	b.n	80030e0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2222      	movs	r2, #34	@ 0x22
 8002f38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2240      	movs	r2, #64	@ 0x40
 8002f40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6a3a      	ldr	r2, [r7, #32]
 8002f4e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002f54:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f5c:	88f8      	ldrh	r0, [r7, #6]
 8002f5e:	893a      	ldrh	r2, [r7, #8]
 8002f60:	8979      	ldrh	r1, [r7, #10]
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	9301      	str	r3, [sp, #4]
 8002f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f68:	9300      	str	r3, [sp, #0]
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	f000 f9ff 	bl	8003370 <I2C_RequestMemoryRead>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d005      	beq.n	8002f84 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e0ad      	b.n	80030e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	2bff      	cmp	r3, #255	@ 0xff
 8002f8c:	d90e      	bls.n	8002fac <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2201      	movs	r2, #1
 8002f92:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	8979      	ldrh	r1, [r7, #10]
 8002f9c:	4b52      	ldr	r3, [pc, #328]	@ (80030e8 <HAL_I2C_Mem_Read+0x22c>)
 8002f9e:	9300      	str	r3, [sp, #0]
 8002fa0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002fa4:	68f8      	ldr	r0, [r7, #12]
 8002fa6:	f000 fc1f 	bl	80037e8 <I2C_TransferConfig>
 8002faa:	e00f      	b.n	8002fcc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fb0:	b29a      	uxth	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	8979      	ldrh	r1, [r7, #10]
 8002fbe:	4b4a      	ldr	r3, [pc, #296]	@ (80030e8 <HAL_I2C_Mem_Read+0x22c>)
 8002fc0:	9300      	str	r3, [sp, #0]
 8002fc2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f000 fc0e 	bl	80037e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	9300      	str	r3, [sp, #0]
 8002fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	2104      	movs	r1, #4
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f000 fa42 	bl	8003460 <I2C_WaitOnFlagUntilTimeout>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e07c      	b.n	80030e0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff0:	b2d2      	uxtb	r2, r2
 8002ff2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff8:	1c5a      	adds	r2, r3, #1
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003002:	3b01      	subs	r3, #1
 8003004:	b29a      	uxth	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800300e:	b29b      	uxth	r3, r3
 8003010:	3b01      	subs	r3, #1
 8003012:	b29a      	uxth	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800301c:	b29b      	uxth	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d034      	beq.n	800308c <HAL_I2C_Mem_Read+0x1d0>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003026:	2b00      	cmp	r3, #0
 8003028:	d130      	bne.n	800308c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003030:	2200      	movs	r2, #0
 8003032:	2180      	movs	r1, #128	@ 0x80
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f000 fa13 	bl	8003460 <I2C_WaitOnFlagUntilTimeout>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e04d      	b.n	80030e0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003048:	b29b      	uxth	r3, r3
 800304a:	2bff      	cmp	r3, #255	@ 0xff
 800304c:	d90e      	bls.n	800306c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2201      	movs	r2, #1
 8003052:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003058:	b2da      	uxtb	r2, r3
 800305a:	8979      	ldrh	r1, [r7, #10]
 800305c:	2300      	movs	r3, #0
 800305e:	9300      	str	r3, [sp, #0]
 8003060:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f000 fbbf 	bl	80037e8 <I2C_TransferConfig>
 800306a:	e00f      	b.n	800308c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003070:	b29a      	uxth	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800307a:	b2da      	uxtb	r2, r3
 800307c:	8979      	ldrh	r1, [r7, #10]
 800307e:	2300      	movs	r3, #0
 8003080:	9300      	str	r3, [sp, #0]
 8003082:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f000 fbae 	bl	80037e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003090:	b29b      	uxth	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d19a      	bne.n	8002fcc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f000 fa80 	bl	80035a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e01a      	b.n	80030e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2220      	movs	r2, #32
 80030b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	6859      	ldr	r1, [r3, #4]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	4b0b      	ldr	r3, [pc, #44]	@ (80030ec <HAL_I2C_Mem_Read+0x230>)
 80030be:	400b      	ands	r3, r1
 80030c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2220      	movs	r2, #32
 80030c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80030da:	2300      	movs	r3, #0
 80030dc:	e000      	b.n	80030e0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80030de:	2302      	movs	r3, #2
  }
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3718      	adds	r7, #24
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	80002400 	.word	0x80002400
 80030ec:	fe00e800 	.word	0xfe00e800

080030f0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b08a      	sub	sp, #40	@ 0x28
 80030f4:	af02      	add	r7, sp, #8
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	607a      	str	r2, [r7, #4]
 80030fa:	603b      	str	r3, [r7, #0]
 80030fc:	460b      	mov	r3, r1
 80030fe:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003100:	2300      	movs	r3, #0
 8003102:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b20      	cmp	r3, #32
 800310e:	f040 80d6 	bne.w	80032be <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800311c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003120:	d101      	bne.n	8003126 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8003122:	2302      	movs	r3, #2
 8003124:	e0cc      	b.n	80032c0 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800312c:	2b01      	cmp	r3, #1
 800312e:	d101      	bne.n	8003134 <HAL_I2C_IsDeviceReady+0x44>
 8003130:	2302      	movs	r3, #2
 8003132:	e0c5      	b.n	80032c0 <HAL_I2C_IsDeviceReady+0x1d0>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2224      	movs	r2, #36	@ 0x24
 8003140:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d107      	bne.n	8003162 <HAL_I2C_IsDeviceReady+0x72>
 8003152:	897b      	ldrh	r3, [r7, #10]
 8003154:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003158:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800315c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003160:	e006      	b.n	8003170 <HAL_I2C_IsDeviceReady+0x80>
 8003162:	897b      	ldrh	r3, [r7, #10]
 8003164:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003168:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800316c:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	6812      	ldr	r2, [r2, #0]
 8003174:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003176:	f7ff f96f 	bl	8002458 <HAL_GetTick>
 800317a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	f003 0320 	and.w	r3, r3, #32
 8003186:	2b20      	cmp	r3, #32
 8003188:	bf0c      	ite	eq
 800318a:	2301      	moveq	r3, #1
 800318c:	2300      	movne	r3, #0
 800318e:	b2db      	uxtb	r3, r3
 8003190:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	f003 0310 	and.w	r3, r3, #16
 800319c:	2b10      	cmp	r3, #16
 800319e:	bf0c      	ite	eq
 80031a0:	2301      	moveq	r3, #1
 80031a2:	2300      	movne	r3, #0
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80031a8:	e034      	b.n	8003214 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80031b0:	d01a      	beq.n	80031e8 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80031b2:	f7ff f951 	bl	8002458 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d302      	bcc.n	80031c8 <HAL_I2C_IsDeviceReady+0xd8>
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d10f      	bne.n	80031e8 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2220      	movs	r2, #32
 80031cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031d4:	f043 0220 	orr.w	r2, r3, #32
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e06b      	b.n	80032c0 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	f003 0320 	and.w	r3, r3, #32
 80031f2:	2b20      	cmp	r3, #32
 80031f4:	bf0c      	ite	eq
 80031f6:	2301      	moveq	r3, #1
 80031f8:	2300      	movne	r3, #0
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	f003 0310 	and.w	r3, r3, #16
 8003208:	2b10      	cmp	r3, #16
 800320a:	bf0c      	ite	eq
 800320c:	2301      	moveq	r3, #1
 800320e:	2300      	movne	r3, #0
 8003210:	b2db      	uxtb	r3, r3
 8003212:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003214:	7ffb      	ldrb	r3, [r7, #31]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d102      	bne.n	8003220 <HAL_I2C_IsDeviceReady+0x130>
 800321a:	7fbb      	ldrb	r3, [r7, #30]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d0c4      	beq.n	80031aa <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	f003 0310 	and.w	r3, r3, #16
 800322a:	2b10      	cmp	r3, #16
 800322c:	d01a      	beq.n	8003264 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	9300      	str	r3, [sp, #0]
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	2200      	movs	r2, #0
 8003236:	2120      	movs	r1, #32
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f000 f911 	bl	8003460 <I2C_WaitOnFlagUntilTimeout>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e03b      	b.n	80032c0 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2220      	movs	r2, #32
 800324e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2220      	movs	r2, #32
 8003254:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8003260:	2300      	movs	r3, #0
 8003262:	e02d      	b.n	80032c0 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	9300      	str	r3, [sp, #0]
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	2200      	movs	r2, #0
 800326c:	2120      	movs	r1, #32
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	f000 f8f6 	bl	8003460 <I2C_WaitOnFlagUntilTimeout>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e020      	b.n	80032c0 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2210      	movs	r2, #16
 8003284:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2220      	movs	r2, #32
 800328c:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	3301      	adds	r3, #1
 8003292:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	429a      	cmp	r2, r3
 800329a:	f63f af56 	bhi.w	800314a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2220      	movs	r2, #32
 80032a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032aa:	f043 0220 	orr.w	r2, r3, #32
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e000      	b.n	80032c0 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 80032be:	2302      	movs	r3, #2
  }
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3720      	adds	r7, #32
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af02      	add	r7, sp, #8
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	4608      	mov	r0, r1
 80032d2:	4611      	mov	r1, r2
 80032d4:	461a      	mov	r2, r3
 80032d6:	4603      	mov	r3, r0
 80032d8:	817b      	strh	r3, [r7, #10]
 80032da:	460b      	mov	r3, r1
 80032dc:	813b      	strh	r3, [r7, #8]
 80032de:	4613      	mov	r3, r2
 80032e0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80032e2:	88fb      	ldrh	r3, [r7, #6]
 80032e4:	b2da      	uxtb	r2, r3
 80032e6:	8979      	ldrh	r1, [r7, #10]
 80032e8:	4b20      	ldr	r3, [pc, #128]	@ (800336c <I2C_RequestMemoryWrite+0xa4>)
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80032f0:	68f8      	ldr	r0, [r7, #12]
 80032f2:	f000 fa79 	bl	80037e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032f6:	69fa      	ldr	r2, [r7, #28]
 80032f8:	69b9      	ldr	r1, [r7, #24]
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f000 f909 	bl	8003512 <I2C_WaitOnTXISFlagUntilTimeout>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e02c      	b.n	8003364 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800330a:	88fb      	ldrh	r3, [r7, #6]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d105      	bne.n	800331c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003310:	893b      	ldrh	r3, [r7, #8]
 8003312:	b2da      	uxtb	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	629a      	str	r2, [r3, #40]	@ 0x28
 800331a:	e015      	b.n	8003348 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800331c:	893b      	ldrh	r3, [r7, #8]
 800331e:	0a1b      	lsrs	r3, r3, #8
 8003320:	b29b      	uxth	r3, r3
 8003322:	b2da      	uxtb	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800332a:	69fa      	ldr	r2, [r7, #28]
 800332c:	69b9      	ldr	r1, [r7, #24]
 800332e:	68f8      	ldr	r0, [r7, #12]
 8003330:	f000 f8ef 	bl	8003512 <I2C_WaitOnTXISFlagUntilTimeout>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e012      	b.n	8003364 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800333e:	893b      	ldrh	r3, [r7, #8]
 8003340:	b2da      	uxtb	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	9300      	str	r3, [sp, #0]
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	2200      	movs	r2, #0
 8003350:	2180      	movs	r1, #128	@ 0x80
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	f000 f884 	bl	8003460 <I2C_WaitOnFlagUntilTimeout>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e000      	b.n	8003364 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	80002000 	.word	0x80002000

08003370 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af02      	add	r7, sp, #8
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	4608      	mov	r0, r1
 800337a:	4611      	mov	r1, r2
 800337c:	461a      	mov	r2, r3
 800337e:	4603      	mov	r3, r0
 8003380:	817b      	strh	r3, [r7, #10]
 8003382:	460b      	mov	r3, r1
 8003384:	813b      	strh	r3, [r7, #8]
 8003386:	4613      	mov	r3, r2
 8003388:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800338a:	88fb      	ldrh	r3, [r7, #6]
 800338c:	b2da      	uxtb	r2, r3
 800338e:	8979      	ldrh	r1, [r7, #10]
 8003390:	4b20      	ldr	r3, [pc, #128]	@ (8003414 <I2C_RequestMemoryRead+0xa4>)
 8003392:	9300      	str	r3, [sp, #0]
 8003394:	2300      	movs	r3, #0
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	f000 fa26 	bl	80037e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800339c:	69fa      	ldr	r2, [r7, #28]
 800339e:	69b9      	ldr	r1, [r7, #24]
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f000 f8b6 	bl	8003512 <I2C_WaitOnTXISFlagUntilTimeout>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e02c      	b.n	800340a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033b0:	88fb      	ldrh	r3, [r7, #6]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d105      	bne.n	80033c2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80033b6:	893b      	ldrh	r3, [r7, #8]
 80033b8:	b2da      	uxtb	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	629a      	str	r2, [r3, #40]	@ 0x28
 80033c0:	e015      	b.n	80033ee <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80033c2:	893b      	ldrh	r3, [r7, #8]
 80033c4:	0a1b      	lsrs	r3, r3, #8
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	b2da      	uxtb	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033d0:	69fa      	ldr	r2, [r7, #28]
 80033d2:	69b9      	ldr	r1, [r7, #24]
 80033d4:	68f8      	ldr	r0, [r7, #12]
 80033d6:	f000 f89c 	bl	8003512 <I2C_WaitOnTXISFlagUntilTimeout>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d001      	beq.n	80033e4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e012      	b.n	800340a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80033e4:	893b      	ldrh	r3, [r7, #8]
 80033e6:	b2da      	uxtb	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	9300      	str	r3, [sp, #0]
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	2200      	movs	r2, #0
 80033f6:	2140      	movs	r1, #64	@ 0x40
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f000 f831 	bl	8003460 <I2C_WaitOnFlagUntilTimeout>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e000      	b.n	800340a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	80002000 	.word	0x80002000

08003418 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b02      	cmp	r3, #2
 800342c:	d103      	bne.n	8003436 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2200      	movs	r2, #0
 8003434:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	f003 0301 	and.w	r3, r3, #1
 8003440:	2b01      	cmp	r3, #1
 8003442:	d007      	beq.n	8003454 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	699a      	ldr	r2, [r3, #24]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f042 0201 	orr.w	r2, r2, #1
 8003452:	619a      	str	r2, [r3, #24]
  }
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	603b      	str	r3, [r7, #0]
 800346c:	4613      	mov	r3, r2
 800346e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003470:	e03b      	b.n	80034ea <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	6839      	ldr	r1, [r7, #0]
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f000 f8d6 	bl	8003628 <I2C_IsErrorOccurred>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e041      	b.n	800350a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800348c:	d02d      	beq.n	80034ea <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800348e:	f7fe ffe3 	bl	8002458 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	683a      	ldr	r2, [r7, #0]
 800349a:	429a      	cmp	r2, r3
 800349c:	d302      	bcc.n	80034a4 <I2C_WaitOnFlagUntilTimeout+0x44>
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d122      	bne.n	80034ea <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	699a      	ldr	r2, [r3, #24]
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	4013      	ands	r3, r2
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	bf0c      	ite	eq
 80034b4:	2301      	moveq	r3, #1
 80034b6:	2300      	movne	r3, #0
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	461a      	mov	r2, r3
 80034bc:	79fb      	ldrb	r3, [r7, #7]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d113      	bne.n	80034ea <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034c6:	f043 0220 	orr.w	r2, r3, #32
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2220      	movs	r2, #32
 80034d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e00f      	b.n	800350a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	699a      	ldr	r2, [r3, #24]
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	4013      	ands	r3, r2
 80034f4:	68ba      	ldr	r2, [r7, #8]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	bf0c      	ite	eq
 80034fa:	2301      	moveq	r3, #1
 80034fc:	2300      	movne	r3, #0
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	461a      	mov	r2, r3
 8003502:	79fb      	ldrb	r3, [r7, #7]
 8003504:	429a      	cmp	r2, r3
 8003506:	d0b4      	beq.n	8003472 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b084      	sub	sp, #16
 8003516:	af00      	add	r7, sp, #0
 8003518:	60f8      	str	r0, [r7, #12]
 800351a:	60b9      	str	r1, [r7, #8]
 800351c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800351e:	e033      	b.n	8003588 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	68b9      	ldr	r1, [r7, #8]
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f000 f87f 	bl	8003628 <I2C_IsErrorOccurred>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d001      	beq.n	8003534 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e031      	b.n	8003598 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800353a:	d025      	beq.n	8003588 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800353c:	f7fe ff8c 	bl	8002458 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	68ba      	ldr	r2, [r7, #8]
 8003548:	429a      	cmp	r2, r3
 800354a:	d302      	bcc.n	8003552 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d11a      	bne.n	8003588 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b02      	cmp	r3, #2
 800355e:	d013      	beq.n	8003588 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003564:	f043 0220 	orr.w	r2, r3, #32
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2220      	movs	r2, #32
 8003570:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e007      	b.n	8003598 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b02      	cmp	r3, #2
 8003594:	d1c4      	bne.n	8003520 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035ac:	e02f      	b.n	800360e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	68b9      	ldr	r1, [r7, #8]
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f000 f838 	bl	8003628 <I2C_IsErrorOccurred>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e02d      	b.n	800361e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035c2:	f7fe ff49 	bl	8002458 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	68ba      	ldr	r2, [r7, #8]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d302      	bcc.n	80035d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d11a      	bne.n	800360e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	f003 0320 	and.w	r3, r3, #32
 80035e2:	2b20      	cmp	r3, #32
 80035e4:	d013      	beq.n	800360e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ea:	f043 0220 	orr.w	r2, r3, #32
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2220      	movs	r2, #32
 80035f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e007      	b.n	800361e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	f003 0320 	and.w	r3, r3, #32
 8003618:	2b20      	cmp	r3, #32
 800361a:	d1c8      	bne.n	80035ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
	...

08003628 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b08a      	sub	sp, #40	@ 0x28
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003634:	2300      	movs	r3, #0
 8003636:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003642:	2300      	movs	r3, #0
 8003644:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	f003 0310 	and.w	r3, r3, #16
 8003650:	2b00      	cmp	r3, #0
 8003652:	d068      	beq.n	8003726 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2210      	movs	r2, #16
 800365a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800365c:	e049      	b.n	80036f2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003664:	d045      	beq.n	80036f2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003666:	f7fe fef7 	bl	8002458 <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	68ba      	ldr	r2, [r7, #8]
 8003672:	429a      	cmp	r2, r3
 8003674:	d302      	bcc.n	800367c <I2C_IsErrorOccurred+0x54>
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d13a      	bne.n	80036f2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003686:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800368e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800369a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800369e:	d121      	bne.n	80036e4 <I2C_IsErrorOccurred+0xbc>
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036a6:	d01d      	beq.n	80036e4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80036a8:	7cfb      	ldrb	r3, [r7, #19]
 80036aa:	2b20      	cmp	r3, #32
 80036ac:	d01a      	beq.n	80036e4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	685a      	ldr	r2, [r3, #4]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80036bc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80036be:	f7fe fecb 	bl	8002458 <HAL_GetTick>
 80036c2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036c4:	e00e      	b.n	80036e4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80036c6:	f7fe fec7 	bl	8002458 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b19      	cmp	r3, #25
 80036d2:	d907      	bls.n	80036e4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80036d4:	6a3b      	ldr	r3, [r7, #32]
 80036d6:	f043 0320 	orr.w	r3, r3, #32
 80036da:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80036e2:	e006      	b.n	80036f2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	f003 0320 	and.w	r3, r3, #32
 80036ee:	2b20      	cmp	r3, #32
 80036f0:	d1e9      	bne.n	80036c6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	f003 0320 	and.w	r3, r3, #32
 80036fc:	2b20      	cmp	r3, #32
 80036fe:	d003      	beq.n	8003708 <I2C_IsErrorOccurred+0xe0>
 8003700:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003704:	2b00      	cmp	r3, #0
 8003706:	d0aa      	beq.n	800365e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003708:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800370c:	2b00      	cmp	r3, #0
 800370e:	d103      	bne.n	8003718 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2220      	movs	r2, #32
 8003716:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003718:	6a3b      	ldr	r3, [r7, #32]
 800371a:	f043 0304 	orr.w	r3, r3, #4
 800371e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00b      	beq.n	8003750 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003738:	6a3b      	ldr	r3, [r7, #32]
 800373a:	f043 0301 	orr.w	r3, r3, #1
 800373e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003748:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00b      	beq.n	8003772 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800375a:	6a3b      	ldr	r3, [r7, #32]
 800375c:	f043 0308 	orr.w	r3, r3, #8
 8003760:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800376a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00b      	beq.n	8003794 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800377c:	6a3b      	ldr	r3, [r7, #32]
 800377e:	f043 0302 	orr.w	r3, r3, #2
 8003782:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800378c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003794:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003798:	2b00      	cmp	r3, #0
 800379a:	d01c      	beq.n	80037d6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	f7ff fe3b 	bl	8003418 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	6859      	ldr	r1, [r3, #4]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	4b0d      	ldr	r3, [pc, #52]	@ (80037e4 <I2C_IsErrorOccurred+0x1bc>)
 80037ae:	400b      	ands	r3, r1
 80037b0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80037b6:	6a3b      	ldr	r3, [r7, #32]
 80037b8:	431a      	orrs	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2220      	movs	r2, #32
 80037c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80037d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3728      	adds	r7, #40	@ 0x28
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	fe00e800 	.word	0xfe00e800

080037e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b087      	sub	sp, #28
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	607b      	str	r3, [r7, #4]
 80037f2:	460b      	mov	r3, r1
 80037f4:	817b      	strh	r3, [r7, #10]
 80037f6:	4613      	mov	r3, r2
 80037f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037fa:	897b      	ldrh	r3, [r7, #10]
 80037fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003800:	7a7b      	ldrb	r3, [r7, #9]
 8003802:	041b      	lsls	r3, r3, #16
 8003804:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003808:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800380e:	6a3b      	ldr	r3, [r7, #32]
 8003810:	4313      	orrs	r3, r2
 8003812:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003816:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	685a      	ldr	r2, [r3, #4]
 800381e:	6a3b      	ldr	r3, [r7, #32]
 8003820:	0d5b      	lsrs	r3, r3, #21
 8003822:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003826:	4b08      	ldr	r3, [pc, #32]	@ (8003848 <I2C_TransferConfig+0x60>)
 8003828:	430b      	orrs	r3, r1
 800382a:	43db      	mvns	r3, r3
 800382c:	ea02 0103 	and.w	r1, r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	430a      	orrs	r2, r1
 8003838:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800383a:	bf00      	nop
 800383c:	371c      	adds	r7, #28
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	03ff63ff 	.word	0x03ff63ff

0800384c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b20      	cmp	r3, #32
 8003860:	d138      	bne.n	80038d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003868:	2b01      	cmp	r3, #1
 800386a:	d101      	bne.n	8003870 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800386c:	2302      	movs	r3, #2
 800386e:	e032      	b.n	80038d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2224      	movs	r2, #36	@ 0x24
 800387c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f022 0201 	bic.w	r2, r2, #1
 800388e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800389e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	6819      	ldr	r1, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	683a      	ldr	r2, [r7, #0]
 80038ac:	430a      	orrs	r2, r1
 80038ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f042 0201 	orr.w	r2, r2, #1
 80038be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2220      	movs	r2, #32
 80038c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80038d0:	2300      	movs	r3, #0
 80038d2:	e000      	b.n	80038d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80038d4:	2302      	movs	r3, #2
  }
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr

080038e2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80038e2:	b480      	push	{r7}
 80038e4:	b085      	sub	sp, #20
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
 80038ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2b20      	cmp	r3, #32
 80038f6:	d139      	bne.n	800396c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d101      	bne.n	8003906 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003902:	2302      	movs	r3, #2
 8003904:	e033      	b.n	800396e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2224      	movs	r2, #36	@ 0x24
 8003912:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f022 0201 	bic.w	r2, r2, #1
 8003924:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003934:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	021b      	lsls	r3, r3, #8
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	4313      	orrs	r3, r2
 800393e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f042 0201 	orr.w	r2, r2, #1
 8003956:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2220      	movs	r2, #32
 800395c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003968:	2300      	movs	r3, #0
 800396a:	e000      	b.n	800396e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800396c:	2302      	movs	r3, #2
  }
}
 800396e:	4618      	mov	r0, r3
 8003970:	3714      	adds	r7, #20
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
	...

0800397c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800397c:	b480      	push	{r7}
 800397e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003980:	4b04      	ldr	r3, [pc, #16]	@ (8003994 <HAL_PWREx_GetVoltageRange+0x18>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003988:	4618      	mov	r0, r3
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	40007000 	.word	0x40007000

08003998 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039a6:	d130      	bne.n	8003a0a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80039a8:	4b23      	ldr	r3, [pc, #140]	@ (8003a38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80039b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039b4:	d038      	beq.n	8003a28 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80039b6:	4b20      	ldr	r3, [pc, #128]	@ (8003a38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80039be:	4a1e      	ldr	r2, [pc, #120]	@ (8003a38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039c0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80039c4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80039c6:	4b1d      	ldr	r3, [pc, #116]	@ (8003a3c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2232      	movs	r2, #50	@ 0x32
 80039cc:	fb02 f303 	mul.w	r3, r2, r3
 80039d0:	4a1b      	ldr	r2, [pc, #108]	@ (8003a40 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80039d2:	fba2 2303 	umull	r2, r3, r2, r3
 80039d6:	0c9b      	lsrs	r3, r3, #18
 80039d8:	3301      	adds	r3, #1
 80039da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039dc:	e002      	b.n	80039e4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	3b01      	subs	r3, #1
 80039e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039e4:	4b14      	ldr	r3, [pc, #80]	@ (8003a38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039e6:	695b      	ldr	r3, [r3, #20]
 80039e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039f0:	d102      	bne.n	80039f8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1f2      	bne.n	80039de <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80039f8:	4b0f      	ldr	r3, [pc, #60]	@ (8003a38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039fa:	695b      	ldr	r3, [r3, #20]
 80039fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a04:	d110      	bne.n	8003a28 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e00f      	b.n	8003a2a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8003a38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003a12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a16:	d007      	beq.n	8003a28 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a18:	4b07      	ldr	r3, [pc, #28]	@ (8003a38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003a20:	4a05      	ldr	r2, [pc, #20]	@ (8003a38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a26:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3714      	adds	r7, #20
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	40007000 	.word	0x40007000
 8003a3c:	20000004 	.word	0x20000004
 8003a40:	431bde83 	.word	0x431bde83

08003a44 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b088      	sub	sp, #32
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e3ca      	b.n	80041ec <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a56:	4b97      	ldr	r3, [pc, #604]	@ (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f003 030c 	and.w	r3, r3, #12
 8003a5e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a60:	4b94      	ldr	r3, [pc, #592]	@ (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	f003 0303 	and.w	r3, r3, #3
 8003a68:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0310 	and.w	r3, r3, #16
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f000 80e4 	beq.w	8003c40 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d007      	beq.n	8003a8e <HAL_RCC_OscConfig+0x4a>
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	2b0c      	cmp	r3, #12
 8003a82:	f040 808b 	bne.w	8003b9c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	f040 8087 	bne.w	8003b9c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a8e:	4b89      	ldr	r3, [pc, #548]	@ (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d005      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x62>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e3a2      	b.n	80041ec <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a1a      	ldr	r2, [r3, #32]
 8003aaa:	4b82      	ldr	r3, [pc, #520]	@ (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0308 	and.w	r3, r3, #8
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d004      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x7c>
 8003ab6:	4b7f      	ldr	r3, [pc, #508]	@ (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003abe:	e005      	b.n	8003acc <HAL_RCC_OscConfig+0x88>
 8003ac0:	4b7c      	ldr	r3, [pc, #496]	@ (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003ac2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ac6:	091b      	lsrs	r3, r3, #4
 8003ac8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d223      	bcs.n	8003b18 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f000 fd55 	bl	8004584 <RCC_SetFlashLatencyFromMSIRange>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e383      	b.n	80041ec <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ae4:	4b73      	ldr	r3, [pc, #460]	@ (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a72      	ldr	r2, [pc, #456]	@ (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003aea:	f043 0308 	orr.w	r3, r3, #8
 8003aee:	6013      	str	r3, [r2, #0]
 8003af0:	4b70      	ldr	r3, [pc, #448]	@ (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a1b      	ldr	r3, [r3, #32]
 8003afc:	496d      	ldr	r1, [pc, #436]	@ (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b02:	4b6c      	ldr	r3, [pc, #432]	@ (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	69db      	ldr	r3, [r3, #28]
 8003b0e:	021b      	lsls	r3, r3, #8
 8003b10:	4968      	ldr	r1, [pc, #416]	@ (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	604b      	str	r3, [r1, #4]
 8003b16:	e025      	b.n	8003b64 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b18:	4b66      	ldr	r3, [pc, #408]	@ (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a65      	ldr	r2, [pc, #404]	@ (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003b1e:	f043 0308 	orr.w	r3, r3, #8
 8003b22:	6013      	str	r3, [r2, #0]
 8003b24:	4b63      	ldr	r3, [pc, #396]	@ (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a1b      	ldr	r3, [r3, #32]
 8003b30:	4960      	ldr	r1, [pc, #384]	@ (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b36:	4b5f      	ldr	r3, [pc, #380]	@ (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	021b      	lsls	r3, r3, #8
 8003b44:	495b      	ldr	r1, [pc, #364]	@ (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d109      	bne.n	8003b64 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	4618      	mov	r0, r3
 8003b56:	f000 fd15 	bl	8004584 <RCC_SetFlashLatencyFromMSIRange>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d001      	beq.n	8003b64 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e343      	b.n	80041ec <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b64:	f000 fc4a 	bl	80043fc <HAL_RCC_GetSysClockFreq>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	4b52      	ldr	r3, [pc, #328]	@ (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	091b      	lsrs	r3, r3, #4
 8003b70:	f003 030f 	and.w	r3, r3, #15
 8003b74:	4950      	ldr	r1, [pc, #320]	@ (8003cb8 <HAL_RCC_OscConfig+0x274>)
 8003b76:	5ccb      	ldrb	r3, [r1, r3]
 8003b78:	f003 031f 	and.w	r3, r3, #31
 8003b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b80:	4a4e      	ldr	r2, [pc, #312]	@ (8003cbc <HAL_RCC_OscConfig+0x278>)
 8003b82:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003b84:	4b4e      	ldr	r3, [pc, #312]	@ (8003cc0 <HAL_RCC_OscConfig+0x27c>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7fe fc15 	bl	80023b8 <HAL_InitTick>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003b92:	7bfb      	ldrb	r3, [r7, #15]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d052      	beq.n	8003c3e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003b98:	7bfb      	ldrb	r3, [r7, #15]
 8003b9a:	e327      	b.n	80041ec <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d032      	beq.n	8003c0a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003ba4:	4b43      	ldr	r3, [pc, #268]	@ (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a42      	ldr	r2, [pc, #264]	@ (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003baa:	f043 0301 	orr.w	r3, r3, #1
 8003bae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003bb0:	f7fe fc52 	bl	8002458 <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003bb8:	f7fe fc4e 	bl	8002458 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e310      	b.n	80041ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003bca:	4b3a      	ldr	r3, [pc, #232]	@ (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d0f0      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003bd6:	4b37      	ldr	r3, [pc, #220]	@ (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a36      	ldr	r2, [pc, #216]	@ (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003bdc:	f043 0308 	orr.w	r3, r3, #8
 8003be0:	6013      	str	r3, [r2, #0]
 8003be2:	4b34      	ldr	r3, [pc, #208]	@ (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	4931      	ldr	r1, [pc, #196]	@ (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bf4:	4b2f      	ldr	r3, [pc, #188]	@ (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	69db      	ldr	r3, [r3, #28]
 8003c00:	021b      	lsls	r3, r3, #8
 8003c02:	492c      	ldr	r1, [pc, #176]	@ (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	604b      	str	r3, [r1, #4]
 8003c08:	e01a      	b.n	8003c40 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003c0a:	4b2a      	ldr	r3, [pc, #168]	@ (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a29      	ldr	r2, [pc, #164]	@ (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003c10:	f023 0301 	bic.w	r3, r3, #1
 8003c14:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c16:	f7fe fc1f 	bl	8002458 <HAL_GetTick>
 8003c1a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c1c:	e008      	b.n	8003c30 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c1e:	f7fe fc1b 	bl	8002458 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d901      	bls.n	8003c30 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e2dd      	b.n	80041ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c30:	4b20      	ldr	r3, [pc, #128]	@ (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0302 	and.w	r3, r3, #2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1f0      	bne.n	8003c1e <HAL_RCC_OscConfig+0x1da>
 8003c3c:	e000      	b.n	8003c40 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c3e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0301 	and.w	r3, r3, #1
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d074      	beq.n	8003d36 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	2b08      	cmp	r3, #8
 8003c50:	d005      	beq.n	8003c5e <HAL_RCC_OscConfig+0x21a>
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	2b0c      	cmp	r3, #12
 8003c56:	d10e      	bne.n	8003c76 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	2b03      	cmp	r3, #3
 8003c5c:	d10b      	bne.n	8003c76 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c5e:	4b15      	ldr	r3, [pc, #84]	@ (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d064      	beq.n	8003d34 <HAL_RCC_OscConfig+0x2f0>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d160      	bne.n	8003d34 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e2ba      	b.n	80041ec <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c7e:	d106      	bne.n	8003c8e <HAL_RCC_OscConfig+0x24a>
 8003c80:	4b0c      	ldr	r3, [pc, #48]	@ (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a0b      	ldr	r2, [pc, #44]	@ (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003c86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c8a:	6013      	str	r3, [r2, #0]
 8003c8c:	e026      	b.n	8003cdc <HAL_RCC_OscConfig+0x298>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c96:	d115      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x280>
 8003c98:	4b06      	ldr	r3, [pc, #24]	@ (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a05      	ldr	r2, [pc, #20]	@ (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003c9e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ca2:	6013      	str	r3, [r2, #0]
 8003ca4:	4b03      	ldr	r3, [pc, #12]	@ (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a02      	ldr	r2, [pc, #8]	@ (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003caa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cae:	6013      	str	r3, [r2, #0]
 8003cb0:	e014      	b.n	8003cdc <HAL_RCC_OscConfig+0x298>
 8003cb2:	bf00      	nop
 8003cb4:	40021000 	.word	0x40021000
 8003cb8:	0800cc90 	.word	0x0800cc90
 8003cbc:	20000004 	.word	0x20000004
 8003cc0:	20000008 	.word	0x20000008
 8003cc4:	4ba0      	ldr	r3, [pc, #640]	@ (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a9f      	ldr	r2, [pc, #636]	@ (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003cca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cce:	6013      	str	r3, [r2, #0]
 8003cd0:	4b9d      	ldr	r3, [pc, #628]	@ (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a9c      	ldr	r2, [pc, #624]	@ (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003cd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d013      	beq.n	8003d0c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce4:	f7fe fbb8 	bl	8002458 <HAL_GetTick>
 8003ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cea:	e008      	b.n	8003cfe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cec:	f7fe fbb4 	bl	8002458 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b64      	cmp	r3, #100	@ 0x64
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e276      	b.n	80041ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cfe:	4b92      	ldr	r3, [pc, #584]	@ (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d0f0      	beq.n	8003cec <HAL_RCC_OscConfig+0x2a8>
 8003d0a:	e014      	b.n	8003d36 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d0c:	f7fe fba4 	bl	8002458 <HAL_GetTick>
 8003d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d12:	e008      	b.n	8003d26 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d14:	f7fe fba0 	bl	8002458 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b64      	cmp	r3, #100	@ 0x64
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e262      	b.n	80041ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d26:	4b88      	ldr	r3, [pc, #544]	@ (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1f0      	bne.n	8003d14 <HAL_RCC_OscConfig+0x2d0>
 8003d32:	e000      	b.n	8003d36 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d060      	beq.n	8003e04 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	2b04      	cmp	r3, #4
 8003d46:	d005      	beq.n	8003d54 <HAL_RCC_OscConfig+0x310>
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	2b0c      	cmp	r3, #12
 8003d4c:	d119      	bne.n	8003d82 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d116      	bne.n	8003d82 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d54:	4b7c      	ldr	r3, [pc, #496]	@ (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d005      	beq.n	8003d6c <HAL_RCC_OscConfig+0x328>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d101      	bne.n	8003d6c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e23f      	b.n	80041ec <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d6c:	4b76      	ldr	r3, [pc, #472]	@ (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	061b      	lsls	r3, r3, #24
 8003d7a:	4973      	ldr	r1, [pc, #460]	@ (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d80:	e040      	b.n	8003e04 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d023      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d8a:	4b6f      	ldr	r3, [pc, #444]	@ (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a6e      	ldr	r2, [pc, #440]	@ (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003d90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d96:	f7fe fb5f 	bl	8002458 <HAL_GetTick>
 8003d9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d9c:	e008      	b.n	8003db0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d9e:	f7fe fb5b 	bl	8002458 <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d901      	bls.n	8003db0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e21d      	b.n	80041ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003db0:	4b65      	ldr	r3, [pc, #404]	@ (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d0f0      	beq.n	8003d9e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dbc:	4b62      	ldr	r3, [pc, #392]	@ (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	061b      	lsls	r3, r3, #24
 8003dca:	495f      	ldr	r1, [pc, #380]	@ (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	604b      	str	r3, [r1, #4]
 8003dd0:	e018      	b.n	8003e04 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dd2:	4b5d      	ldr	r3, [pc, #372]	@ (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a5c      	ldr	r2, [pc, #368]	@ (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003dd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ddc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dde:	f7fe fb3b 	bl	8002458 <HAL_GetTick>
 8003de2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003de4:	e008      	b.n	8003df8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003de6:	f7fe fb37 	bl	8002458 <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d901      	bls.n	8003df8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e1f9      	b.n	80041ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003df8:	4b53      	ldr	r3, [pc, #332]	@ (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1f0      	bne.n	8003de6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0308 	and.w	r3, r3, #8
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d03c      	beq.n	8003e8a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	695b      	ldr	r3, [r3, #20]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d01c      	beq.n	8003e52 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e18:	4b4b      	ldr	r3, [pc, #300]	@ (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003e1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e1e:	4a4a      	ldr	r2, [pc, #296]	@ (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003e20:	f043 0301 	orr.w	r3, r3, #1
 8003e24:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e28:	f7fe fb16 	bl	8002458 <HAL_GetTick>
 8003e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e2e:	e008      	b.n	8003e42 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e30:	f7fe fb12 	bl	8002458 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e1d4      	b.n	80041ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e42:	4b41      	ldr	r3, [pc, #260]	@ (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003e44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d0ef      	beq.n	8003e30 <HAL_RCC_OscConfig+0x3ec>
 8003e50:	e01b      	b.n	8003e8a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e52:	4b3d      	ldr	r3, [pc, #244]	@ (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003e54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e58:	4a3b      	ldr	r2, [pc, #236]	@ (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003e5a:	f023 0301 	bic.w	r3, r3, #1
 8003e5e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e62:	f7fe faf9 	bl	8002458 <HAL_GetTick>
 8003e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e68:	e008      	b.n	8003e7c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e6a:	f7fe faf5 	bl	8002458 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d901      	bls.n	8003e7c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e1b7      	b.n	80041ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e7c:	4b32      	ldr	r3, [pc, #200]	@ (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1ef      	bne.n	8003e6a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0304 	and.w	r3, r3, #4
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f000 80a6 	beq.w	8003fe4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003e9c:	4b2a      	ldr	r3, [pc, #168]	@ (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003e9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ea0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d10d      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ea8:	4b27      	ldr	r3, [pc, #156]	@ (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003eaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eac:	4a26      	ldr	r2, [pc, #152]	@ (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003eae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003eb2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003eb4:	4b24      	ldr	r3, [pc, #144]	@ (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003eb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ebc:	60bb      	str	r3, [r7, #8]
 8003ebe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ec4:	4b21      	ldr	r3, [pc, #132]	@ (8003f4c <HAL_RCC_OscConfig+0x508>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d118      	bne.n	8003f02 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ed0:	4b1e      	ldr	r3, [pc, #120]	@ (8003f4c <HAL_RCC_OscConfig+0x508>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a1d      	ldr	r2, [pc, #116]	@ (8003f4c <HAL_RCC_OscConfig+0x508>)
 8003ed6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003eda:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003edc:	f7fe fabc 	bl	8002458 <HAL_GetTick>
 8003ee0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ee4:	f7fe fab8 	bl	8002458 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e17a      	b.n	80041ec <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ef6:	4b15      	ldr	r3, [pc, #84]	@ (8003f4c <HAL_RCC_OscConfig+0x508>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d0f0      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d108      	bne.n	8003f1c <HAL_RCC_OscConfig+0x4d8>
 8003f0a:	4b0f      	ldr	r3, [pc, #60]	@ (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f10:	4a0d      	ldr	r2, [pc, #52]	@ (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003f12:	f043 0301 	orr.w	r3, r3, #1
 8003f16:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f1a:	e029      	b.n	8003f70 <HAL_RCC_OscConfig+0x52c>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	2b05      	cmp	r3, #5
 8003f22:	d115      	bne.n	8003f50 <HAL_RCC_OscConfig+0x50c>
 8003f24:	4b08      	ldr	r3, [pc, #32]	@ (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f2a:	4a07      	ldr	r2, [pc, #28]	@ (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003f2c:	f043 0304 	orr.w	r3, r3, #4
 8003f30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f34:	4b04      	ldr	r3, [pc, #16]	@ (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f3a:	4a03      	ldr	r2, [pc, #12]	@ (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003f3c:	f043 0301 	orr.w	r3, r3, #1
 8003f40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f44:	e014      	b.n	8003f70 <HAL_RCC_OscConfig+0x52c>
 8003f46:	bf00      	nop
 8003f48:	40021000 	.word	0x40021000
 8003f4c:	40007000 	.word	0x40007000
 8003f50:	4b9c      	ldr	r3, [pc, #624]	@ (80041c4 <HAL_RCC_OscConfig+0x780>)
 8003f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f56:	4a9b      	ldr	r2, [pc, #620]	@ (80041c4 <HAL_RCC_OscConfig+0x780>)
 8003f58:	f023 0301 	bic.w	r3, r3, #1
 8003f5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f60:	4b98      	ldr	r3, [pc, #608]	@ (80041c4 <HAL_RCC_OscConfig+0x780>)
 8003f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f66:	4a97      	ldr	r2, [pc, #604]	@ (80041c4 <HAL_RCC_OscConfig+0x780>)
 8003f68:	f023 0304 	bic.w	r3, r3, #4
 8003f6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d016      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f78:	f7fe fa6e 	bl	8002458 <HAL_GetTick>
 8003f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f7e:	e00a      	b.n	8003f96 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f80:	f7fe fa6a 	bl	8002458 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e12a      	b.n	80041ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f96:	4b8b      	ldr	r3, [pc, #556]	@ (80041c4 <HAL_RCC_OscConfig+0x780>)
 8003f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f9c:	f003 0302 	and.w	r3, r3, #2
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d0ed      	beq.n	8003f80 <HAL_RCC_OscConfig+0x53c>
 8003fa4:	e015      	b.n	8003fd2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fa6:	f7fe fa57 	bl	8002458 <HAL_GetTick>
 8003faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fac:	e00a      	b.n	8003fc4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fae:	f7fe fa53 	bl	8002458 <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d901      	bls.n	8003fc4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e113      	b.n	80041ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fc4:	4b7f      	ldr	r3, [pc, #508]	@ (80041c4 <HAL_RCC_OscConfig+0x780>)
 8003fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1ed      	bne.n	8003fae <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fd2:	7ffb      	ldrb	r3, [r7, #31]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d105      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fd8:	4b7a      	ldr	r3, [pc, #488]	@ (80041c4 <HAL_RCC_OscConfig+0x780>)
 8003fda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fdc:	4a79      	ldr	r2, [pc, #484]	@ (80041c4 <HAL_RCC_OscConfig+0x780>)
 8003fde:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fe2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f000 80fe 	beq.w	80041ea <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	f040 80d0 	bne.w	8004198 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003ff8:	4b72      	ldr	r3, [pc, #456]	@ (80041c4 <HAL_RCC_OscConfig+0x780>)
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f003 0203 	and.w	r2, r3, #3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004008:	429a      	cmp	r2, r3
 800400a:	d130      	bne.n	800406e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004016:	3b01      	subs	r3, #1
 8004018:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800401a:	429a      	cmp	r2, r3
 800401c:	d127      	bne.n	800406e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004028:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800402a:	429a      	cmp	r2, r3
 800402c:	d11f      	bne.n	800406e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004038:	2a07      	cmp	r2, #7
 800403a:	bf14      	ite	ne
 800403c:	2201      	movne	r2, #1
 800403e:	2200      	moveq	r2, #0
 8004040:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004042:	4293      	cmp	r3, r2
 8004044:	d113      	bne.n	800406e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004050:	085b      	lsrs	r3, r3, #1
 8004052:	3b01      	subs	r3, #1
 8004054:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004056:	429a      	cmp	r2, r3
 8004058:	d109      	bne.n	800406e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004064:	085b      	lsrs	r3, r3, #1
 8004066:	3b01      	subs	r3, #1
 8004068:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800406a:	429a      	cmp	r2, r3
 800406c:	d06e      	beq.n	800414c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	2b0c      	cmp	r3, #12
 8004072:	d069      	beq.n	8004148 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004074:	4b53      	ldr	r3, [pc, #332]	@ (80041c4 <HAL_RCC_OscConfig+0x780>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d105      	bne.n	800408c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004080:	4b50      	ldr	r3, [pc, #320]	@ (80041c4 <HAL_RCC_OscConfig+0x780>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d001      	beq.n	8004090 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e0ad      	b.n	80041ec <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004090:	4b4c      	ldr	r3, [pc, #304]	@ (80041c4 <HAL_RCC_OscConfig+0x780>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a4b      	ldr	r2, [pc, #300]	@ (80041c4 <HAL_RCC_OscConfig+0x780>)
 8004096:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800409a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800409c:	f7fe f9dc 	bl	8002458 <HAL_GetTick>
 80040a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040a2:	e008      	b.n	80040b6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040a4:	f7fe f9d8 	bl	8002458 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d901      	bls.n	80040b6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e09a      	b.n	80041ec <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040b6:	4b43      	ldr	r3, [pc, #268]	@ (80041c4 <HAL_RCC_OscConfig+0x780>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1f0      	bne.n	80040a4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040c2:	4b40      	ldr	r3, [pc, #256]	@ (80041c4 <HAL_RCC_OscConfig+0x780>)
 80040c4:	68da      	ldr	r2, [r3, #12]
 80040c6:	4b40      	ldr	r3, [pc, #256]	@ (80041c8 <HAL_RCC_OscConfig+0x784>)
 80040c8:	4013      	ands	r3, r2
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80040d2:	3a01      	subs	r2, #1
 80040d4:	0112      	lsls	r2, r2, #4
 80040d6:	4311      	orrs	r1, r2
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80040dc:	0212      	lsls	r2, r2, #8
 80040de:	4311      	orrs	r1, r2
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80040e4:	0852      	lsrs	r2, r2, #1
 80040e6:	3a01      	subs	r2, #1
 80040e8:	0552      	lsls	r2, r2, #21
 80040ea:	4311      	orrs	r1, r2
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80040f0:	0852      	lsrs	r2, r2, #1
 80040f2:	3a01      	subs	r2, #1
 80040f4:	0652      	lsls	r2, r2, #25
 80040f6:	4311      	orrs	r1, r2
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80040fc:	0912      	lsrs	r2, r2, #4
 80040fe:	0452      	lsls	r2, r2, #17
 8004100:	430a      	orrs	r2, r1
 8004102:	4930      	ldr	r1, [pc, #192]	@ (80041c4 <HAL_RCC_OscConfig+0x780>)
 8004104:	4313      	orrs	r3, r2
 8004106:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004108:	4b2e      	ldr	r3, [pc, #184]	@ (80041c4 <HAL_RCC_OscConfig+0x780>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a2d      	ldr	r2, [pc, #180]	@ (80041c4 <HAL_RCC_OscConfig+0x780>)
 800410e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004112:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004114:	4b2b      	ldr	r3, [pc, #172]	@ (80041c4 <HAL_RCC_OscConfig+0x780>)
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	4a2a      	ldr	r2, [pc, #168]	@ (80041c4 <HAL_RCC_OscConfig+0x780>)
 800411a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800411e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004120:	f7fe f99a 	bl	8002458 <HAL_GetTick>
 8004124:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004126:	e008      	b.n	800413a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004128:	f7fe f996 	bl	8002458 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b02      	cmp	r3, #2
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e058      	b.n	80041ec <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800413a:	4b22      	ldr	r3, [pc, #136]	@ (80041c4 <HAL_RCC_OscConfig+0x780>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d0f0      	beq.n	8004128 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004146:	e050      	b.n	80041ea <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e04f      	b.n	80041ec <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800414c:	4b1d      	ldr	r3, [pc, #116]	@ (80041c4 <HAL_RCC_OscConfig+0x780>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d148      	bne.n	80041ea <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004158:	4b1a      	ldr	r3, [pc, #104]	@ (80041c4 <HAL_RCC_OscConfig+0x780>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a19      	ldr	r2, [pc, #100]	@ (80041c4 <HAL_RCC_OscConfig+0x780>)
 800415e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004162:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004164:	4b17      	ldr	r3, [pc, #92]	@ (80041c4 <HAL_RCC_OscConfig+0x780>)
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	4a16      	ldr	r2, [pc, #88]	@ (80041c4 <HAL_RCC_OscConfig+0x780>)
 800416a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800416e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004170:	f7fe f972 	bl	8002458 <HAL_GetTick>
 8004174:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004176:	e008      	b.n	800418a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004178:	f7fe f96e 	bl	8002458 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b02      	cmp	r3, #2
 8004184:	d901      	bls.n	800418a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e030      	b.n	80041ec <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800418a:	4b0e      	ldr	r3, [pc, #56]	@ (80041c4 <HAL_RCC_OscConfig+0x780>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d0f0      	beq.n	8004178 <HAL_RCC_OscConfig+0x734>
 8004196:	e028      	b.n	80041ea <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	2b0c      	cmp	r3, #12
 800419c:	d023      	beq.n	80041e6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800419e:	4b09      	ldr	r3, [pc, #36]	@ (80041c4 <HAL_RCC_OscConfig+0x780>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a08      	ldr	r2, [pc, #32]	@ (80041c4 <HAL_RCC_OscConfig+0x780>)
 80041a4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041aa:	f7fe f955 	bl	8002458 <HAL_GetTick>
 80041ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041b0:	e00c      	b.n	80041cc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041b2:	f7fe f951 	bl	8002458 <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d905      	bls.n	80041cc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e013      	b.n	80041ec <HAL_RCC_OscConfig+0x7a8>
 80041c4:	40021000 	.word	0x40021000
 80041c8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041cc:	4b09      	ldr	r3, [pc, #36]	@ (80041f4 <HAL_RCC_OscConfig+0x7b0>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1ec      	bne.n	80041b2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80041d8:	4b06      	ldr	r3, [pc, #24]	@ (80041f4 <HAL_RCC_OscConfig+0x7b0>)
 80041da:	68da      	ldr	r2, [r3, #12]
 80041dc:	4905      	ldr	r1, [pc, #20]	@ (80041f4 <HAL_RCC_OscConfig+0x7b0>)
 80041de:	4b06      	ldr	r3, [pc, #24]	@ (80041f8 <HAL_RCC_OscConfig+0x7b4>)
 80041e0:	4013      	ands	r3, r2
 80041e2:	60cb      	str	r3, [r1, #12]
 80041e4:	e001      	b.n	80041ea <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e000      	b.n	80041ec <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3720      	adds	r7, #32
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	40021000 	.word	0x40021000
 80041f8:	feeefffc 	.word	0xfeeefffc

080041fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d101      	bne.n	8004210 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e0e7      	b.n	80043e0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004210:	4b75      	ldr	r3, [pc, #468]	@ (80043e8 <HAL_RCC_ClockConfig+0x1ec>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0307 	and.w	r3, r3, #7
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	429a      	cmp	r2, r3
 800421c:	d910      	bls.n	8004240 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800421e:	4b72      	ldr	r3, [pc, #456]	@ (80043e8 <HAL_RCC_ClockConfig+0x1ec>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f023 0207 	bic.w	r2, r3, #7
 8004226:	4970      	ldr	r1, [pc, #448]	@ (80043e8 <HAL_RCC_ClockConfig+0x1ec>)
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	4313      	orrs	r3, r2
 800422c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800422e:	4b6e      	ldr	r3, [pc, #440]	@ (80043e8 <HAL_RCC_ClockConfig+0x1ec>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0307 	and.w	r3, r3, #7
 8004236:	683a      	ldr	r2, [r7, #0]
 8004238:	429a      	cmp	r2, r3
 800423a:	d001      	beq.n	8004240 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e0cf      	b.n	80043e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d010      	beq.n	800426e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689a      	ldr	r2, [r3, #8]
 8004250:	4b66      	ldr	r3, [pc, #408]	@ (80043ec <HAL_RCC_ClockConfig+0x1f0>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004258:	429a      	cmp	r2, r3
 800425a:	d908      	bls.n	800426e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800425c:	4b63      	ldr	r3, [pc, #396]	@ (80043ec <HAL_RCC_ClockConfig+0x1f0>)
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	4960      	ldr	r1, [pc, #384]	@ (80043ec <HAL_RCC_ClockConfig+0x1f0>)
 800426a:	4313      	orrs	r3, r2
 800426c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	2b00      	cmp	r3, #0
 8004278:	d04c      	beq.n	8004314 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	2b03      	cmp	r3, #3
 8004280:	d107      	bne.n	8004292 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004282:	4b5a      	ldr	r3, [pc, #360]	@ (80043ec <HAL_RCC_ClockConfig+0x1f0>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d121      	bne.n	80042d2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e0a6      	b.n	80043e0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	2b02      	cmp	r3, #2
 8004298:	d107      	bne.n	80042aa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800429a:	4b54      	ldr	r3, [pc, #336]	@ (80043ec <HAL_RCC_ClockConfig+0x1f0>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d115      	bne.n	80042d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e09a      	b.n	80043e0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d107      	bne.n	80042c2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042b2:	4b4e      	ldr	r3, [pc, #312]	@ (80043ec <HAL_RCC_ClockConfig+0x1f0>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d109      	bne.n	80042d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e08e      	b.n	80043e0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042c2:	4b4a      	ldr	r3, [pc, #296]	@ (80043ec <HAL_RCC_ClockConfig+0x1f0>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e086      	b.n	80043e0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042d2:	4b46      	ldr	r3, [pc, #280]	@ (80043ec <HAL_RCC_ClockConfig+0x1f0>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f023 0203 	bic.w	r2, r3, #3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	4943      	ldr	r1, [pc, #268]	@ (80043ec <HAL_RCC_ClockConfig+0x1f0>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042e4:	f7fe f8b8 	bl	8002458 <HAL_GetTick>
 80042e8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ea:	e00a      	b.n	8004302 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042ec:	f7fe f8b4 	bl	8002458 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e06e      	b.n	80043e0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004302:	4b3a      	ldr	r3, [pc, #232]	@ (80043ec <HAL_RCC_ClockConfig+0x1f0>)
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f003 020c 	and.w	r2, r3, #12
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	429a      	cmp	r2, r3
 8004312:	d1eb      	bne.n	80042ec <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0302 	and.w	r3, r3, #2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d010      	beq.n	8004342 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689a      	ldr	r2, [r3, #8]
 8004324:	4b31      	ldr	r3, [pc, #196]	@ (80043ec <HAL_RCC_ClockConfig+0x1f0>)
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800432c:	429a      	cmp	r2, r3
 800432e:	d208      	bcs.n	8004342 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004330:	4b2e      	ldr	r3, [pc, #184]	@ (80043ec <HAL_RCC_ClockConfig+0x1f0>)
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	492b      	ldr	r1, [pc, #172]	@ (80043ec <HAL_RCC_ClockConfig+0x1f0>)
 800433e:	4313      	orrs	r3, r2
 8004340:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004342:	4b29      	ldr	r3, [pc, #164]	@ (80043e8 <HAL_RCC_ClockConfig+0x1ec>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0307 	and.w	r3, r3, #7
 800434a:	683a      	ldr	r2, [r7, #0]
 800434c:	429a      	cmp	r2, r3
 800434e:	d210      	bcs.n	8004372 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004350:	4b25      	ldr	r3, [pc, #148]	@ (80043e8 <HAL_RCC_ClockConfig+0x1ec>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f023 0207 	bic.w	r2, r3, #7
 8004358:	4923      	ldr	r1, [pc, #140]	@ (80043e8 <HAL_RCC_ClockConfig+0x1ec>)
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	4313      	orrs	r3, r2
 800435e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004360:	4b21      	ldr	r3, [pc, #132]	@ (80043e8 <HAL_RCC_ClockConfig+0x1ec>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0307 	and.w	r3, r3, #7
 8004368:	683a      	ldr	r2, [r7, #0]
 800436a:	429a      	cmp	r2, r3
 800436c:	d001      	beq.n	8004372 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e036      	b.n	80043e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0304 	and.w	r3, r3, #4
 800437a:	2b00      	cmp	r3, #0
 800437c:	d008      	beq.n	8004390 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800437e:	4b1b      	ldr	r3, [pc, #108]	@ (80043ec <HAL_RCC_ClockConfig+0x1f0>)
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	4918      	ldr	r1, [pc, #96]	@ (80043ec <HAL_RCC_ClockConfig+0x1f0>)
 800438c:	4313      	orrs	r3, r2
 800438e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0308 	and.w	r3, r3, #8
 8004398:	2b00      	cmp	r3, #0
 800439a:	d009      	beq.n	80043b0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800439c:	4b13      	ldr	r3, [pc, #76]	@ (80043ec <HAL_RCC_ClockConfig+0x1f0>)
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	00db      	lsls	r3, r3, #3
 80043aa:	4910      	ldr	r1, [pc, #64]	@ (80043ec <HAL_RCC_ClockConfig+0x1f0>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043b0:	f000 f824 	bl	80043fc <HAL_RCC_GetSysClockFreq>
 80043b4:	4602      	mov	r2, r0
 80043b6:	4b0d      	ldr	r3, [pc, #52]	@ (80043ec <HAL_RCC_ClockConfig+0x1f0>)
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	091b      	lsrs	r3, r3, #4
 80043bc:	f003 030f 	and.w	r3, r3, #15
 80043c0:	490b      	ldr	r1, [pc, #44]	@ (80043f0 <HAL_RCC_ClockConfig+0x1f4>)
 80043c2:	5ccb      	ldrb	r3, [r1, r3]
 80043c4:	f003 031f 	and.w	r3, r3, #31
 80043c8:	fa22 f303 	lsr.w	r3, r2, r3
 80043cc:	4a09      	ldr	r2, [pc, #36]	@ (80043f4 <HAL_RCC_ClockConfig+0x1f8>)
 80043ce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80043d0:	4b09      	ldr	r3, [pc, #36]	@ (80043f8 <HAL_RCC_ClockConfig+0x1fc>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4618      	mov	r0, r3
 80043d6:	f7fd ffef 	bl	80023b8 <HAL_InitTick>
 80043da:	4603      	mov	r3, r0
 80043dc:	72fb      	strb	r3, [r7, #11]

  return status;
 80043de:	7afb      	ldrb	r3, [r7, #11]
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3710      	adds	r7, #16
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	40022000 	.word	0x40022000
 80043ec:	40021000 	.word	0x40021000
 80043f0:	0800cc90 	.word	0x0800cc90
 80043f4:	20000004 	.word	0x20000004
 80043f8:	20000008 	.word	0x20000008

080043fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b089      	sub	sp, #36	@ 0x24
 8004400:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004402:	2300      	movs	r3, #0
 8004404:	61fb      	str	r3, [r7, #28]
 8004406:	2300      	movs	r3, #0
 8004408:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800440a:	4b3e      	ldr	r3, [pc, #248]	@ (8004504 <HAL_RCC_GetSysClockFreq+0x108>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f003 030c 	and.w	r3, r3, #12
 8004412:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004414:	4b3b      	ldr	r3, [pc, #236]	@ (8004504 <HAL_RCC_GetSysClockFreq+0x108>)
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	f003 0303 	and.w	r3, r3, #3
 800441c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d005      	beq.n	8004430 <HAL_RCC_GetSysClockFreq+0x34>
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	2b0c      	cmp	r3, #12
 8004428:	d121      	bne.n	800446e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d11e      	bne.n	800446e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004430:	4b34      	ldr	r3, [pc, #208]	@ (8004504 <HAL_RCC_GetSysClockFreq+0x108>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0308 	and.w	r3, r3, #8
 8004438:	2b00      	cmp	r3, #0
 800443a:	d107      	bne.n	800444c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800443c:	4b31      	ldr	r3, [pc, #196]	@ (8004504 <HAL_RCC_GetSysClockFreq+0x108>)
 800443e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004442:	0a1b      	lsrs	r3, r3, #8
 8004444:	f003 030f 	and.w	r3, r3, #15
 8004448:	61fb      	str	r3, [r7, #28]
 800444a:	e005      	b.n	8004458 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800444c:	4b2d      	ldr	r3, [pc, #180]	@ (8004504 <HAL_RCC_GetSysClockFreq+0x108>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	091b      	lsrs	r3, r3, #4
 8004452:	f003 030f 	and.w	r3, r3, #15
 8004456:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004458:	4a2b      	ldr	r2, [pc, #172]	@ (8004508 <HAL_RCC_GetSysClockFreq+0x10c>)
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004460:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d10d      	bne.n	8004484 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800446c:	e00a      	b.n	8004484 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	2b04      	cmp	r3, #4
 8004472:	d102      	bne.n	800447a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004474:	4b25      	ldr	r3, [pc, #148]	@ (800450c <HAL_RCC_GetSysClockFreq+0x110>)
 8004476:	61bb      	str	r3, [r7, #24]
 8004478:	e004      	b.n	8004484 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	2b08      	cmp	r3, #8
 800447e:	d101      	bne.n	8004484 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004480:	4b23      	ldr	r3, [pc, #140]	@ (8004510 <HAL_RCC_GetSysClockFreq+0x114>)
 8004482:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	2b0c      	cmp	r3, #12
 8004488:	d134      	bne.n	80044f4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800448a:	4b1e      	ldr	r3, [pc, #120]	@ (8004504 <HAL_RCC_GetSysClockFreq+0x108>)
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	f003 0303 	and.w	r3, r3, #3
 8004492:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	2b02      	cmp	r3, #2
 8004498:	d003      	beq.n	80044a2 <HAL_RCC_GetSysClockFreq+0xa6>
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	2b03      	cmp	r3, #3
 800449e:	d003      	beq.n	80044a8 <HAL_RCC_GetSysClockFreq+0xac>
 80044a0:	e005      	b.n	80044ae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80044a2:	4b1a      	ldr	r3, [pc, #104]	@ (800450c <HAL_RCC_GetSysClockFreq+0x110>)
 80044a4:	617b      	str	r3, [r7, #20]
      break;
 80044a6:	e005      	b.n	80044b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80044a8:	4b19      	ldr	r3, [pc, #100]	@ (8004510 <HAL_RCC_GetSysClockFreq+0x114>)
 80044aa:	617b      	str	r3, [r7, #20]
      break;
 80044ac:	e002      	b.n	80044b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	617b      	str	r3, [r7, #20]
      break;
 80044b2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044b4:	4b13      	ldr	r3, [pc, #76]	@ (8004504 <HAL_RCC_GetSysClockFreq+0x108>)
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	091b      	lsrs	r3, r3, #4
 80044ba:	f003 0307 	and.w	r3, r3, #7
 80044be:	3301      	adds	r3, #1
 80044c0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80044c2:	4b10      	ldr	r3, [pc, #64]	@ (8004504 <HAL_RCC_GetSysClockFreq+0x108>)
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	0a1b      	lsrs	r3, r3, #8
 80044c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	fb03 f202 	mul.w	r2, r3, r2
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80044da:	4b0a      	ldr	r3, [pc, #40]	@ (8004504 <HAL_RCC_GetSysClockFreq+0x108>)
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	0e5b      	lsrs	r3, r3, #25
 80044e0:	f003 0303 	and.w	r3, r3, #3
 80044e4:	3301      	adds	r3, #1
 80044e6:	005b      	lsls	r3, r3, #1
 80044e8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80044f4:	69bb      	ldr	r3, [r7, #24]
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3724      	adds	r7, #36	@ 0x24
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	40021000 	.word	0x40021000
 8004508:	0800cca8 	.word	0x0800cca8
 800450c:	00f42400 	.word	0x00f42400
 8004510:	007a1200 	.word	0x007a1200

08004514 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004514:	b480      	push	{r7}
 8004516:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004518:	4b03      	ldr	r3, [pc, #12]	@ (8004528 <HAL_RCC_GetHCLKFreq+0x14>)
 800451a:	681b      	ldr	r3, [r3, #0]
}
 800451c:	4618      	mov	r0, r3
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	20000004 	.word	0x20000004

0800452c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004530:	f7ff fff0 	bl	8004514 <HAL_RCC_GetHCLKFreq>
 8004534:	4602      	mov	r2, r0
 8004536:	4b06      	ldr	r3, [pc, #24]	@ (8004550 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	0a1b      	lsrs	r3, r3, #8
 800453c:	f003 0307 	and.w	r3, r3, #7
 8004540:	4904      	ldr	r1, [pc, #16]	@ (8004554 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004542:	5ccb      	ldrb	r3, [r1, r3]
 8004544:	f003 031f 	and.w	r3, r3, #31
 8004548:	fa22 f303 	lsr.w	r3, r2, r3
}
 800454c:	4618      	mov	r0, r3
 800454e:	bd80      	pop	{r7, pc}
 8004550:	40021000 	.word	0x40021000
 8004554:	0800cca0 	.word	0x0800cca0

08004558 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800455c:	f7ff ffda 	bl	8004514 <HAL_RCC_GetHCLKFreq>
 8004560:	4602      	mov	r2, r0
 8004562:	4b06      	ldr	r3, [pc, #24]	@ (800457c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	0adb      	lsrs	r3, r3, #11
 8004568:	f003 0307 	and.w	r3, r3, #7
 800456c:	4904      	ldr	r1, [pc, #16]	@ (8004580 <HAL_RCC_GetPCLK2Freq+0x28>)
 800456e:	5ccb      	ldrb	r3, [r1, r3]
 8004570:	f003 031f 	and.w	r3, r3, #31
 8004574:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004578:	4618      	mov	r0, r3
 800457a:	bd80      	pop	{r7, pc}
 800457c:	40021000 	.word	0x40021000
 8004580:	0800cca0 	.word	0x0800cca0

08004584 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b086      	sub	sp, #24
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800458c:	2300      	movs	r3, #0
 800458e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004590:	4b2a      	ldr	r3, [pc, #168]	@ (800463c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004592:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004594:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d003      	beq.n	80045a4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800459c:	f7ff f9ee 	bl	800397c <HAL_PWREx_GetVoltageRange>
 80045a0:	6178      	str	r0, [r7, #20]
 80045a2:	e014      	b.n	80045ce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80045a4:	4b25      	ldr	r3, [pc, #148]	@ (800463c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045a8:	4a24      	ldr	r2, [pc, #144]	@ (800463c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80045b0:	4b22      	ldr	r3, [pc, #136]	@ (800463c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045b8:	60fb      	str	r3, [r7, #12]
 80045ba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80045bc:	f7ff f9de 	bl	800397c <HAL_PWREx_GetVoltageRange>
 80045c0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80045c2:	4b1e      	ldr	r3, [pc, #120]	@ (800463c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045c6:	4a1d      	ldr	r2, [pc, #116]	@ (800463c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045cc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045d4:	d10b      	bne.n	80045ee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2b80      	cmp	r3, #128	@ 0x80
 80045da:	d919      	bls.n	8004610 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2ba0      	cmp	r3, #160	@ 0xa0
 80045e0:	d902      	bls.n	80045e8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80045e2:	2302      	movs	r3, #2
 80045e4:	613b      	str	r3, [r7, #16]
 80045e6:	e013      	b.n	8004610 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80045e8:	2301      	movs	r3, #1
 80045ea:	613b      	str	r3, [r7, #16]
 80045ec:	e010      	b.n	8004610 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2b80      	cmp	r3, #128	@ 0x80
 80045f2:	d902      	bls.n	80045fa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80045f4:	2303      	movs	r3, #3
 80045f6:	613b      	str	r3, [r7, #16]
 80045f8:	e00a      	b.n	8004610 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2b80      	cmp	r3, #128	@ 0x80
 80045fe:	d102      	bne.n	8004606 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004600:	2302      	movs	r3, #2
 8004602:	613b      	str	r3, [r7, #16]
 8004604:	e004      	b.n	8004610 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2b70      	cmp	r3, #112	@ 0x70
 800460a:	d101      	bne.n	8004610 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800460c:	2301      	movs	r3, #1
 800460e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004610:	4b0b      	ldr	r3, [pc, #44]	@ (8004640 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f023 0207 	bic.w	r2, r3, #7
 8004618:	4909      	ldr	r1, [pc, #36]	@ (8004640 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	4313      	orrs	r3, r2
 800461e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004620:	4b07      	ldr	r3, [pc, #28]	@ (8004640 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0307 	and.w	r3, r3, #7
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	429a      	cmp	r2, r3
 800462c:	d001      	beq.n	8004632 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e000      	b.n	8004634 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3718      	adds	r7, #24
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	40021000 	.word	0x40021000
 8004640:	40022000 	.word	0x40022000

08004644 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b086      	sub	sp, #24
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800464c:	2300      	movs	r3, #0
 800464e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004650:	2300      	movs	r3, #0
 8004652:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800465c:	2b00      	cmp	r3, #0
 800465e:	d041      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004664:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004668:	d02a      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800466a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800466e:	d824      	bhi.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004670:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004674:	d008      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004676:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800467a:	d81e      	bhi.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00a      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004680:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004684:	d010      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004686:	e018      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004688:	4b86      	ldr	r3, [pc, #536]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	4a85      	ldr	r2, [pc, #532]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800468e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004692:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004694:	e015      	b.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	3304      	adds	r3, #4
 800469a:	2100      	movs	r1, #0
 800469c:	4618      	mov	r0, r3
 800469e:	f000 fabb 	bl	8004c18 <RCCEx_PLLSAI1_Config>
 80046a2:	4603      	mov	r3, r0
 80046a4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046a6:	e00c      	b.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	3320      	adds	r3, #32
 80046ac:	2100      	movs	r1, #0
 80046ae:	4618      	mov	r0, r3
 80046b0:	f000 fba6 	bl	8004e00 <RCCEx_PLLSAI2_Config>
 80046b4:	4603      	mov	r3, r0
 80046b6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046b8:	e003      	b.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	74fb      	strb	r3, [r7, #19]
      break;
 80046be:	e000      	b.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80046c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046c2:	7cfb      	ldrb	r3, [r7, #19]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d10b      	bne.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046c8:	4b76      	ldr	r3, [pc, #472]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ce:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80046d6:	4973      	ldr	r1, [pc, #460]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80046de:	e001      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046e0:	7cfb      	ldrb	r3, [r7, #19]
 80046e2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d041      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046f4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80046f8:	d02a      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80046fa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80046fe:	d824      	bhi.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004700:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004704:	d008      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004706:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800470a:	d81e      	bhi.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800470c:	2b00      	cmp	r3, #0
 800470e:	d00a      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004710:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004714:	d010      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004716:	e018      	b.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004718:	4b62      	ldr	r3, [pc, #392]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	4a61      	ldr	r2, [pc, #388]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800471e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004722:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004724:	e015      	b.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	3304      	adds	r3, #4
 800472a:	2100      	movs	r1, #0
 800472c:	4618      	mov	r0, r3
 800472e:	f000 fa73 	bl	8004c18 <RCCEx_PLLSAI1_Config>
 8004732:	4603      	mov	r3, r0
 8004734:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004736:	e00c      	b.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	3320      	adds	r3, #32
 800473c:	2100      	movs	r1, #0
 800473e:	4618      	mov	r0, r3
 8004740:	f000 fb5e 	bl	8004e00 <RCCEx_PLLSAI2_Config>
 8004744:	4603      	mov	r3, r0
 8004746:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004748:	e003      	b.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	74fb      	strb	r3, [r7, #19]
      break;
 800474e:	e000      	b.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004750:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004752:	7cfb      	ldrb	r3, [r7, #19]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d10b      	bne.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004758:	4b52      	ldr	r3, [pc, #328]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800475a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800475e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004766:	494f      	ldr	r1, [pc, #316]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004768:	4313      	orrs	r3, r2
 800476a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800476e:	e001      	b.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004770:	7cfb      	ldrb	r3, [r7, #19]
 8004772:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800477c:	2b00      	cmp	r3, #0
 800477e:	f000 80a0 	beq.w	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004782:	2300      	movs	r3, #0
 8004784:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004786:	4b47      	ldr	r3, [pc, #284]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800478a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004792:	2301      	movs	r3, #1
 8004794:	e000      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004796:	2300      	movs	r3, #0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00d      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800479c:	4b41      	ldr	r3, [pc, #260]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800479e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047a0:	4a40      	ldr	r2, [pc, #256]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80047a8:	4b3e      	ldr	r3, [pc, #248]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047b0:	60bb      	str	r3, [r7, #8]
 80047b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047b4:	2301      	movs	r3, #1
 80047b6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047b8:	4b3b      	ldr	r3, [pc, #236]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a3a      	ldr	r2, [pc, #232]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80047be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047c4:	f7fd fe48 	bl	8002458 <HAL_GetTick>
 80047c8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80047ca:	e009      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047cc:	f7fd fe44 	bl	8002458 <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d902      	bls.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	74fb      	strb	r3, [r7, #19]
        break;
 80047de:	e005      	b.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80047e0:	4b31      	ldr	r3, [pc, #196]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d0ef      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80047ec:	7cfb      	ldrb	r3, [r7, #19]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d15c      	bne.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80047f2:	4b2c      	ldr	r3, [pc, #176]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047fc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d01f      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800480a:	697a      	ldr	r2, [r7, #20]
 800480c:	429a      	cmp	r2, r3
 800480e:	d019      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004810:	4b24      	ldr	r3, [pc, #144]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004812:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004816:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800481a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800481c:	4b21      	ldr	r3, [pc, #132]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800481e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004822:	4a20      	ldr	r2, [pc, #128]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004824:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004828:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800482c:	4b1d      	ldr	r3, [pc, #116]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800482e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004832:	4a1c      	ldr	r2, [pc, #112]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004834:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004838:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800483c:	4a19      	ldr	r2, [pc, #100]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	f003 0301 	and.w	r3, r3, #1
 800484a:	2b00      	cmp	r3, #0
 800484c:	d016      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800484e:	f7fd fe03 	bl	8002458 <HAL_GetTick>
 8004852:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004854:	e00b      	b.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004856:	f7fd fdff 	bl	8002458 <HAL_GetTick>
 800485a:	4602      	mov	r2, r0
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004864:	4293      	cmp	r3, r2
 8004866:	d902      	bls.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	74fb      	strb	r3, [r7, #19]
            break;
 800486c:	e006      	b.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800486e:	4b0d      	ldr	r3, [pc, #52]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004870:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004874:	f003 0302 	and.w	r3, r3, #2
 8004878:	2b00      	cmp	r3, #0
 800487a:	d0ec      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800487c:	7cfb      	ldrb	r3, [r7, #19]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10c      	bne.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004882:	4b08      	ldr	r3, [pc, #32]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004884:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004888:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004892:	4904      	ldr	r1, [pc, #16]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004894:	4313      	orrs	r3, r2
 8004896:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800489a:	e009      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800489c:	7cfb      	ldrb	r3, [r7, #19]
 800489e:	74bb      	strb	r3, [r7, #18]
 80048a0:	e006      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80048a2:	bf00      	nop
 80048a4:	40021000 	.word	0x40021000
 80048a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ac:	7cfb      	ldrb	r3, [r7, #19]
 80048ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048b0:	7c7b      	ldrb	r3, [r7, #17]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d105      	bne.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048b6:	4b9e      	ldr	r3, [pc, #632]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048ba:	4a9d      	ldr	r2, [pc, #628]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048c0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d00a      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048ce:	4b98      	ldr	r3, [pc, #608]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048d4:	f023 0203 	bic.w	r2, r3, #3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048dc:	4994      	ldr	r1, [pc, #592]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00a      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048f0:	4b8f      	ldr	r3, [pc, #572]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048f6:	f023 020c 	bic.w	r2, r3, #12
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048fe:	498c      	ldr	r1, [pc, #560]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004900:	4313      	orrs	r3, r2
 8004902:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0304 	and.w	r3, r3, #4
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00a      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004912:	4b87      	ldr	r3, [pc, #540]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004914:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004918:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004920:	4983      	ldr	r1, [pc, #524]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004922:	4313      	orrs	r3, r2
 8004924:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0308 	and.w	r3, r3, #8
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00a      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004934:	4b7e      	ldr	r3, [pc, #504]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004936:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800493a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004942:	497b      	ldr	r1, [pc, #492]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004944:	4313      	orrs	r3, r2
 8004946:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0310 	and.w	r3, r3, #16
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00a      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004956:	4b76      	ldr	r3, [pc, #472]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004958:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800495c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004964:	4972      	ldr	r1, [pc, #456]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004966:	4313      	orrs	r3, r2
 8004968:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0320 	and.w	r3, r3, #32
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00a      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004978:	4b6d      	ldr	r3, [pc, #436]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800497a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800497e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004986:	496a      	ldr	r1, [pc, #424]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004988:	4313      	orrs	r3, r2
 800498a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00a      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800499a:	4b65      	ldr	r3, [pc, #404]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800499c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049a0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049a8:	4961      	ldr	r1, [pc, #388]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d00a      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80049bc:	4b5c      	ldr	r3, [pc, #368]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049c2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049ca:	4959      	ldr	r1, [pc, #356]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00a      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049de:	4b54      	ldr	r3, [pc, #336]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049e4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049ec:	4950      	ldr	r1, [pc, #320]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00a      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a00:	4b4b      	ldr	r3, [pc, #300]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a06:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a0e:	4948      	ldr	r1, [pc, #288]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00a      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a22:	4b43      	ldr	r3, [pc, #268]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a28:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a30:	493f      	ldr	r1, [pc, #252]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a32:	4313      	orrs	r3, r2
 8004a34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d028      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a44:	4b3a      	ldr	r3, [pc, #232]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a4a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a52:	4937      	ldr	r1, [pc, #220]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a62:	d106      	bne.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a64:	4b32      	ldr	r3, [pc, #200]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	4a31      	ldr	r2, [pc, #196]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a6e:	60d3      	str	r3, [r2, #12]
 8004a70:	e011      	b.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a76:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a7a:	d10c      	bne.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	3304      	adds	r3, #4
 8004a80:	2101      	movs	r1, #1
 8004a82:	4618      	mov	r0, r3
 8004a84:	f000 f8c8 	bl	8004c18 <RCCEx_PLLSAI1_Config>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004a8c:	7cfb      	ldrb	r3, [r7, #19]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d001      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004a92:	7cfb      	ldrb	r3, [r7, #19]
 8004a94:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d028      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004aa2:	4b23      	ldr	r3, [pc, #140]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aa8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ab0:	491f      	ldr	r1, [pc, #124]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004abc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ac0:	d106      	bne.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ac2:	4b1b      	ldr	r3, [pc, #108]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	4a1a      	ldr	r2, [pc, #104]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ac8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004acc:	60d3      	str	r3, [r2, #12]
 8004ace:	e011      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ad4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ad8:	d10c      	bne.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	3304      	adds	r3, #4
 8004ade:	2101      	movs	r1, #1
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f000 f899 	bl	8004c18 <RCCEx_PLLSAI1_Config>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004aea:	7cfb      	ldrb	r3, [r7, #19]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d001      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004af0:	7cfb      	ldrb	r3, [r7, #19]
 8004af2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d02b      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b00:	4b0b      	ldr	r3, [pc, #44]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b06:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b0e:	4908      	ldr	r1, [pc, #32]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b1e:	d109      	bne.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b20:	4b03      	ldr	r3, [pc, #12]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	4a02      	ldr	r2, [pc, #8]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b2a:	60d3      	str	r3, [r2, #12]
 8004b2c:	e014      	b.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004b2e:	bf00      	nop
 8004b30:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b38:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004b3c:	d10c      	bne.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	3304      	adds	r3, #4
 8004b42:	2101      	movs	r1, #1
 8004b44:	4618      	mov	r0, r3
 8004b46:	f000 f867 	bl	8004c18 <RCCEx_PLLSAI1_Config>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b4e:	7cfb      	ldrb	r3, [r7, #19]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d001      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004b54:	7cfb      	ldrb	r3, [r7, #19]
 8004b56:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d02f      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b64:	4b2b      	ldr	r3, [pc, #172]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b6a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b72:	4928      	ldr	r1, [pc, #160]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b7e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b82:	d10d      	bne.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	3304      	adds	r3, #4
 8004b88:	2102      	movs	r1, #2
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f000 f844 	bl	8004c18 <RCCEx_PLLSAI1_Config>
 8004b90:	4603      	mov	r3, r0
 8004b92:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b94:	7cfb      	ldrb	r3, [r7, #19]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d014      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004b9a:	7cfb      	ldrb	r3, [r7, #19]
 8004b9c:	74bb      	strb	r3, [r7, #18]
 8004b9e:	e011      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ba4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ba8:	d10c      	bne.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	3320      	adds	r3, #32
 8004bae:	2102      	movs	r1, #2
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f000 f925 	bl	8004e00 <RCCEx_PLLSAI2_Config>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004bba:	7cfb      	ldrb	r3, [r7, #19]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d001      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004bc0:	7cfb      	ldrb	r3, [r7, #19]
 8004bc2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d00a      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004bd0:	4b10      	ldr	r3, [pc, #64]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bd6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004bde:	490d      	ldr	r1, [pc, #52]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00b      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004bf2:	4b08      	ldr	r3, [pc, #32]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bf8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c02:	4904      	ldr	r1, [pc, #16]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004c0a:	7cbb      	ldrb	r3, [r7, #18]
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3718      	adds	r7, #24
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	40021000 	.word	0x40021000

08004c18 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c22:	2300      	movs	r3, #0
 8004c24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c26:	4b75      	ldr	r3, [pc, #468]	@ (8004dfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	f003 0303 	and.w	r3, r3, #3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d018      	beq.n	8004c64 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004c32:	4b72      	ldr	r3, [pc, #456]	@ (8004dfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	f003 0203 	and.w	r2, r3, #3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d10d      	bne.n	8004c5e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
       ||
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d009      	beq.n	8004c5e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004c4a:	4b6c      	ldr	r3, [pc, #432]	@ (8004dfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	091b      	lsrs	r3, r3, #4
 8004c50:	f003 0307 	and.w	r3, r3, #7
 8004c54:	1c5a      	adds	r2, r3, #1
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
       ||
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d047      	beq.n	8004cee <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	73fb      	strb	r3, [r7, #15]
 8004c62:	e044      	b.n	8004cee <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2b03      	cmp	r3, #3
 8004c6a:	d018      	beq.n	8004c9e <RCCEx_PLLSAI1_Config+0x86>
 8004c6c:	2b03      	cmp	r3, #3
 8004c6e:	d825      	bhi.n	8004cbc <RCCEx_PLLSAI1_Config+0xa4>
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d002      	beq.n	8004c7a <RCCEx_PLLSAI1_Config+0x62>
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d009      	beq.n	8004c8c <RCCEx_PLLSAI1_Config+0x74>
 8004c78:	e020      	b.n	8004cbc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c7a:	4b60      	ldr	r3, [pc, #384]	@ (8004dfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d11d      	bne.n	8004cc2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c8a:	e01a      	b.n	8004cc2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c8c:	4b5b      	ldr	r3, [pc, #364]	@ (8004dfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d116      	bne.n	8004cc6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c9c:	e013      	b.n	8004cc6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c9e:	4b57      	ldr	r3, [pc, #348]	@ (8004dfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d10f      	bne.n	8004cca <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004caa:	4b54      	ldr	r3, [pc, #336]	@ (8004dfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d109      	bne.n	8004cca <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004cba:	e006      	b.n	8004cca <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	73fb      	strb	r3, [r7, #15]
      break;
 8004cc0:	e004      	b.n	8004ccc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004cc2:	bf00      	nop
 8004cc4:	e002      	b.n	8004ccc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004cc6:	bf00      	nop
 8004cc8:	e000      	b.n	8004ccc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004cca:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ccc:	7bfb      	ldrb	r3, [r7, #15]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d10d      	bne.n	8004cee <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004cd2:	4b4a      	ldr	r3, [pc, #296]	@ (8004dfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6819      	ldr	r1, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	011b      	lsls	r3, r3, #4
 8004ce6:	430b      	orrs	r3, r1
 8004ce8:	4944      	ldr	r1, [pc, #272]	@ (8004dfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004cee:	7bfb      	ldrb	r3, [r7, #15]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d17d      	bne.n	8004df0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004cf4:	4b41      	ldr	r3, [pc, #260]	@ (8004dfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a40      	ldr	r2, [pc, #256]	@ (8004dfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cfa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004cfe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d00:	f7fd fbaa 	bl	8002458 <HAL_GetTick>
 8004d04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d06:	e009      	b.n	8004d1c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d08:	f7fd fba6 	bl	8002458 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d902      	bls.n	8004d1c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	73fb      	strb	r3, [r7, #15]
        break;
 8004d1a:	e005      	b.n	8004d28 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d1c:	4b37      	ldr	r3, [pc, #220]	@ (8004dfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1ef      	bne.n	8004d08 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004d28:	7bfb      	ldrb	r3, [r7, #15]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d160      	bne.n	8004df0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d111      	bne.n	8004d58 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d34:	4b31      	ldr	r3, [pc, #196]	@ (8004dfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004d3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	6892      	ldr	r2, [r2, #8]
 8004d44:	0211      	lsls	r1, r2, #8
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	68d2      	ldr	r2, [r2, #12]
 8004d4a:	0912      	lsrs	r2, r2, #4
 8004d4c:	0452      	lsls	r2, r2, #17
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	492a      	ldr	r1, [pc, #168]	@ (8004dfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	610b      	str	r3, [r1, #16]
 8004d56:	e027      	b.n	8004da8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d112      	bne.n	8004d84 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d5e:	4b27      	ldr	r3, [pc, #156]	@ (8004dfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004d66:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	6892      	ldr	r2, [r2, #8]
 8004d6e:	0211      	lsls	r1, r2, #8
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	6912      	ldr	r2, [r2, #16]
 8004d74:	0852      	lsrs	r2, r2, #1
 8004d76:	3a01      	subs	r2, #1
 8004d78:	0552      	lsls	r2, r2, #21
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	491f      	ldr	r1, [pc, #124]	@ (8004dfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	610b      	str	r3, [r1, #16]
 8004d82:	e011      	b.n	8004da8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d84:	4b1d      	ldr	r3, [pc, #116]	@ (8004dfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004d8c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	6892      	ldr	r2, [r2, #8]
 8004d94:	0211      	lsls	r1, r2, #8
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	6952      	ldr	r2, [r2, #20]
 8004d9a:	0852      	lsrs	r2, r2, #1
 8004d9c:	3a01      	subs	r2, #1
 8004d9e:	0652      	lsls	r2, r2, #25
 8004da0:	430a      	orrs	r2, r1
 8004da2:	4916      	ldr	r1, [pc, #88]	@ (8004dfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004da8:	4b14      	ldr	r3, [pc, #80]	@ (8004dfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a13      	ldr	r2, [pc, #76]	@ (8004dfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004db2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004db4:	f7fd fb50 	bl	8002458 <HAL_GetTick>
 8004db8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004dba:	e009      	b.n	8004dd0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004dbc:	f7fd fb4c 	bl	8002458 <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d902      	bls.n	8004dd0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	73fb      	strb	r3, [r7, #15]
          break;
 8004dce:	e005      	b.n	8004ddc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8004dfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d0ef      	beq.n	8004dbc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004ddc:	7bfb      	ldrb	r3, [r7, #15]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d106      	bne.n	8004df0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004de2:	4b06      	ldr	r3, [pc, #24]	@ (8004dfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004de4:	691a      	ldr	r2, [r3, #16]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	4904      	ldr	r1, [pc, #16]	@ (8004dfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dec:	4313      	orrs	r3, r2
 8004dee:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3710      	adds	r7, #16
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	40021000 	.word	0x40021000

08004e00 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004e0e:	4b6a      	ldr	r3, [pc, #424]	@ (8004fb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	f003 0303 	and.w	r3, r3, #3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d018      	beq.n	8004e4c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004e1a:	4b67      	ldr	r3, [pc, #412]	@ (8004fb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	f003 0203 	and.w	r2, r3, #3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d10d      	bne.n	8004e46 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
       ||
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d009      	beq.n	8004e46 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004e32:	4b61      	ldr	r3, [pc, #388]	@ (8004fb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	091b      	lsrs	r3, r3, #4
 8004e38:	f003 0307 	and.w	r3, r3, #7
 8004e3c:	1c5a      	adds	r2, r3, #1
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
       ||
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d047      	beq.n	8004ed6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	73fb      	strb	r3, [r7, #15]
 8004e4a:	e044      	b.n	8004ed6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2b03      	cmp	r3, #3
 8004e52:	d018      	beq.n	8004e86 <RCCEx_PLLSAI2_Config+0x86>
 8004e54:	2b03      	cmp	r3, #3
 8004e56:	d825      	bhi.n	8004ea4 <RCCEx_PLLSAI2_Config+0xa4>
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d002      	beq.n	8004e62 <RCCEx_PLLSAI2_Config+0x62>
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d009      	beq.n	8004e74 <RCCEx_PLLSAI2_Config+0x74>
 8004e60:	e020      	b.n	8004ea4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e62:	4b55      	ldr	r3, [pc, #340]	@ (8004fb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0302 	and.w	r3, r3, #2
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d11d      	bne.n	8004eaa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e72:	e01a      	b.n	8004eaa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e74:	4b50      	ldr	r3, [pc, #320]	@ (8004fb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d116      	bne.n	8004eae <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e84:	e013      	b.n	8004eae <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e86:	4b4c      	ldr	r3, [pc, #304]	@ (8004fb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d10f      	bne.n	8004eb2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e92:	4b49      	ldr	r3, [pc, #292]	@ (8004fb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d109      	bne.n	8004eb2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ea2:	e006      	b.n	8004eb2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ea8:	e004      	b.n	8004eb4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004eaa:	bf00      	nop
 8004eac:	e002      	b.n	8004eb4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004eae:	bf00      	nop
 8004eb0:	e000      	b.n	8004eb4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004eb2:	bf00      	nop
    }

    if(status == HAL_OK)
 8004eb4:	7bfb      	ldrb	r3, [r7, #15]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d10d      	bne.n	8004ed6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004eba:	4b3f      	ldr	r3, [pc, #252]	@ (8004fb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6819      	ldr	r1, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	011b      	lsls	r3, r3, #4
 8004ece:	430b      	orrs	r3, r1
 8004ed0:	4939      	ldr	r1, [pc, #228]	@ (8004fb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004ed6:	7bfb      	ldrb	r3, [r7, #15]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d167      	bne.n	8004fac <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004edc:	4b36      	ldr	r3, [pc, #216]	@ (8004fb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a35      	ldr	r2, [pc, #212]	@ (8004fb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ee2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ee6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ee8:	f7fd fab6 	bl	8002458 <HAL_GetTick>
 8004eec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004eee:	e009      	b.n	8004f04 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ef0:	f7fd fab2 	bl	8002458 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d902      	bls.n	8004f04 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	73fb      	strb	r3, [r7, #15]
        break;
 8004f02:	e005      	b.n	8004f10 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f04:	4b2c      	ldr	r3, [pc, #176]	@ (8004fb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1ef      	bne.n	8004ef0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004f10:	7bfb      	ldrb	r3, [r7, #15]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d14a      	bne.n	8004fac <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d111      	bne.n	8004f40 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004f1c:	4b26      	ldr	r3, [pc, #152]	@ (8004fb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f1e:	695b      	ldr	r3, [r3, #20]
 8004f20:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004f24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	6892      	ldr	r2, [r2, #8]
 8004f2c:	0211      	lsls	r1, r2, #8
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	68d2      	ldr	r2, [r2, #12]
 8004f32:	0912      	lsrs	r2, r2, #4
 8004f34:	0452      	lsls	r2, r2, #17
 8004f36:	430a      	orrs	r2, r1
 8004f38:	491f      	ldr	r1, [pc, #124]	@ (8004fb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	614b      	str	r3, [r1, #20]
 8004f3e:	e011      	b.n	8004f64 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004f40:	4b1d      	ldr	r3, [pc, #116]	@ (8004fb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f42:	695b      	ldr	r3, [r3, #20]
 8004f44:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004f48:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	6892      	ldr	r2, [r2, #8]
 8004f50:	0211      	lsls	r1, r2, #8
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	6912      	ldr	r2, [r2, #16]
 8004f56:	0852      	lsrs	r2, r2, #1
 8004f58:	3a01      	subs	r2, #1
 8004f5a:	0652      	lsls	r2, r2, #25
 8004f5c:	430a      	orrs	r2, r1
 8004f5e:	4916      	ldr	r1, [pc, #88]	@ (8004fb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f60:	4313      	orrs	r3, r2
 8004f62:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004f64:	4b14      	ldr	r3, [pc, #80]	@ (8004fb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a13      	ldr	r2, [pc, #76]	@ (8004fb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f6e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f70:	f7fd fa72 	bl	8002458 <HAL_GetTick>
 8004f74:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f76:	e009      	b.n	8004f8c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f78:	f7fd fa6e 	bl	8002458 <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d902      	bls.n	8004f8c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	73fb      	strb	r3, [r7, #15]
          break;
 8004f8a:	e005      	b.n	8004f98 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8004fb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d0ef      	beq.n	8004f78 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004f98:	7bfb      	ldrb	r3, [r7, #15]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d106      	bne.n	8004fac <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004f9e:	4b06      	ldr	r3, [pc, #24]	@ (8004fb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fa0:	695a      	ldr	r2, [r3, #20]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	4904      	ldr	r1, [pc, #16]	@ (8004fb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	40021000 	.word	0x40021000

08004fbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d101      	bne.n	8004fce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e049      	b.n	8005062 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d106      	bne.n	8004fe8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f7fd f8ac 	bl	8002140 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2202      	movs	r2, #2
 8004fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	3304      	adds	r3, #4
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	4610      	mov	r0, r2
 8004ffc:	f000 fd7c 	bl	8005af8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3708      	adds	r7, #8
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
	...

0800506c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800507a:	b2db      	uxtb	r3, r3
 800507c:	2b01      	cmp	r3, #1
 800507e:	d001      	beq.n	8005084 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e04f      	b.n	8005124 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2202      	movs	r2, #2
 8005088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68da      	ldr	r2, [r3, #12]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f042 0201 	orr.w	r2, r2, #1
 800509a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a23      	ldr	r2, [pc, #140]	@ (8005130 <HAL_TIM_Base_Start_IT+0xc4>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d01d      	beq.n	80050e2 <HAL_TIM_Base_Start_IT+0x76>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050ae:	d018      	beq.n	80050e2 <HAL_TIM_Base_Start_IT+0x76>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a1f      	ldr	r2, [pc, #124]	@ (8005134 <HAL_TIM_Base_Start_IT+0xc8>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d013      	beq.n	80050e2 <HAL_TIM_Base_Start_IT+0x76>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a1e      	ldr	r2, [pc, #120]	@ (8005138 <HAL_TIM_Base_Start_IT+0xcc>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d00e      	beq.n	80050e2 <HAL_TIM_Base_Start_IT+0x76>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a1c      	ldr	r2, [pc, #112]	@ (800513c <HAL_TIM_Base_Start_IT+0xd0>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d009      	beq.n	80050e2 <HAL_TIM_Base_Start_IT+0x76>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a1b      	ldr	r2, [pc, #108]	@ (8005140 <HAL_TIM_Base_Start_IT+0xd4>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d004      	beq.n	80050e2 <HAL_TIM_Base_Start_IT+0x76>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a19      	ldr	r2, [pc, #100]	@ (8005144 <HAL_TIM_Base_Start_IT+0xd8>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d115      	bne.n	800510e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	689a      	ldr	r2, [r3, #8]
 80050e8:	4b17      	ldr	r3, [pc, #92]	@ (8005148 <HAL_TIM_Base_Start_IT+0xdc>)
 80050ea:	4013      	ands	r3, r2
 80050ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2b06      	cmp	r3, #6
 80050f2:	d015      	beq.n	8005120 <HAL_TIM_Base_Start_IT+0xb4>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050fa:	d011      	beq.n	8005120 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f042 0201 	orr.w	r2, r2, #1
 800510a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800510c:	e008      	b.n	8005120 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f042 0201 	orr.w	r2, r2, #1
 800511c:	601a      	str	r2, [r3, #0]
 800511e:	e000      	b.n	8005122 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005120:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	3714      	adds	r7, #20
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr
 8005130:	40012c00 	.word	0x40012c00
 8005134:	40000400 	.word	0x40000400
 8005138:	40000800 	.word	0x40000800
 800513c:	40000c00 	.word	0x40000c00
 8005140:	40013400 	.word	0x40013400
 8005144:	40014000 	.word	0x40014000
 8005148:	00010007 	.word	0x00010007

0800514c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e049      	b.n	80051f2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d106      	bne.n	8005178 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7fc ff52 	bl	800201c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2202      	movs	r2, #2
 800517c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	3304      	adds	r3, #4
 8005188:	4619      	mov	r1, r3
 800518a:	4610      	mov	r0, r2
 800518c:	f000 fcb4 	bl	8005af8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3708      	adds	r7, #8
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
	...

080051fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d109      	bne.n	8005220 <HAL_TIM_PWM_Start+0x24>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005212:	b2db      	uxtb	r3, r3
 8005214:	2b01      	cmp	r3, #1
 8005216:	bf14      	ite	ne
 8005218:	2301      	movne	r3, #1
 800521a:	2300      	moveq	r3, #0
 800521c:	b2db      	uxtb	r3, r3
 800521e:	e03c      	b.n	800529a <HAL_TIM_PWM_Start+0x9e>
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	2b04      	cmp	r3, #4
 8005224:	d109      	bne.n	800523a <HAL_TIM_PWM_Start+0x3e>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800522c:	b2db      	uxtb	r3, r3
 800522e:	2b01      	cmp	r3, #1
 8005230:	bf14      	ite	ne
 8005232:	2301      	movne	r3, #1
 8005234:	2300      	moveq	r3, #0
 8005236:	b2db      	uxtb	r3, r3
 8005238:	e02f      	b.n	800529a <HAL_TIM_PWM_Start+0x9e>
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	2b08      	cmp	r3, #8
 800523e:	d109      	bne.n	8005254 <HAL_TIM_PWM_Start+0x58>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005246:	b2db      	uxtb	r3, r3
 8005248:	2b01      	cmp	r3, #1
 800524a:	bf14      	ite	ne
 800524c:	2301      	movne	r3, #1
 800524e:	2300      	moveq	r3, #0
 8005250:	b2db      	uxtb	r3, r3
 8005252:	e022      	b.n	800529a <HAL_TIM_PWM_Start+0x9e>
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	2b0c      	cmp	r3, #12
 8005258:	d109      	bne.n	800526e <HAL_TIM_PWM_Start+0x72>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005260:	b2db      	uxtb	r3, r3
 8005262:	2b01      	cmp	r3, #1
 8005264:	bf14      	ite	ne
 8005266:	2301      	movne	r3, #1
 8005268:	2300      	moveq	r3, #0
 800526a:	b2db      	uxtb	r3, r3
 800526c:	e015      	b.n	800529a <HAL_TIM_PWM_Start+0x9e>
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	2b10      	cmp	r3, #16
 8005272:	d109      	bne.n	8005288 <HAL_TIM_PWM_Start+0x8c>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800527a:	b2db      	uxtb	r3, r3
 800527c:	2b01      	cmp	r3, #1
 800527e:	bf14      	ite	ne
 8005280:	2301      	movne	r3, #1
 8005282:	2300      	moveq	r3, #0
 8005284:	b2db      	uxtb	r3, r3
 8005286:	e008      	b.n	800529a <HAL_TIM_PWM_Start+0x9e>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800528e:	b2db      	uxtb	r3, r3
 8005290:	2b01      	cmp	r3, #1
 8005292:	bf14      	ite	ne
 8005294:	2301      	movne	r3, #1
 8005296:	2300      	moveq	r3, #0
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2b00      	cmp	r3, #0
 800529c:	d001      	beq.n	80052a2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e09c      	b.n	80053dc <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d104      	bne.n	80052b2 <HAL_TIM_PWM_Start+0xb6>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2202      	movs	r2, #2
 80052ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052b0:	e023      	b.n	80052fa <HAL_TIM_PWM_Start+0xfe>
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	2b04      	cmp	r3, #4
 80052b6:	d104      	bne.n	80052c2 <HAL_TIM_PWM_Start+0xc6>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2202      	movs	r2, #2
 80052bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052c0:	e01b      	b.n	80052fa <HAL_TIM_PWM_Start+0xfe>
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	2b08      	cmp	r3, #8
 80052c6:	d104      	bne.n	80052d2 <HAL_TIM_PWM_Start+0xd6>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2202      	movs	r2, #2
 80052cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052d0:	e013      	b.n	80052fa <HAL_TIM_PWM_Start+0xfe>
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	2b0c      	cmp	r3, #12
 80052d6:	d104      	bne.n	80052e2 <HAL_TIM_PWM_Start+0xe6>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2202      	movs	r2, #2
 80052dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80052e0:	e00b      	b.n	80052fa <HAL_TIM_PWM_Start+0xfe>
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	2b10      	cmp	r3, #16
 80052e6:	d104      	bne.n	80052f2 <HAL_TIM_PWM_Start+0xf6>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2202      	movs	r2, #2
 80052ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052f0:	e003      	b.n	80052fa <HAL_TIM_PWM_Start+0xfe>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2202      	movs	r2, #2
 80052f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2201      	movs	r2, #1
 8005300:	6839      	ldr	r1, [r7, #0]
 8005302:	4618      	mov	r0, r3
 8005304:	f000 ff74 	bl	80061f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a35      	ldr	r2, [pc, #212]	@ (80053e4 <HAL_TIM_PWM_Start+0x1e8>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d013      	beq.n	800533a <HAL_TIM_PWM_Start+0x13e>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a34      	ldr	r2, [pc, #208]	@ (80053e8 <HAL_TIM_PWM_Start+0x1ec>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d00e      	beq.n	800533a <HAL_TIM_PWM_Start+0x13e>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a32      	ldr	r2, [pc, #200]	@ (80053ec <HAL_TIM_PWM_Start+0x1f0>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d009      	beq.n	800533a <HAL_TIM_PWM_Start+0x13e>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a31      	ldr	r2, [pc, #196]	@ (80053f0 <HAL_TIM_PWM_Start+0x1f4>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d004      	beq.n	800533a <HAL_TIM_PWM_Start+0x13e>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a2f      	ldr	r2, [pc, #188]	@ (80053f4 <HAL_TIM_PWM_Start+0x1f8>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d101      	bne.n	800533e <HAL_TIM_PWM_Start+0x142>
 800533a:	2301      	movs	r3, #1
 800533c:	e000      	b.n	8005340 <HAL_TIM_PWM_Start+0x144>
 800533e:	2300      	movs	r3, #0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d007      	beq.n	8005354 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005352:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a22      	ldr	r2, [pc, #136]	@ (80053e4 <HAL_TIM_PWM_Start+0x1e8>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d01d      	beq.n	800539a <HAL_TIM_PWM_Start+0x19e>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005366:	d018      	beq.n	800539a <HAL_TIM_PWM_Start+0x19e>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a22      	ldr	r2, [pc, #136]	@ (80053f8 <HAL_TIM_PWM_Start+0x1fc>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d013      	beq.n	800539a <HAL_TIM_PWM_Start+0x19e>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a21      	ldr	r2, [pc, #132]	@ (80053fc <HAL_TIM_PWM_Start+0x200>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d00e      	beq.n	800539a <HAL_TIM_PWM_Start+0x19e>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a1f      	ldr	r2, [pc, #124]	@ (8005400 <HAL_TIM_PWM_Start+0x204>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d009      	beq.n	800539a <HAL_TIM_PWM_Start+0x19e>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a17      	ldr	r2, [pc, #92]	@ (80053e8 <HAL_TIM_PWM_Start+0x1ec>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d004      	beq.n	800539a <HAL_TIM_PWM_Start+0x19e>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a15      	ldr	r2, [pc, #84]	@ (80053ec <HAL_TIM_PWM_Start+0x1f0>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d115      	bne.n	80053c6 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	689a      	ldr	r2, [r3, #8]
 80053a0:	4b18      	ldr	r3, [pc, #96]	@ (8005404 <HAL_TIM_PWM_Start+0x208>)
 80053a2:	4013      	ands	r3, r2
 80053a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2b06      	cmp	r3, #6
 80053aa:	d015      	beq.n	80053d8 <HAL_TIM_PWM_Start+0x1dc>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053b2:	d011      	beq.n	80053d8 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f042 0201 	orr.w	r2, r2, #1
 80053c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053c4:	e008      	b.n	80053d8 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f042 0201 	orr.w	r2, r2, #1
 80053d4:	601a      	str	r2, [r3, #0]
 80053d6:	e000      	b.n	80053da <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053d8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80053da:	2300      	movs	r3, #0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3710      	adds	r7, #16
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	40012c00 	.word	0x40012c00
 80053e8:	40013400 	.word	0x40013400
 80053ec:	40014000 	.word	0x40014000
 80053f0:	40014400 	.word	0x40014400
 80053f4:	40014800 	.word	0x40014800
 80053f8:	40000400 	.word	0x40000400
 80053fc:	40000800 	.word	0x40000800
 8005400:	40000c00 	.word	0x40000c00
 8005404:	00010007 	.word	0x00010007

08005408 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b086      	sub	sp, #24
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d101      	bne.n	800541c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e097      	b.n	800554c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005422:	b2db      	uxtb	r3, r3
 8005424:	2b00      	cmp	r3, #0
 8005426:	d106      	bne.n	8005436 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f7fc fe13 	bl	800205c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2202      	movs	r2, #2
 800543a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	6812      	ldr	r2, [r2, #0]
 8005448:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800544c:	f023 0307 	bic.w	r3, r3, #7
 8005450:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	3304      	adds	r3, #4
 800545a:	4619      	mov	r1, r3
 800545c:	4610      	mov	r0, r2
 800545e:	f000 fb4b 	bl	8005af8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	6a1b      	ldr	r3, [r3, #32]
 8005478:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	4313      	orrs	r3, r2
 8005482:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800548a:	f023 0303 	bic.w	r3, r3, #3
 800548e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	689a      	ldr	r2, [r3, #8]
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	699b      	ldr	r3, [r3, #24]
 8005498:	021b      	lsls	r3, r3, #8
 800549a:	4313      	orrs	r3, r2
 800549c:	693a      	ldr	r2, [r7, #16]
 800549e:	4313      	orrs	r3, r2
 80054a0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80054a8:	f023 030c 	bic.w	r3, r3, #12
 80054ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80054b4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80054b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	68da      	ldr	r2, [r3, #12]
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	69db      	ldr	r3, [r3, #28]
 80054c2:	021b      	lsls	r3, r3, #8
 80054c4:	4313      	orrs	r3, r2
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	011a      	lsls	r2, r3, #4
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	6a1b      	ldr	r3, [r3, #32]
 80054d6:	031b      	lsls	r3, r3, #12
 80054d8:	4313      	orrs	r3, r2
 80054da:	693a      	ldr	r2, [r7, #16]
 80054dc:	4313      	orrs	r3, r2
 80054de:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80054e6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80054ee:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	685a      	ldr	r2, [r3, #4]
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	695b      	ldr	r3, [r3, #20]
 80054f8:	011b      	lsls	r3, r3, #4
 80054fa:	4313      	orrs	r3, r2
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	4313      	orrs	r3, r2
 8005500:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	693a      	ldr	r2, [r7, #16]
 8005510:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2201      	movs	r2, #1
 800551e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2201      	movs	r2, #1
 8005526:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2201      	movs	r2, #1
 800552e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2201      	movs	r2, #1
 8005536:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2201      	movs	r2, #1
 800553e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2201      	movs	r2, #1
 8005546:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	3718      	adds	r7, #24
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005564:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800556c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005574:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800557c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d110      	bne.n	80055a6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005584:	7bfb      	ldrb	r3, [r7, #15]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d102      	bne.n	8005590 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800558a:	7b7b      	ldrb	r3, [r7, #13]
 800558c:	2b01      	cmp	r3, #1
 800558e:	d001      	beq.n	8005594 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e069      	b.n	8005668 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2202      	movs	r2, #2
 8005598:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2202      	movs	r2, #2
 80055a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055a4:	e031      	b.n	800560a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	2b04      	cmp	r3, #4
 80055aa:	d110      	bne.n	80055ce <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80055ac:	7bbb      	ldrb	r3, [r7, #14]
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d102      	bne.n	80055b8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80055b2:	7b3b      	ldrb	r3, [r7, #12]
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d001      	beq.n	80055bc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e055      	b.n	8005668 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2202      	movs	r2, #2
 80055c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2202      	movs	r2, #2
 80055c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80055cc:	e01d      	b.n	800560a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80055ce:	7bfb      	ldrb	r3, [r7, #15]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d108      	bne.n	80055e6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80055d4:	7bbb      	ldrb	r3, [r7, #14]
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d105      	bne.n	80055e6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80055da:	7b7b      	ldrb	r3, [r7, #13]
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d102      	bne.n	80055e6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80055e0:	7b3b      	ldrb	r3, [r7, #12]
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d001      	beq.n	80055ea <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e03e      	b.n	8005668 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2202      	movs	r2, #2
 80055ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2202      	movs	r2, #2
 80055f6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2202      	movs	r2, #2
 80055fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2202      	movs	r2, #2
 8005606:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d003      	beq.n	8005618 <HAL_TIM_Encoder_Start+0xc4>
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	2b04      	cmp	r3, #4
 8005614:	d008      	beq.n	8005628 <HAL_TIM_Encoder_Start+0xd4>
 8005616:	e00f      	b.n	8005638 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2201      	movs	r2, #1
 800561e:	2100      	movs	r1, #0
 8005620:	4618      	mov	r0, r3
 8005622:	f000 fde5 	bl	80061f0 <TIM_CCxChannelCmd>
      break;
 8005626:	e016      	b.n	8005656 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2201      	movs	r2, #1
 800562e:	2104      	movs	r1, #4
 8005630:	4618      	mov	r0, r3
 8005632:	f000 fddd 	bl	80061f0 <TIM_CCxChannelCmd>
      break;
 8005636:	e00e      	b.n	8005656 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2201      	movs	r2, #1
 800563e:	2100      	movs	r1, #0
 8005640:	4618      	mov	r0, r3
 8005642:	f000 fdd5 	bl	80061f0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2201      	movs	r2, #1
 800564c:	2104      	movs	r1, #4
 800564e:	4618      	mov	r0, r3
 8005650:	f000 fdce 	bl	80061f0 <TIM_CCxChannelCmd>
      break;
 8005654:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f042 0201 	orr.w	r2, r2, #1
 8005664:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005666:	2300      	movs	r3, #0
}
 8005668:	4618      	mov	r0, r3
 800566a:	3710      	adds	r7, #16
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	f003 0302 	and.w	r3, r3, #2
 800568e:	2b00      	cmp	r3, #0
 8005690:	d020      	beq.n	80056d4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f003 0302 	and.w	r3, r3, #2
 8005698:	2b00      	cmp	r3, #0
 800569a:	d01b      	beq.n	80056d4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f06f 0202 	mvn.w	r2, #2
 80056a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2201      	movs	r2, #1
 80056aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	699b      	ldr	r3, [r3, #24]
 80056b2:	f003 0303 	and.w	r3, r3, #3
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d003      	beq.n	80056c2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 f9fe 	bl	8005abc <HAL_TIM_IC_CaptureCallback>
 80056c0:	e005      	b.n	80056ce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 f9f0 	bl	8005aa8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 fa01 	bl	8005ad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	f003 0304 	and.w	r3, r3, #4
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d020      	beq.n	8005720 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f003 0304 	and.w	r3, r3, #4
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d01b      	beq.n	8005720 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f06f 0204 	mvn.w	r2, #4
 80056f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2202      	movs	r2, #2
 80056f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005702:	2b00      	cmp	r3, #0
 8005704:	d003      	beq.n	800570e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 f9d8 	bl	8005abc <HAL_TIM_IC_CaptureCallback>
 800570c:	e005      	b.n	800571a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 f9ca 	bl	8005aa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 f9db 	bl	8005ad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	f003 0308 	and.w	r3, r3, #8
 8005726:	2b00      	cmp	r3, #0
 8005728:	d020      	beq.n	800576c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f003 0308 	and.w	r3, r3, #8
 8005730:	2b00      	cmp	r3, #0
 8005732:	d01b      	beq.n	800576c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f06f 0208 	mvn.w	r2, #8
 800573c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2204      	movs	r2, #4
 8005742:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	69db      	ldr	r3, [r3, #28]
 800574a:	f003 0303 	and.w	r3, r3, #3
 800574e:	2b00      	cmp	r3, #0
 8005750:	d003      	beq.n	800575a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 f9b2 	bl	8005abc <HAL_TIM_IC_CaptureCallback>
 8005758:	e005      	b.n	8005766 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 f9a4 	bl	8005aa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f000 f9b5 	bl	8005ad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	f003 0310 	and.w	r3, r3, #16
 8005772:	2b00      	cmp	r3, #0
 8005774:	d020      	beq.n	80057b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f003 0310 	and.w	r3, r3, #16
 800577c:	2b00      	cmp	r3, #0
 800577e:	d01b      	beq.n	80057b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f06f 0210 	mvn.w	r2, #16
 8005788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2208      	movs	r2, #8
 800578e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	69db      	ldr	r3, [r3, #28]
 8005796:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800579a:	2b00      	cmp	r3, #0
 800579c:	d003      	beq.n	80057a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 f98c 	bl	8005abc <HAL_TIM_IC_CaptureCallback>
 80057a4:	e005      	b.n	80057b2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 f97e 	bl	8005aa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 f98f 	bl	8005ad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	f003 0301 	and.w	r3, r3, #1
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00c      	beq.n	80057dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f003 0301 	and.w	r3, r3, #1
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d007      	beq.n	80057dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f06f 0201 	mvn.w	r2, #1
 80057d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f7fb fc9c 	bl	8001114 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d104      	bne.n	80057f0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d00c      	beq.n	800580a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d007      	beq.n	800580a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005802:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 fe29 	bl	800645c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00c      	beq.n	800582e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800581a:	2b00      	cmp	r3, #0
 800581c:	d007      	beq.n	800582e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005826:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 fe21 	bl	8006470 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00c      	beq.n	8005852 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800583e:	2b00      	cmp	r3, #0
 8005840:	d007      	beq.n	8005852 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800584a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 f949 	bl	8005ae4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	f003 0320 	and.w	r3, r3, #32
 8005858:	2b00      	cmp	r3, #0
 800585a:	d00c      	beq.n	8005876 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f003 0320 	and.w	r3, r3, #32
 8005862:	2b00      	cmp	r3, #0
 8005864:	d007      	beq.n	8005876 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f06f 0220 	mvn.w	r2, #32
 800586e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 fde9 	bl	8006448 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005876:	bf00      	nop
 8005878:	3710      	adds	r7, #16
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
	...

08005880 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b086      	sub	sp, #24
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800588c:	2300      	movs	r3, #0
 800588e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005896:	2b01      	cmp	r3, #1
 8005898:	d101      	bne.n	800589e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800589a:	2302      	movs	r3, #2
 800589c:	e0ff      	b.n	8005a9e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2201      	movs	r2, #1
 80058a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2b14      	cmp	r3, #20
 80058aa:	f200 80f0 	bhi.w	8005a8e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80058ae:	a201      	add	r2, pc, #4	@ (adr r2, 80058b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80058b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b4:	08005909 	.word	0x08005909
 80058b8:	08005a8f 	.word	0x08005a8f
 80058bc:	08005a8f 	.word	0x08005a8f
 80058c0:	08005a8f 	.word	0x08005a8f
 80058c4:	08005949 	.word	0x08005949
 80058c8:	08005a8f 	.word	0x08005a8f
 80058cc:	08005a8f 	.word	0x08005a8f
 80058d0:	08005a8f 	.word	0x08005a8f
 80058d4:	0800598b 	.word	0x0800598b
 80058d8:	08005a8f 	.word	0x08005a8f
 80058dc:	08005a8f 	.word	0x08005a8f
 80058e0:	08005a8f 	.word	0x08005a8f
 80058e4:	080059cb 	.word	0x080059cb
 80058e8:	08005a8f 	.word	0x08005a8f
 80058ec:	08005a8f 	.word	0x08005a8f
 80058f0:	08005a8f 	.word	0x08005a8f
 80058f4:	08005a0d 	.word	0x08005a0d
 80058f8:	08005a8f 	.word	0x08005a8f
 80058fc:	08005a8f 	.word	0x08005a8f
 8005900:	08005a8f 	.word	0x08005a8f
 8005904:	08005a4d 	.word	0x08005a4d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	68b9      	ldr	r1, [r7, #8]
 800590e:	4618      	mov	r0, r3
 8005910:	f000 f998 	bl	8005c44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	699a      	ldr	r2, [r3, #24]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f042 0208 	orr.w	r2, r2, #8
 8005922:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	699a      	ldr	r2, [r3, #24]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f022 0204 	bic.w	r2, r2, #4
 8005932:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	6999      	ldr	r1, [r3, #24]
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	691a      	ldr	r2, [r3, #16]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	430a      	orrs	r2, r1
 8005944:	619a      	str	r2, [r3, #24]
      break;
 8005946:	e0a5      	b.n	8005a94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68b9      	ldr	r1, [r7, #8]
 800594e:	4618      	mov	r0, r3
 8005950:	f000 fa08 	bl	8005d64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	699a      	ldr	r2, [r3, #24]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005962:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	699a      	ldr	r2, [r3, #24]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005972:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	6999      	ldr	r1, [r3, #24]
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	021a      	lsls	r2, r3, #8
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	430a      	orrs	r2, r1
 8005986:	619a      	str	r2, [r3, #24]
      break;
 8005988:	e084      	b.n	8005a94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	68b9      	ldr	r1, [r7, #8]
 8005990:	4618      	mov	r0, r3
 8005992:	f000 fa71 	bl	8005e78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	69da      	ldr	r2, [r3, #28]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f042 0208 	orr.w	r2, r2, #8
 80059a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	69da      	ldr	r2, [r3, #28]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f022 0204 	bic.w	r2, r2, #4
 80059b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	69d9      	ldr	r1, [r3, #28]
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	691a      	ldr	r2, [r3, #16]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	430a      	orrs	r2, r1
 80059c6:	61da      	str	r2, [r3, #28]
      break;
 80059c8:	e064      	b.n	8005a94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68b9      	ldr	r1, [r7, #8]
 80059d0:	4618      	mov	r0, r3
 80059d2:	f000 fad9 	bl	8005f88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	69da      	ldr	r2, [r3, #28]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	69da      	ldr	r2, [r3, #28]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	69d9      	ldr	r1, [r3, #28]
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	021a      	lsls	r2, r3, #8
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	430a      	orrs	r2, r1
 8005a08:	61da      	str	r2, [r3, #28]
      break;
 8005a0a:	e043      	b.n	8005a94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68b9      	ldr	r1, [r7, #8]
 8005a12:	4618      	mov	r0, r3
 8005a14:	f000 fb22 	bl	800605c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f042 0208 	orr.w	r2, r2, #8
 8005a26:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f022 0204 	bic.w	r2, r2, #4
 8005a36:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	691a      	ldr	r2, [r3, #16]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	430a      	orrs	r2, r1
 8005a48:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005a4a:	e023      	b.n	8005a94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68b9      	ldr	r1, [r7, #8]
 8005a52:	4618      	mov	r0, r3
 8005a54:	f000 fb66 	bl	8006124 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a66:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a76:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	021a      	lsls	r2, r3, #8
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	430a      	orrs	r2, r1
 8005a8a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005a8c:	e002      	b.n	8005a94 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	75fb      	strb	r3, [r7, #23]
      break;
 8005a92:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3718      	adds	r7, #24
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop

08005aa8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ab0:	bf00      	nop
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ac4:	bf00      	nop
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ad8:	bf00      	nop
 8005ada:	370c      	adds	r7, #12
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005aec:	bf00      	nop
 8005aee:	370c      	adds	r7, #12
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b085      	sub	sp, #20
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a46      	ldr	r2, [pc, #280]	@ (8005c24 <TIM_Base_SetConfig+0x12c>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d013      	beq.n	8005b38 <TIM_Base_SetConfig+0x40>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b16:	d00f      	beq.n	8005b38 <TIM_Base_SetConfig+0x40>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a43      	ldr	r2, [pc, #268]	@ (8005c28 <TIM_Base_SetConfig+0x130>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d00b      	beq.n	8005b38 <TIM_Base_SetConfig+0x40>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a42      	ldr	r2, [pc, #264]	@ (8005c2c <TIM_Base_SetConfig+0x134>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d007      	beq.n	8005b38 <TIM_Base_SetConfig+0x40>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a41      	ldr	r2, [pc, #260]	@ (8005c30 <TIM_Base_SetConfig+0x138>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d003      	beq.n	8005b38 <TIM_Base_SetConfig+0x40>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4a40      	ldr	r2, [pc, #256]	@ (8005c34 <TIM_Base_SetConfig+0x13c>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d108      	bne.n	8005b4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a35      	ldr	r2, [pc, #212]	@ (8005c24 <TIM_Base_SetConfig+0x12c>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d01f      	beq.n	8005b92 <TIM_Base_SetConfig+0x9a>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b58:	d01b      	beq.n	8005b92 <TIM_Base_SetConfig+0x9a>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a32      	ldr	r2, [pc, #200]	@ (8005c28 <TIM_Base_SetConfig+0x130>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d017      	beq.n	8005b92 <TIM_Base_SetConfig+0x9a>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a31      	ldr	r2, [pc, #196]	@ (8005c2c <TIM_Base_SetConfig+0x134>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d013      	beq.n	8005b92 <TIM_Base_SetConfig+0x9a>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a30      	ldr	r2, [pc, #192]	@ (8005c30 <TIM_Base_SetConfig+0x138>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d00f      	beq.n	8005b92 <TIM_Base_SetConfig+0x9a>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a2f      	ldr	r2, [pc, #188]	@ (8005c34 <TIM_Base_SetConfig+0x13c>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d00b      	beq.n	8005b92 <TIM_Base_SetConfig+0x9a>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a2e      	ldr	r2, [pc, #184]	@ (8005c38 <TIM_Base_SetConfig+0x140>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d007      	beq.n	8005b92 <TIM_Base_SetConfig+0x9a>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a2d      	ldr	r2, [pc, #180]	@ (8005c3c <TIM_Base_SetConfig+0x144>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d003      	beq.n	8005b92 <TIM_Base_SetConfig+0x9a>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a2c      	ldr	r2, [pc, #176]	@ (8005c40 <TIM_Base_SetConfig+0x148>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d108      	bne.n	8005ba4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	68fa      	ldr	r2, [r7, #12]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	68fa      	ldr	r2, [r7, #12]
 8005bb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	689a      	ldr	r2, [r3, #8]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4a16      	ldr	r2, [pc, #88]	@ (8005c24 <TIM_Base_SetConfig+0x12c>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d00f      	beq.n	8005bf0 <TIM_Base_SetConfig+0xf8>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a18      	ldr	r2, [pc, #96]	@ (8005c34 <TIM_Base_SetConfig+0x13c>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d00b      	beq.n	8005bf0 <TIM_Base_SetConfig+0xf8>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a17      	ldr	r2, [pc, #92]	@ (8005c38 <TIM_Base_SetConfig+0x140>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d007      	beq.n	8005bf0 <TIM_Base_SetConfig+0xf8>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a16      	ldr	r2, [pc, #88]	@ (8005c3c <TIM_Base_SetConfig+0x144>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d003      	beq.n	8005bf0 <TIM_Base_SetConfig+0xf8>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a15      	ldr	r2, [pc, #84]	@ (8005c40 <TIM_Base_SetConfig+0x148>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d103      	bne.n	8005bf8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	691a      	ldr	r2, [r3, #16]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	f003 0301 	and.w	r3, r3, #1
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d105      	bne.n	8005c16 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	f023 0201 	bic.w	r2, r3, #1
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	611a      	str	r2, [r3, #16]
  }
}
 8005c16:	bf00      	nop
 8005c18:	3714      	adds	r7, #20
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr
 8005c22:	bf00      	nop
 8005c24:	40012c00 	.word	0x40012c00
 8005c28:	40000400 	.word	0x40000400
 8005c2c:	40000800 	.word	0x40000800
 8005c30:	40000c00 	.word	0x40000c00
 8005c34:	40013400 	.word	0x40013400
 8005c38:	40014000 	.word	0x40014000
 8005c3c:	40014400 	.word	0x40014400
 8005c40:	40014800 	.word	0x40014800

08005c44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b087      	sub	sp, #28
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a1b      	ldr	r3, [r3, #32]
 8005c58:	f023 0201 	bic.w	r2, r3, #1
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f023 0303 	bic.w	r3, r3, #3
 8005c7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68fa      	ldr	r2, [r7, #12]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	f023 0302 	bic.w	r3, r3, #2
 8005c90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	697a      	ldr	r2, [r7, #20]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a2c      	ldr	r2, [pc, #176]	@ (8005d50 <TIM_OC1_SetConfig+0x10c>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d00f      	beq.n	8005cc4 <TIM_OC1_SetConfig+0x80>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4a2b      	ldr	r2, [pc, #172]	@ (8005d54 <TIM_OC1_SetConfig+0x110>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d00b      	beq.n	8005cc4 <TIM_OC1_SetConfig+0x80>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a2a      	ldr	r2, [pc, #168]	@ (8005d58 <TIM_OC1_SetConfig+0x114>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d007      	beq.n	8005cc4 <TIM_OC1_SetConfig+0x80>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a29      	ldr	r2, [pc, #164]	@ (8005d5c <TIM_OC1_SetConfig+0x118>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d003      	beq.n	8005cc4 <TIM_OC1_SetConfig+0x80>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a28      	ldr	r2, [pc, #160]	@ (8005d60 <TIM_OC1_SetConfig+0x11c>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d10c      	bne.n	8005cde <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	f023 0308 	bic.w	r3, r3, #8
 8005cca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	697a      	ldr	r2, [r7, #20]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	f023 0304 	bic.w	r3, r3, #4
 8005cdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a1b      	ldr	r2, [pc, #108]	@ (8005d50 <TIM_OC1_SetConfig+0x10c>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d00f      	beq.n	8005d06 <TIM_OC1_SetConfig+0xc2>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a1a      	ldr	r2, [pc, #104]	@ (8005d54 <TIM_OC1_SetConfig+0x110>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d00b      	beq.n	8005d06 <TIM_OC1_SetConfig+0xc2>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a19      	ldr	r2, [pc, #100]	@ (8005d58 <TIM_OC1_SetConfig+0x114>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d007      	beq.n	8005d06 <TIM_OC1_SetConfig+0xc2>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a18      	ldr	r2, [pc, #96]	@ (8005d5c <TIM_OC1_SetConfig+0x118>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d003      	beq.n	8005d06 <TIM_OC1_SetConfig+0xc2>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a17      	ldr	r2, [pc, #92]	@ (8005d60 <TIM_OC1_SetConfig+0x11c>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d111      	bne.n	8005d2a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005d14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	693a      	ldr	r2, [r7, #16]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	699b      	ldr	r3, [r3, #24]
 8005d24:	693a      	ldr	r2, [r7, #16]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	693a      	ldr	r2, [r7, #16]
 8005d2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	68fa      	ldr	r2, [r7, #12]
 8005d34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	685a      	ldr	r2, [r3, #4]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	697a      	ldr	r2, [r7, #20]
 8005d42:	621a      	str	r2, [r3, #32]
}
 8005d44:	bf00      	nop
 8005d46:	371c      	adds	r7, #28
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr
 8005d50:	40012c00 	.word	0x40012c00
 8005d54:	40013400 	.word	0x40013400
 8005d58:	40014000 	.word	0x40014000
 8005d5c:	40014400 	.word	0x40014400
 8005d60:	40014800 	.word	0x40014800

08005d64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b087      	sub	sp, #28
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a1b      	ldr	r3, [r3, #32]
 8005d72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6a1b      	ldr	r3, [r3, #32]
 8005d78:	f023 0210 	bic.w	r2, r3, #16
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	699b      	ldr	r3, [r3, #24]
 8005d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	021b      	lsls	r3, r3, #8
 8005da6:	68fa      	ldr	r2, [r7, #12]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	f023 0320 	bic.w	r3, r3, #32
 8005db2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	011b      	lsls	r3, r3, #4
 8005dba:	697a      	ldr	r2, [r7, #20]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a28      	ldr	r2, [pc, #160]	@ (8005e64 <TIM_OC2_SetConfig+0x100>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d003      	beq.n	8005dd0 <TIM_OC2_SetConfig+0x6c>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4a27      	ldr	r2, [pc, #156]	@ (8005e68 <TIM_OC2_SetConfig+0x104>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d10d      	bne.n	8005dec <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005dd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	011b      	lsls	r3, r3, #4
 8005dde:	697a      	ldr	r2, [r7, #20]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a1d      	ldr	r2, [pc, #116]	@ (8005e64 <TIM_OC2_SetConfig+0x100>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d00f      	beq.n	8005e14 <TIM_OC2_SetConfig+0xb0>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a1c      	ldr	r2, [pc, #112]	@ (8005e68 <TIM_OC2_SetConfig+0x104>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d00b      	beq.n	8005e14 <TIM_OC2_SetConfig+0xb0>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a1b      	ldr	r2, [pc, #108]	@ (8005e6c <TIM_OC2_SetConfig+0x108>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d007      	beq.n	8005e14 <TIM_OC2_SetConfig+0xb0>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a1a      	ldr	r2, [pc, #104]	@ (8005e70 <TIM_OC2_SetConfig+0x10c>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d003      	beq.n	8005e14 <TIM_OC2_SetConfig+0xb0>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a19      	ldr	r2, [pc, #100]	@ (8005e74 <TIM_OC2_SetConfig+0x110>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d113      	bne.n	8005e3c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005e1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005e22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	695b      	ldr	r3, [r3, #20]
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	693a      	ldr	r2, [r7, #16]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	699b      	ldr	r3, [r3, #24]
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	693a      	ldr	r2, [r7, #16]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	693a      	ldr	r2, [r7, #16]
 8005e40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	68fa      	ldr	r2, [r7, #12]
 8005e46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	685a      	ldr	r2, [r3, #4]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	697a      	ldr	r2, [r7, #20]
 8005e54:	621a      	str	r2, [r3, #32]
}
 8005e56:	bf00      	nop
 8005e58:	371c      	adds	r7, #28
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop
 8005e64:	40012c00 	.word	0x40012c00
 8005e68:	40013400 	.word	0x40013400
 8005e6c:	40014000 	.word	0x40014000
 8005e70:	40014400 	.word	0x40014400
 8005e74:	40014800 	.word	0x40014800

08005e78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b087      	sub	sp, #28
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a1b      	ldr	r3, [r3, #32]
 8005e86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6a1b      	ldr	r3, [r3, #32]
 8005e8c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	69db      	ldr	r3, [r3, #28]
 8005e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ea6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005eaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f023 0303 	bic.w	r3, r3, #3
 8005eb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68fa      	ldr	r2, [r7, #12]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ec4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	021b      	lsls	r3, r3, #8
 8005ecc:	697a      	ldr	r2, [r7, #20]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a27      	ldr	r2, [pc, #156]	@ (8005f74 <TIM_OC3_SetConfig+0xfc>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d003      	beq.n	8005ee2 <TIM_OC3_SetConfig+0x6a>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a26      	ldr	r2, [pc, #152]	@ (8005f78 <TIM_OC3_SetConfig+0x100>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d10d      	bne.n	8005efe <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005ee8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	021b      	lsls	r3, r3, #8
 8005ef0:	697a      	ldr	r2, [r7, #20]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005efc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a1c      	ldr	r2, [pc, #112]	@ (8005f74 <TIM_OC3_SetConfig+0xfc>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d00f      	beq.n	8005f26 <TIM_OC3_SetConfig+0xae>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a1b      	ldr	r2, [pc, #108]	@ (8005f78 <TIM_OC3_SetConfig+0x100>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d00b      	beq.n	8005f26 <TIM_OC3_SetConfig+0xae>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a1a      	ldr	r2, [pc, #104]	@ (8005f7c <TIM_OC3_SetConfig+0x104>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d007      	beq.n	8005f26 <TIM_OC3_SetConfig+0xae>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a19      	ldr	r2, [pc, #100]	@ (8005f80 <TIM_OC3_SetConfig+0x108>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d003      	beq.n	8005f26 <TIM_OC3_SetConfig+0xae>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a18      	ldr	r2, [pc, #96]	@ (8005f84 <TIM_OC3_SetConfig+0x10c>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d113      	bne.n	8005f4e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005f34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	695b      	ldr	r3, [r3, #20]
 8005f3a:	011b      	lsls	r3, r3, #4
 8005f3c:	693a      	ldr	r2, [r7, #16]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	699b      	ldr	r3, [r3, #24]
 8005f46:	011b      	lsls	r3, r3, #4
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	693a      	ldr	r2, [r7, #16]
 8005f52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	685a      	ldr	r2, [r3, #4]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	697a      	ldr	r2, [r7, #20]
 8005f66:	621a      	str	r2, [r3, #32]
}
 8005f68:	bf00      	nop
 8005f6a:	371c      	adds	r7, #28
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr
 8005f74:	40012c00 	.word	0x40012c00
 8005f78:	40013400 	.word	0x40013400
 8005f7c:	40014000 	.word	0x40014000
 8005f80:	40014400 	.word	0x40014400
 8005f84:	40014800 	.word	0x40014800

08005f88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b087      	sub	sp, #28
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6a1b      	ldr	r3, [r3, #32]
 8005f96:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6a1b      	ldr	r3, [r3, #32]
 8005f9c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	69db      	ldr	r3, [r3, #28]
 8005fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005fb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	021b      	lsls	r3, r3, #8
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005fd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	031b      	lsls	r3, r3, #12
 8005fde:	693a      	ldr	r2, [r7, #16]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4a18      	ldr	r2, [pc, #96]	@ (8006048 <TIM_OC4_SetConfig+0xc0>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d00f      	beq.n	800600c <TIM_OC4_SetConfig+0x84>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a17      	ldr	r2, [pc, #92]	@ (800604c <TIM_OC4_SetConfig+0xc4>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d00b      	beq.n	800600c <TIM_OC4_SetConfig+0x84>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4a16      	ldr	r2, [pc, #88]	@ (8006050 <TIM_OC4_SetConfig+0xc8>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d007      	beq.n	800600c <TIM_OC4_SetConfig+0x84>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4a15      	ldr	r2, [pc, #84]	@ (8006054 <TIM_OC4_SetConfig+0xcc>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d003      	beq.n	800600c <TIM_OC4_SetConfig+0x84>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4a14      	ldr	r2, [pc, #80]	@ (8006058 <TIM_OC4_SetConfig+0xd0>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d109      	bne.n	8006020 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006012:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	695b      	ldr	r3, [r3, #20]
 8006018:	019b      	lsls	r3, r3, #6
 800601a:	697a      	ldr	r2, [r7, #20]
 800601c:	4313      	orrs	r3, r2
 800601e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	697a      	ldr	r2, [r7, #20]
 8006024:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	685a      	ldr	r2, [r3, #4]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	693a      	ldr	r2, [r7, #16]
 8006038:	621a      	str	r2, [r3, #32]
}
 800603a:	bf00      	nop
 800603c:	371c      	adds	r7, #28
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr
 8006046:	bf00      	nop
 8006048:	40012c00 	.word	0x40012c00
 800604c:	40013400 	.word	0x40013400
 8006050:	40014000 	.word	0x40014000
 8006054:	40014400 	.word	0x40014400
 8006058:	40014800 	.word	0x40014800

0800605c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800605c:	b480      	push	{r7}
 800605e:	b087      	sub	sp, #28
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a1b      	ldr	r3, [r3, #32]
 800606a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6a1b      	ldr	r3, [r3, #32]
 8006070:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800608a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800608e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	68fa      	ldr	r2, [r7, #12]
 8006096:	4313      	orrs	r3, r2
 8006098:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80060a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	041b      	lsls	r3, r3, #16
 80060a8:	693a      	ldr	r2, [r7, #16]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a17      	ldr	r2, [pc, #92]	@ (8006110 <TIM_OC5_SetConfig+0xb4>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d00f      	beq.n	80060d6 <TIM_OC5_SetConfig+0x7a>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a16      	ldr	r2, [pc, #88]	@ (8006114 <TIM_OC5_SetConfig+0xb8>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d00b      	beq.n	80060d6 <TIM_OC5_SetConfig+0x7a>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a15      	ldr	r2, [pc, #84]	@ (8006118 <TIM_OC5_SetConfig+0xbc>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d007      	beq.n	80060d6 <TIM_OC5_SetConfig+0x7a>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a14      	ldr	r2, [pc, #80]	@ (800611c <TIM_OC5_SetConfig+0xc0>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d003      	beq.n	80060d6 <TIM_OC5_SetConfig+0x7a>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a13      	ldr	r2, [pc, #76]	@ (8006120 <TIM_OC5_SetConfig+0xc4>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d109      	bne.n	80060ea <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	695b      	ldr	r3, [r3, #20]
 80060e2:	021b      	lsls	r3, r3, #8
 80060e4:	697a      	ldr	r2, [r7, #20]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	697a      	ldr	r2, [r7, #20]
 80060ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	685a      	ldr	r2, [r3, #4]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	693a      	ldr	r2, [r7, #16]
 8006102:	621a      	str	r2, [r3, #32]
}
 8006104:	bf00      	nop
 8006106:	371c      	adds	r7, #28
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr
 8006110:	40012c00 	.word	0x40012c00
 8006114:	40013400 	.word	0x40013400
 8006118:	40014000 	.word	0x40014000
 800611c:	40014400 	.word	0x40014400
 8006120:	40014800 	.word	0x40014800

08006124 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006124:	b480      	push	{r7}
 8006126:	b087      	sub	sp, #28
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a1b      	ldr	r3, [r3, #32]
 8006132:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6a1b      	ldr	r3, [r3, #32]
 8006138:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800614a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006152:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006156:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	021b      	lsls	r3, r3, #8
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	4313      	orrs	r3, r2
 8006162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800616a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	051b      	lsls	r3, r3, #20
 8006172:	693a      	ldr	r2, [r7, #16]
 8006174:	4313      	orrs	r3, r2
 8006176:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4a18      	ldr	r2, [pc, #96]	@ (80061dc <TIM_OC6_SetConfig+0xb8>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d00f      	beq.n	80061a0 <TIM_OC6_SetConfig+0x7c>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a17      	ldr	r2, [pc, #92]	@ (80061e0 <TIM_OC6_SetConfig+0xbc>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d00b      	beq.n	80061a0 <TIM_OC6_SetConfig+0x7c>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a16      	ldr	r2, [pc, #88]	@ (80061e4 <TIM_OC6_SetConfig+0xc0>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d007      	beq.n	80061a0 <TIM_OC6_SetConfig+0x7c>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a15      	ldr	r2, [pc, #84]	@ (80061e8 <TIM_OC6_SetConfig+0xc4>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d003      	beq.n	80061a0 <TIM_OC6_SetConfig+0x7c>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a14      	ldr	r2, [pc, #80]	@ (80061ec <TIM_OC6_SetConfig+0xc8>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d109      	bne.n	80061b4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80061a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	695b      	ldr	r3, [r3, #20]
 80061ac:	029b      	lsls	r3, r3, #10
 80061ae:	697a      	ldr	r2, [r7, #20]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	697a      	ldr	r2, [r7, #20]
 80061b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	685a      	ldr	r2, [r3, #4]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	693a      	ldr	r2, [r7, #16]
 80061cc:	621a      	str	r2, [r3, #32]
}
 80061ce:	bf00      	nop
 80061d0:	371c      	adds	r7, #28
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	40012c00 	.word	0x40012c00
 80061e0:	40013400 	.word	0x40013400
 80061e4:	40014000 	.word	0x40014000
 80061e8:	40014400 	.word	0x40014400
 80061ec:	40014800 	.word	0x40014800

080061f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b087      	sub	sp, #28
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	f003 031f 	and.w	r3, r3, #31
 8006202:	2201      	movs	r2, #1
 8006204:	fa02 f303 	lsl.w	r3, r2, r3
 8006208:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6a1a      	ldr	r2, [r3, #32]
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	43db      	mvns	r3, r3
 8006212:	401a      	ands	r2, r3
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6a1a      	ldr	r2, [r3, #32]
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	f003 031f 	and.w	r3, r3, #31
 8006222:	6879      	ldr	r1, [r7, #4]
 8006224:	fa01 f303 	lsl.w	r3, r1, r3
 8006228:	431a      	orrs	r2, r3
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	621a      	str	r2, [r3, #32]
}
 800622e:	bf00      	nop
 8006230:	371c      	adds	r7, #28
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr
	...

0800623c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800623c:	b480      	push	{r7}
 800623e:	b085      	sub	sp, #20
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800624c:	2b01      	cmp	r3, #1
 800624e:	d101      	bne.n	8006254 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006250:	2302      	movs	r3, #2
 8006252:	e068      	b.n	8006326 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2202      	movs	r2, #2
 8006260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a2e      	ldr	r2, [pc, #184]	@ (8006334 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d004      	beq.n	8006288 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a2d      	ldr	r2, [pc, #180]	@ (8006338 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d108      	bne.n	800629a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800628e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	68fa      	ldr	r2, [r7, #12]
 8006296:	4313      	orrs	r3, r2
 8006298:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68fa      	ldr	r2, [r7, #12]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a1e      	ldr	r2, [pc, #120]	@ (8006334 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d01d      	beq.n	80062fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062c6:	d018      	beq.n	80062fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a1b      	ldr	r2, [pc, #108]	@ (800633c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d013      	beq.n	80062fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a1a      	ldr	r2, [pc, #104]	@ (8006340 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d00e      	beq.n	80062fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a18      	ldr	r2, [pc, #96]	@ (8006344 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d009      	beq.n	80062fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a13      	ldr	r2, [pc, #76]	@ (8006338 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d004      	beq.n	80062fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a14      	ldr	r2, [pc, #80]	@ (8006348 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d10c      	bne.n	8006314 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006300:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	68ba      	ldr	r2, [r7, #8]
 8006308:	4313      	orrs	r3, r2
 800630a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68ba      	ldr	r2, [r7, #8]
 8006312:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	3714      	adds	r7, #20
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr
 8006332:	bf00      	nop
 8006334:	40012c00 	.word	0x40012c00
 8006338:	40013400 	.word	0x40013400
 800633c:	40000400 	.word	0x40000400
 8006340:	40000800 	.word	0x40000800
 8006344:	40000c00 	.word	0x40000c00
 8006348:	40014000 	.word	0x40014000

0800634c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800634c:	b480      	push	{r7}
 800634e:	b085      	sub	sp, #20
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006356:	2300      	movs	r3, #0
 8006358:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006360:	2b01      	cmp	r3, #1
 8006362:	d101      	bne.n	8006368 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006364:	2302      	movs	r3, #2
 8006366:	e065      	b.n	8006434 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	4313      	orrs	r3, r2
 800637c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	4313      	orrs	r3, r2
 800638a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	4313      	orrs	r3, r2
 8006398:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	695b      	ldr	r3, [r3, #20]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ce:	4313      	orrs	r3, r2
 80063d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	699b      	ldr	r3, [r3, #24]
 80063dc:	041b      	lsls	r3, r3, #16
 80063de:	4313      	orrs	r3, r2
 80063e0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a16      	ldr	r2, [pc, #88]	@ (8006440 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d004      	beq.n	80063f6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a14      	ldr	r2, [pc, #80]	@ (8006444 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d115      	bne.n	8006422 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006400:	051b      	lsls	r3, r3, #20
 8006402:	4313      	orrs	r3, r2
 8006404:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	69db      	ldr	r3, [r3, #28]
 8006410:	4313      	orrs	r3, r2
 8006412:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	6a1b      	ldr	r3, [r3, #32]
 800641e:	4313      	orrs	r3, r2
 8006420:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006432:	2300      	movs	r3, #0
}
 8006434:	4618      	mov	r0, r3
 8006436:	3714      	adds	r7, #20
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr
 8006440:	40012c00 	.word	0x40012c00
 8006444:	40013400 	.word	0x40013400

08006448 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006448:	b480      	push	{r7}
 800644a:	b083      	sub	sp, #12
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006450:	bf00      	nop
 8006452:	370c      	adds	r7, #12
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800645c:	b480      	push	{r7}
 800645e:	b083      	sub	sp, #12
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006464:	bf00      	nop
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006470:	b480      	push	{r7}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006478:	bf00      	nop
 800647a:	370c      	adds	r7, #12
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b082      	sub	sp, #8
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d101      	bne.n	8006496 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e040      	b.n	8006518 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800649a:	2b00      	cmp	r3, #0
 800649c:	d106      	bne.n	80064ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f7fb fed8 	bl	800225c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2224      	movs	r2, #36	@ 0x24
 80064b0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f022 0201 	bic.w	r2, r2, #1
 80064c0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d002      	beq.n	80064d0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 fedc 	bl	8007288 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 fc21 	bl	8006d18 <UART_SetConfig>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d101      	bne.n	80064e0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	e01b      	b.n	8006518 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	685a      	ldr	r2, [r3, #4]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80064ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	689a      	ldr	r2, [r3, #8]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80064fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f042 0201 	orr.w	r2, r2, #1
 800650e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 ff5b 	bl	80073cc <UART_CheckIdleState>
 8006516:	4603      	mov	r3, r0
}
 8006518:	4618      	mov	r0, r3
 800651a:	3708      	adds	r7, #8
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b08a      	sub	sp, #40	@ 0x28
 8006524:	af02      	add	r7, sp, #8
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	60b9      	str	r1, [r7, #8]
 800652a:	603b      	str	r3, [r7, #0]
 800652c:	4613      	mov	r3, r2
 800652e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006534:	2b20      	cmp	r3, #32
 8006536:	d177      	bne.n	8006628 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d002      	beq.n	8006544 <HAL_UART_Transmit+0x24>
 800653e:	88fb      	ldrh	r3, [r7, #6]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d101      	bne.n	8006548 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e070      	b.n	800662a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2221      	movs	r2, #33	@ 0x21
 8006554:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006556:	f7fb ff7f 	bl	8002458 <HAL_GetTick>
 800655a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	88fa      	ldrh	r2, [r7, #6]
 8006560:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	88fa      	ldrh	r2, [r7, #6]
 8006568:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006574:	d108      	bne.n	8006588 <HAL_UART_Transmit+0x68>
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d104      	bne.n	8006588 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800657e:	2300      	movs	r3, #0
 8006580:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	61bb      	str	r3, [r7, #24]
 8006586:	e003      	b.n	8006590 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800658c:	2300      	movs	r3, #0
 800658e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006590:	e02f      	b.n	80065f2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	9300      	str	r3, [sp, #0]
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	2200      	movs	r2, #0
 800659a:	2180      	movs	r1, #128	@ 0x80
 800659c:	68f8      	ldr	r0, [r7, #12]
 800659e:	f000 ffbd 	bl	800751c <UART_WaitOnFlagUntilTimeout>
 80065a2:	4603      	mov	r3, r0
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d004      	beq.n	80065b2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2220      	movs	r2, #32
 80065ac:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80065ae:	2303      	movs	r3, #3
 80065b0:	e03b      	b.n	800662a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d10b      	bne.n	80065d0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	881a      	ldrh	r2, [r3, #0]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065c4:	b292      	uxth	r2, r2
 80065c6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	3302      	adds	r3, #2
 80065cc:	61bb      	str	r3, [r7, #24]
 80065ce:	e007      	b.n	80065e0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	781a      	ldrb	r2, [r3, #0]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	3301      	adds	r3, #1
 80065de:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	3b01      	subs	r3, #1
 80065ea:	b29a      	uxth	r2, r3
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d1c9      	bne.n	8006592 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	9300      	str	r3, [sp, #0]
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	2200      	movs	r2, #0
 8006606:	2140      	movs	r1, #64	@ 0x40
 8006608:	68f8      	ldr	r0, [r7, #12]
 800660a:	f000 ff87 	bl	800751c <UART_WaitOnFlagUntilTimeout>
 800660e:	4603      	mov	r3, r0
 8006610:	2b00      	cmp	r3, #0
 8006612:	d004      	beq.n	800661e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2220      	movs	r2, #32
 8006618:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800661a:	2303      	movs	r3, #3
 800661c:	e005      	b.n	800662a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2220      	movs	r2, #32
 8006622:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006624:	2300      	movs	r3, #0
 8006626:	e000      	b.n	800662a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006628:	2302      	movs	r3, #2
  }
}
 800662a:	4618      	mov	r0, r3
 800662c:	3720      	adds	r7, #32
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
	...

08006634 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b08a      	sub	sp, #40	@ 0x28
 8006638:	af00      	add	r7, sp, #0
 800663a:	60f8      	str	r0, [r7, #12]
 800663c:	60b9      	str	r1, [r7, #8]
 800663e:	4613      	mov	r3, r2
 8006640:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006648:	2b20      	cmp	r3, #32
 800664a:	d137      	bne.n	80066bc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d002      	beq.n	8006658 <HAL_UART_Receive_IT+0x24>
 8006652:	88fb      	ldrh	r3, [r7, #6]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d101      	bne.n	800665c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	e030      	b.n	80066be <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2200      	movs	r2, #0
 8006660:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a18      	ldr	r2, [pc, #96]	@ (80066c8 <HAL_UART_Receive_IT+0x94>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d01f      	beq.n	80066ac <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006676:	2b00      	cmp	r3, #0
 8006678:	d018      	beq.n	80066ac <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	e853 3f00 	ldrex	r3, [r3]
 8006686:	613b      	str	r3, [r7, #16]
   return(result);
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800668e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	461a      	mov	r2, r3
 8006696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006698:	623b      	str	r3, [r7, #32]
 800669a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669c:	69f9      	ldr	r1, [r7, #28]
 800669e:	6a3a      	ldr	r2, [r7, #32]
 80066a0:	e841 2300 	strex	r3, r2, [r1]
 80066a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d1e6      	bne.n	800667a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80066ac:	88fb      	ldrh	r3, [r7, #6]
 80066ae:	461a      	mov	r2, r3
 80066b0:	68b9      	ldr	r1, [r7, #8]
 80066b2:	68f8      	ldr	r0, [r7, #12]
 80066b4:	f000 ffa0 	bl	80075f8 <UART_Start_Receive_IT>
 80066b8:	4603      	mov	r3, r0
 80066ba:	e000      	b.n	80066be <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80066bc:	2302      	movs	r3, #2
  }
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3728      	adds	r7, #40	@ 0x28
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	40008000 	.word	0x40008000

080066cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b0ba      	sub	sp, #232	@ 0xe8
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	69db      	ldr	r3, [r3, #28]
 80066da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80066f2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80066f6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80066fa:	4013      	ands	r3, r2
 80066fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006700:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006704:	2b00      	cmp	r3, #0
 8006706:	d115      	bne.n	8006734 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800670c:	f003 0320 	and.w	r3, r3, #32
 8006710:	2b00      	cmp	r3, #0
 8006712:	d00f      	beq.n	8006734 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006718:	f003 0320 	and.w	r3, r3, #32
 800671c:	2b00      	cmp	r3, #0
 800671e:	d009      	beq.n	8006734 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006724:	2b00      	cmp	r3, #0
 8006726:	f000 82ca 	beq.w	8006cbe <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	4798      	blx	r3
      }
      return;
 8006732:	e2c4      	b.n	8006cbe <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006734:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006738:	2b00      	cmp	r3, #0
 800673a:	f000 8117 	beq.w	800696c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800673e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006742:	f003 0301 	and.w	r3, r3, #1
 8006746:	2b00      	cmp	r3, #0
 8006748:	d106      	bne.n	8006758 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800674a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800674e:	4b85      	ldr	r3, [pc, #532]	@ (8006964 <HAL_UART_IRQHandler+0x298>)
 8006750:	4013      	ands	r3, r2
 8006752:	2b00      	cmp	r3, #0
 8006754:	f000 810a 	beq.w	800696c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800675c:	f003 0301 	and.w	r3, r3, #1
 8006760:	2b00      	cmp	r3, #0
 8006762:	d011      	beq.n	8006788 <HAL_UART_IRQHandler+0xbc>
 8006764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006768:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00b      	beq.n	8006788 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2201      	movs	r2, #1
 8006776:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800677e:	f043 0201 	orr.w	r2, r3, #1
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800678c:	f003 0302 	and.w	r3, r3, #2
 8006790:	2b00      	cmp	r3, #0
 8006792:	d011      	beq.n	80067b8 <HAL_UART_IRQHandler+0xec>
 8006794:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006798:	f003 0301 	and.w	r3, r3, #1
 800679c:	2b00      	cmp	r3, #0
 800679e:	d00b      	beq.n	80067b8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2202      	movs	r2, #2
 80067a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067ae:	f043 0204 	orr.w	r2, r3, #4
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80067b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067bc:	f003 0304 	and.w	r3, r3, #4
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d011      	beq.n	80067e8 <HAL_UART_IRQHandler+0x11c>
 80067c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067c8:	f003 0301 	and.w	r3, r3, #1
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d00b      	beq.n	80067e8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2204      	movs	r2, #4
 80067d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067de:	f043 0202 	orr.w	r2, r3, #2
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80067e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067ec:	f003 0308 	and.w	r3, r3, #8
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d017      	beq.n	8006824 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80067f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067f8:	f003 0320 	and.w	r3, r3, #32
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d105      	bne.n	800680c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006800:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006804:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006808:	2b00      	cmp	r3, #0
 800680a:	d00b      	beq.n	8006824 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2208      	movs	r2, #8
 8006812:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800681a:	f043 0208 	orr.w	r2, r3, #8
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006828:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800682c:	2b00      	cmp	r3, #0
 800682e:	d012      	beq.n	8006856 <HAL_UART_IRQHandler+0x18a>
 8006830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006834:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006838:	2b00      	cmp	r3, #0
 800683a:	d00c      	beq.n	8006856 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006844:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800684c:	f043 0220 	orr.w	r2, r3, #32
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800685c:	2b00      	cmp	r3, #0
 800685e:	f000 8230 	beq.w	8006cc2 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006866:	f003 0320 	and.w	r3, r3, #32
 800686a:	2b00      	cmp	r3, #0
 800686c:	d00d      	beq.n	800688a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800686e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006872:	f003 0320 	and.w	r3, r3, #32
 8006876:	2b00      	cmp	r3, #0
 8006878:	d007      	beq.n	800688a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800687e:	2b00      	cmp	r3, #0
 8006880:	d003      	beq.n	800688a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006890:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800689e:	2b40      	cmp	r3, #64	@ 0x40
 80068a0:	d005      	beq.n	80068ae <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80068a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80068a6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d04f      	beq.n	800694e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 ff68 	bl	8007784 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068be:	2b40      	cmp	r3, #64	@ 0x40
 80068c0:	d141      	bne.n	8006946 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	3308      	adds	r3, #8
 80068c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80068d0:	e853 3f00 	ldrex	r3, [r3]
 80068d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80068d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80068dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	3308      	adds	r3, #8
 80068ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80068ee:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80068f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80068fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80068fe:	e841 2300 	strex	r3, r2, [r1]
 8006902:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006906:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d1d9      	bne.n	80068c2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006912:	2b00      	cmp	r3, #0
 8006914:	d013      	beq.n	800693e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800691a:	4a13      	ldr	r2, [pc, #76]	@ (8006968 <HAL_UART_IRQHandler+0x29c>)
 800691c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006922:	4618      	mov	r0, r3
 8006924:	f7fb ff17 	bl	8002756 <HAL_DMA_Abort_IT>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d017      	beq.n	800695e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006938:	4610      	mov	r0, r2
 800693a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800693c:	e00f      	b.n	800695e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 f9d4 	bl	8006cec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006944:	e00b      	b.n	800695e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 f9d0 	bl	8006cec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800694c:	e007      	b.n	800695e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 f9cc 	bl	8006cec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800695c:	e1b1      	b.n	8006cc2 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800695e:	bf00      	nop
    return;
 8006960:	e1af      	b.n	8006cc2 <HAL_UART_IRQHandler+0x5f6>
 8006962:	bf00      	nop
 8006964:	04000120 	.word	0x04000120
 8006968:	0800784d 	.word	0x0800784d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006970:	2b01      	cmp	r3, #1
 8006972:	f040 816a 	bne.w	8006c4a <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800697a:	f003 0310 	and.w	r3, r3, #16
 800697e:	2b00      	cmp	r3, #0
 8006980:	f000 8163 	beq.w	8006c4a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006988:	f003 0310 	and.w	r3, r3, #16
 800698c:	2b00      	cmp	r3, #0
 800698e:	f000 815c 	beq.w	8006c4a <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	2210      	movs	r2, #16
 8006998:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069a4:	2b40      	cmp	r3, #64	@ 0x40
 80069a6:	f040 80d4 	bne.w	8006b52 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80069b6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	f000 80ad 	beq.w	8006b1a <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80069c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80069ca:	429a      	cmp	r2, r3
 80069cc:	f080 80a5 	bcs.w	8006b1a <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80069d6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 0320 	and.w	r3, r3, #32
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	f040 8086 	bne.w	8006af8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80069f8:	e853 3f00 	ldrex	r3, [r3]
 80069fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006a00:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006a04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	461a      	mov	r2, r3
 8006a12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006a16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006a1a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006a22:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006a26:	e841 2300 	strex	r3, r2, [r1]
 8006a2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006a2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d1da      	bne.n	80069ec <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	3308      	adds	r3, #8
 8006a3c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006a40:	e853 3f00 	ldrex	r3, [r3]
 8006a44:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006a46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006a48:	f023 0301 	bic.w	r3, r3, #1
 8006a4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	3308      	adds	r3, #8
 8006a56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006a5a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006a5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a60:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006a62:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006a66:	e841 2300 	strex	r3, r2, [r1]
 8006a6a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006a6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d1e1      	bne.n	8006a36 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	3308      	adds	r3, #8
 8006a78:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a7c:	e853 3f00 	ldrex	r3, [r3]
 8006a80:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006a82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	3308      	adds	r3, #8
 8006a92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006a96:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006a98:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006a9c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006a9e:	e841 2300 	strex	r3, r2, [r1]
 8006aa2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006aa4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d1e3      	bne.n	8006a72 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2220      	movs	r2, #32
 8006aae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006abe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ac0:	e853 3f00 	ldrex	r3, [r3]
 8006ac4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006ac6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ac8:	f023 0310 	bic.w	r3, r3, #16
 8006acc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006ada:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006adc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ade:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006ae0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006ae2:	e841 2300 	strex	r3, r2, [r1]
 8006ae6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006ae8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1e4      	bne.n	8006ab8 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006af2:	4618      	mov	r0, r3
 8006af4:	f7fb fdf1 	bl	80026da <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2202      	movs	r2, #2
 8006afc:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	1ad3      	subs	r3, r2, r3
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	4619      	mov	r1, r3
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 f8f4 	bl	8006d00 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006b18:	e0d5      	b.n	8006cc6 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006b20:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006b24:	429a      	cmp	r2, r3
 8006b26:	f040 80ce 	bne.w	8006cc6 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f003 0320 	and.w	r3, r3, #32
 8006b36:	2b20      	cmp	r3, #32
 8006b38:	f040 80c5 	bne.w	8006cc6 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2202      	movs	r2, #2
 8006b40:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006b48:	4619      	mov	r1, r3
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 f8d8 	bl	8006d00 <HAL_UARTEx_RxEventCallback>
      return;
 8006b50:	e0b9      	b.n	8006cc6 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	f000 80ab 	beq.w	8006cca <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8006b74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	f000 80a6 	beq.w	8006cca <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b86:	e853 3f00 	ldrex	r3, [r3]
 8006b8a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b8e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b92:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006ba0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ba2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ba6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ba8:	e841 2300 	strex	r3, r2, [r1]
 8006bac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006bae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d1e4      	bne.n	8006b7e <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	3308      	adds	r3, #8
 8006bba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bbe:	e853 3f00 	ldrex	r3, [r3]
 8006bc2:	623b      	str	r3, [r7, #32]
   return(result);
 8006bc4:	6a3b      	ldr	r3, [r7, #32]
 8006bc6:	f023 0301 	bic.w	r3, r3, #1
 8006bca:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	3308      	adds	r3, #8
 8006bd4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006bd8:	633a      	str	r2, [r7, #48]	@ 0x30
 8006bda:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bdc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006bde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006be0:	e841 2300 	strex	r3, r2, [r1]
 8006be4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d1e3      	bne.n	8006bb4 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2220      	movs	r2, #32
 8006bf0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	e853 3f00 	ldrex	r3, [r3]
 8006c0c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f023 0310 	bic.w	r3, r3, #16
 8006c14:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006c22:	61fb      	str	r3, [r7, #28]
 8006c24:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c26:	69b9      	ldr	r1, [r7, #24]
 8006c28:	69fa      	ldr	r2, [r7, #28]
 8006c2a:	e841 2300 	strex	r3, r2, [r1]
 8006c2e:	617b      	str	r3, [r7, #20]
   return(result);
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d1e4      	bne.n	8006c00 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2202      	movs	r2, #2
 8006c3a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006c40:	4619      	mov	r1, r3
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 f85c 	bl	8006d00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006c48:	e03f      	b.n	8006cca <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d00e      	beq.n	8006c74 <HAL_UART_IRQHandler+0x5a8>
 8006c56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d008      	beq.n	8006c74 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006c6a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 ffe9 	bl	8007c44 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c72:	e02d      	b.n	8006cd0 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d00e      	beq.n	8006c9e <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006c80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d008      	beq.n	8006c9e <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d01c      	beq.n	8006cce <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	4798      	blx	r3
    }
    return;
 8006c9c:	e017      	b.n	8006cce <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ca2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d012      	beq.n	8006cd0 <HAL_UART_IRQHandler+0x604>
 8006caa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d00c      	beq.n	8006cd0 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 fdde 	bl	8007878 <UART_EndTransmit_IT>
    return;
 8006cbc:	e008      	b.n	8006cd0 <HAL_UART_IRQHandler+0x604>
      return;
 8006cbe:	bf00      	nop
 8006cc0:	e006      	b.n	8006cd0 <HAL_UART_IRQHandler+0x604>
    return;
 8006cc2:	bf00      	nop
 8006cc4:	e004      	b.n	8006cd0 <HAL_UART_IRQHandler+0x604>
      return;
 8006cc6:	bf00      	nop
 8006cc8:	e002      	b.n	8006cd0 <HAL_UART_IRQHandler+0x604>
      return;
 8006cca:	bf00      	nop
 8006ccc:	e000      	b.n	8006cd0 <HAL_UART_IRQHandler+0x604>
    return;
 8006cce:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006cd0:	37e8      	adds	r7, #232	@ 0xe8
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	bf00      	nop

08006cd8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006ce0:	bf00      	nop
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	460b      	mov	r3, r1
 8006d0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d0c:	bf00      	nop
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d1c:	b08a      	sub	sp, #40	@ 0x28
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d22:	2300      	movs	r3, #0
 8006d24:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	689a      	ldr	r2, [r3, #8]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	691b      	ldr	r3, [r3, #16]
 8006d30:	431a      	orrs	r2, r3
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	695b      	ldr	r3, [r3, #20]
 8006d36:	431a      	orrs	r2, r3
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	69db      	ldr	r3, [r3, #28]
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	4ba4      	ldr	r3, [pc, #656]	@ (8006fd8 <UART_SetConfig+0x2c0>)
 8006d48:	4013      	ands	r3, r2
 8006d4a:	68fa      	ldr	r2, [r7, #12]
 8006d4c:	6812      	ldr	r2, [r2, #0]
 8006d4e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006d50:	430b      	orrs	r3, r1
 8006d52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	68da      	ldr	r2, [r3, #12]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	430a      	orrs	r2, r1
 8006d68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	699b      	ldr	r3, [r3, #24]
 8006d6e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a99      	ldr	r2, [pc, #612]	@ (8006fdc <UART_SetConfig+0x2c4>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d004      	beq.n	8006d84 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	6a1b      	ldr	r3, [r3, #32]
 8006d7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d80:	4313      	orrs	r3, r2
 8006d82:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d94:	430a      	orrs	r2, r1
 8006d96:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a90      	ldr	r2, [pc, #576]	@ (8006fe0 <UART_SetConfig+0x2c8>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d126      	bne.n	8006df0 <UART_SetConfig+0xd8>
 8006da2:	4b90      	ldr	r3, [pc, #576]	@ (8006fe4 <UART_SetConfig+0x2cc>)
 8006da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006da8:	f003 0303 	and.w	r3, r3, #3
 8006dac:	2b03      	cmp	r3, #3
 8006dae:	d81b      	bhi.n	8006de8 <UART_SetConfig+0xd0>
 8006db0:	a201      	add	r2, pc, #4	@ (adr r2, 8006db8 <UART_SetConfig+0xa0>)
 8006db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db6:	bf00      	nop
 8006db8:	08006dc9 	.word	0x08006dc9
 8006dbc:	08006dd9 	.word	0x08006dd9
 8006dc0:	08006dd1 	.word	0x08006dd1
 8006dc4:	08006de1 	.word	0x08006de1
 8006dc8:	2301      	movs	r3, #1
 8006dca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dce:	e116      	b.n	8006ffe <UART_SetConfig+0x2e6>
 8006dd0:	2302      	movs	r3, #2
 8006dd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dd6:	e112      	b.n	8006ffe <UART_SetConfig+0x2e6>
 8006dd8:	2304      	movs	r3, #4
 8006dda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dde:	e10e      	b.n	8006ffe <UART_SetConfig+0x2e6>
 8006de0:	2308      	movs	r3, #8
 8006de2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006de6:	e10a      	b.n	8006ffe <UART_SetConfig+0x2e6>
 8006de8:	2310      	movs	r3, #16
 8006dea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dee:	e106      	b.n	8006ffe <UART_SetConfig+0x2e6>
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a7c      	ldr	r2, [pc, #496]	@ (8006fe8 <UART_SetConfig+0x2d0>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d138      	bne.n	8006e6c <UART_SetConfig+0x154>
 8006dfa:	4b7a      	ldr	r3, [pc, #488]	@ (8006fe4 <UART_SetConfig+0x2cc>)
 8006dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e00:	f003 030c 	and.w	r3, r3, #12
 8006e04:	2b0c      	cmp	r3, #12
 8006e06:	d82d      	bhi.n	8006e64 <UART_SetConfig+0x14c>
 8006e08:	a201      	add	r2, pc, #4	@ (adr r2, 8006e10 <UART_SetConfig+0xf8>)
 8006e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e0e:	bf00      	nop
 8006e10:	08006e45 	.word	0x08006e45
 8006e14:	08006e65 	.word	0x08006e65
 8006e18:	08006e65 	.word	0x08006e65
 8006e1c:	08006e65 	.word	0x08006e65
 8006e20:	08006e55 	.word	0x08006e55
 8006e24:	08006e65 	.word	0x08006e65
 8006e28:	08006e65 	.word	0x08006e65
 8006e2c:	08006e65 	.word	0x08006e65
 8006e30:	08006e4d 	.word	0x08006e4d
 8006e34:	08006e65 	.word	0x08006e65
 8006e38:	08006e65 	.word	0x08006e65
 8006e3c:	08006e65 	.word	0x08006e65
 8006e40:	08006e5d 	.word	0x08006e5d
 8006e44:	2300      	movs	r3, #0
 8006e46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e4a:	e0d8      	b.n	8006ffe <UART_SetConfig+0x2e6>
 8006e4c:	2302      	movs	r3, #2
 8006e4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e52:	e0d4      	b.n	8006ffe <UART_SetConfig+0x2e6>
 8006e54:	2304      	movs	r3, #4
 8006e56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e5a:	e0d0      	b.n	8006ffe <UART_SetConfig+0x2e6>
 8006e5c:	2308      	movs	r3, #8
 8006e5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e62:	e0cc      	b.n	8006ffe <UART_SetConfig+0x2e6>
 8006e64:	2310      	movs	r3, #16
 8006e66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e6a:	e0c8      	b.n	8006ffe <UART_SetConfig+0x2e6>
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a5e      	ldr	r2, [pc, #376]	@ (8006fec <UART_SetConfig+0x2d4>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d125      	bne.n	8006ec2 <UART_SetConfig+0x1aa>
 8006e76:	4b5b      	ldr	r3, [pc, #364]	@ (8006fe4 <UART_SetConfig+0x2cc>)
 8006e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e7c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006e80:	2b30      	cmp	r3, #48	@ 0x30
 8006e82:	d016      	beq.n	8006eb2 <UART_SetConfig+0x19a>
 8006e84:	2b30      	cmp	r3, #48	@ 0x30
 8006e86:	d818      	bhi.n	8006eba <UART_SetConfig+0x1a2>
 8006e88:	2b20      	cmp	r3, #32
 8006e8a:	d00a      	beq.n	8006ea2 <UART_SetConfig+0x18a>
 8006e8c:	2b20      	cmp	r3, #32
 8006e8e:	d814      	bhi.n	8006eba <UART_SetConfig+0x1a2>
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d002      	beq.n	8006e9a <UART_SetConfig+0x182>
 8006e94:	2b10      	cmp	r3, #16
 8006e96:	d008      	beq.n	8006eaa <UART_SetConfig+0x192>
 8006e98:	e00f      	b.n	8006eba <UART_SetConfig+0x1a2>
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ea0:	e0ad      	b.n	8006ffe <UART_SetConfig+0x2e6>
 8006ea2:	2302      	movs	r3, #2
 8006ea4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ea8:	e0a9      	b.n	8006ffe <UART_SetConfig+0x2e6>
 8006eaa:	2304      	movs	r3, #4
 8006eac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006eb0:	e0a5      	b.n	8006ffe <UART_SetConfig+0x2e6>
 8006eb2:	2308      	movs	r3, #8
 8006eb4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006eb8:	e0a1      	b.n	8006ffe <UART_SetConfig+0x2e6>
 8006eba:	2310      	movs	r3, #16
 8006ebc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ec0:	e09d      	b.n	8006ffe <UART_SetConfig+0x2e6>
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a4a      	ldr	r2, [pc, #296]	@ (8006ff0 <UART_SetConfig+0x2d8>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d125      	bne.n	8006f18 <UART_SetConfig+0x200>
 8006ecc:	4b45      	ldr	r3, [pc, #276]	@ (8006fe4 <UART_SetConfig+0x2cc>)
 8006ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ed2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006ed6:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ed8:	d016      	beq.n	8006f08 <UART_SetConfig+0x1f0>
 8006eda:	2bc0      	cmp	r3, #192	@ 0xc0
 8006edc:	d818      	bhi.n	8006f10 <UART_SetConfig+0x1f8>
 8006ede:	2b80      	cmp	r3, #128	@ 0x80
 8006ee0:	d00a      	beq.n	8006ef8 <UART_SetConfig+0x1e0>
 8006ee2:	2b80      	cmp	r3, #128	@ 0x80
 8006ee4:	d814      	bhi.n	8006f10 <UART_SetConfig+0x1f8>
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d002      	beq.n	8006ef0 <UART_SetConfig+0x1d8>
 8006eea:	2b40      	cmp	r3, #64	@ 0x40
 8006eec:	d008      	beq.n	8006f00 <UART_SetConfig+0x1e8>
 8006eee:	e00f      	b.n	8006f10 <UART_SetConfig+0x1f8>
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ef6:	e082      	b.n	8006ffe <UART_SetConfig+0x2e6>
 8006ef8:	2302      	movs	r3, #2
 8006efa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006efe:	e07e      	b.n	8006ffe <UART_SetConfig+0x2e6>
 8006f00:	2304      	movs	r3, #4
 8006f02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f06:	e07a      	b.n	8006ffe <UART_SetConfig+0x2e6>
 8006f08:	2308      	movs	r3, #8
 8006f0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f0e:	e076      	b.n	8006ffe <UART_SetConfig+0x2e6>
 8006f10:	2310      	movs	r3, #16
 8006f12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f16:	e072      	b.n	8006ffe <UART_SetConfig+0x2e6>
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a35      	ldr	r2, [pc, #212]	@ (8006ff4 <UART_SetConfig+0x2dc>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d12a      	bne.n	8006f78 <UART_SetConfig+0x260>
 8006f22:	4b30      	ldr	r3, [pc, #192]	@ (8006fe4 <UART_SetConfig+0x2cc>)
 8006f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f28:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f2c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f30:	d01a      	beq.n	8006f68 <UART_SetConfig+0x250>
 8006f32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f36:	d81b      	bhi.n	8006f70 <UART_SetConfig+0x258>
 8006f38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f3c:	d00c      	beq.n	8006f58 <UART_SetConfig+0x240>
 8006f3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f42:	d815      	bhi.n	8006f70 <UART_SetConfig+0x258>
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d003      	beq.n	8006f50 <UART_SetConfig+0x238>
 8006f48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f4c:	d008      	beq.n	8006f60 <UART_SetConfig+0x248>
 8006f4e:	e00f      	b.n	8006f70 <UART_SetConfig+0x258>
 8006f50:	2300      	movs	r3, #0
 8006f52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f56:	e052      	b.n	8006ffe <UART_SetConfig+0x2e6>
 8006f58:	2302      	movs	r3, #2
 8006f5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f5e:	e04e      	b.n	8006ffe <UART_SetConfig+0x2e6>
 8006f60:	2304      	movs	r3, #4
 8006f62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f66:	e04a      	b.n	8006ffe <UART_SetConfig+0x2e6>
 8006f68:	2308      	movs	r3, #8
 8006f6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f6e:	e046      	b.n	8006ffe <UART_SetConfig+0x2e6>
 8006f70:	2310      	movs	r3, #16
 8006f72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f76:	e042      	b.n	8006ffe <UART_SetConfig+0x2e6>
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a17      	ldr	r2, [pc, #92]	@ (8006fdc <UART_SetConfig+0x2c4>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d13a      	bne.n	8006ff8 <UART_SetConfig+0x2e0>
 8006f82:	4b18      	ldr	r3, [pc, #96]	@ (8006fe4 <UART_SetConfig+0x2cc>)
 8006f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f88:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006f8c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006f90:	d01a      	beq.n	8006fc8 <UART_SetConfig+0x2b0>
 8006f92:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006f96:	d81b      	bhi.n	8006fd0 <UART_SetConfig+0x2b8>
 8006f98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f9c:	d00c      	beq.n	8006fb8 <UART_SetConfig+0x2a0>
 8006f9e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006fa2:	d815      	bhi.n	8006fd0 <UART_SetConfig+0x2b8>
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d003      	beq.n	8006fb0 <UART_SetConfig+0x298>
 8006fa8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fac:	d008      	beq.n	8006fc0 <UART_SetConfig+0x2a8>
 8006fae:	e00f      	b.n	8006fd0 <UART_SetConfig+0x2b8>
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fb6:	e022      	b.n	8006ffe <UART_SetConfig+0x2e6>
 8006fb8:	2302      	movs	r3, #2
 8006fba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fbe:	e01e      	b.n	8006ffe <UART_SetConfig+0x2e6>
 8006fc0:	2304      	movs	r3, #4
 8006fc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fc6:	e01a      	b.n	8006ffe <UART_SetConfig+0x2e6>
 8006fc8:	2308      	movs	r3, #8
 8006fca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fce:	e016      	b.n	8006ffe <UART_SetConfig+0x2e6>
 8006fd0:	2310      	movs	r3, #16
 8006fd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fd6:	e012      	b.n	8006ffe <UART_SetConfig+0x2e6>
 8006fd8:	efff69f3 	.word	0xefff69f3
 8006fdc:	40008000 	.word	0x40008000
 8006fe0:	40013800 	.word	0x40013800
 8006fe4:	40021000 	.word	0x40021000
 8006fe8:	40004400 	.word	0x40004400
 8006fec:	40004800 	.word	0x40004800
 8006ff0:	40004c00 	.word	0x40004c00
 8006ff4:	40005000 	.word	0x40005000
 8006ff8:	2310      	movs	r3, #16
 8006ffa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a9f      	ldr	r2, [pc, #636]	@ (8007280 <UART_SetConfig+0x568>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d17a      	bne.n	80070fe <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007008:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800700c:	2b08      	cmp	r3, #8
 800700e:	d824      	bhi.n	800705a <UART_SetConfig+0x342>
 8007010:	a201      	add	r2, pc, #4	@ (adr r2, 8007018 <UART_SetConfig+0x300>)
 8007012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007016:	bf00      	nop
 8007018:	0800703d 	.word	0x0800703d
 800701c:	0800705b 	.word	0x0800705b
 8007020:	08007045 	.word	0x08007045
 8007024:	0800705b 	.word	0x0800705b
 8007028:	0800704b 	.word	0x0800704b
 800702c:	0800705b 	.word	0x0800705b
 8007030:	0800705b 	.word	0x0800705b
 8007034:	0800705b 	.word	0x0800705b
 8007038:	08007053 	.word	0x08007053
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800703c:	f7fd fa76 	bl	800452c <HAL_RCC_GetPCLK1Freq>
 8007040:	61f8      	str	r0, [r7, #28]
        break;
 8007042:	e010      	b.n	8007066 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007044:	4b8f      	ldr	r3, [pc, #572]	@ (8007284 <UART_SetConfig+0x56c>)
 8007046:	61fb      	str	r3, [r7, #28]
        break;
 8007048:	e00d      	b.n	8007066 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800704a:	f7fd f9d7 	bl	80043fc <HAL_RCC_GetSysClockFreq>
 800704e:	61f8      	str	r0, [r7, #28]
        break;
 8007050:	e009      	b.n	8007066 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007052:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007056:	61fb      	str	r3, [r7, #28]
        break;
 8007058:	e005      	b.n	8007066 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800705a:	2300      	movs	r3, #0
 800705c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007064:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007066:	69fb      	ldr	r3, [r7, #28]
 8007068:	2b00      	cmp	r3, #0
 800706a:	f000 80fb 	beq.w	8007264 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	685a      	ldr	r2, [r3, #4]
 8007072:	4613      	mov	r3, r2
 8007074:	005b      	lsls	r3, r3, #1
 8007076:	4413      	add	r3, r2
 8007078:	69fa      	ldr	r2, [r7, #28]
 800707a:	429a      	cmp	r2, r3
 800707c:	d305      	bcc.n	800708a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007084:	69fa      	ldr	r2, [r7, #28]
 8007086:	429a      	cmp	r2, r3
 8007088:	d903      	bls.n	8007092 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007090:	e0e8      	b.n	8007264 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	2200      	movs	r2, #0
 8007096:	461c      	mov	r4, r3
 8007098:	4615      	mov	r5, r2
 800709a:	f04f 0200 	mov.w	r2, #0
 800709e:	f04f 0300 	mov.w	r3, #0
 80070a2:	022b      	lsls	r3, r5, #8
 80070a4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80070a8:	0222      	lsls	r2, r4, #8
 80070aa:	68f9      	ldr	r1, [r7, #12]
 80070ac:	6849      	ldr	r1, [r1, #4]
 80070ae:	0849      	lsrs	r1, r1, #1
 80070b0:	2000      	movs	r0, #0
 80070b2:	4688      	mov	r8, r1
 80070b4:	4681      	mov	r9, r0
 80070b6:	eb12 0a08 	adds.w	sl, r2, r8
 80070ba:	eb43 0b09 	adc.w	fp, r3, r9
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	603b      	str	r3, [r7, #0]
 80070c6:	607a      	str	r2, [r7, #4]
 80070c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070cc:	4650      	mov	r0, sl
 80070ce:	4659      	mov	r1, fp
 80070d0:	f7f9 fd6a 	bl	8000ba8 <__aeabi_uldivmod>
 80070d4:	4602      	mov	r2, r0
 80070d6:	460b      	mov	r3, r1
 80070d8:	4613      	mov	r3, r2
 80070da:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80070dc:	69bb      	ldr	r3, [r7, #24]
 80070de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80070e2:	d308      	bcc.n	80070f6 <UART_SetConfig+0x3de>
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80070ea:	d204      	bcs.n	80070f6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	69ba      	ldr	r2, [r7, #24]
 80070f2:	60da      	str	r2, [r3, #12]
 80070f4:	e0b6      	b.n	8007264 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80070fc:	e0b2      	b.n	8007264 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	69db      	ldr	r3, [r3, #28]
 8007102:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007106:	d15e      	bne.n	80071c6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007108:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800710c:	2b08      	cmp	r3, #8
 800710e:	d828      	bhi.n	8007162 <UART_SetConfig+0x44a>
 8007110:	a201      	add	r2, pc, #4	@ (adr r2, 8007118 <UART_SetConfig+0x400>)
 8007112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007116:	bf00      	nop
 8007118:	0800713d 	.word	0x0800713d
 800711c:	08007145 	.word	0x08007145
 8007120:	0800714d 	.word	0x0800714d
 8007124:	08007163 	.word	0x08007163
 8007128:	08007153 	.word	0x08007153
 800712c:	08007163 	.word	0x08007163
 8007130:	08007163 	.word	0x08007163
 8007134:	08007163 	.word	0x08007163
 8007138:	0800715b 	.word	0x0800715b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800713c:	f7fd f9f6 	bl	800452c <HAL_RCC_GetPCLK1Freq>
 8007140:	61f8      	str	r0, [r7, #28]
        break;
 8007142:	e014      	b.n	800716e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007144:	f7fd fa08 	bl	8004558 <HAL_RCC_GetPCLK2Freq>
 8007148:	61f8      	str	r0, [r7, #28]
        break;
 800714a:	e010      	b.n	800716e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800714c:	4b4d      	ldr	r3, [pc, #308]	@ (8007284 <UART_SetConfig+0x56c>)
 800714e:	61fb      	str	r3, [r7, #28]
        break;
 8007150:	e00d      	b.n	800716e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007152:	f7fd f953 	bl	80043fc <HAL_RCC_GetSysClockFreq>
 8007156:	61f8      	str	r0, [r7, #28]
        break;
 8007158:	e009      	b.n	800716e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800715a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800715e:	61fb      	str	r3, [r7, #28]
        break;
 8007160:	e005      	b.n	800716e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007162:	2300      	movs	r3, #0
 8007164:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800716c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d077      	beq.n	8007264 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007174:	69fb      	ldr	r3, [r7, #28]
 8007176:	005a      	lsls	r2, r3, #1
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	085b      	lsrs	r3, r3, #1
 800717e:	441a      	add	r2, r3
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	fbb2 f3f3 	udiv	r3, r2, r3
 8007188:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800718a:	69bb      	ldr	r3, [r7, #24]
 800718c:	2b0f      	cmp	r3, #15
 800718e:	d916      	bls.n	80071be <UART_SetConfig+0x4a6>
 8007190:	69bb      	ldr	r3, [r7, #24]
 8007192:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007196:	d212      	bcs.n	80071be <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007198:	69bb      	ldr	r3, [r7, #24]
 800719a:	b29b      	uxth	r3, r3
 800719c:	f023 030f 	bic.w	r3, r3, #15
 80071a0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80071a2:	69bb      	ldr	r3, [r7, #24]
 80071a4:	085b      	lsrs	r3, r3, #1
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	f003 0307 	and.w	r3, r3, #7
 80071ac:	b29a      	uxth	r2, r3
 80071ae:	8afb      	ldrh	r3, [r7, #22]
 80071b0:	4313      	orrs	r3, r2
 80071b2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	8afa      	ldrh	r2, [r7, #22]
 80071ba:	60da      	str	r2, [r3, #12]
 80071bc:	e052      	b.n	8007264 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80071c4:	e04e      	b.n	8007264 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80071c6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80071ca:	2b08      	cmp	r3, #8
 80071cc:	d827      	bhi.n	800721e <UART_SetConfig+0x506>
 80071ce:	a201      	add	r2, pc, #4	@ (adr r2, 80071d4 <UART_SetConfig+0x4bc>)
 80071d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d4:	080071f9 	.word	0x080071f9
 80071d8:	08007201 	.word	0x08007201
 80071dc:	08007209 	.word	0x08007209
 80071e0:	0800721f 	.word	0x0800721f
 80071e4:	0800720f 	.word	0x0800720f
 80071e8:	0800721f 	.word	0x0800721f
 80071ec:	0800721f 	.word	0x0800721f
 80071f0:	0800721f 	.word	0x0800721f
 80071f4:	08007217 	.word	0x08007217
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071f8:	f7fd f998 	bl	800452c <HAL_RCC_GetPCLK1Freq>
 80071fc:	61f8      	str	r0, [r7, #28]
        break;
 80071fe:	e014      	b.n	800722a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007200:	f7fd f9aa 	bl	8004558 <HAL_RCC_GetPCLK2Freq>
 8007204:	61f8      	str	r0, [r7, #28]
        break;
 8007206:	e010      	b.n	800722a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007208:	4b1e      	ldr	r3, [pc, #120]	@ (8007284 <UART_SetConfig+0x56c>)
 800720a:	61fb      	str	r3, [r7, #28]
        break;
 800720c:	e00d      	b.n	800722a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800720e:	f7fd f8f5 	bl	80043fc <HAL_RCC_GetSysClockFreq>
 8007212:	61f8      	str	r0, [r7, #28]
        break;
 8007214:	e009      	b.n	800722a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007216:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800721a:	61fb      	str	r3, [r7, #28]
        break;
 800721c:	e005      	b.n	800722a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800721e:	2300      	movs	r3, #0
 8007220:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007228:	bf00      	nop
    }

    if (pclk != 0U)
 800722a:	69fb      	ldr	r3, [r7, #28]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d019      	beq.n	8007264 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	085a      	lsrs	r2, r3, #1
 8007236:	69fb      	ldr	r3, [r7, #28]
 8007238:	441a      	add	r2, r3
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007242:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007244:	69bb      	ldr	r3, [r7, #24]
 8007246:	2b0f      	cmp	r3, #15
 8007248:	d909      	bls.n	800725e <UART_SetConfig+0x546>
 800724a:	69bb      	ldr	r3, [r7, #24]
 800724c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007250:	d205      	bcs.n	800725e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007252:	69bb      	ldr	r3, [r7, #24]
 8007254:	b29a      	uxth	r2, r3
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	60da      	str	r2, [r3, #12]
 800725c:	e002      	b.n	8007264 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2200      	movs	r2, #0
 8007268:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2200      	movs	r2, #0
 800726e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007270:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007274:	4618      	mov	r0, r3
 8007276:	3728      	adds	r7, #40	@ 0x28
 8007278:	46bd      	mov	sp, r7
 800727a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800727e:	bf00      	nop
 8007280:	40008000 	.word	0x40008000
 8007284:	00f42400 	.word	0x00f42400

08007288 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007288:	b480      	push	{r7}
 800728a:	b083      	sub	sp, #12
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007294:	f003 0308 	and.w	r3, r3, #8
 8007298:	2b00      	cmp	r3, #0
 800729a:	d00a      	beq.n	80072b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	430a      	orrs	r2, r1
 80072b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072b6:	f003 0301 	and.w	r3, r3, #1
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d00a      	beq.n	80072d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	430a      	orrs	r2, r1
 80072d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072d8:	f003 0302 	and.w	r3, r3, #2
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d00a      	beq.n	80072f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	430a      	orrs	r2, r1
 80072f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072fa:	f003 0304 	and.w	r3, r3, #4
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d00a      	beq.n	8007318 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	430a      	orrs	r2, r1
 8007316:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800731c:	f003 0310 	and.w	r3, r3, #16
 8007320:	2b00      	cmp	r3, #0
 8007322:	d00a      	beq.n	800733a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	689b      	ldr	r3, [r3, #8]
 800732a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	430a      	orrs	r2, r1
 8007338:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800733e:	f003 0320 	and.w	r3, r3, #32
 8007342:	2b00      	cmp	r3, #0
 8007344:	d00a      	beq.n	800735c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	430a      	orrs	r2, r1
 800735a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007364:	2b00      	cmp	r3, #0
 8007366:	d01a      	beq.n	800739e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	430a      	orrs	r2, r1
 800737c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007382:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007386:	d10a      	bne.n	800739e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	430a      	orrs	r2, r1
 800739c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d00a      	beq.n	80073c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	430a      	orrs	r2, r1
 80073be:	605a      	str	r2, [r3, #4]
  }
}
 80073c0:	bf00      	nop
 80073c2:	370c      	adds	r7, #12
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b098      	sub	sp, #96	@ 0x60
 80073d0:	af02      	add	r7, sp, #8
 80073d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80073dc:	f7fb f83c 	bl	8002458 <HAL_GetTick>
 80073e0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f003 0308 	and.w	r3, r3, #8
 80073ec:	2b08      	cmp	r3, #8
 80073ee:	d12e      	bne.n	800744e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80073f4:	9300      	str	r3, [sp, #0]
 80073f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073f8:	2200      	movs	r2, #0
 80073fa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 f88c 	bl	800751c <UART_WaitOnFlagUntilTimeout>
 8007404:	4603      	mov	r3, r0
 8007406:	2b00      	cmp	r3, #0
 8007408:	d021      	beq.n	800744e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007412:	e853 3f00 	ldrex	r3, [r3]
 8007416:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007418:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800741a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800741e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	461a      	mov	r2, r3
 8007426:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007428:	647b      	str	r3, [r7, #68]	@ 0x44
 800742a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800742e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007430:	e841 2300 	strex	r3, r2, [r1]
 8007434:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007436:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007438:	2b00      	cmp	r3, #0
 800743a:	d1e6      	bne.n	800740a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2220      	movs	r2, #32
 8007440:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2200      	movs	r2, #0
 8007446:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800744a:	2303      	movs	r3, #3
 800744c:	e062      	b.n	8007514 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f003 0304 	and.w	r3, r3, #4
 8007458:	2b04      	cmp	r3, #4
 800745a:	d149      	bne.n	80074f0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800745c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007460:	9300      	str	r3, [sp, #0]
 8007462:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007464:	2200      	movs	r2, #0
 8007466:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 f856 	bl	800751c <UART_WaitOnFlagUntilTimeout>
 8007470:	4603      	mov	r3, r0
 8007472:	2b00      	cmp	r3, #0
 8007474:	d03c      	beq.n	80074f0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800747e:	e853 3f00 	ldrex	r3, [r3]
 8007482:	623b      	str	r3, [r7, #32]
   return(result);
 8007484:	6a3b      	ldr	r3, [r7, #32]
 8007486:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800748a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	461a      	mov	r2, r3
 8007492:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007494:	633b      	str	r3, [r7, #48]	@ 0x30
 8007496:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007498:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800749a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800749c:	e841 2300 	strex	r3, r2, [r1]
 80074a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80074a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d1e6      	bne.n	8007476 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	3308      	adds	r3, #8
 80074ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	e853 3f00 	ldrex	r3, [r3]
 80074b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f023 0301 	bic.w	r3, r3, #1
 80074be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	3308      	adds	r3, #8
 80074c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80074c8:	61fa      	str	r2, [r7, #28]
 80074ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074cc:	69b9      	ldr	r1, [r7, #24]
 80074ce:	69fa      	ldr	r2, [r7, #28]
 80074d0:	e841 2300 	strex	r3, r2, [r1]
 80074d4:	617b      	str	r3, [r7, #20]
   return(result);
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d1e5      	bne.n	80074a8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2220      	movs	r2, #32
 80074e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074ec:	2303      	movs	r3, #3
 80074ee:	e011      	b.n	8007514 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2220      	movs	r2, #32
 80074f4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2220      	movs	r2, #32
 80074fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2200      	movs	r2, #0
 800750e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007512:	2300      	movs	r3, #0
}
 8007514:	4618      	mov	r0, r3
 8007516:	3758      	adds	r7, #88	@ 0x58
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	60b9      	str	r1, [r7, #8]
 8007526:	603b      	str	r3, [r7, #0]
 8007528:	4613      	mov	r3, r2
 800752a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800752c:	e04f      	b.n	80075ce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800752e:	69bb      	ldr	r3, [r7, #24]
 8007530:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007534:	d04b      	beq.n	80075ce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007536:	f7fa ff8f 	bl	8002458 <HAL_GetTick>
 800753a:	4602      	mov	r2, r0
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	1ad3      	subs	r3, r2, r3
 8007540:	69ba      	ldr	r2, [r7, #24]
 8007542:	429a      	cmp	r2, r3
 8007544:	d302      	bcc.n	800754c <UART_WaitOnFlagUntilTimeout+0x30>
 8007546:	69bb      	ldr	r3, [r7, #24]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d101      	bne.n	8007550 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800754c:	2303      	movs	r3, #3
 800754e:	e04e      	b.n	80075ee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f003 0304 	and.w	r3, r3, #4
 800755a:	2b00      	cmp	r3, #0
 800755c:	d037      	beq.n	80075ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	2b80      	cmp	r3, #128	@ 0x80
 8007562:	d034      	beq.n	80075ce <UART_WaitOnFlagUntilTimeout+0xb2>
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	2b40      	cmp	r3, #64	@ 0x40
 8007568:	d031      	beq.n	80075ce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	69db      	ldr	r3, [r3, #28]
 8007570:	f003 0308 	and.w	r3, r3, #8
 8007574:	2b08      	cmp	r3, #8
 8007576:	d110      	bne.n	800759a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	2208      	movs	r2, #8
 800757e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007580:	68f8      	ldr	r0, [r7, #12]
 8007582:	f000 f8ff 	bl	8007784 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2208      	movs	r2, #8
 800758a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2200      	movs	r2, #0
 8007592:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	e029      	b.n	80075ee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	69db      	ldr	r3, [r3, #28]
 80075a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80075a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075a8:	d111      	bne.n	80075ce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80075b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80075b4:	68f8      	ldr	r0, [r7, #12]
 80075b6:	f000 f8e5 	bl	8007784 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2220      	movs	r2, #32
 80075be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2200      	movs	r2, #0
 80075c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80075ca:	2303      	movs	r3, #3
 80075cc:	e00f      	b.n	80075ee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	69da      	ldr	r2, [r3, #28]
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	4013      	ands	r3, r2
 80075d8:	68ba      	ldr	r2, [r7, #8]
 80075da:	429a      	cmp	r2, r3
 80075dc:	bf0c      	ite	eq
 80075de:	2301      	moveq	r3, #1
 80075e0:	2300      	movne	r3, #0
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	461a      	mov	r2, r3
 80075e6:	79fb      	ldrb	r3, [r7, #7]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d0a0      	beq.n	800752e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3710      	adds	r7, #16
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
	...

080075f8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b097      	sub	sp, #92	@ 0x5c
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	60f8      	str	r0, [r7, #12]
 8007600:	60b9      	str	r1, [r7, #8]
 8007602:	4613      	mov	r3, r2
 8007604:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	68ba      	ldr	r2, [r7, #8]
 800760a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	88fa      	ldrh	r2, [r7, #6]
 8007610:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	88fa      	ldrh	r2, [r7, #6]
 8007618:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2200      	movs	r2, #0
 8007620:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800762a:	d10e      	bne.n	800764a <UART_Start_Receive_IT+0x52>
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	691b      	ldr	r3, [r3, #16]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d105      	bne.n	8007640 <UART_Start_Receive_IT+0x48>
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800763a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800763e:	e02d      	b.n	800769c <UART_Start_Receive_IT+0xa4>
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	22ff      	movs	r2, #255	@ 0xff
 8007644:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007648:	e028      	b.n	800769c <UART_Start_Receive_IT+0xa4>
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d10d      	bne.n	800766e <UART_Start_Receive_IT+0x76>
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	691b      	ldr	r3, [r3, #16]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d104      	bne.n	8007664 <UART_Start_Receive_IT+0x6c>
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	22ff      	movs	r2, #255	@ 0xff
 800765e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007662:	e01b      	b.n	800769c <UART_Start_Receive_IT+0xa4>
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	227f      	movs	r2, #127	@ 0x7f
 8007668:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800766c:	e016      	b.n	800769c <UART_Start_Receive_IT+0xa4>
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007676:	d10d      	bne.n	8007694 <UART_Start_Receive_IT+0x9c>
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	691b      	ldr	r3, [r3, #16]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d104      	bne.n	800768a <UART_Start_Receive_IT+0x92>
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	227f      	movs	r2, #127	@ 0x7f
 8007684:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007688:	e008      	b.n	800769c <UART_Start_Receive_IT+0xa4>
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	223f      	movs	r2, #63	@ 0x3f
 800768e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007692:	e003      	b.n	800769c <UART_Start_Receive_IT+0xa4>
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2200      	movs	r2, #0
 8007698:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2200      	movs	r2, #0
 80076a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2222      	movs	r2, #34	@ 0x22
 80076a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	3308      	adds	r3, #8
 80076b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076b6:	e853 3f00 	ldrex	r3, [r3]
 80076ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80076bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076be:	f043 0301 	orr.w	r3, r3, #1
 80076c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	3308      	adds	r3, #8
 80076ca:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80076cc:	64ba      	str	r2, [r7, #72]	@ 0x48
 80076ce:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80076d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076d4:	e841 2300 	strex	r3, r2, [r1]
 80076d8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80076da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d1e5      	bne.n	80076ac <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076e8:	d107      	bne.n	80076fa <UART_Start_Receive_IT+0x102>
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	691b      	ldr	r3, [r3, #16]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d103      	bne.n	80076fa <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	4a21      	ldr	r2, [pc, #132]	@ (800777c <UART_Start_Receive_IT+0x184>)
 80076f6:	669a      	str	r2, [r3, #104]	@ 0x68
 80076f8:	e002      	b.n	8007700 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	4a20      	ldr	r2, [pc, #128]	@ (8007780 <UART_Start_Receive_IT+0x188>)
 80076fe:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	691b      	ldr	r3, [r3, #16]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d019      	beq.n	800773c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800770e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007710:	e853 3f00 	ldrex	r3, [r3]
 8007714:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007718:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800771c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	461a      	mov	r2, r3
 8007724:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007726:	637b      	str	r3, [r7, #52]	@ 0x34
 8007728:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800772a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800772c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800772e:	e841 2300 	strex	r3, r2, [r1]
 8007732:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007736:	2b00      	cmp	r3, #0
 8007738:	d1e6      	bne.n	8007708 <UART_Start_Receive_IT+0x110>
 800773a:	e018      	b.n	800776e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	e853 3f00 	ldrex	r3, [r3]
 8007748:	613b      	str	r3, [r7, #16]
   return(result);
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	f043 0320 	orr.w	r3, r3, #32
 8007750:	653b      	str	r3, [r7, #80]	@ 0x50
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	461a      	mov	r2, r3
 8007758:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800775a:	623b      	str	r3, [r7, #32]
 800775c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800775e:	69f9      	ldr	r1, [r7, #28]
 8007760:	6a3a      	ldr	r2, [r7, #32]
 8007762:	e841 2300 	strex	r3, r2, [r1]
 8007766:	61bb      	str	r3, [r7, #24]
   return(result);
 8007768:	69bb      	ldr	r3, [r7, #24]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d1e6      	bne.n	800773c <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800776e:	2300      	movs	r3, #0
}
 8007770:	4618      	mov	r0, r3
 8007772:	375c      	adds	r7, #92	@ 0x5c
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr
 800777c:	08007a89 	.word	0x08007a89
 8007780:	080078cd 	.word	0x080078cd

08007784 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007784:	b480      	push	{r7}
 8007786:	b095      	sub	sp, #84	@ 0x54
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007792:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007794:	e853 3f00 	ldrex	r3, [r3]
 8007798:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800779a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800779c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80077a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	461a      	mov	r2, r3
 80077a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80077ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80077b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80077b2:	e841 2300 	strex	r3, r2, [r1]
 80077b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80077b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d1e6      	bne.n	800778c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	3308      	adds	r3, #8
 80077c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c6:	6a3b      	ldr	r3, [r7, #32]
 80077c8:	e853 3f00 	ldrex	r3, [r3]
 80077cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80077ce:	69fb      	ldr	r3, [r7, #28]
 80077d0:	f023 0301 	bic.w	r3, r3, #1
 80077d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	3308      	adds	r3, #8
 80077dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80077de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80077e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80077e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80077e6:	e841 2300 	strex	r3, r2, [r1]
 80077ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80077ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d1e5      	bne.n	80077be <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d118      	bne.n	800782c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	e853 3f00 	ldrex	r3, [r3]
 8007806:	60bb      	str	r3, [r7, #8]
   return(result);
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	f023 0310 	bic.w	r3, r3, #16
 800780e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	461a      	mov	r2, r3
 8007816:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007818:	61bb      	str	r3, [r7, #24]
 800781a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800781c:	6979      	ldr	r1, [r7, #20]
 800781e:	69ba      	ldr	r2, [r7, #24]
 8007820:	e841 2300 	strex	r3, r2, [r1]
 8007824:	613b      	str	r3, [r7, #16]
   return(result);
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d1e6      	bne.n	80077fa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2220      	movs	r2, #32
 8007830:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2200      	movs	r2, #0
 8007838:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007840:	bf00      	nop
 8007842:	3754      	adds	r7, #84	@ 0x54
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr

0800784c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007858:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2200      	movs	r2, #0
 800785e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2200      	movs	r2, #0
 8007866:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800786a:	68f8      	ldr	r0, [r7, #12]
 800786c:	f7ff fa3e 	bl	8006cec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007870:	bf00      	nop
 8007872:	3710      	adds	r7, #16
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b088      	sub	sp, #32
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	e853 3f00 	ldrex	r3, [r3]
 800788c:	60bb      	str	r3, [r7, #8]
   return(result);
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007894:	61fb      	str	r3, [r7, #28]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	461a      	mov	r2, r3
 800789c:	69fb      	ldr	r3, [r7, #28]
 800789e:	61bb      	str	r3, [r7, #24]
 80078a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a2:	6979      	ldr	r1, [r7, #20]
 80078a4:	69ba      	ldr	r2, [r7, #24]
 80078a6:	e841 2300 	strex	r3, r2, [r1]
 80078aa:	613b      	str	r3, [r7, #16]
   return(result);
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d1e6      	bne.n	8007880 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2220      	movs	r2, #32
 80078b6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f7ff fa0a 	bl	8006cd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078c4:	bf00      	nop
 80078c6:	3720      	adds	r7, #32
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b09c      	sub	sp, #112	@ 0x70
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80078da:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078e4:	2b22      	cmp	r3, #34	@ 0x22
 80078e6:	f040 80be 	bne.w	8007a66 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80078f0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80078f4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80078f8:	b2d9      	uxtb	r1, r3
 80078fa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80078fe:	b2da      	uxtb	r2, r3
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007904:	400a      	ands	r2, r1
 8007906:	b2d2      	uxtb	r2, r2
 8007908:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800790e:	1c5a      	adds	r2, r3, #1
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800791a:	b29b      	uxth	r3, r3
 800791c:	3b01      	subs	r3, #1
 800791e:	b29a      	uxth	r2, r3
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800792c:	b29b      	uxth	r3, r3
 800792e:	2b00      	cmp	r3, #0
 8007930:	f040 80a3 	bne.w	8007a7a <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800793a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800793c:	e853 3f00 	ldrex	r3, [r3]
 8007940:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007942:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007944:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007948:	66bb      	str	r3, [r7, #104]	@ 0x68
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	461a      	mov	r2, r3
 8007950:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007952:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007954:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007956:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007958:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800795a:	e841 2300 	strex	r3, r2, [r1]
 800795e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007960:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007962:	2b00      	cmp	r3, #0
 8007964:	d1e6      	bne.n	8007934 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	3308      	adds	r3, #8
 800796c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800796e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007970:	e853 3f00 	ldrex	r3, [r3]
 8007974:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007978:	f023 0301 	bic.w	r3, r3, #1
 800797c:	667b      	str	r3, [r7, #100]	@ 0x64
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	3308      	adds	r3, #8
 8007984:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007986:	647a      	str	r2, [r7, #68]	@ 0x44
 8007988:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800798c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800798e:	e841 2300 	strex	r3, r2, [r1]
 8007992:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007994:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007996:	2b00      	cmp	r3, #0
 8007998:	d1e5      	bne.n	8007966 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2220      	movs	r2, #32
 800799e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a34      	ldr	r2, [pc, #208]	@ (8007a84 <UART_RxISR_8BIT+0x1b8>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d01f      	beq.n	80079f8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d018      	beq.n	80079f8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ce:	e853 3f00 	ldrex	r3, [r3]
 80079d2:	623b      	str	r3, [r7, #32]
   return(result);
 80079d4:	6a3b      	ldr	r3, [r7, #32]
 80079d6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80079da:	663b      	str	r3, [r7, #96]	@ 0x60
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	461a      	mov	r2, r3
 80079e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80079e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80079e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80079ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079ec:	e841 2300 	strex	r3, r2, [r1]
 80079f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80079f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d1e6      	bne.n	80079c6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d12e      	bne.n	8007a5e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	e853 3f00 	ldrex	r3, [r3]
 8007a12:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f023 0310 	bic.w	r3, r3, #16
 8007a1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	461a      	mov	r2, r3
 8007a22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a24:	61fb      	str	r3, [r7, #28]
 8007a26:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a28:	69b9      	ldr	r1, [r7, #24]
 8007a2a:	69fa      	ldr	r2, [r7, #28]
 8007a2c:	e841 2300 	strex	r3, r2, [r1]
 8007a30:	617b      	str	r3, [r7, #20]
   return(result);
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d1e6      	bne.n	8007a06 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	69db      	ldr	r3, [r3, #28]
 8007a3e:	f003 0310 	and.w	r3, r3, #16
 8007a42:	2b10      	cmp	r3, #16
 8007a44:	d103      	bne.n	8007a4e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	2210      	movs	r2, #16
 8007a4c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007a54:	4619      	mov	r1, r3
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f7ff f952 	bl	8006d00 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a5c:	e00d      	b.n	8007a7a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f7f9 fbac 	bl	80011bc <HAL_UART_RxCpltCallback>
}
 8007a64:	e009      	b.n	8007a7a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	8b1b      	ldrh	r3, [r3, #24]
 8007a6c:	b29a      	uxth	r2, r3
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f042 0208 	orr.w	r2, r2, #8
 8007a76:	b292      	uxth	r2, r2
 8007a78:	831a      	strh	r2, [r3, #24]
}
 8007a7a:	bf00      	nop
 8007a7c:	3770      	adds	r7, #112	@ 0x70
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	40008000 	.word	0x40008000

08007a88 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b09c      	sub	sp, #112	@ 0x70
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007a96:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007aa0:	2b22      	cmp	r3, #34	@ 0x22
 8007aa2:	f040 80be 	bne.w	8007c22 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007aac:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ab4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007ab6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007aba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007abe:	4013      	ands	r3, r2
 8007ac0:	b29a      	uxth	r2, r3
 8007ac2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007ac4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007aca:	1c9a      	adds	r2, r3, #2
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	3b01      	subs	r3, #1
 8007ada:	b29a      	uxth	r2, r3
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	f040 80a3 	bne.w	8007c36 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007af8:	e853 3f00 	ldrex	r3, [r3]
 8007afc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007afe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b04:	667b      	str	r3, [r7, #100]	@ 0x64
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b0e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007b10:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b12:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007b14:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007b16:	e841 2300 	strex	r3, r2, [r1]
 8007b1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007b1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d1e6      	bne.n	8007af0 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	3308      	adds	r3, #8
 8007b28:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b2c:	e853 3f00 	ldrex	r3, [r3]
 8007b30:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b34:	f023 0301 	bic.w	r3, r3, #1
 8007b38:	663b      	str	r3, [r7, #96]	@ 0x60
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	3308      	adds	r3, #8
 8007b40:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007b42:	643a      	str	r2, [r7, #64]	@ 0x40
 8007b44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b46:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007b48:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007b4a:	e841 2300 	strex	r3, r2, [r1]
 8007b4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d1e5      	bne.n	8007b22 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2220      	movs	r2, #32
 8007b5a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2200      	movs	r2, #0
 8007b62:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2200      	movs	r2, #0
 8007b68:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a34      	ldr	r2, [pc, #208]	@ (8007c40 <UART_RxISR_16BIT+0x1b8>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d01f      	beq.n	8007bb4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d018      	beq.n	8007bb4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b88:	6a3b      	ldr	r3, [r7, #32]
 8007b8a:	e853 3f00 	ldrex	r3, [r3]
 8007b8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b90:	69fb      	ldr	r3, [r7, #28]
 8007b92:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007b96:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007ba2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ba6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ba8:	e841 2300 	strex	r3, r2, [r1]
 8007bac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d1e6      	bne.n	8007b82 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d12e      	bne.n	8007c1a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	e853 3f00 	ldrex	r3, [r3]
 8007bce:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	f023 0310 	bic.w	r3, r3, #16
 8007bd6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	461a      	mov	r2, r3
 8007bde:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007be0:	61bb      	str	r3, [r7, #24]
 8007be2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be4:	6979      	ldr	r1, [r7, #20]
 8007be6:	69ba      	ldr	r2, [r7, #24]
 8007be8:	e841 2300 	strex	r3, r2, [r1]
 8007bec:	613b      	str	r3, [r7, #16]
   return(result);
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d1e6      	bne.n	8007bc2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	69db      	ldr	r3, [r3, #28]
 8007bfa:	f003 0310 	and.w	r3, r3, #16
 8007bfe:	2b10      	cmp	r3, #16
 8007c00:	d103      	bne.n	8007c0a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	2210      	movs	r2, #16
 8007c08:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007c10:	4619      	mov	r1, r3
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f7ff f874 	bl	8006d00 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007c18:	e00d      	b.n	8007c36 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f7f9 face 	bl	80011bc <HAL_UART_RxCpltCallback>
}
 8007c20:	e009      	b.n	8007c36 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	8b1b      	ldrh	r3, [r3, #24]
 8007c28:	b29a      	uxth	r2, r3
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f042 0208 	orr.w	r2, r2, #8
 8007c32:	b292      	uxth	r2, r2
 8007c34:	831a      	strh	r2, [r3, #24]
}
 8007c36:	bf00      	nop
 8007c38:	3770      	adds	r7, #112	@ 0x70
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}
 8007c3e:	bf00      	nop
 8007c40:	40008000 	.word	0x40008000

08007c44 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007c4c:	bf00      	nop
 8007c4e:	370c      	adds	r7, #12
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr

08007c58 <_vl53l5cx_poll_for_answer>:
		uint8_t					size,
		uint8_t					pos,
		uint16_t				address,
		uint8_t					mask,
		uint8_t					expected_value)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b084      	sub	sp, #16
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	4608      	mov	r0, r1
 8007c62:	4611      	mov	r1, r2
 8007c64:	461a      	mov	r2, r3
 8007c66:	4603      	mov	r3, r0
 8007c68:	70fb      	strb	r3, [r7, #3]
 8007c6a:	460b      	mov	r3, r1
 8007c6c:	70bb      	strb	r3, [r7, #2]
 8007c6e:	4613      	mov	r3, r2
 8007c70:	803b      	strh	r3, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8007c72:	2300      	movs	r3, #0
 8007c74:	73fb      	strb	r3, [r7, #15]
	uint8_t timeout = 0;
 8007c76:	2300      	movs	r3, #0
 8007c78:	73bb      	strb	r3, [r7, #14]

	do {
		status |= VL53L5CX_RdMulti(&(p_dev->platform), address,
 8007c7a:	6878      	ldr	r0, [r7, #4]
				p_dev->temp_buffer, size);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
		status |= VL53L5CX_RdMulti(&(p_dev->platform), address,
 8007c82:	78fb      	ldrb	r3, [r7, #3]
 8007c84:	8839      	ldrh	r1, [r7, #0]
 8007c86:	f7f9 fec3 	bl	8001a10 <VL53L5CX_RdMulti>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	7bfb      	ldrb	r3, [r7, #15]
 8007c90:	4313      	orrs	r3, r2
 8007c92:	73fb      	strb	r3, [r7, #15]
		status |= VL53L5CX_WaitMs(&(p_dev->platform), 10);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	210a      	movs	r1, #10
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f7f9 ff0f 	bl	8001abc <VL53L5CX_WaitMs>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	7bfb      	ldrb	r3, [r7, #15]
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	73fb      	strb	r3, [r7, #15]

		if(timeout >= (uint8_t)200)	/* 2s timeout */
 8007ca8:	7bbb      	ldrb	r3, [r7, #14]
 8007caa:	2bc7      	cmp	r3, #199	@ 0xc7
 8007cac:	d904      	bls.n	8007cb8 <_vl53l5cx_poll_for_answer+0x60>
		{
			status |= (uint8_t)VL53L5CX_STATUS_TIMEOUT_ERROR;
 8007cae:	7bfb      	ldrb	r3, [r7, #15]
 8007cb0:	f043 0301 	orr.w	r3, r3, #1
 8007cb4:	73fb      	strb	r3, [r7, #15]
			break;
 8007cb6:	e01a      	b.n	8007cee <_vl53l5cx_poll_for_answer+0x96>
		}else if((size >= (uint8_t)4) 
 8007cb8:	78fb      	ldrb	r3, [r7, #3]
 8007cba:	2b03      	cmp	r3, #3
 8007cbc:	d909      	bls.n	8007cd2 <_vl53l5cx_poll_for_answer+0x7a>
                         && (p_dev->temp_buffer[2] >= (uint8_t)0x7f))
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f893 3502 	ldrb.w	r3, [r3, #1282]	@ 0x502
 8007cc4:	2b7e      	cmp	r3, #126	@ 0x7e
 8007cc6:	d904      	bls.n	8007cd2 <_vl53l5cx_poll_for_answer+0x7a>
		{
			status |= VL53L5CX_MCU_ERROR;
 8007cc8:	7bfb      	ldrb	r3, [r7, #15]
 8007cca:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8007cce:	73fb      	strb	r3, [r7, #15]
			break;
 8007cd0:	e00d      	b.n	8007cee <_vl53l5cx_poll_for_answer+0x96>
		}
		else
		{
			timeout++;
 8007cd2:	7bbb      	ldrb	r3, [r7, #14]
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	73bb      	strb	r3, [r7, #14]
		}
	}while ((p_dev->temp_buffer[pos] & mask) != expected_value);
 8007cd8:	78bb      	ldrb	r3, [r7, #2]
 8007cda:	687a      	ldr	r2, [r7, #4]
 8007cdc:	4413      	add	r3, r2
 8007cde:	f893 2500 	ldrb.w	r2, [r3, #1280]	@ 0x500
 8007ce2:	7e3b      	ldrb	r3, [r7, #24]
 8007ce4:	4013      	ands	r3, r2
 8007ce6:	b2db      	uxtb	r3, r3
 8007ce8:	7f3a      	ldrb	r2, [r7, #28]
 8007cea:	429a      	cmp	r2, r3
 8007cec:	d1c5      	bne.n	8007c7a <_vl53l5cx_poll_for_answer+0x22>

	return status;
 8007cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3710      	adds	r7, #16
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}

08007cf8 <_vl53l5cx_poll_for_mcu_boot>:
 * Inner function, not available outside this file. This function is used to
 * wait for the MCU to boot.
 */
static uint8_t _vl53l5cx_poll_for_mcu_boot(
              VL53L5CX_Configuration      *p_dev)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
   uint8_t go2_status0, go2_status1, status = VL53L5CX_STATUS_OK;
 8007d00:	2300      	movs	r3, #0
 8007d02:	73fb      	strb	r3, [r7, #15]
   uint16_t timeout = 0;
 8007d04:	2300      	movs	r3, #0
 8007d06:	81bb      	strh	r3, [r7, #12]

   do {
		status |= VL53L5CX_RdByte(&(p_dev->platform), 0x06, &go2_status0);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f107 020b 	add.w	r2, r7, #11
 8007d0e:	2106      	movs	r1, #6
 8007d10:	4618      	mov	r0, r3
 8007d12:	f7f9 fe1f 	bl	8001954 <VL53L5CX_RdByte>
 8007d16:	4603      	mov	r3, r0
 8007d18:	461a      	mov	r2, r3
 8007d1a:	7bfb      	ldrb	r3, [r7, #15]
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	73fb      	strb	r3, [r7, #15]
		if((go2_status0 & (uint8_t)0x80) != (uint8_t)0){
 8007d20:	7afb      	ldrb	r3, [r7, #11]
 8007d22:	b25b      	sxtb	r3, r3
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	da10      	bge.n	8007d4a <_vl53l5cx_poll_for_mcu_boot+0x52>
			status |= VL53L5CX_RdByte(&(p_dev->platform), 0x07, &go2_status1);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f107 020a 	add.w	r2, r7, #10
 8007d2e:	2107      	movs	r1, #7
 8007d30:	4618      	mov	r0, r3
 8007d32:	f7f9 fe0f 	bl	8001954 <VL53L5CX_RdByte>
 8007d36:	4603      	mov	r3, r0
 8007d38:	461a      	mov	r2, r3
 8007d3a:	7bfb      	ldrb	r3, [r7, #15]
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	73fb      	strb	r3, [r7, #15]
			status |= go2_status1;
 8007d40:	7aba      	ldrb	r2, [r7, #10]
 8007d42:	7bfb      	ldrb	r3, [r7, #15]
 8007d44:	4313      	orrs	r3, r2
 8007d46:	73fb      	strb	r3, [r7, #15]
			break;
 8007d48:	e012      	b.n	8007d70 <_vl53l5cx_poll_for_mcu_boot+0x78>
		}
		(void)VL53L5CX_WaitMs(&(p_dev->platform), 1);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2101      	movs	r1, #1
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f7f9 feb4 	bl	8001abc <VL53L5CX_WaitMs>
		timeout++;
 8007d54:	89bb      	ldrh	r3, [r7, #12]
 8007d56:	3301      	adds	r3, #1
 8007d58:	81bb      	strh	r3, [r7, #12]

		if((go2_status0 & (uint8_t)0x1) != (uint8_t)0){
 8007d5a:	7afb      	ldrb	r3, [r7, #11]
 8007d5c:	f003 0301 	and.w	r3, r3, #1
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d104      	bne.n	8007d6e <_vl53l5cx_poll_for_mcu_boot+0x76>
			break;
		}

	}while (timeout < (uint16_t)500);
 8007d64:	89bb      	ldrh	r3, [r7, #12]
 8007d66:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8007d6a:	d3cd      	bcc.n	8007d08 <_vl53l5cx_poll_for_mcu_boot+0x10>
 8007d6c:	e000      	b.n	8007d70 <_vl53l5cx_poll_for_mcu_boot+0x78>
			break;
 8007d6e:	bf00      	nop

   return status;
 8007d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3710      	adds	r7, #16
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
	...

08007d7c <_vl53l5cx_send_offset_data>:
 */

static uint8_t _vl53l5cx_send_offset_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t						resolution)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b0ea      	sub	sp, #424	@ 0x1a8
 8007d80:	af02      	add	r7, sp, #8
 8007d82:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007d86:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007d8a:	6018      	str	r0, [r3, #0]
 8007d8c:	460a      	mov	r2, r1
 8007d8e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007d92:	f2a3 139d 	subw	r3, r3, #413	@ 0x19d
 8007d96:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
	uint32_t signal_grid[64];
	int16_t range_grid[64];
	uint8_t dss_4x4[] = {0x0F, 0x04, 0x04, 0x00, 0x08, 0x10, 0x10, 0x07};
 8007d9e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007da2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8007da6:	4ad9      	ldr	r2, [pc, #868]	@ (800810c <_vl53l5cx_send_offset_data+0x390>)
 8007da8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007dac:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0F, 0x03, 0x01, 0x01, 0xE4};
 8007db0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007db4:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8007db8:	4ad5      	ldr	r2, [pc, #852]	@ (8008110 <_vl53l5cx_send_offset_data+0x394>)
 8007dba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007dbe:	e883 0003 	stmia.w	r3, {r0, r1}
	int8_t i, j;
	uint16_t k;

	(void)memcpy(p_dev->temp_buffer,
 8007dc2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007dc6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f503 60a0 	add.w	r0, r3, #1280	@ 0x500
               p_dev->offset_data, VL53L5CX_OFFSET_BUFFER_SIZE);
 8007dd0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007dd4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	3310      	adds	r3, #16
	(void)memcpy(p_dev->temp_buffer,
 8007ddc:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8007de0:	4619      	mov	r1, r3
 8007de2:	f002 fbae 	bl	800a542 <memcpy>

	/* Data extrapolation is required for 4X4 offset */
	if(resolution == (uint8_t)VL53L5CX_RESOLUTION_4X4){
 8007de6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007dea:	f2a3 139d 	subw	r3, r3, #413	@ 0x19d
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	2b10      	cmp	r3, #16
 8007df2:	f040 8122 	bne.w	800803a <_vl53l5cx_send_offset_data+0x2be>
		(void)memcpy(&(p_dev->temp_buffer[0x10]), dss_4x4, sizeof(dss_4x4));
 8007df6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007dfa:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
 8007e04:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007e08:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8007e0c:	cb03      	ldmia	r3!, {r0, r1}
 8007e0e:	6010      	str	r0, [r2, #0]
 8007e10:	6051      	str	r1, [r2, #4]
		VL53L5CX_SwapBuffer(p_dev->temp_buffer, VL53L5CX_OFFSET_BUFFER_SIZE);
 8007e12:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007e16:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e20:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 8007e24:	4618      	mov	r0, r3
 8007e26:	f7f9 fe13 	bl	8001a50 <VL53L5CX_SwapBuffer>
		(void)memcpy(signal_grid,&(p_dev->temp_buffer[0x3C]),
 8007e2a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007e2e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f203 513c 	addw	r1, r3, #1340	@ 0x53c
 8007e38:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8007e3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007e40:	4618      	mov	r0, r3
 8007e42:	f002 fb7e 	bl	800a542 <memcpy>
			sizeof(signal_grid));
		(void)memcpy(range_grid,&(p_dev->temp_buffer[0x140]),
 8007e46:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007e4a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f503 61c8 	add.w	r1, r3, #1600	@ 0x640
 8007e54:	f107 0318 	add.w	r3, r7, #24
 8007e58:	2280      	movs	r2, #128	@ 0x80
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f002 fb71 	bl	800a542 <memcpy>
			sizeof(range_grid));

		for (j = 0; j < (int8_t)4; j++)
 8007e60:	2300      	movs	r3, #0
 8007e62:	f887 319e 	strb.w	r3, [r7, #414]	@ 0x19e
 8007e66:	e0ac      	b.n	8007fc2 <_vl53l5cx_send_offset_data+0x246>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 8007e68:	2300      	movs	r3, #0
 8007e6a:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f
 8007e6e:	e09c      	b.n	8007faa <_vl53l5cx_send_offset_data+0x22e>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+ (int8_t)0]
 8007e70:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 8007e74:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8007e78:	00db      	lsls	r3, r3, #3
 8007e7a:	4413      	add	r3, r2
 8007e7c:	005a      	lsls	r2, r3, #1
 8007e7e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007e82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e86:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+(int8_t)1]
 8007e8a:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8007e8e:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8007e92:	00db      	lsls	r3, r3, #3
 8007e94:	440b      	add	r3, r1
 8007e96:	005b      	lsls	r3, r3, #1
 8007e98:	1c59      	adds	r1, r3, #1
 8007e9a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007e9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ea2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007ea6:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)8]
 8007ea8:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8007eac:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8007eb0:	00db      	lsls	r3, r3, #3
 8007eb2:	440b      	add	r3, r1
 8007eb4:	3304      	adds	r3, #4
 8007eb6:	0059      	lsls	r1, r3, #1
 8007eb8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007ebc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ec0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007ec4:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)9])
 8007ec6:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8007eca:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8007ece:	00db      	lsls	r3, r3, #3
 8007ed0:	440b      	add	r3, r1
 8007ed2:	005b      	lsls	r3, r3, #1
 8007ed4:	f103 0109 	add.w	r1, r3, #9
 8007ed8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007edc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ee0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007ee4:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 8007ee6:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8007eea:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 8007eee:	0092      	lsls	r2, r2, #2
 8007ef0:	440a      	add	r2, r1
                                  /(uint32_t)4;
 8007ef2:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 8007ef4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007ef8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007efc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				range_grid[i+(4*j)] =
				(range_grid[(2*i)+(16*j)]
 8007f00:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 8007f04:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8007f08:	00db      	lsls	r3, r3, #3
 8007f0a:	4413      	add	r3, r2
 8007f0c:	005a      	lsls	r2, r3, #1
 8007f0e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007f12:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8007f16:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8007f1a:	4619      	mov	r1, r3
				+ range_grid[(2*i)+(16*j)+1]
 8007f1c:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 8007f20:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8007f24:	00db      	lsls	r3, r3, #3
 8007f26:	4413      	add	r3, r2
 8007f28:	005b      	lsls	r3, r3, #1
 8007f2a:	1c5a      	adds	r2, r3, #1
 8007f2c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007f30:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8007f34:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8007f38:	440b      	add	r3, r1
				+ range_grid[(2*i)+(16*j)+8]
 8007f3a:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8007f3e:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 8007f42:	00d2      	lsls	r2, r2, #3
 8007f44:	440a      	add	r2, r1
 8007f46:	3204      	adds	r2, #4
 8007f48:	0051      	lsls	r1, r2, #1
 8007f4a:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8007f4e:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 8007f52:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8007f56:	4413      	add	r3, r2
				+ range_grid[(2*i)+(16*j)+9])
 8007f58:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8007f5c:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 8007f60:	00d2      	lsls	r2, r2, #3
 8007f62:	440a      	add	r2, r1
 8007f64:	0052      	lsls	r2, r2, #1
 8007f66:	f102 0109 	add.w	r1, r2, #9
 8007f6a:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8007f6e:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 8007f72:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8007f76:	4413      	add	r3, r2
                                  /(int16_t)4;
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	da00      	bge.n	8007f7e <_vl53l5cx_send_offset_data+0x202>
 8007f7c:	3303      	adds	r3, #3
 8007f7e:	109b      	asrs	r3, r3, #2
 8007f80:	4619      	mov	r1, r3
				range_grid[i+(4*j)] =
 8007f82:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 8007f86:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8007f8a:	009b      	lsls	r3, r3, #2
 8007f8c:	441a      	add	r2, r3
 8007f8e:	b209      	sxth	r1, r1
 8007f90:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007f94:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8007f98:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (i = 0; i < (int8_t)4 ; i++)
 8007f9c:	f997 319f 	ldrsb.w	r3, [r7, #415]	@ 0x19f
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f
 8007faa:	f997 319f 	ldrsb.w	r3, [r7, #415]	@ 0x19f
 8007fae:	2b03      	cmp	r3, #3
 8007fb0:	f77f af5e 	ble.w	8007e70 <_vl53l5cx_send_offset_data+0xf4>
		for (j = 0; j < (int8_t)4; j++)
 8007fb4:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	3301      	adds	r3, #1
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	f887 319e 	strb.w	r3, [r7, #414]	@ 0x19e
 8007fc2:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8007fc6:	2b03      	cmp	r3, #3
 8007fc8:	f77f af4e 	ble.w	8007e68 <_vl53l5cx_send_offset_data+0xec>
			}
		}
	    (void)memset(&range_grid[0x10], 0, (uint16_t)96);
 8007fcc:	f107 0318 	add.w	r3, r7, #24
 8007fd0:	3320      	adds	r3, #32
 8007fd2:	2260      	movs	r2, #96	@ 0x60
 8007fd4:	2100      	movs	r1, #0
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f002 fa7a 	bl	800a4d0 <memset>
	    (void)memset(&signal_grid[0x10], 0, (uint16_t)192);
 8007fdc:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8007fe0:	3340      	adds	r3, #64	@ 0x40
 8007fe2:	22c0      	movs	r2, #192	@ 0xc0
 8007fe4:	2100      	movs	r1, #0
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f002 fa72 	bl	800a4d0 <memset>
            (void)memcpy(&(p_dev->temp_buffer[0x3C]),
 8007fec:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007ff0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f203 533c 	addw	r3, r3, #1340	@ 0x53c
 8007ffa:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8007ffe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008002:	4618      	mov	r0, r3
 8008004:	f002 fa9d 	bl	800a542 <memcpy>
		signal_grid, sizeof(signal_grid));
            (void)memcpy(&(p_dev->temp_buffer[0x140]),
 8008008:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800800c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f503 63c8 	add.w	r3, r3, #1600	@ 0x640
 8008016:	f107 0118 	add.w	r1, r7, #24
 800801a:	2280      	movs	r2, #128	@ 0x80
 800801c:	4618      	mov	r0, r3
 800801e:	f002 fa90 	bl	800a542 <memcpy>
		range_grid, sizeof(range_grid));
            VL53L5CX_SwapBuffer(p_dev->temp_buffer, VL53L5CX_OFFSET_BUFFER_SIZE);
 8008022:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8008026:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008030:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 8008034:	4618      	mov	r0, r3
 8008036:	f7f9 fd0b 	bl	8001a50 <VL53L5CX_SwapBuffer>
	}

	for(k = 0; k < (VL53L5CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 800803a:	2300      	movs	r3, #0
 800803c:	f8a7 319c 	strh.w	r3, [r7, #412]	@ 0x19c
 8008040:	e01b      	b.n	800807a <_vl53l5cx_send_offset_data+0x2fe>
	{
		p_dev->temp_buffer[k] = p_dev->temp_buffer[k + (uint16_t)8];
 8008042:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 8008046:	f103 0208 	add.w	r2, r3, #8
 800804a:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 800804e:	f507 71d0 	add.w	r1, r7, #416	@ 0x1a0
 8008052:	f5a1 71ce 	sub.w	r1, r1, #412	@ 0x19c
 8008056:	6809      	ldr	r1, [r1, #0]
 8008058:	440a      	add	r2, r1
 800805a:	f892 1500 	ldrb.w	r1, [r2, #1280]	@ 0x500
 800805e:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8008062:	f5a2 72ce 	sub.w	r2, r2, #412	@ 0x19c
 8008066:	6812      	ldr	r2, [r2, #0]
 8008068:	4413      	add	r3, r2
 800806a:	460a      	mov	r2, r1
 800806c:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
	for(k = 0; k < (VL53L5CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 8008070:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 8008074:	3301      	adds	r3, #1
 8008076:	f8a7 319c 	strh.w	r3, [r7, #412]	@ 0x19c
 800807a:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 800807e:	f5b3 7ff2 	cmp.w	r3, #484	@ 0x1e4
 8008082:	d3de      	bcc.n	8008042 <_vl53l5cx_send_offset_data+0x2c6>
	}

	(void)memcpy(&(p_dev->temp_buffer[0x1E0]), footer, 8);
 8008084:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8008088:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f503 62dc 	add.w	r2, r3, #1760	@ 0x6e0
 8008092:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8008096:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800809a:	cb03      	ldmia	r3!, {r0, r1}
 800809c:	6010      	str	r0, [r2, #0]
 800809e:	6051      	str	r1, [r2, #4]
	status |= VL53L5CX_WrMulti(&(p_dev->platform), 0x2e18, p_dev->temp_buffer,
 80080a0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80080a4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80080a8:	6818      	ldr	r0, [r3, #0]
 80080aa:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80080ae:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
 80080b8:	f44f 73f4 	mov.w	r3, #488	@ 0x1e8
 80080bc:	f642 6118 	movw	r1, #11800	@ 0x2e18
 80080c0:	f7f9 fc86 	bl	80019d0 <VL53L5CX_WrMulti>
 80080c4:	4603      	mov	r3, r0
 80080c6:	461a      	mov	r2, r3
 80080c8:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 80080cc:	4313      	orrs	r3, r2
 80080ce:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
		VL53L5CX_OFFSET_BUFFER_SIZE);
	status |=_vl53l5cx_poll_for_answer(p_dev, 4, 1,
 80080d2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80080d6:	f5a3 70ce 	sub.w	r0, r3, #412	@ 0x19c
 80080da:	2303      	movs	r3, #3
 80080dc:	9301      	str	r3, [sp, #4]
 80080de:	23ff      	movs	r3, #255	@ 0xff
 80080e0:	9300      	str	r3, [sp, #0]
 80080e2:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 80080e6:	2201      	movs	r2, #1
 80080e8:	2104      	movs	r1, #4
 80080ea:	6800      	ldr	r0, [r0, #0]
 80080ec:	f7ff fdb4 	bl	8007c58 <_vl53l5cx_poll_for_answer>
 80080f0:	4603      	mov	r3, r0
 80080f2:	461a      	mov	r2, r3
 80080f4:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 80080f8:	4313      	orrs	r3, r2
 80080fa:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
		VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 80080fe:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
}
 8008102:	4618      	mov	r0, r3
 8008104:	f507 77d0 	add.w	r7, r7, #416	@ 0x1a0
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}
 800810c:	0800cc24 	.word	0x0800cc24
 8008110:	0800cc2c 	.word	0x0800cc2c

08008114 <_vl53l5cx_send_xtalk_data>:
 */

static uint8_t _vl53l5cx_send_xtalk_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				resolution)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b0ca      	sub	sp, #296	@ 0x128
 8008118:	af02      	add	r7, sp, #8
 800811a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800811e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8008122:	6018      	str	r0, [r3, #0]
 8008124:	460a      	mov	r2, r1
 8008126:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800812a:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 800812e:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8008130:	2300      	movs	r3, #0
 8008132:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
	uint8_t res4x4[] = {0x0F, 0x04, 0x04, 0x17, 0x08, 0x10, 0x10, 0x07};
 8008136:	4a9a      	ldr	r2, [pc, #616]	@ (80083a0 <_vl53l5cx_send_xtalk_data+0x28c>)
 8008138:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800813c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008140:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t dss_4x4[] = {0x00, 0x78, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08};
 8008144:	4a97      	ldr	r2, [pc, #604]	@ (80083a4 <_vl53l5cx_send_xtalk_data+0x290>)
 8008146:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800814a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800814e:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t profile_4x4[] = {0xA0, 0xFC, 0x01, 0x00};
 8008152:	4b95      	ldr	r3, [pc, #596]	@ (80083a8 <_vl53l5cx_send_xtalk_data+0x294>)
 8008154:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
	uint32_t signal_grid[64];
	int8_t i, j;

	(void)memcpy(p_dev->temp_buffer, &(p_dev->xtalk_data[0]),
 8008158:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800815c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f503 60a0 	add.w	r0, r3, #1280	@ 0x500
 8008166:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800816a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8008174:	f44f 7242 	mov.w	r2, #776	@ 0x308
 8008178:	4619      	mov	r1, r3
 800817a:	f002 f9e2 	bl	800a542 <memcpy>
		VL53L5CX_XTALK_BUFFER_SIZE);

	/* Data extrapolation is required for 4X4 Xtalk */
	if(resolution == (uint8_t)VL53L5CX_RESOLUTION_4X4)
 800817e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8008182:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	2b10      	cmp	r3, #16
 800818a:	f040 80d2 	bne.w	8008332 <_vl53l5cx_send_xtalk_data+0x21e>
	{
		(void)memcpy(&(p_dev->temp_buffer[0x8]),
 800818e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8008192:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 800819c:	461a      	mov	r2, r3
 800819e:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80081a2:	cb03      	ldmia	r3!, {r0, r1}
 80081a4:	6010      	str	r0, [r2, #0]
 80081a6:	6051      	str	r1, [r2, #4]
			res4x4, sizeof(res4x4));
		(void)memcpy(&(p_dev->temp_buffer[0x020]),
 80081a8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80081ac:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f503 63a4 	add.w	r3, r3, #1312	@ 0x520
 80081b6:	461a      	mov	r2, r3
 80081b8:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80081bc:	cb03      	ldmia	r3!, {r0, r1}
 80081be:	6010      	str	r0, [r2, #0]
 80081c0:	6051      	str	r1, [r2, #4]
			dss_4x4, sizeof(dss_4x4));

		VL53L5CX_SwapBuffer(p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 80081c2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80081c6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081d0:	f44f 7142 	mov.w	r1, #776	@ 0x308
 80081d4:	4618      	mov	r0, r3
 80081d6:	f7f9 fc3b 	bl	8001a50 <VL53L5CX_SwapBuffer>
		(void)memcpy(signal_grid, &(p_dev->temp_buffer[0x34]),
 80081da:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80081de:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f203 5134 	addw	r1, r3, #1332	@ 0x534
 80081e8:	f107 0308 	add.w	r3, r7, #8
 80081ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80081f0:	4618      	mov	r0, r3
 80081f2:	f002 f9a6 	bl	800a542 <memcpy>
			sizeof(signal_grid));

		for (j = 0; j < (int8_t)4; j++)
 80081f6:	2300      	movs	r3, #0
 80081f8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80081fc:	e05d      	b.n	80082ba <_vl53l5cx_send_xtalk_data+0x1a6>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 80081fe:	2300      	movs	r3, #0
 8008200:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8008204:	e04e      	b.n	80082a4 <_vl53l5cx_send_xtalk_data+0x190>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+0]
 8008206:	f997 211f 	ldrsb.w	r2, [r7, #287]	@ 0x11f
 800820a:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 800820e:	00db      	lsls	r3, r3, #3
 8008210:	4413      	add	r3, r2
 8008212:	005a      	lsls	r2, r3, #1
 8008214:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8008218:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800821c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+1]
 8008220:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 8008224:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8008228:	00db      	lsls	r3, r3, #3
 800822a:	440b      	add	r3, r1
 800822c:	005b      	lsls	r3, r3, #1
 800822e:	1c59      	adds	r1, r3, #1
 8008230:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8008234:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8008238:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800823c:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+8]
 800823e:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 8008242:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8008246:	00db      	lsls	r3, r3, #3
 8008248:	440b      	add	r3, r1
 800824a:	3304      	adds	r3, #4
 800824c:	0059      	lsls	r1, r3, #1
 800824e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8008252:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8008256:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800825a:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 800825c:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 8008260:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8008264:	00db      	lsls	r3, r3, #3
 8008266:	440b      	add	r3, r1
 8008268:	005b      	lsls	r3, r3, #1
 800826a:	f103 0109 	add.w	r1, r3, #9
 800826e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8008272:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8008276:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800827a:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 800827c:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 8008280:	f997 211e 	ldrsb.w	r2, [r7, #286]	@ 0x11e
 8008284:	0092      	lsls	r2, r2, #2
 8008286:	440a      	add	r2, r1
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 8008288:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 800828a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800828e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8008292:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0; i < (int8_t)4 ; i++)
 8008296:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 800829a:	b2db      	uxtb	r3, r3
 800829c:	3301      	adds	r3, #1
 800829e:	b2db      	uxtb	r3, r3
 80082a0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 80082a4:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 80082a8:	2b03      	cmp	r3, #3
 80082aa:	ddac      	ble.n	8008206 <_vl53l5cx_send_xtalk_data+0xf2>
		for (j = 0; j < (int8_t)4; j++)
 80082ac:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	3301      	adds	r3, #1
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80082ba:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 80082be:	2b03      	cmp	r3, #3
 80082c0:	dd9d      	ble.n	80081fe <_vl53l5cx_send_xtalk_data+0xea>
			}
		}
	    (void)memset(&signal_grid[0x10], 0, (uint32_t)192);
 80082c2:	f107 0308 	add.w	r3, r7, #8
 80082c6:	3340      	adds	r3, #64	@ 0x40
 80082c8:	22c0      	movs	r2, #192	@ 0xc0
 80082ca:	2100      	movs	r1, #0
 80082cc:	4618      	mov	r0, r3
 80082ce:	f002 f8ff 	bl	800a4d0 <memset>
	    (void)memcpy(&(p_dev->temp_buffer[0x34]),
 80082d2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80082d6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f203 5334 	addw	r3, r3, #1332	@ 0x534
 80082e0:	f107 0108 	add.w	r1, r7, #8
 80082e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80082e8:	4618      	mov	r0, r3
 80082ea:	f002 f92a 	bl	800a542 <memcpy>
                  signal_grid, sizeof(signal_grid));
	    VL53L5CX_SwapBuffer(p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 80082ee:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80082f2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082fc:	f44f 7142 	mov.w	r1, #776	@ 0x308
 8008300:	4618      	mov	r0, r3
 8008302:	f7f9 fba5 	bl	8001a50 <VL53L5CX_SwapBuffer>
	    (void)memcpy(&(p_dev->temp_buffer[0x134]),
 8008306:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800830a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f203 6334 	addw	r3, r3, #1588	@ 0x634
 8008314:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8008318:	601a      	str	r2, [r3, #0]
	    profile_4x4, sizeof(profile_4x4));
	    (void)memset(&(p_dev->temp_buffer[0x078]),0 ,
 800831a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800831e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f503 63af 	add.w	r3, r3, #1400	@ 0x578
 8008328:	2204      	movs	r2, #4
 800832a:	2100      	movs	r1, #0
 800832c:	4618      	mov	r0, r3
 800832e:	f002 f8cf 	bl	800a4d0 <memset>
                         (uint32_t)4*sizeof(uint8_t));
	}

	status |= VL53L5CX_WrMulti(&(p_dev->platform), 0x2cf8,
 8008332:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8008336:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800833a:	6818      	ldr	r0, [r3, #0]
			p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 800833c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8008340:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
	status |= VL53L5CX_WrMulti(&(p_dev->platform), 0x2cf8,
 800834a:	f44f 7342 	mov.w	r3, #776	@ 0x308
 800834e:	f642 41f8 	movw	r1, #11512	@ 0x2cf8
 8008352:	f7f9 fb3d 	bl	80019d0 <VL53L5CX_WrMulti>
 8008356:	4603      	mov	r3, r0
 8008358:	461a      	mov	r2, r3
 800835a:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 800835e:	4313      	orrs	r3, r2
 8008360:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
	status |=_vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8008364:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8008368:	f5a3 708e 	sub.w	r0, r3, #284	@ 0x11c
 800836c:	2303      	movs	r3, #3
 800836e:	9301      	str	r3, [sp, #4]
 8008370:	23ff      	movs	r3, #255	@ 0xff
 8008372:	9300      	str	r3, [sp, #0]
 8008374:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8008378:	2201      	movs	r2, #1
 800837a:	2104      	movs	r1, #4
 800837c:	6800      	ldr	r0, [r0, #0]
 800837e:	f7ff fc6b 	bl	8007c58 <_vl53l5cx_poll_for_answer>
 8008382:	4603      	mov	r3, r0
 8008384:	461a      	mov	r2, r3
 8008386:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 800838a:	4313      	orrs	r3, r2
 800838c:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
			VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 8008390:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
}
 8008394:	4618      	mov	r0, r3
 8008396:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
 800839e:	bf00      	nop
 80083a0:	0800cc34 	.word	0x0800cc34
 80083a4:	0800cc3c 	.word	0x0800cc3c
 80083a8:	0001fca0 	.word	0x0001fca0

080083ac <vl53l5cx_is_alive>:

uint8_t vl53l5cx_is_alive(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*p_is_alive)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b084      	sub	sp, #16
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 80083b6:	2300      	movs	r3, #0
 80083b8:	73fb      	strb	r3, [r7, #15]
	uint8_t device_id, revision_id;

	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2200      	movs	r2, #0
 80083be:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80083c2:	4618      	mov	r0, r3
 80083c4:	f7f9 fae4 	bl	8001990 <VL53L5CX_WrByte>
 80083c8:	4603      	mov	r3, r0
 80083ca:	461a      	mov	r2, r3
 80083cc:	7bfb      	ldrb	r3, [r7, #15]
 80083ce:	4313      	orrs	r3, r2
 80083d0:	73fb      	strb	r3, [r7, #15]
	status |= VL53L5CX_RdByte(&(p_dev->platform), 0, &device_id);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f107 020e 	add.w	r2, r7, #14
 80083d8:	2100      	movs	r1, #0
 80083da:	4618      	mov	r0, r3
 80083dc:	f7f9 faba 	bl	8001954 <VL53L5CX_RdByte>
 80083e0:	4603      	mov	r3, r0
 80083e2:	461a      	mov	r2, r3
 80083e4:	7bfb      	ldrb	r3, [r7, #15]
 80083e6:	4313      	orrs	r3, r2
 80083e8:	73fb      	strb	r3, [r7, #15]
	status |= VL53L5CX_RdByte(&(p_dev->platform), 1, &revision_id);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f107 020d 	add.w	r2, r7, #13
 80083f0:	2101      	movs	r1, #1
 80083f2:	4618      	mov	r0, r3
 80083f4:	f7f9 faae 	bl	8001954 <VL53L5CX_RdByte>
 80083f8:	4603      	mov	r3, r0
 80083fa:	461a      	mov	r2, r3
 80083fc:	7bfb      	ldrb	r3, [r7, #15]
 80083fe:	4313      	orrs	r3, r2
 8008400:	73fb      	strb	r3, [r7, #15]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2202      	movs	r2, #2
 8008406:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800840a:	4618      	mov	r0, r3
 800840c:	f7f9 fac0 	bl	8001990 <VL53L5CX_WrByte>
 8008410:	4603      	mov	r3, r0
 8008412:	461a      	mov	r2, r3
 8008414:	7bfb      	ldrb	r3, [r7, #15]
 8008416:	4313      	orrs	r3, r2
 8008418:	73fb      	strb	r3, [r7, #15]

	if((device_id == (uint8_t)0xF0) && (revision_id == (uint8_t)0x02))
 800841a:	7bbb      	ldrb	r3, [r7, #14]
 800841c:	2bf0      	cmp	r3, #240	@ 0xf0
 800841e:	d106      	bne.n	800842e <vl53l5cx_is_alive+0x82>
 8008420:	7b7b      	ldrb	r3, [r7, #13]
 8008422:	2b02      	cmp	r3, #2
 8008424:	d103      	bne.n	800842e <vl53l5cx_is_alive+0x82>
	{
		*p_is_alive = 1;
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	2201      	movs	r2, #1
 800842a:	701a      	strb	r2, [r3, #0]
 800842c:	e002      	b.n	8008434 <vl53l5cx_is_alive+0x88>
	}
	else
	{
		*p_is_alive = 0;
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	2200      	movs	r2, #0
 8008432:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8008434:	7bfb      	ldrb	r3, [r7, #15]
}
 8008436:	4618      	mov	r0, r3
 8008438:	3710      	adds	r7, #16
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
	...

08008440 <vl53l5cx_init>:

uint8_t vl53l5cx_init(
		VL53L5CX_Configuration		*p_dev)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b08a      	sub	sp, #40	@ 0x28
 8008444:	af04      	add	r7, sp, #16
 8008446:	6078      	str	r0, [r7, #4]
	uint8_t tmp, status = VL53L5CX_STATUS_OK;
 8008448:	2300      	movs	r3, #0
 800844a:	75fb      	strb	r3, [r7, #23]
	uint8_t pipe_ctrl[] = {VL53L5CX_NB_TARGET_PER_ZONE, 0x00, 0x01, 0x00};
 800844c:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8008450:	613b      	str	r3, [r7, #16]
	uint32_t single_range = 0x01;
 8008452:	2301      	movs	r3, #1
 8008454:	60fb      	str	r3, [r7, #12]

	p_dev->default_xtalk = (uint8_t*)VL53L5CX_DEFAULT_XTALK;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	4a80      	ldr	r2, [pc, #512]	@ (800865c <vl53l5cx_init+0x21c>)
 800845a:	60da      	str	r2, [r3, #12]
	p_dev->default_configuration = (uint8_t*)VL53L5CX_DEFAULT_CONFIGURATION;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	4a80      	ldr	r2, [pc, #512]	@ (8008660 <vl53l5cx_init+0x220>)
 8008460:	609a      	str	r2, [r3, #8]
	p_dev->is_auto_stop_enabled = (uint8_t)0x0;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2200      	movs	r2, #0
 8008466:	f883 2aac 	strb.w	r2, [r3, #2732]	@ 0xaac

	/* SW reboot sequence */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2200      	movs	r2, #0
 800846e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8008472:	4618      	mov	r0, r3
 8008474:	f7f9 fa8c 	bl	8001990 <VL53L5CX_WrByte>
 8008478:	4603      	mov	r3, r0
 800847a:	461a      	mov	r2, r3
 800847c:	7dfb      	ldrb	r3, [r7, #23]
 800847e:	4313      	orrs	r3, r2
 8008480:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0009, 0x04);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2204      	movs	r2, #4
 8008486:	2109      	movs	r1, #9
 8008488:	4618      	mov	r0, r3
 800848a:	f7f9 fa81 	bl	8001990 <VL53L5CX_WrByte>
 800848e:	4603      	mov	r3, r0
 8008490:	461a      	mov	r2, r3
 8008492:	7dfb      	ldrb	r3, [r7, #23]
 8008494:	4313      	orrs	r3, r2
 8008496:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x000F, 0x40);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2240      	movs	r2, #64	@ 0x40
 800849c:	210f      	movs	r1, #15
 800849e:	4618      	mov	r0, r3
 80084a0:	f7f9 fa76 	bl	8001990 <VL53L5CX_WrByte>
 80084a4:	4603      	mov	r3, r0
 80084a6:	461a      	mov	r2, r3
 80084a8:	7dfb      	ldrb	r3, [r7, #23]
 80084aa:	4313      	orrs	r3, r2
 80084ac:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x000A, 0x03);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2203      	movs	r2, #3
 80084b2:	210a      	movs	r1, #10
 80084b4:	4618      	mov	r0, r3
 80084b6:	f7f9 fa6b 	bl	8001990 <VL53L5CX_WrByte>
 80084ba:	4603      	mov	r3, r0
 80084bc:	461a      	mov	r2, r3
 80084be:	7dfb      	ldrb	r3, [r7, #23]
 80084c0:	4313      	orrs	r3, r2
 80084c2:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_RdByte(&(p_dev->platform), 0x7FFF, &tmp);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f107 0216 	add.w	r2, r7, #22
 80084ca:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80084ce:	4618      	mov	r0, r3
 80084d0:	f7f9 fa40 	bl	8001954 <VL53L5CX_RdByte>
 80084d4:	4603      	mov	r3, r0
 80084d6:	461a      	mov	r2, r3
 80084d8:	7dfb      	ldrb	r3, [r7, #23]
 80084da:	4313      	orrs	r3, r2
 80084dc:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x000C, 0x01);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2201      	movs	r2, #1
 80084e2:	210c      	movs	r1, #12
 80084e4:	4618      	mov	r0, r3
 80084e6:	f7f9 fa53 	bl	8001990 <VL53L5CX_WrByte>
 80084ea:	4603      	mov	r3, r0
 80084ec:	461a      	mov	r2, r3
 80084ee:	7dfb      	ldrb	r3, [r7, #23]
 80084f0:	4313      	orrs	r3, r2
 80084f2:	75fb      	strb	r3, [r7, #23]

	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0101, 0x00);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2200      	movs	r2, #0
 80084f8:	f240 1101 	movw	r1, #257	@ 0x101
 80084fc:	4618      	mov	r0, r3
 80084fe:	f7f9 fa47 	bl	8001990 <VL53L5CX_WrByte>
 8008502:	4603      	mov	r3, r0
 8008504:	461a      	mov	r2, r3
 8008506:	7dfb      	ldrb	r3, [r7, #23]
 8008508:	4313      	orrs	r3, r2
 800850a:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0102, 0x00);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2200      	movs	r2, #0
 8008510:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8008514:	4618      	mov	r0, r3
 8008516:	f7f9 fa3b 	bl	8001990 <VL53L5CX_WrByte>
 800851a:	4603      	mov	r3, r0
 800851c:	461a      	mov	r2, r3
 800851e:	7dfb      	ldrb	r3, [r7, #23]
 8008520:	4313      	orrs	r3, r2
 8008522:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x010A, 0x01);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2201      	movs	r2, #1
 8008528:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 800852c:	4618      	mov	r0, r3
 800852e:	f7f9 fa2f 	bl	8001990 <VL53L5CX_WrByte>
 8008532:	4603      	mov	r3, r0
 8008534:	461a      	mov	r2, r3
 8008536:	7dfb      	ldrb	r3, [r7, #23]
 8008538:	4313      	orrs	r3, r2
 800853a:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x4002, 0x01);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2201      	movs	r2, #1
 8008540:	f244 0102 	movw	r1, #16386	@ 0x4002
 8008544:	4618      	mov	r0, r3
 8008546:	f7f9 fa23 	bl	8001990 <VL53L5CX_WrByte>
 800854a:	4603      	mov	r3, r0
 800854c:	461a      	mov	r2, r3
 800854e:	7dfb      	ldrb	r3, [r7, #23]
 8008550:	4313      	orrs	r3, r2
 8008552:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x4002, 0x00);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2200      	movs	r2, #0
 8008558:	f244 0102 	movw	r1, #16386	@ 0x4002
 800855c:	4618      	mov	r0, r3
 800855e:	f7f9 fa17 	bl	8001990 <VL53L5CX_WrByte>
 8008562:	4603      	mov	r3, r0
 8008564:	461a      	mov	r2, r3
 8008566:	7dfb      	ldrb	r3, [r7, #23]
 8008568:	4313      	orrs	r3, r2
 800856a:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x010A, 0x03);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2203      	movs	r2, #3
 8008570:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8008574:	4618      	mov	r0, r3
 8008576:	f7f9 fa0b 	bl	8001990 <VL53L5CX_WrByte>
 800857a:	4603      	mov	r3, r0
 800857c:	461a      	mov	r2, r3
 800857e:	7dfb      	ldrb	r3, [r7, #23]
 8008580:	4313      	orrs	r3, r2
 8008582:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0103, 0x01);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2201      	movs	r2, #1
 8008588:	f240 1103 	movw	r1, #259	@ 0x103
 800858c:	4618      	mov	r0, r3
 800858e:	f7f9 f9ff 	bl	8001990 <VL53L5CX_WrByte>
 8008592:	4603      	mov	r3, r0
 8008594:	461a      	mov	r2, r3
 8008596:	7dfb      	ldrb	r3, [r7, #23]
 8008598:	4313      	orrs	r3, r2
 800859a:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x000C, 0x00);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2200      	movs	r2, #0
 80085a0:	210c      	movs	r1, #12
 80085a2:	4618      	mov	r0, r3
 80085a4:	f7f9 f9f4 	bl	8001990 <VL53L5CX_WrByte>
 80085a8:	4603      	mov	r3, r0
 80085aa:	461a      	mov	r2, r3
 80085ac:	7dfb      	ldrb	r3, [r7, #23]
 80085ae:	4313      	orrs	r3, r2
 80085b0:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x000F, 0x43);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2243      	movs	r2, #67	@ 0x43
 80085b6:	210f      	movs	r1, #15
 80085b8:	4618      	mov	r0, r3
 80085ba:	f7f9 f9e9 	bl	8001990 <VL53L5CX_WrByte>
 80085be:	4603      	mov	r3, r0
 80085c0:	461a      	mov	r2, r3
 80085c2:	7dfb      	ldrb	r3, [r7, #23]
 80085c4:	4313      	orrs	r3, r2
 80085c6:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WaitMs(&(p_dev->platform), 1);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2101      	movs	r1, #1
 80085cc:	4618      	mov	r0, r3
 80085ce:	f7f9 fa75 	bl	8001abc <VL53L5CX_WaitMs>
 80085d2:	4603      	mov	r3, r0
 80085d4:	461a      	mov	r2, r3
 80085d6:	7dfb      	ldrb	r3, [r7, #23]
 80085d8:	4313      	orrs	r3, r2
 80085da:	75fb      	strb	r3, [r7, #23]

	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x000F, 0x40);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2240      	movs	r2, #64	@ 0x40
 80085e0:	210f      	movs	r1, #15
 80085e2:	4618      	mov	r0, r3
 80085e4:	f7f9 f9d4 	bl	8001990 <VL53L5CX_WrByte>
 80085e8:	4603      	mov	r3, r0
 80085ea:	461a      	mov	r2, r3
 80085ec:	7dfb      	ldrb	r3, [r7, #23]
 80085ee:	4313      	orrs	r3, r2
 80085f0:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x000A, 0x01);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2201      	movs	r2, #1
 80085f6:	210a      	movs	r1, #10
 80085f8:	4618      	mov	r0, r3
 80085fa:	f7f9 f9c9 	bl	8001990 <VL53L5CX_WrByte>
 80085fe:	4603      	mov	r3, r0
 8008600:	461a      	mov	r2, r3
 8008602:	7dfb      	ldrb	r3, [r7, #23]
 8008604:	4313      	orrs	r3, r2
 8008606:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WaitMs(&(p_dev->platform), 100);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2164      	movs	r1, #100	@ 0x64
 800860c:	4618      	mov	r0, r3
 800860e:	f7f9 fa55 	bl	8001abc <VL53L5CX_WaitMs>
 8008612:	4603      	mov	r3, r0
 8008614:	461a      	mov	r2, r3
 8008616:	7dfb      	ldrb	r3, [r7, #23]
 8008618:	4313      	orrs	r3, r2
 800861a:	75fb      	strb	r3, [r7, #23]

	/* Wait for sensor booted (several ms required to get sensor ready ) */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2200      	movs	r2, #0
 8008620:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8008624:	4618      	mov	r0, r3
 8008626:	f7f9 f9b3 	bl	8001990 <VL53L5CX_WrByte>
 800862a:	4603      	mov	r3, r0
 800862c:	461a      	mov	r2, r3
 800862e:	7dfb      	ldrb	r3, [r7, #23]
 8008630:	4313      	orrs	r3, r2
 8008632:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x06, 0xff, 1);
 8008634:	2301      	movs	r3, #1
 8008636:	9301      	str	r3, [sp, #4]
 8008638:	23ff      	movs	r3, #255	@ 0xff
 800863a:	9300      	str	r3, [sp, #0]
 800863c:	2306      	movs	r3, #6
 800863e:	2200      	movs	r2, #0
 8008640:	2101      	movs	r1, #1
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f7ff fb08 	bl	8007c58 <_vl53l5cx_poll_for_answer>
 8008648:	4603      	mov	r3, r0
 800864a:	461a      	mov	r2, r3
 800864c:	7dfb      	ldrb	r3, [r7, #23]
 800864e:	4313      	orrs	r3, r2
 8008650:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 8008652:	7dfb      	ldrb	r3, [r7, #23]
 8008654:	2b00      	cmp	r3, #0
 8008656:	f040 8354 	bne.w	8008d02 <vl53l5cx_init+0x8c2>
 800865a:	e003      	b.n	8008664 <vl53l5cx_init+0x224>
 800865c:	080220a4 	.word	0x080220a4
 8008660:	08021cd8 	.word	0x08021cd8
		goto exit;
	}

	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x000E, 0x01);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2201      	movs	r2, #1
 8008668:	210e      	movs	r1, #14
 800866a:	4618      	mov	r0, r3
 800866c:	f7f9 f990 	bl	8001990 <VL53L5CX_WrByte>
 8008670:	4603      	mov	r3, r0
 8008672:	461a      	mov	r2, r3
 8008674:	7dfb      	ldrb	r3, [r7, #23]
 8008676:	4313      	orrs	r3, r2
 8008678:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2202      	movs	r2, #2
 800867e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8008682:	4618      	mov	r0, r3
 8008684:	f7f9 f984 	bl	8001990 <VL53L5CX_WrByte>
 8008688:	4603      	mov	r3, r0
 800868a:	461a      	mov	r2, r3
 800868c:	7dfb      	ldrb	r3, [r7, #23]
 800868e:	4313      	orrs	r3, r2
 8008690:	75fb      	strb	r3, [r7, #23]

	/* Enable FW access */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x03, 0x0D);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	220d      	movs	r2, #13
 8008696:	2103      	movs	r1, #3
 8008698:	4618      	mov	r0, r3
 800869a:	f7f9 f979 	bl	8001990 <VL53L5CX_WrByte>
 800869e:	4603      	mov	r3, r0
 80086a0:	461a      	mov	r2, r3
 80086a2:	7dfb      	ldrb	r3, [r7, #23]
 80086a4:	4313      	orrs	r3, r2
 80086a6:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2201      	movs	r2, #1
 80086ac:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80086b0:	4618      	mov	r0, r3
 80086b2:	f7f9 f96d 	bl	8001990 <VL53L5CX_WrByte>
 80086b6:	4603      	mov	r3, r0
 80086b8:	461a      	mov	r2, r3
 80086ba:	7dfb      	ldrb	r3, [r7, #23]
 80086bc:	4313      	orrs	r3, r2
 80086be:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 80086c0:	2310      	movs	r3, #16
 80086c2:	9301      	str	r3, [sp, #4]
 80086c4:	2310      	movs	r3, #16
 80086c6:	9300      	str	r3, [sp, #0]
 80086c8:	2321      	movs	r3, #33	@ 0x21
 80086ca:	2200      	movs	r2, #0
 80086cc:	2101      	movs	r1, #1
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f7ff fac2 	bl	8007c58 <_vl53l5cx_poll_for_answer>
 80086d4:	4603      	mov	r3, r0
 80086d6:	461a      	mov	r2, r3
 80086d8:	7dfb      	ldrb	r3, [r7, #23]
 80086da:	4313      	orrs	r3, r2
 80086dc:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2200      	movs	r2, #0
 80086e2:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80086e6:	4618      	mov	r0, r3
 80086e8:	f7f9 f952 	bl	8001990 <VL53L5CX_WrByte>
 80086ec:	4603      	mov	r3, r0
 80086ee:	461a      	mov	r2, r3
 80086f0:	7dfb      	ldrb	r3, [r7, #23]
 80086f2:	4313      	orrs	r3, r2
 80086f4:	75fb      	strb	r3, [r7, #23]

	/* Enable host access to GO1 */
	status |= VL53L5CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f107 0216 	add.w	r2, r7, #22
 80086fc:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8008700:	4618      	mov	r0, r3
 8008702:	f7f9 f927 	bl	8001954 <VL53L5CX_RdByte>
 8008706:	4603      	mov	r3, r0
 8008708:	461a      	mov	r2, r3
 800870a:	7dfb      	ldrb	r3, [r7, #23]
 800870c:	4313      	orrs	r3, r2
 800870e:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0C, 0x01);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2201      	movs	r2, #1
 8008714:	210c      	movs	r1, #12
 8008716:	4618      	mov	r0, r3
 8008718:	f7f9 f93a 	bl	8001990 <VL53L5CX_WrByte>
 800871c:	4603      	mov	r3, r0
 800871e:	461a      	mov	r2, r3
 8008720:	7dfb      	ldrb	r3, [r7, #23]
 8008722:	4313      	orrs	r3, r2
 8008724:	75fb      	strb	r3, [r7, #23]

	/* Power ON status */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2200      	movs	r2, #0
 800872a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800872e:	4618      	mov	r0, r3
 8008730:	f7f9 f92e 	bl	8001990 <VL53L5CX_WrByte>
 8008734:	4603      	mov	r3, r0
 8008736:	461a      	mov	r2, r3
 8008738:	7dfb      	ldrb	r3, [r7, #23]
 800873a:	4313      	orrs	r3, r2
 800873c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x101, 0x00);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2200      	movs	r2, #0
 8008742:	f240 1101 	movw	r1, #257	@ 0x101
 8008746:	4618      	mov	r0, r3
 8008748:	f7f9 f922 	bl	8001990 <VL53L5CX_WrByte>
 800874c:	4603      	mov	r3, r0
 800874e:	461a      	mov	r2, r3
 8008750:	7dfb      	ldrb	r3, [r7, #23]
 8008752:	4313      	orrs	r3, r2
 8008754:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x102, 0x00);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2200      	movs	r2, #0
 800875a:	f44f 7181 	mov.w	r1, #258	@ 0x102
 800875e:	4618      	mov	r0, r3
 8008760:	f7f9 f916 	bl	8001990 <VL53L5CX_WrByte>
 8008764:	4603      	mov	r3, r0
 8008766:	461a      	mov	r2, r3
 8008768:	7dfb      	ldrb	r3, [r7, #23]
 800876a:	4313      	orrs	r3, r2
 800876c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x010A, 0x01);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2201      	movs	r2, #1
 8008772:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8008776:	4618      	mov	r0, r3
 8008778:	f7f9 f90a 	bl	8001990 <VL53L5CX_WrByte>
 800877c:	4603      	mov	r3, r0
 800877e:	461a      	mov	r2, r3
 8008780:	7dfb      	ldrb	r3, [r7, #23]
 8008782:	4313      	orrs	r3, r2
 8008784:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x4002, 0x01);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2201      	movs	r2, #1
 800878a:	f244 0102 	movw	r1, #16386	@ 0x4002
 800878e:	4618      	mov	r0, r3
 8008790:	f7f9 f8fe 	bl	8001990 <VL53L5CX_WrByte>
 8008794:	4603      	mov	r3, r0
 8008796:	461a      	mov	r2, r3
 8008798:	7dfb      	ldrb	r3, [r7, #23]
 800879a:	4313      	orrs	r3, r2
 800879c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x4002, 0x00);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2200      	movs	r2, #0
 80087a2:	f244 0102 	movw	r1, #16386	@ 0x4002
 80087a6:	4618      	mov	r0, r3
 80087a8:	f7f9 f8f2 	bl	8001990 <VL53L5CX_WrByte>
 80087ac:	4603      	mov	r3, r0
 80087ae:	461a      	mov	r2, r3
 80087b0:	7dfb      	ldrb	r3, [r7, #23]
 80087b2:	4313      	orrs	r3, r2
 80087b4:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x010A, 0x03);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2203      	movs	r2, #3
 80087ba:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 80087be:	4618      	mov	r0, r3
 80087c0:	f7f9 f8e6 	bl	8001990 <VL53L5CX_WrByte>
 80087c4:	4603      	mov	r3, r0
 80087c6:	461a      	mov	r2, r3
 80087c8:	7dfb      	ldrb	r3, [r7, #23]
 80087ca:	4313      	orrs	r3, r2
 80087cc:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x103, 0x01);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2201      	movs	r2, #1
 80087d2:	f240 1103 	movw	r1, #259	@ 0x103
 80087d6:	4618      	mov	r0, r3
 80087d8:	f7f9 f8da 	bl	8001990 <VL53L5CX_WrByte>
 80087dc:	4603      	mov	r3, r0
 80087de:	461a      	mov	r2, r3
 80087e0:	7dfb      	ldrb	r3, [r7, #23]
 80087e2:	4313      	orrs	r3, r2
 80087e4:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x400F, 0x00);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2200      	movs	r2, #0
 80087ea:	f244 010f 	movw	r1, #16399	@ 0x400f
 80087ee:	4618      	mov	r0, r3
 80087f0:	f7f9 f8ce 	bl	8001990 <VL53L5CX_WrByte>
 80087f4:	4603      	mov	r3, r0
 80087f6:	461a      	mov	r2, r3
 80087f8:	7dfb      	ldrb	r3, [r7, #23]
 80087fa:	4313      	orrs	r3, r2
 80087fc:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x21A, 0x43);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2243      	movs	r2, #67	@ 0x43
 8008802:	f240 211a 	movw	r1, #538	@ 0x21a
 8008806:	4618      	mov	r0, r3
 8008808:	f7f9 f8c2 	bl	8001990 <VL53L5CX_WrByte>
 800880c:	4603      	mov	r3, r0
 800880e:	461a      	mov	r2, r3
 8008810:	7dfb      	ldrb	r3, [r7, #23]
 8008812:	4313      	orrs	r3, r2
 8008814:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x21A, 0x03);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2203      	movs	r2, #3
 800881a:	f240 211a 	movw	r1, #538	@ 0x21a
 800881e:	4618      	mov	r0, r3
 8008820:	f7f9 f8b6 	bl	8001990 <VL53L5CX_WrByte>
 8008824:	4603      	mov	r3, r0
 8008826:	461a      	mov	r2, r3
 8008828:	7dfb      	ldrb	r3, [r7, #23]
 800882a:	4313      	orrs	r3, r2
 800882c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x21A, 0x01);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2201      	movs	r2, #1
 8008832:	f240 211a 	movw	r1, #538	@ 0x21a
 8008836:	4618      	mov	r0, r3
 8008838:	f7f9 f8aa 	bl	8001990 <VL53L5CX_WrByte>
 800883c:	4603      	mov	r3, r0
 800883e:	461a      	mov	r2, r3
 8008840:	7dfb      	ldrb	r3, [r7, #23]
 8008842:	4313      	orrs	r3, r2
 8008844:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x21A, 0x00);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2200      	movs	r2, #0
 800884a:	f240 211a 	movw	r1, #538	@ 0x21a
 800884e:	4618      	mov	r0, r3
 8008850:	f7f9 f89e 	bl	8001990 <VL53L5CX_WrByte>
 8008854:	4603      	mov	r3, r0
 8008856:	461a      	mov	r2, r3
 8008858:	7dfb      	ldrb	r3, [r7, #23]
 800885a:	4313      	orrs	r3, r2
 800885c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x219, 0x00);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2200      	movs	r2, #0
 8008862:	f240 2119 	movw	r1, #537	@ 0x219
 8008866:	4618      	mov	r0, r3
 8008868:	f7f9 f892 	bl	8001990 <VL53L5CX_WrByte>
 800886c:	4603      	mov	r3, r0
 800886e:	461a      	mov	r2, r3
 8008870:	7dfb      	ldrb	r3, [r7, #23]
 8008872:	4313      	orrs	r3, r2
 8008874:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x21B, 0x00);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2200      	movs	r2, #0
 800887a:	f240 211b 	movw	r1, #539	@ 0x21b
 800887e:	4618      	mov	r0, r3
 8008880:	f7f9 f886 	bl	8001990 <VL53L5CX_WrByte>
 8008884:	4603      	mov	r3, r0
 8008886:	461a      	mov	r2, r3
 8008888:	7dfb      	ldrb	r3, [r7, #23]
 800888a:	4313      	orrs	r3, r2
 800888c:	75fb      	strb	r3, [r7, #23]

	/* Wake up MCU */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2200      	movs	r2, #0
 8008892:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8008896:	4618      	mov	r0, r3
 8008898:	f7f9 f87a 	bl	8001990 <VL53L5CX_WrByte>
 800889c:	4603      	mov	r3, r0
 800889e:	461a      	mov	r2, r3
 80088a0:	7dfb      	ldrb	r3, [r7, #23]
 80088a2:	4313      	orrs	r3, r2
 80088a4:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f107 0216 	add.w	r2, r7, #22
 80088ac:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80088b0:	4618      	mov	r0, r3
 80088b2:	f7f9 f84f 	bl	8001954 <VL53L5CX_RdByte>
 80088b6:	4603      	mov	r3, r0
 80088b8:	461a      	mov	r2, r3
 80088ba:	7dfb      	ldrb	r3, [r7, #23]
 80088bc:	4313      	orrs	r3, r2
 80088be:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0C, 0x00);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2200      	movs	r2, #0
 80088c4:	210c      	movs	r1, #12
 80088c6:	4618      	mov	r0, r3
 80088c8:	f7f9 f862 	bl	8001990 <VL53L5CX_WrByte>
 80088cc:	4603      	mov	r3, r0
 80088ce:	461a      	mov	r2, r3
 80088d0:	7dfb      	ldrb	r3, [r7, #23]
 80088d2:	4313      	orrs	r3, r2
 80088d4:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2201      	movs	r2, #1
 80088da:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80088de:	4618      	mov	r0, r3
 80088e0:	f7f9 f856 	bl	8001990 <VL53L5CX_WrByte>
 80088e4:	4603      	mov	r3, r0
 80088e6:	461a      	mov	r2, r3
 80088e8:	7dfb      	ldrb	r3, [r7, #23]
 80088ea:	4313      	orrs	r3, r2
 80088ec:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x20, 0x07);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2207      	movs	r2, #7
 80088f2:	2120      	movs	r1, #32
 80088f4:	4618      	mov	r0, r3
 80088f6:	f7f9 f84b 	bl	8001990 <VL53L5CX_WrByte>
 80088fa:	4603      	mov	r3, r0
 80088fc:	461a      	mov	r2, r3
 80088fe:	7dfb      	ldrb	r3, [r7, #23]
 8008900:	4313      	orrs	r3, r2
 8008902:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x20, 0x06);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2206      	movs	r2, #6
 8008908:	2120      	movs	r1, #32
 800890a:	4618      	mov	r0, r3
 800890c:	f7f9 f840 	bl	8001990 <VL53L5CX_WrByte>
 8008910:	4603      	mov	r3, r0
 8008912:	461a      	mov	r2, r3
 8008914:	7dfb      	ldrb	r3, [r7, #23]
 8008916:	4313      	orrs	r3, r2
 8008918:	75fb      	strb	r3, [r7, #23]

	/* Download FW into VL53L5 */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x09);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2209      	movs	r2, #9
 800891e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8008922:	4618      	mov	r0, r3
 8008924:	f7f9 f834 	bl	8001990 <VL53L5CX_WrByte>
 8008928:	4603      	mov	r3, r0
 800892a:	461a      	mov	r2, r3
 800892c:	7dfb      	ldrb	r3, [r7, #23]
 800892e:	4313      	orrs	r3, r2
 8008930:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrMulti(&(p_dev->platform),0,
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008938:	4ae1      	ldr	r2, [pc, #900]	@ (8008cc0 <vl53l5cx_init+0x880>)
 800893a:	2100      	movs	r1, #0
 800893c:	f7f9 f848 	bl	80019d0 <VL53L5CX_WrMulti>
 8008940:	4603      	mov	r3, r0
 8008942:	461a      	mov	r2, r3
 8008944:	7dfb      	ldrb	r3, [r7, #23]
 8008946:	4313      	orrs	r3, r2
 8008948:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L5CX_FIRMWARE[0],0x8000);
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x0a);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	220a      	movs	r2, #10
 800894e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8008952:	4618      	mov	r0, r3
 8008954:	f7f9 f81c 	bl	8001990 <VL53L5CX_WrByte>
 8008958:	4603      	mov	r3, r0
 800895a:	461a      	mov	r2, r3
 800895c:	7dfb      	ldrb	r3, [r7, #23]
 800895e:	4313      	orrs	r3, r2
 8008960:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrMulti(&(p_dev->platform),0,
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008968:	4ad6      	ldr	r2, [pc, #856]	@ (8008cc4 <vl53l5cx_init+0x884>)
 800896a:	2100      	movs	r1, #0
 800896c:	f7f9 f830 	bl	80019d0 <VL53L5CX_WrMulti>
 8008970:	4603      	mov	r3, r0
 8008972:	461a      	mov	r2, r3
 8008974:	7dfb      	ldrb	r3, [r7, #23]
 8008976:	4313      	orrs	r3, r2
 8008978:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L5CX_FIRMWARE[0x8000],0x8000);
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x0b);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	220b      	movs	r2, #11
 800897e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8008982:	4618      	mov	r0, r3
 8008984:	f7f9 f804 	bl	8001990 <VL53L5CX_WrByte>
 8008988:	4603      	mov	r3, r0
 800898a:	461a      	mov	r2, r3
 800898c:	7dfb      	ldrb	r3, [r7, #23]
 800898e:	4313      	orrs	r3, r2
 8008990:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrMulti(&(p_dev->platform),0,
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8008998:	4acb      	ldr	r2, [pc, #812]	@ (8008cc8 <vl53l5cx_init+0x888>)
 800899a:	2100      	movs	r1, #0
 800899c:	f7f9 f818 	bl	80019d0 <VL53L5CX_WrMulti>
 80089a0:	4603      	mov	r3, r0
 80089a2:	461a      	mov	r2, r3
 80089a4:	7dfb      	ldrb	r3, [r7, #23]
 80089a6:	4313      	orrs	r3, r2
 80089a8:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L5CX_FIRMWARE[0x10000],0x5000);
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2201      	movs	r2, #1
 80089ae:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80089b2:	4618      	mov	r0, r3
 80089b4:	f7f8 ffec 	bl	8001990 <VL53L5CX_WrByte>
 80089b8:	4603      	mov	r3, r0
 80089ba:	461a      	mov	r2, r3
 80089bc:	7dfb      	ldrb	r3, [r7, #23]
 80089be:	4313      	orrs	r3, r2
 80089c0:	75fb      	strb	r3, [r7, #23]

	/* Check if FW correctly downloaded */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2202      	movs	r2, #2
 80089c6:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80089ca:	4618      	mov	r0, r3
 80089cc:	f7f8 ffe0 	bl	8001990 <VL53L5CX_WrByte>
 80089d0:	4603      	mov	r3, r0
 80089d2:	461a      	mov	r2, r3
 80089d4:	7dfb      	ldrb	r3, [r7, #23]
 80089d6:	4313      	orrs	r3, r2
 80089d8:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x03, 0x0D);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	220d      	movs	r2, #13
 80089de:	2103      	movs	r1, #3
 80089e0:	4618      	mov	r0, r3
 80089e2:	f7f8 ffd5 	bl	8001990 <VL53L5CX_WrByte>
 80089e6:	4603      	mov	r3, r0
 80089e8:	461a      	mov	r2, r3
 80089ea:	7dfb      	ldrb	r3, [r7, #23]
 80089ec:	4313      	orrs	r3, r2
 80089ee:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2201      	movs	r2, #1
 80089f4:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80089f8:	4618      	mov	r0, r3
 80089fa:	f7f8 ffc9 	bl	8001990 <VL53L5CX_WrByte>
 80089fe:	4603      	mov	r3, r0
 8008a00:	461a      	mov	r2, r3
 8008a02:	7dfb      	ldrb	r3, [r7, #23]
 8008a04:	4313      	orrs	r3, r2
 8008a06:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 8008a08:	2310      	movs	r3, #16
 8008a0a:	9301      	str	r3, [sp, #4]
 8008a0c:	2310      	movs	r3, #16
 8008a0e:	9300      	str	r3, [sp, #0]
 8008a10:	2321      	movs	r3, #33	@ 0x21
 8008a12:	2200      	movs	r2, #0
 8008a14:	2101      	movs	r1, #1
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f7ff f91e 	bl	8007c58 <_vl53l5cx_poll_for_answer>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	461a      	mov	r2, r3
 8008a20:	7dfb      	ldrb	r3, [r7, #23]
 8008a22:	4313      	orrs	r3, r2
 8008a24:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 8008a26:	7dfb      	ldrb	r3, [r7, #23]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	f040 816c 	bne.w	8008d06 <vl53l5cx_init+0x8c6>
		goto exit;
	}

	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2200      	movs	r2, #0
 8008a32:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8008a36:	4618      	mov	r0, r3
 8008a38:	f7f8 ffaa 	bl	8001990 <VL53L5CX_WrByte>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	461a      	mov	r2, r3
 8008a40:	7dfb      	ldrb	r3, [r7, #23]
 8008a42:	4313      	orrs	r3, r2
 8008a44:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f107 0216 	add.w	r2, r7, #22
 8008a4c:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8008a50:	4618      	mov	r0, r3
 8008a52:	f7f8 ff7f 	bl	8001954 <VL53L5CX_RdByte>
 8008a56:	4603      	mov	r3, r0
 8008a58:	461a      	mov	r2, r3
 8008a5a:	7dfb      	ldrb	r3, [r7, #23]
 8008a5c:	4313      	orrs	r3, r2
 8008a5e:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0C, 0x01);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2201      	movs	r2, #1
 8008a64:	210c      	movs	r1, #12
 8008a66:	4618      	mov	r0, r3
 8008a68:	f7f8 ff92 	bl	8001990 <VL53L5CX_WrByte>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	461a      	mov	r2, r3
 8008a70:	7dfb      	ldrb	r3, [r7, #23]
 8008a72:	4313      	orrs	r3, r2
 8008a74:	75fb      	strb	r3, [r7, #23]

	/* Reset MCU and wait boot */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f7f8 ff86 	bl	8001990 <VL53L5CX_WrByte>
 8008a84:	4603      	mov	r3, r0
 8008a86:	461a      	mov	r2, r3
 8008a88:	7dfb      	ldrb	r3, [r7, #23]
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x114, 0x00);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2200      	movs	r2, #0
 8008a92:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8008a96:	4618      	mov	r0, r3
 8008a98:	f7f8 ff7a 	bl	8001990 <VL53L5CX_WrByte>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	7dfb      	ldrb	r3, [r7, #23]
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x115, 0x00);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	f240 1115 	movw	r1, #277	@ 0x115
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f7f8 ff6e 	bl	8001990 <VL53L5CX_WrByte>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	7dfb      	ldrb	r3, [r7, #23]
 8008aba:	4313      	orrs	r3, r2
 8008abc:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x116, 0x42);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2242      	movs	r2, #66	@ 0x42
 8008ac2:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f7f8 ff62 	bl	8001990 <VL53L5CX_WrByte>
 8008acc:	4603      	mov	r3, r0
 8008ace:	461a      	mov	r2, r3
 8008ad0:	7dfb      	ldrb	r3, [r7, #23]
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x117, 0x00);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	f240 1117 	movw	r1, #279	@ 0x117
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f7f8 ff56 	bl	8001990 <VL53L5CX_WrByte>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	461a      	mov	r2, r3
 8008ae8:	7dfb      	ldrb	r3, [r7, #23]
 8008aea:	4313      	orrs	r3, r2
 8008aec:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0B, 0x00);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2200      	movs	r2, #0
 8008af2:	210b      	movs	r1, #11
 8008af4:	4618      	mov	r0, r3
 8008af6:	f7f8 ff4b 	bl	8001990 <VL53L5CX_WrByte>
 8008afa:	4603      	mov	r3, r0
 8008afc:	461a      	mov	r2, r3
 8008afe:	7dfb      	ldrb	r3, [r7, #23]
 8008b00:	4313      	orrs	r3, r2
 8008b02:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f107 0216 	add.w	r2, r7, #22
 8008b0a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f7f8 ff20 	bl	8001954 <VL53L5CX_RdByte>
 8008b14:	4603      	mov	r3, r0
 8008b16:	461a      	mov	r2, r3
 8008b18:	7dfb      	ldrb	r3, [r7, #23]
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0C, 0x00);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2200      	movs	r2, #0
 8008b22:	210c      	movs	r1, #12
 8008b24:	4618      	mov	r0, r3
 8008b26:	f7f8 ff33 	bl	8001990 <VL53L5CX_WrByte>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	461a      	mov	r2, r3
 8008b2e:	7dfb      	ldrb	r3, [r7, #23]
 8008b30:	4313      	orrs	r3, r2
 8008b32:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0B, 0x01);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2201      	movs	r2, #1
 8008b38:	210b      	movs	r1, #11
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7f8 ff28 	bl	8001990 <VL53L5CX_WrByte>
 8008b40:	4603      	mov	r3, r0
 8008b42:	461a      	mov	r2, r3
 8008b44:	7dfb      	ldrb	r3, [r7, #23]
 8008b46:	4313      	orrs	r3, r2
 8008b48:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_mcu_boot(p_dev);
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f7ff f8d4 	bl	8007cf8 <_vl53l5cx_poll_for_mcu_boot>
 8008b50:	4603      	mov	r3, r0
 8008b52:	461a      	mov	r2, r3
 8008b54:	7dfb      	ldrb	r3, [r7, #23]
 8008b56:	4313      	orrs	r3, r2
 8008b58:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 8008b5a:	7dfb      	ldrb	r3, [r7, #23]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	f040 80d4 	bne.w	8008d0a <vl53l5cx_init+0x8ca>
		goto exit;
	}

	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2202      	movs	r2, #2
 8008b66:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f7f8 ff10 	bl	8001990 <VL53L5CX_WrByte>
 8008b70:	4603      	mov	r3, r0
 8008b72:	461a      	mov	r2, r3
 8008b74:	7dfb      	ldrb	r3, [r7, #23]
 8008b76:	4313      	orrs	r3, r2
 8008b78:	75fb      	strb	r3, [r7, #23]

	/* Get offset NVM data and store them into the offset buffer */
	status |= VL53L5CX_WrMulti(&(p_dev->platform), 0x2fd8,
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	2328      	movs	r3, #40	@ 0x28
 8008b7e:	4a53      	ldr	r2, [pc, #332]	@ (8008ccc <vl53l5cx_init+0x88c>)
 8008b80:	f642 71d8 	movw	r1, #12248	@ 0x2fd8
 8008b84:	f7f8 ff24 	bl	80019d0 <VL53L5CX_WrMulti>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	7dfb      	ldrb	r3, [r7, #23]
 8008b8e:	4313      	orrs	r3, r2
 8008b90:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)VL53L5CX_GET_NVM_CMD, sizeof(VL53L5CX_GET_NVM_CMD));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 0,
 8008b92:	2302      	movs	r3, #2
 8008b94:	9301      	str	r3, [sp, #4]
 8008b96:	23ff      	movs	r3, #255	@ 0xff
 8008b98:	9300      	str	r3, [sp, #0]
 8008b9a:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	2104      	movs	r1, #4
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f7ff f858 	bl	8007c58 <_vl53l5cx_poll_for_answer>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	461a      	mov	r2, r3
 8008bac:	7dfb      	ldrb	r3, [r7, #23]
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	75fb      	strb	r3, [r7, #23]
		VL53L5CX_UI_CMD_STATUS, 0xff, 2);
	status |= VL53L5CX_RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8008bb2:	6878      	ldr	r0, [r7, #4]
		p_dev->temp_buffer, VL53L5CX_NVM_DATA_SIZE);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
	status |= VL53L5CX_RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8008bba:	f44f 73f6 	mov.w	r3, #492	@ 0x1ec
 8008bbe:	f642 4104 	movw	r1, #11268	@ 0x2c04
 8008bc2:	f7f8 ff25 	bl	8001a10 <VL53L5CX_RdMulti>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	461a      	mov	r2, r3
 8008bca:	7dfb      	ldrb	r3, [r7, #23]
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(p_dev->offset_data, p_dev->temp_buffer,
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f103 0010 	add.w	r0, r3, #16
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bdc:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8008be0:	4619      	mov	r1, r3
 8008be2:	f001 fcae 	bl	800a542 <memcpy>
		VL53L5CX_OFFSET_BUFFER_SIZE);
	status |= _vl53l5cx_send_offset_data(p_dev, VL53L5CX_RESOLUTION_4X4);
 8008be6:	2110      	movs	r1, #16
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f7ff f8c7 	bl	8007d7c <_vl53l5cx_send_offset_data>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	461a      	mov	r2, r3
 8008bf2:	7dfb      	ldrb	r3, [r7, #23]
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	75fb      	strb	r3, [r7, #23]

	/* Set default Xtalk shape. Send Xtalk to sensor */
	(void)memcpy(p_dev->xtalk_data, (uint8_t*)VL53L5CX_DEFAULT_XTALK,
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8008bfe:	4a34      	ldr	r2, [pc, #208]	@ (8008cd0 <vl53l5cx_init+0x890>)
 8008c00:	4618      	mov	r0, r3
 8008c02:	4611      	mov	r1, r2
 8008c04:	f44f 7342 	mov.w	r3, #776	@ 0x308
 8008c08:	461a      	mov	r2, r3
 8008c0a:	f001 fc9a 	bl	800a542 <memcpy>
		VL53L5CX_XTALK_BUFFER_SIZE);
	status |= _vl53l5cx_send_xtalk_data(p_dev, VL53L5CX_RESOLUTION_4X4);
 8008c0e:	2110      	movs	r1, #16
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f7ff fa7f 	bl	8008114 <_vl53l5cx_send_xtalk_data>
 8008c16:	4603      	mov	r3, r0
 8008c18:	461a      	mov	r2, r3
 8008c1a:	7dfb      	ldrb	r3, [r7, #23]
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	75fb      	strb	r3, [r7, #23]

	/* Send default configuration to VL53L5CX firmware */
	status |= VL53L5CX_WrMulti(&(p_dev->platform), 0x2c34,
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	689a      	ldr	r2, [r3, #8]
 8008c26:	f44f 7373 	mov.w	r3, #972	@ 0x3cc
 8008c2a:	f642 4134 	movw	r1, #11316	@ 0x2c34
 8008c2e:	f7f8 fecf 	bl	80019d0 <VL53L5CX_WrMulti>
 8008c32:	4603      	mov	r3, r0
 8008c34:	461a      	mov	r2, r3
 8008c36:	7dfb      	ldrb	r3, [r7, #23]
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	75fb      	strb	r3, [r7, #23]
		p_dev->default_configuration,
		sizeof(VL53L5CX_DEFAULT_CONFIGURATION));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8008c3c:	2303      	movs	r3, #3
 8008c3e:	9301      	str	r3, [sp, #4]
 8008c40:	23ff      	movs	r3, #255	@ 0xff
 8008c42:	9300      	str	r3, [sp, #0]
 8008c44:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8008c48:	2201      	movs	r2, #1
 8008c4a:	2104      	movs	r1, #4
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f7ff f803 	bl	8007c58 <_vl53l5cx_poll_for_answer>
 8008c52:	4603      	mov	r3, r0
 8008c54:	461a      	mov	r2, r3
 8008c56:	7dfb      	ldrb	r3, [r7, #23]
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	75fb      	strb	r3, [r7, #23]
		VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)&pipe_ctrl,
 8008c5c:	f107 0110 	add.w	r1, r7, #16
 8008c60:	2304      	movs	r3, #4
 8008c62:	f64d 3280 	movw	r2, #56192	@ 0xdb80
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f000 fdbe 	bl	80097e8 <vl53l5cx_dci_write_data>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	461a      	mov	r2, r3
 8008c70:	7dfb      	ldrb	r3, [r7, #23]
 8008c72:	4313      	orrs	r3, r2
 8008c74:	75fb      	strb	r3, [r7, #23]
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
		VL53L5CX_DCI_FW_NB_TARGET, 16,
	(uint8_t*)&tmp, 1, 0x0C);
#endif

	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 8008c76:	f107 010c 	add.w	r1, r7, #12
 8008c7a:	2304      	movs	r3, #4
 8008c7c:	f64d 1264 	movw	r2, #55652	@ 0xd964
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f000 fdb1 	bl	80097e8 <vl53l5cx_dci_write_data>
 8008c86:	4603      	mov	r3, r0
 8008c88:	461a      	mov	r2, r3
 8008c8a:	7dfb      	ldrb	r3, [r7, #23]
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	75fb      	strb	r3, [r7, #23]
			VL53L5CX_DCI_SINGLE_RANGE,
			(uint16_t)sizeof(single_range));

	tmp = (uint8_t)1;
 8008c90:	2301      	movs	r3, #1
 8008c92:	75bb      	strb	r3, [r7, #22]
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
 8008c9a:	2326      	movs	r3, #38	@ 0x26
 8008c9c:	9302      	str	r3, [sp, #8]
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	9301      	str	r3, [sp, #4]
 8008ca2:	f107 0316 	add.w	r3, r7, #22
 8008ca6:	9300      	str	r3, [sp, #0]
 8008ca8:	2328      	movs	r3, #40	@ 0x28
 8008caa:	f24e 1208 	movw	r2, #57608	@ 0xe108
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 fe38 	bl	8009924 <vl53l5cx_dci_replace_data>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	461a      	mov	r2, r3
 8008cb8:	7dfb      	ldrb	r3, [r7, #23]
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	e00a      	b.n	8008cd4 <vl53l5cx_init+0x894>
 8008cbe:	bf00      	nop
 8008cc0:	0800ccd8 	.word	0x0800ccd8
 8008cc4:	08014cd8 	.word	0x08014cd8
 8008cc8:	0801ccd8 	.word	0x0801ccd8
 8008ccc:	080223ac 	.word	0x080223ac
 8008cd0:	080220a4 	.word	0x080220a4
 8008cd4:	75fb      	strb	r3, [r7, #23]
			VL53L5CX_GLARE_FILTER, 40, (uint8_t*)&tmp, 1, 0x26);
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
 8008cdc:	2325      	movs	r3, #37	@ 0x25
 8008cde:	9302      	str	r3, [sp, #8]
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	9301      	str	r3, [sp, #4]
 8008ce4:	f107 0316 	add.w	r3, r7, #22
 8008ce8:	9300      	str	r3, [sp, #0]
 8008cea:	2328      	movs	r3, #40	@ 0x28
 8008cec:	f24e 1208 	movw	r2, #57608	@ 0xe108
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f000 fe17 	bl	8009924 <vl53l5cx_dci_replace_data>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	461a      	mov	r2, r3
 8008cfa:	7dfb      	ldrb	r3, [r7, #23]
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	75fb      	strb	r3, [r7, #23]
 8008d00:	e004      	b.n	8008d0c <vl53l5cx_init+0x8cc>
		goto exit;
 8008d02:	bf00      	nop
 8008d04:	e002      	b.n	8008d0c <vl53l5cx_init+0x8cc>
		goto exit;
 8008d06:	bf00      	nop
 8008d08:	e000      	b.n	8008d0c <vl53l5cx_init+0x8cc>
		goto exit;
 8008d0a:	bf00      	nop
			VL53L5CX_GLARE_FILTER, 40, (uint8_t*)&tmp, 1, 0x25);

exit:
	return status;
 8008d0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3718      	adds	r7, #24
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}
 8008d16:	bf00      	nop

08008d18 <vl53l5cx_start_ranging>:
	return status;
}

uint8_t vl53l5cx_start_ranging(
		VL53L5CX_Configuration		*p_dev)
{
 8008d18:	b5b0      	push	{r4, r5, r7, lr}
 8008d1a:	b09c      	sub	sp, #112	@ 0x70
 8008d1c:	af02      	add	r7, sp, #8
 8008d1e:	6078      	str	r0, [r7, #4]
	uint8_t resolution, status = VL53L5CX_STATUS_OK;
 8008d20:	2300      	movs	r3, #0
 8008d22:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	uint16_t tmp;
	uint32_t i;
	uint32_t header_config[2] = {0, 0};
 8008d26:	2300      	movs	r3, #0
 8008d28:	653b      	str	r3, [r7, #80]	@ 0x50
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	657b      	str	r3, [r7, #84]	@ 0x54

	union Block_header *bh_ptr;
	uint8_t cmd[] = {0x00, 0x03, 0x00, 0x00};
 8008d2e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8008d32:	64fb      	str	r3, [r7, #76]	@ 0x4c

	status |= vl53l5cx_get_resolution(p_dev, &resolution);
 8008d34:	f107 035b 	add.w	r3, r7, #91	@ 0x5b
 8008d38:	4619      	mov	r1, r3
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f000 fbd0 	bl	80094e0 <vl53l5cx_get_resolution>
 8008d40:	4603      	mov	r3, r0
 8008d42:	461a      	mov	r2, r3
 8008d44:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	p_dev->data_read_size = 0;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2200      	movs	r2, #0
 8008d52:	605a      	str	r2, [r3, #4]
	p_dev->streamcount = 255;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	22ff      	movs	r2, #255	@ 0xff
 8008d58:	709a      	strb	r2, [r3, #2]

	/* Enable mandatory output (meta and common data) */
	uint32_t output_bh_enable[] = {
 8008d5a:	4baa      	ldr	r3, [pc, #680]	@ (8009004 <vl53l5cx_start_ranging+0x2ec>)
 8008d5c:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8008d60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008d62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00000000U,
		0x00000000U,
		0xC0000000U};

	/* Send addresses of possible output */
	uint32_t output[] ={VL53L5CX_START_BH,
 8008d66:	4ba8      	ldr	r3, [pc, #672]	@ (8009008 <vl53l5cx_start_ranging+0x2f0>)
 8008d68:	f107 040c 	add.w	r4, r7, #12
 8008d6c:	461d      	mov	r5, r3
 8008d6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008d70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008d74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d76:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008d7a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		VL53L5CX_TARGET_STATUS_BH,
		VL53L5CX_MOTION_DETECT_BH};

	/* Enable selected outputs in the 'platform.h' file */
#ifndef VL53L5CX_DISABLE_AMBIENT_PER_SPAD
	output_bh_enable[0] += (uint32_t)8;
 8008d7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d80:	3308      	adds	r3, #8
 8008d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_NB_SPADS_ENABLED
	output_bh_enable[0] += (uint32_t)16;
 8008d84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d86:	3310      	adds	r3, #16
 8008d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_NB_TARGET_DETECTED
	output_bh_enable[0] += (uint32_t)32;
 8008d8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d8c:	3320      	adds	r3, #32
 8008d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_SIGNAL_PER_SPAD
	output_bh_enable[0] += (uint32_t)64;
 8008d90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d92:	3340      	adds	r3, #64	@ 0x40
 8008d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_RANGE_SIGMA_MM
	output_bh_enable[0] += (uint32_t)128;
 8008d96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d98:	3380      	adds	r3, #128	@ 0x80
 8008d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_DISTANCE_MM
	output_bh_enable[0] += (uint32_t)256;
 8008d9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d9e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8008da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_REFLECTANCE_PERCENT
	output_bh_enable[0] += (uint32_t)512;
 8008da4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008da6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8008daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_TARGET_STATUS
	output_bh_enable[0] += (uint32_t)1024;
 8008dac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008dae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_MOTION_INDICATOR
	output_bh_enable[0] += (uint32_t)2048;
 8008db4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008db6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif

	/* Update data size */
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	663b      	str	r3, [r7, #96]	@ 0x60
 8008dc0:	e073      	b.n	8008eaa <vl53l5cx_start_ranging+0x192>
	{
		if ((output[i] == (uint8_t)0) 
 8008dc2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008dc4:	009b      	lsls	r3, r3, #2
 8008dc6:	3368      	adds	r3, #104	@ 0x68
 8008dc8:	443b      	add	r3, r7
 8008dca:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d067      	beq.n	8008ea2 <vl53l5cx_start_ranging+0x18a>
                    || ((output_bh_enable[i/(uint32_t)32]
 8008dd2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008dd4:	095b      	lsrs	r3, r3, #5
 8008dd6:	009b      	lsls	r3, r3, #2
 8008dd8:	3368      	adds	r3, #104	@ 0x68
 8008dda:	443b      	add	r3, r7
 8008ddc:	f853 2c2c 	ldr.w	r2, [r3, #-44]
                         &((uint32_t)1 << (i%(uint32_t)32))) == (uint32_t)0))
 8008de0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008de2:	f003 031f 	and.w	r3, r3, #31
 8008de6:	fa22 f303 	lsr.w	r3, r2, r3
 8008dea:	f003 0301 	and.w	r3, r3, #1
                    || ((output_bh_enable[i/(uint32_t)32]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d057      	beq.n	8008ea2 <vl53l5cx_start_ranging+0x18a>
		{
			continue;
		}

		bh_ptr = (union Block_header *)&(output[i]);
 8008df2:	f107 020c 	add.w	r2, r7, #12
 8008df6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008df8:	009b      	lsls	r3, r3, #2
 8008dfa:	4413      	add	r3, r2
 8008dfc:	65fb      	str	r3, [r7, #92]	@ 0x5c
		if (((uint8_t)bh_ptr->type >= (uint8_t)0x1) 
 8008dfe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	f003 030f 	and.w	r3, r3, #15
 8008e06:	b2db      	uxtb	r3, r3
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d03a      	beq.n	8008e82 <vl53l5cx_start_ranging+0x16a>
                    && ((uint8_t)bh_ptr->type < (uint8_t)0x0d))
 8008e0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008e0e:	781b      	ldrb	r3, [r3, #0]
 8008e10:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008e14:	b2db      	uxtb	r3, r3
 8008e16:	2b0c      	cmp	r3, #12
 8008e18:	d833      	bhi.n	8008e82 <vl53l5cx_start_ranging+0x16a>
		{
			if ((bh_ptr->idx >= (uint16_t)0x54d0) 
 8008e1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008e1c:	885b      	ldrh	r3, [r3, #2]
 8008e1e:	f245 42cf 	movw	r2, #21711	@ 0x54cf
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d910      	bls.n	8008e48 <vl53l5cx_start_ranging+0x130>
                            && (bh_ptr->idx < (uint16_t)(0x54d0 + 960)))
 8008e26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008e28:	885b      	ldrh	r3, [r3, #2]
 8008e2a:	f645 028f 	movw	r2, #22671	@ 0x588f
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d80a      	bhi.n	8008e48 <vl53l5cx_start_ranging+0x130>
			{
				bh_ptr->size = resolution;
 8008e32:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8008e36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e3a:	b299      	uxth	r1, r3
 8008e3c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008e3e:	8813      	ldrh	r3, [r2, #0]
 8008e40:	f361 130f 	bfi	r3, r1, #4, #12
 8008e44:	8013      	strh	r3, [r2, #0]
 8008e46:	e009      	b.n	8008e5c <vl53l5cx_start_ranging+0x144>
			}
			else
			{
				bh_ptr->size = (uint16_t)((uint16_t)resolution
 8008e48:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8008e4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e50:	b299      	uxth	r1, r3
 8008e52:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008e54:	8813      	ldrh	r3, [r2, #0]
 8008e56:	f361 130f 	bfi	r3, r1, #4, #12
 8008e5a:	8013      	strh	r3, [r2, #0]
                                  * (uint16_t)VL53L5CX_NB_TARGET_PER_ZONE);
			}
			p_dev->data_read_size += bh_ptr->type * bh_ptr->size;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008e62:	7812      	ldrb	r2, [r2, #0]
 8008e64:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8008e68:	b2d2      	uxtb	r2, r2
 8008e6a:	4611      	mov	r1, r2
 8008e6c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008e6e:	8812      	ldrh	r2, [r2, #0]
 8008e70:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8008e74:	b292      	uxth	r2, r2
 8008e76:	fb01 f202 	mul.w	r2, r1, r2
 8008e7a:	441a      	add	r2, r3
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	605a      	str	r2, [r3, #4]
 8008e80:	e009      	b.n	8008e96 <vl53l5cx_start_ranging+0x17e>
		}
		else
		{
			p_dev->data_read_size += bh_ptr->size;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	685b      	ldr	r3, [r3, #4]
 8008e86:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008e88:	8812      	ldrh	r2, [r2, #0]
 8008e8a:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8008e8e:	b292      	uxth	r2, r2
 8008e90:	441a      	add	r2, r3
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	605a      	str	r2, [r3, #4]
		}
		p_dev->data_read_size += (uint32_t)4;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	1d1a      	adds	r2, r3, #4
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	605a      	str	r2, [r3, #4]
 8008ea0:	e000      	b.n	8008ea4 <vl53l5cx_start_ranging+0x18c>
			continue;
 8008ea2:	bf00      	nop
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 8008ea4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	663b      	str	r3, [r7, #96]	@ 0x60
 8008eaa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008eac:	2b0b      	cmp	r3, #11
 8008eae:	d988      	bls.n	8008dc2 <vl53l5cx_start_ranging+0xaa>
	}
	p_dev->data_read_size += (uint32_t)24;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	f103 0218 	add.w	r2, r3, #24
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	605a      	str	r2, [r3, #4]

	status |= vl53l5cx_dci_write_data(p_dev,
 8008ebc:	f107 010c 	add.w	r1, r7, #12
 8008ec0:	2330      	movs	r3, #48	@ 0x30
 8008ec2:	f64d 1280 	movw	r2, #55680	@ 0xd980
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 fc8e 	bl	80097e8 <vl53l5cx_dci_write_data>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	461a      	mov	r2, r3
 8008ed0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint8_t*)&(output), VL53L5CX_DCI_OUTPUT_LIST,
			(uint16_t)sizeof(output));

	header_config[0] = p_dev->data_read_size;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	653b      	str	r3, [r7, #80]	@ 0x50
	header_config[1] = i + (uint32_t)1;
 8008ee0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008ee2:	3301      	adds	r3, #1
 8008ee4:	657b      	str	r3, [r7, #84]	@ 0x54

	status |= vl53l5cx_dci_write_data(p_dev,
 8008ee6:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8008eea:	2308      	movs	r3, #8
 8008eec:	f64d 1268 	movw	r2, #55656	@ 0xd968
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f000 fc79 	bl	80097e8 <vl53l5cx_dci_write_data>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	461a      	mov	r2, r3
 8008efa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008efe:	4313      	orrs	r3, r2
 8008f00:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint8_t*)&(header_config), VL53L5CX_DCI_OUTPUT_CONFIG,
			(uint16_t)sizeof(header_config));

	status |= vl53l5cx_dci_write_data(p_dev,
 8008f04:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8008f08:	2310      	movs	r3, #16
 8008f0a:	f64d 1270 	movw	r2, #55664	@ 0xd970
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f000 fc6a 	bl	80097e8 <vl53l5cx_dci_write_data>
 8008f14:	4603      	mov	r3, r0
 8008f16:	461a      	mov	r2, r3
 8008f18:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008f1c:	4313      	orrs	r3, r2
 8008f1e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint8_t*)&(output_bh_enable), VL53L5CX_DCI_OUTPUT_ENABLES,
			(uint16_t)sizeof(output_bh_enable));

	/* Start xshut bypass (interrupt mode) */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2200      	movs	r2, #0
 8008f26:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f7f8 fd30 	bl	8001990 <VL53L5CX_WrByte>
 8008f30:	4603      	mov	r3, r0
 8008f32:	461a      	mov	r2, r3
 8008f34:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008f38:	4313      	orrs	r3, r2
 8008f3a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x09, 0x05);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2205      	movs	r2, #5
 8008f42:	2109      	movs	r1, #9
 8008f44:	4618      	mov	r0, r3
 8008f46:	f7f8 fd23 	bl	8001990 <VL53L5CX_WrByte>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008f52:	4313      	orrs	r3, r2
 8008f54:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2202      	movs	r2, #2
 8008f5c:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8008f60:	4618      	mov	r0, r3
 8008f62:	f7f8 fd15 	bl	8001990 <VL53L5CX_WrByte>
 8008f66:	4603      	mov	r3, r0
 8008f68:	461a      	mov	r2, r3
 8008f6a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

	/* Start ranging session */
	status |= VL53L5CX_WrMulti(&(p_dev->platform), VL53L5CX_UI_CMD_END -
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8008f7a:	2304      	movs	r3, #4
 8008f7c:	f642 71fc 	movw	r1, #12284	@ 0x2ffc
 8008f80:	f7f8 fd26 	bl	80019d0 <VL53L5CX_WrMulti>
 8008f84:	4603      	mov	r3, r0
 8008f86:	461a      	mov	r2, r3
 8008f88:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008f8c:	4313      	orrs	r3, r2
 8008f8e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint16_t)(4 - 1), (uint8_t*)cmd, sizeof(cmd));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8008f92:	2303      	movs	r3, #3
 8008f94:	9301      	str	r3, [sp, #4]
 8008f96:	23ff      	movs	r3, #255	@ 0xff
 8008f98:	9300      	str	r3, [sp, #0]
 8008f9a:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	2104      	movs	r1, #4
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f7fe fe58 	bl	8007c58 <_vl53l5cx_poll_for_answer>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	461a      	mov	r2, r3
 8008fac:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	/* Read ui range data content and compare if data size is the correct one */
	status |= vl53l5cx_dci_read_data(p_dev,
			(uint8_t*)p_dev->temp_buffer, 0x5440, 12);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
	status |= vl53l5cx_dci_read_data(p_dev,
 8008fbc:	230c      	movs	r3, #12
 8008fbe:	f245 4240 	movw	r2, #21568	@ 0x5440
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f000 fb86 	bl	80096d4 <vl53l5cx_dci_read_data>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	461a      	mov	r2, r3
 8008fcc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008fd0:	4313      	orrs	r3, r2
 8008fd2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	(void)memcpy(&tmp, &(p_dev->temp_buffer[0x8]), sizeof(tmp));
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8008fdc:	881b      	ldrh	r3, [r3, #0]
 8008fde:	b29b      	uxth	r3, r3
 8008fe0:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
	if(tmp != p_dev->data_read_size)
 8008fe4:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8008fe8:	461a      	mov	r2, r3
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d002      	beq.n	8008ff8 <vl53l5cx_start_ranging+0x2e0>
	{
		status |= VL53L5CX_STATUS_ERROR;
 8008ff2:	23ff      	movs	r3, #255	@ 0xff
 8008ff4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	}

	return status;
 8008ff8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3768      	adds	r7, #104	@ 0x68
 8009000:	46bd      	mov	sp, r7
 8009002:	bdb0      	pop	{r4, r5, r7, pc}
 8009004:	0800cc44 	.word	0x0800cc44
 8009008:	0800cc54 	.word	0x0800cc54

0800900c <vl53l5cx_check_data_ready>:
}

uint8_t vl53l5cx_check_data_ready(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*p_isReady)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b084      	sub	sp, #16
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8009016:	2300      	movs	r3, #0
 8009018:	73fb      	strb	r3, [r7, #15]

	status |= VL53L5CX_RdMulti(&(p_dev->platform), 0x0, p_dev->temp_buffer, 4);
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
 8009022:	2304      	movs	r3, #4
 8009024:	2100      	movs	r1, #0
 8009026:	f7f8 fcf3 	bl	8001a10 <VL53L5CX_RdMulti>
 800902a:	4603      	mov	r3, r0
 800902c:	461a      	mov	r2, r3
 800902e:	7bfb      	ldrb	r3, [r7, #15]
 8009030:	4313      	orrs	r3, r2
 8009032:	73fb      	strb	r3, [r7, #15]

	if((p_dev->temp_buffer[0] != p_dev->streamcount)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f893 2500 	ldrb.w	r2, [r3, #1280]	@ 0x500
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	789b      	ldrb	r3, [r3, #2]
 800903e:	429a      	cmp	r2, r3
 8009040:	d020      	beq.n	8009084 <vl53l5cx_check_data_ready+0x78>
			&& (p_dev->temp_buffer[0] != (uint8_t)255)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
 8009048:	2bff      	cmp	r3, #255	@ 0xff
 800904a:	d01b      	beq.n	8009084 <vl53l5cx_check_data_ready+0x78>
			&& (p_dev->temp_buffer[1] == (uint8_t)0x5)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f893 3501 	ldrb.w	r3, [r3, #1281]	@ 0x501
 8009052:	2b05      	cmp	r3, #5
 8009054:	d116      	bne.n	8009084 <vl53l5cx_check_data_ready+0x78>
			&& ((p_dev->temp_buffer[2] & (uint8_t)0x5) == (uint8_t)0x5)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f893 3502 	ldrb.w	r3, [r3, #1282]	@ 0x502
 800905c:	f003 0305 	and.w	r3, r3, #5
 8009060:	2b05      	cmp	r3, #5
 8009062:	d10f      	bne.n	8009084 <vl53l5cx_check_data_ready+0x78>
			&& ((p_dev->temp_buffer[3] & (uint8_t)0x10) ==(uint8_t)0x10)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f893 3503 	ldrb.w	r3, [r3, #1283]	@ 0x503
 800906a:	f003 0310 	and.w	r3, r3, #16
 800906e:	2b00      	cmp	r3, #0
 8009070:	d008      	beq.n	8009084 <vl53l5cx_check_data_ready+0x78>
			)
	{
		*p_isReady = (uint8_t)1;
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	2201      	movs	r2, #1
 8009076:	701a      	strb	r2, [r3, #0]
		 p_dev->streamcount = p_dev->temp_buffer[0];
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f893 2500 	ldrb.w	r2, [r3, #1280]	@ 0x500
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	709a      	strb	r2, [r3, #2]
 8009082:	e00e      	b.n	80090a2 <vl53l5cx_check_data_ready+0x96>
	}
	else
	{
        if ((p_dev->temp_buffer[3] & (uint8_t)0x80) != (uint8_t)0)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f893 3503 	ldrb.w	r3, [r3, #1283]	@ 0x503
 800908a:	b25b      	sxtb	r3, r3
 800908c:	2b00      	cmp	r3, #0
 800908e:	da05      	bge.n	800909c <vl53l5cx_check_data_ready+0x90>
        {
        	status |= p_dev->temp_buffer[2];	/* Return GO2 error status */
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f893 2502 	ldrb.w	r2, [r3, #1282]	@ 0x502
 8009096:	7bfb      	ldrb	r3, [r7, #15]
 8009098:	4313      	orrs	r3, r2
 800909a:	73fb      	strb	r3, [r7, #15]
        }

		*p_isReady = 0;
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	2200      	movs	r2, #0
 80090a0:	701a      	strb	r2, [r3, #0]
	}

	return status;
 80090a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3710      	adds	r7, #16
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}

080090ac <vl53l5cx_get_ranging_data>:

uint8_t vl53l5cx_get_ranging_data(
		VL53L5CX_Configuration		*p_dev,
		VL53L5CX_ResultsData		*p_results)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b088      	sub	sp, #32
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 80090b6:	2300      	movs	r3, #0
 80090b8:	77fb      	strb	r3, [r7, #31]
	union Block_header *bh_ptr;
	uint16_t header_id, footer_id;
	uint32_t i, j, msize;

	status |= VL53L5CX_RdMulti(&(p_dev->platform), 0x0,
 80090ba:	6878      	ldr	r0, [r7, #4]
			p_dev->temp_buffer, p_dev->data_read_size);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
	status |= VL53L5CX_RdMulti(&(p_dev->platform), 0x0,
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	2100      	movs	r1, #0
 80090c8:	f7f8 fca2 	bl	8001a10 <VL53L5CX_RdMulti>
 80090cc:	4603      	mov	r3, r0
 80090ce:	461a      	mov	r2, r3
 80090d0:	7ffb      	ldrb	r3, [r7, #31]
 80090d2:	4313      	orrs	r3, r2
 80090d4:	77fb      	strb	r3, [r7, #31]
	p_dev->streamcount = p_dev->temp_buffer[0];
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f893 2500 	ldrb.w	r2, [r3, #1280]	@ 0x500
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	709a      	strb	r2, [r3, #2]
	VL53L5CX_SwapBuffer(p_dev->temp_buffer, (uint16_t)p_dev->data_read_size);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	4619      	mov	r1, r3
 80090ee:	4610      	mov	r0, r2
 80090f0:	f7f8 fcae 	bl	8001a50 <VL53L5CX_SwapBuffer>

	/* Start conversion at position 16 to avoid headers */
	for (i = (uint32_t)16; i 
 80090f4:	2310      	movs	r3, #16
 80090f6:	61bb      	str	r3, [r7, #24]
 80090f8:	e10e      	b.n	8009318 <vl53l5cx_get_ranging_data+0x26c>
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
	{
		bh_ptr = (union Block_header *)&(p_dev->temp_buffer[i]);
 80090fa:	69bb      	ldr	r3, [r7, #24]
 80090fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009100:	687a      	ldr	r2, [r7, #4]
 8009102:	4413      	add	r3, r2
 8009104:	60bb      	str	r3, [r7, #8]
		if ((bh_ptr->type > (uint32_t)0x1) 
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	781b      	ldrb	r3, [r3, #0]
 800910a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800910e:	b2db      	uxtb	r3, r3
 8009110:	2b01      	cmp	r3, #1
 8009112:	d915      	bls.n	8009140 <vl53l5cx_get_ranging_data+0x94>
                    && (bh_ptr->type < (uint32_t)0xd))
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	781b      	ldrb	r3, [r3, #0]
 8009118:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800911c:	b2db      	uxtb	r3, r3
 800911e:	2b0c      	cmp	r3, #12
 8009120:	d80e      	bhi.n	8009140 <vl53l5cx_get_ranging_data+0x94>
		{
			msize = bh_ptr->type * bh_ptr->size;
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	781b      	ldrb	r3, [r3, #0]
 8009126:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800912a:	b2db      	uxtb	r3, r3
 800912c:	461a      	mov	r2, r3
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	881b      	ldrh	r3, [r3, #0]
 8009132:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8009136:	b29b      	uxth	r3, r3
 8009138:	fb02 f303 	mul.w	r3, r2, r3
 800913c:	613b      	str	r3, [r7, #16]
 800913e:	e005      	b.n	800914c <vl53l5cx_get_ranging_data+0xa0>
		}
		else
		{
			msize = bh_ptr->size;
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	881b      	ldrh	r3, [r3, #0]
 8009144:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8009148:	b29b      	uxth	r3, r3
 800914a:	613b      	str	r3, [r7, #16]
		}

		switch(bh_ptr->idx){
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	885b      	ldrh	r3, [r3, #2]
 8009150:	f24e 0284 	movw	r2, #57476	@ 0xe084
 8009154:	4293      	cmp	r3, r2
 8009156:	f000 80bb 	beq.w	80092d0 <vl53l5cx_get_ranging_data+0x224>
 800915a:	f24e 0284 	movw	r2, #57476	@ 0xe084
 800915e:	4293      	cmp	r3, r2
 8009160:	f300 80d2 	bgt.w	8009308 <vl53l5cx_get_ranging_data+0x25c>
 8009164:	f24e 0244 	movw	r2, #57412	@ 0xe044
 8009168:	4293      	cmp	r3, r2
 800916a:	f000 80a3 	beq.w	80092b4 <vl53l5cx_get_ranging_data+0x208>
 800916e:	f24e 0244 	movw	r2, #57412	@ 0xe044
 8009172:	4293      	cmp	r3, r2
 8009174:	f300 80c8 	bgt.w	8009308 <vl53l5cx_get_ranging_data+0x25c>
 8009178:	f64d 7244 	movw	r2, #57156	@ 0xdf44
 800917c:	4293      	cmp	r3, r2
 800917e:	f000 808b 	beq.w	8009298 <vl53l5cx_get_ranging_data+0x1ec>
 8009182:	f64d 7244 	movw	r2, #57156	@ 0xdf44
 8009186:	4293      	cmp	r3, r2
 8009188:	f300 80be 	bgt.w	8009308 <vl53l5cx_get_ranging_data+0x25c>
 800918c:	f64d 62c4 	movw	r2, #57028	@ 0xdec4
 8009190:	4293      	cmp	r3, r2
 8009192:	d073      	beq.n	800927c <vl53l5cx_get_ranging_data+0x1d0>
 8009194:	f64d 62c4 	movw	r2, #57028	@ 0xdec4
 8009198:	4293      	cmp	r3, r2
 800919a:	f300 80b5 	bgt.w	8009308 <vl53l5cx_get_ranging_data+0x25c>
 800919e:	f64d 32c4 	movw	r2, #56260	@ 0xdbc4
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d05c      	beq.n	8009260 <vl53l5cx_get_ranging_data+0x1b4>
 80091a6:	f64d 32c4 	movw	r2, #56260	@ 0xdbc4
 80091aa:	4293      	cmp	r3, r2
 80091ac:	f300 80ac 	bgt.w	8009308 <vl53l5cx_get_ranging_data+0x25c>
 80091b0:	f64d 3284 	movw	r2, #56196	@ 0xdb84
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d045      	beq.n	8009244 <vl53l5cx_get_ranging_data+0x198>
 80091b8:	f64d 3284 	movw	r2, #56196	@ 0xdb84
 80091bc:	4293      	cmp	r3, r2
 80091be:	f300 80a3 	bgt.w	8009308 <vl53l5cx_get_ranging_data+0x25c>
 80091c2:	f64d 0258 	movw	r2, #55384	@ 0xd858
 80091c6:	4293      	cmp	r3, r2
 80091c8:	f000 8090 	beq.w	80092ec <vl53l5cx_get_ranging_data+0x240>
 80091cc:	f64d 0258 	movw	r2, #55384	@ 0xd858
 80091d0:	4293      	cmp	r3, r2
 80091d2:	f300 8099 	bgt.w	8009308 <vl53l5cx_get_ranging_data+0x25c>
 80091d6:	f245 52d0 	movw	r2, #21968	@ 0x55d0
 80091da:	4293      	cmp	r3, r2
 80091dc:	d024      	beq.n	8009228 <vl53l5cx_get_ranging_data+0x17c>
 80091de:	f245 52d0 	movw	r2, #21968	@ 0x55d0
 80091e2:	4293      	cmp	r3, r2
 80091e4:	f300 8090 	bgt.w	8009308 <vl53l5cx_get_ranging_data+0x25c>
 80091e8:	f245 42b4 	movw	r2, #21684	@ 0x54b4
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d004      	beq.n	80091fa <vl53l5cx_get_ranging_data+0x14e>
 80091f0:	f245 42d0 	movw	r2, #21712	@ 0x54d0
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d00a      	beq.n	800920e <vl53l5cx_get_ranging_data+0x162>
				(void)memcpy(&p_results->motion_indicator,
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
				break;
#endif
			default:
				break;
 80091f8:	e086      	b.n	8009308 <vl53l5cx_get_ranging_data+0x25c>
						(int8_t)p_dev->temp_buffer[i + (uint32_t)12];
 80091fa:	69bb      	ldr	r3, [r7, #24]
 80091fc:	330c      	adds	r3, #12
 80091fe:	687a      	ldr	r2, [r7, #4]
 8009200:	4413      	add	r3, r2
 8009202:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
 8009206:	b25a      	sxtb	r2, r3
				p_results->silicon_temp_degc =
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	701a      	strb	r2, [r3, #0]
				break;
 800920c:	e07d      	b.n	800930a <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->ambient_per_spad,
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	1d18      	adds	r0, r3, #4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8009212:	69bb      	ldr	r3, [r7, #24]
 8009214:	3304      	adds	r3, #4
 8009216:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800921a:	687a      	ldr	r2, [r7, #4]
 800921c:	4413      	add	r3, r2
				(void)memcpy(p_results->ambient_per_spad,
 800921e:	693a      	ldr	r2, [r7, #16]
 8009220:	4619      	mov	r1, r3
 8009222:	f001 f98e 	bl	800a542 <memcpy>
				break;
 8009226:	e070      	b.n	800930a <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->nb_spads_enabled,
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800922e:	69bb      	ldr	r3, [r7, #24]
 8009230:	3304      	adds	r3, #4
 8009232:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009236:	687a      	ldr	r2, [r7, #4]
 8009238:	4413      	add	r3, r2
				(void)memcpy(p_results->nb_spads_enabled,
 800923a:	693a      	ldr	r2, [r7, #16]
 800923c:	4619      	mov	r1, r3
 800923e:	f001 f980 	bl	800a542 <memcpy>
				break;
 8009242:	e062      	b.n	800930a <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->nb_target_detected,
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	f503 7082 	add.w	r0, r3, #260	@ 0x104
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800924a:	69bb      	ldr	r3, [r7, #24]
 800924c:	3304      	adds	r3, #4
 800924e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009252:	687a      	ldr	r2, [r7, #4]
 8009254:	4413      	add	r3, r2
				(void)memcpy(p_results->nb_target_detected,
 8009256:	693a      	ldr	r2, [r7, #16]
 8009258:	4619      	mov	r1, r3
 800925a:	f001 f972 	bl	800a542 <memcpy>
				break;
 800925e:	e054      	b.n	800930a <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->signal_per_spad,
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	f503 7011 	add.w	r0, r3, #580	@ 0x244
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8009266:	69bb      	ldr	r3, [r7, #24]
 8009268:	3304      	adds	r3, #4
 800926a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800926e:	687a      	ldr	r2, [r7, #4]
 8009270:	4413      	add	r3, r2
				(void)memcpy(p_results->signal_per_spad,
 8009272:	693a      	ldr	r2, [r7, #16]
 8009274:	4619      	mov	r1, r3
 8009276:	f001 f964 	bl	800a542 <memcpy>
				break;
 800927a:	e046      	b.n	800930a <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->range_sigma_mm,
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	f503 7051 	add.w	r0, r3, #836	@ 0x344
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8009282:	69bb      	ldr	r3, [r7, #24]
 8009284:	3304      	adds	r3, #4
 8009286:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800928a:	687a      	ldr	r2, [r7, #4]
 800928c:	4413      	add	r3, r2
				(void)memcpy(p_results->range_sigma_mm,
 800928e:	693a      	ldr	r2, [r7, #16]
 8009290:	4619      	mov	r1, r3
 8009292:	f001 f956 	bl	800a542 <memcpy>
				break;
 8009296:	e038      	b.n	800930a <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->distance_mm,
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	f503 7071 	add.w	r0, r3, #964	@ 0x3c4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800929e:	69bb      	ldr	r3, [r7, #24]
 80092a0:	3304      	adds	r3, #4
 80092a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092a6:	687a      	ldr	r2, [r7, #4]
 80092a8:	4413      	add	r3, r2
				(void)memcpy(p_results->distance_mm,
 80092aa:	693a      	ldr	r2, [r7, #16]
 80092ac:	4619      	mov	r1, r3
 80092ae:	f001 f948 	bl	800a542 <memcpy>
				break;
 80092b2:	e02a      	b.n	800930a <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->reflectance,
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	f203 4044 	addw	r0, r3, #1092	@ 0x444
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80092ba:	69bb      	ldr	r3, [r7, #24]
 80092bc:	3304      	adds	r3, #4
 80092be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092c2:	687a      	ldr	r2, [r7, #4]
 80092c4:	4413      	add	r3, r2
				(void)memcpy(p_results->reflectance,
 80092c6:	693a      	ldr	r2, [r7, #16]
 80092c8:	4619      	mov	r1, r3
 80092ca:	f001 f93a 	bl	800a542 <memcpy>
				break;
 80092ce:	e01c      	b.n	800930a <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->target_status,
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	f203 4084 	addw	r0, r3, #1156	@ 0x484
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80092d6:	69bb      	ldr	r3, [r7, #24]
 80092d8:	3304      	adds	r3, #4
 80092da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	4413      	add	r3, r2
				(void)memcpy(p_results->target_status,
 80092e2:	693a      	ldr	r2, [r7, #16]
 80092e4:	4619      	mov	r1, r3
 80092e6:	f001 f92c 	bl	800a542 <memcpy>
				break;
 80092ea:	e00e      	b.n	800930a <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(&p_results->motion_indicator,
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	f203 40c4 	addw	r0, r3, #1220	@ 0x4c4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80092f2:	69bb      	ldr	r3, [r7, #24]
 80092f4:	3304      	adds	r3, #4
 80092f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092fa:	687a      	ldr	r2, [r7, #4]
 80092fc:	4413      	add	r3, r2
				(void)memcpy(&p_results->motion_indicator,
 80092fe:	693a      	ldr	r2, [r7, #16]
 8009300:	4619      	mov	r1, r3
 8009302:	f001 f91e 	bl	800a542 <memcpy>
				break;
 8009306:	e000      	b.n	800930a <vl53l5cx_get_ranging_data+0x25e>
				break;
 8009308:	bf00      	nop
		}
		i += msize;
 800930a:	69ba      	ldr	r2, [r7, #24]
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	4413      	add	r3, r2
 8009310:	61bb      	str	r3, [r7, #24]
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
 8009312:	69bb      	ldr	r3, [r7, #24]
 8009314:	3304      	adds	r3, #4
 8009316:	61bb      	str	r3, [r7, #24]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	69ba      	ldr	r2, [r7, #24]
 800931e:	429a      	cmp	r2, r3
 8009320:	f4ff aeeb 	bcc.w	80090fa <vl53l5cx_get_ranging_data+0x4e>

#ifndef VL53L5CX_USE_RAW_FORMAT

	/* Convert data into their real format */
#ifndef VL53L5CX_DISABLE_AMBIENT_PER_SPAD
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 8009324:	2300      	movs	r3, #0
 8009326:	61bb      	str	r3, [r7, #24]
 8009328:	e00d      	b.n	8009346 <vl53l5cx_get_ranging_data+0x29a>
	{
		p_results->ambient_per_spad[i] /= (uint32_t)2048;
 800932a:	683a      	ldr	r2, [r7, #0]
 800932c:	69bb      	ldr	r3, [r7, #24]
 800932e:	009b      	lsls	r3, r3, #2
 8009330:	4413      	add	r3, r2
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	0ada      	lsrs	r2, r3, #11
 8009336:	6839      	ldr	r1, [r7, #0]
 8009338:	69bb      	ldr	r3, [r7, #24]
 800933a:	009b      	lsls	r3, r3, #2
 800933c:	440b      	add	r3, r1
 800933e:	605a      	str	r2, [r3, #4]
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 8009340:	69bb      	ldr	r3, [r7, #24]
 8009342:	3301      	adds	r3, #1
 8009344:	61bb      	str	r3, [r7, #24]
 8009346:	69bb      	ldr	r3, [r7, #24]
 8009348:	2b3f      	cmp	r3, #63	@ 0x3f
 800934a:	d9ee      	bls.n	800932a <vl53l5cx_get_ranging_data+0x27e>
	}
#endif

	for(i = 0; i < (uint32_t)(VL53L5CX_RESOLUTION_8X8
 800934c:	2300      	movs	r3, #0
 800934e:	61bb      	str	r3, [r7, #24]
 8009350:	e056      	b.n	8009400 <vl53l5cx_get_ranging_data+0x354>
			*VL53L5CX_NB_TARGET_PER_ZONE); i++)
	{
#ifndef VL53L5CX_DISABLE_DISTANCE_MM
		p_results->distance_mm[i] /= 4;
 8009352:	683a      	ldr	r2, [r7, #0]
 8009354:	69bb      	ldr	r3, [r7, #24]
 8009356:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 800935a:	005b      	lsls	r3, r3, #1
 800935c:	4413      	add	r3, r2
 800935e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009362:	2b00      	cmp	r3, #0
 8009364:	da00      	bge.n	8009368 <vl53l5cx_get_ranging_data+0x2bc>
 8009366:	3303      	adds	r3, #3
 8009368:	109b      	asrs	r3, r3, #2
 800936a:	b219      	sxth	r1, r3
 800936c:	683a      	ldr	r2, [r7, #0]
 800936e:	69bb      	ldr	r3, [r7, #24]
 8009370:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8009374:	005b      	lsls	r3, r3, #1
 8009376:	4413      	add	r3, r2
 8009378:	460a      	mov	r2, r1
 800937a:	809a      	strh	r2, [r3, #4]
		if(p_results->distance_mm[i] < 0)
 800937c:	683a      	ldr	r2, [r7, #0]
 800937e:	69bb      	ldr	r3, [r7, #24]
 8009380:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8009384:	005b      	lsls	r3, r3, #1
 8009386:	4413      	add	r3, r2
 8009388:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800938c:	2b00      	cmp	r3, #0
 800938e:	da07      	bge.n	80093a0 <vl53l5cx_get_ranging_data+0x2f4>
		{
			p_results->distance_mm[i] = 0;
 8009390:	683a      	ldr	r2, [r7, #0]
 8009392:	69bb      	ldr	r3, [r7, #24]
 8009394:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8009398:	005b      	lsls	r3, r3, #1
 800939a:	4413      	add	r3, r2
 800939c:	2200      	movs	r2, #0
 800939e:	809a      	strh	r2, [r3, #4]
		}
#endif
#ifndef VL53L5CX_DISABLE_REFLECTANCE_PERCENT
		p_results->reflectance[i] /= (uint8_t)2;
 80093a0:	683a      	ldr	r2, [r7, #0]
 80093a2:	69bb      	ldr	r3, [r7, #24]
 80093a4:	4413      	add	r3, r2
 80093a6:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 80093aa:	781b      	ldrb	r3, [r3, #0]
 80093ac:	085b      	lsrs	r3, r3, #1
 80093ae:	b2d9      	uxtb	r1, r3
 80093b0:	683a      	ldr	r2, [r7, #0]
 80093b2:	69bb      	ldr	r3, [r7, #24]
 80093b4:	4413      	add	r3, r2
 80093b6:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 80093ba:	460a      	mov	r2, r1
 80093bc:	701a      	strb	r2, [r3, #0]
#endif
#ifndef VL53L5CX_DISABLE_RANGE_SIGMA_MM
		p_results->range_sigma_mm[i] /= (uint16_t)128;
 80093be:	683a      	ldr	r2, [r7, #0]
 80093c0:	69bb      	ldr	r3, [r7, #24]
 80093c2:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80093c6:	005b      	lsls	r3, r3, #1
 80093c8:	4413      	add	r3, r2
 80093ca:	889b      	ldrh	r3, [r3, #4]
 80093cc:	09db      	lsrs	r3, r3, #7
 80093ce:	b299      	uxth	r1, r3
 80093d0:	683a      	ldr	r2, [r7, #0]
 80093d2:	69bb      	ldr	r3, [r7, #24]
 80093d4:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80093d8:	005b      	lsls	r3, r3, #1
 80093da:	4413      	add	r3, r2
 80093dc:	460a      	mov	r2, r1
 80093de:	809a      	strh	r2, [r3, #4]
#endif
#ifndef VL53L5CX_DISABLE_SIGNAL_PER_SPAD
		p_results->signal_per_spad[i] /= (uint32_t)2048;
 80093e0:	683a      	ldr	r2, [r7, #0]
 80093e2:	69bb      	ldr	r3, [r7, #24]
 80093e4:	3390      	adds	r3, #144	@ 0x90
 80093e6:	009b      	lsls	r3, r3, #2
 80093e8:	4413      	add	r3, r2
 80093ea:	685b      	ldr	r3, [r3, #4]
 80093ec:	0ada      	lsrs	r2, r3, #11
 80093ee:	6839      	ldr	r1, [r7, #0]
 80093f0:	69bb      	ldr	r3, [r7, #24]
 80093f2:	3390      	adds	r3, #144	@ 0x90
 80093f4:	009b      	lsls	r3, r3, #2
 80093f6:	440b      	add	r3, r1
 80093f8:	605a      	str	r2, [r3, #4]
			*VL53L5CX_NB_TARGET_PER_ZONE); i++)
 80093fa:	69bb      	ldr	r3, [r7, #24]
 80093fc:	3301      	adds	r3, #1
 80093fe:	61bb      	str	r3, [r7, #24]
	for(i = 0; i < (uint32_t)(VL53L5CX_RESOLUTION_8X8
 8009400:	69bb      	ldr	r3, [r7, #24]
 8009402:	2b3f      	cmp	r3, #63	@ 0x3f
 8009404:	d9a5      	bls.n	8009352 <vl53l5cx_get_ranging_data+0x2a6>
#endif
	}

	/* Set target status to 255 if no target is detected for this zone */
#ifndef VL53L5CX_DISABLE_NB_TARGET_DETECTED
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 8009406:	2300      	movs	r3, #0
 8009408:	61bb      	str	r3, [r7, #24]
 800940a:	e01b      	b.n	8009444 <vl53l5cx_get_ranging_data+0x398>
	{
		if(p_results->nb_target_detected[i] == (uint8_t)0){
 800940c:	683a      	ldr	r2, [r7, #0]
 800940e:	69bb      	ldr	r3, [r7, #24]
 8009410:	4413      	add	r3, r2
 8009412:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8009416:	781b      	ldrb	r3, [r3, #0]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d110      	bne.n	800943e <vl53l5cx_get_ranging_data+0x392>
			for(j = 0; j < (uint32_t)
 800941c:	2300      	movs	r3, #0
 800941e:	617b      	str	r3, [r7, #20]
 8009420:	e00a      	b.n	8009438 <vl53l5cx_get_ranging_data+0x38c>
				VL53L5CX_NB_TARGET_PER_ZONE; j++)
			{
#ifndef VL53L5CX_DISABLE_TARGET_STATUS
				p_results->target_status
				[((uint32_t)VL53L5CX_NB_TARGET_PER_ZONE
					*(uint32_t)i) + j]=(uint8_t)255;
 8009422:	69ba      	ldr	r2, [r7, #24]
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	4413      	add	r3, r2
 8009428:	683a      	ldr	r2, [r7, #0]
 800942a:	4413      	add	r3, r2
 800942c:	22ff      	movs	r2, #255	@ 0xff
 800942e:	f883 2484 	strb.w	r2, [r3, #1156]	@ 0x484
				VL53L5CX_NB_TARGET_PER_ZONE; j++)
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	3301      	adds	r3, #1
 8009436:	617b      	str	r3, [r7, #20]
			for(j = 0; j < (uint32_t)
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d0f1      	beq.n	8009422 <vl53l5cx_get_ranging_data+0x376>
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 800943e:	69bb      	ldr	r3, [r7, #24]
 8009440:	3301      	adds	r3, #1
 8009442:	61bb      	str	r3, [r7, #24]
 8009444:	69bb      	ldr	r3, [r7, #24]
 8009446:	2b3f      	cmp	r3, #63	@ 0x3f
 8009448:	d9e0      	bls.n	800940c <vl53l5cx_get_ranging_data+0x360>
		}
	}
#endif

#ifndef VL53L5CX_DISABLE_MOTION_INDICATOR
	for(i = 0; i < (uint32_t)32; i++)
 800944a:	2300      	movs	r3, #0
 800944c:	61bb      	str	r3, [r7, #24]
 800944e:	e014      	b.n	800947a <vl53l5cx_get_ranging_data+0x3ce>
	{
		p_results->motion_indicator.motion[i] /= (uint32_t)65535;
 8009450:	683a      	ldr	r2, [r7, #0]
 8009452:	69bb      	ldr	r3, [r7, #24]
 8009454:	f503 7399 	add.w	r3, r3, #306	@ 0x132
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	4413      	add	r3, r2
 800945c:	689b      	ldr	r3, [r3, #8]
 800945e:	4a1f      	ldr	r2, [pc, #124]	@ (80094dc <vl53l5cx_get_ranging_data+0x430>)
 8009460:	fba2 2303 	umull	r2, r3, r2, r3
 8009464:	0bda      	lsrs	r2, r3, #15
 8009466:	6839      	ldr	r1, [r7, #0]
 8009468:	69bb      	ldr	r3, [r7, #24]
 800946a:	f503 7399 	add.w	r3, r3, #306	@ 0x132
 800946e:	009b      	lsls	r3, r3, #2
 8009470:	440b      	add	r3, r1
 8009472:	609a      	str	r2, [r3, #8]
	for(i = 0; i < (uint32_t)32; i++)
 8009474:	69bb      	ldr	r3, [r7, #24]
 8009476:	3301      	adds	r3, #1
 8009478:	61bb      	str	r3, [r7, #24]
 800947a:	69bb      	ldr	r3, [r7, #24]
 800947c:	2b1f      	cmp	r3, #31
 800947e:	d9e7      	bls.n	8009450 <vl53l5cx_get_ranging_data+0x3a4>

#endif

	/* Check if footer id and header id are matching. This allows to detect
	 * corrupted frames */
	header_id = ((uint16_t)(p_dev->temp_buffer[0x8])<<8) & 0xFF00U;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f893 3508 	ldrb.w	r3, [r3, #1288]	@ 0x508
 8009486:	021b      	lsls	r3, r3, #8
 8009488:	81fb      	strh	r3, [r7, #14]
	header_id |= ((uint16_t)(p_dev->temp_buffer[0x9])) & 0x00FFU;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f893 3509 	ldrb.w	r3, [r3, #1289]	@ 0x509
 8009490:	461a      	mov	r2, r3
 8009492:	89fb      	ldrh	r3, [r7, #14]
 8009494:	4313      	orrs	r3, r2
 8009496:	81fb      	strh	r3, [r7, #14]

	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	685b      	ldr	r3, [r3, #4]
		- (uint32_t)4]) << 8) & 0xFF00U;
 800949c:	3b04      	subs	r3, #4
	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 800949e:	687a      	ldr	r2, [r7, #4]
 80094a0:	4413      	add	r3, r2
 80094a2:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
 80094a6:	021b      	lsls	r3, r3, #8
 80094a8:	81bb      	strh	r3, [r7, #12]
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	685b      	ldr	r3, [r3, #4]
		- (uint32_t)3])) & 0xFFU;
 80094ae:	3b03      	subs	r3, #3
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 80094b0:	687a      	ldr	r2, [r7, #4]
 80094b2:	4413      	add	r3, r2
 80094b4:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
 80094b8:	461a      	mov	r2, r3
 80094ba:	89bb      	ldrh	r3, [r7, #12]
 80094bc:	4313      	orrs	r3, r2
 80094be:	81bb      	strh	r3, [r7, #12]

	if(header_id != footer_id)
 80094c0:	89fa      	ldrh	r2, [r7, #14]
 80094c2:	89bb      	ldrh	r3, [r7, #12]
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d003      	beq.n	80094d0 <vl53l5cx_get_ranging_data+0x424>
	{
		status |= VL53L5CX_STATUS_CORRUPTED_FRAME;
 80094c8:	7ffb      	ldrb	r3, [r7, #31]
 80094ca:	f043 0302 	orr.w	r3, r3, #2
 80094ce:	77fb      	strb	r3, [r7, #31]
	}

	return status;
 80094d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3720      	adds	r7, #32
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}
 80094da:	bf00      	nop
 80094dc:	80008001 	.word	0x80008001

080094e0 <vl53l5cx_get_resolution>:

uint8_t vl53l5cx_get_resolution(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*p_resolution)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b084      	sub	sp, #16
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 80094ea:	2300      	movs	r3, #0
 80094ec:	73fb      	strb	r3, [r7, #15]

	status |= vl53l5cx_dci_read_data(p_dev, p_dev->temp_buffer,
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
 80094f4:	2308      	movs	r3, #8
 80094f6:	f245 4250 	movw	r2, #21584	@ 0x5450
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f000 f8ea 	bl	80096d4 <vl53l5cx_dci_read_data>
 8009500:	4603      	mov	r3, r0
 8009502:	461a      	mov	r2, r3
 8009504:	7bfb      	ldrb	r3, [r7, #15]
 8009506:	4313      	orrs	r3, r2
 8009508:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_ZONE_CONFIG, 8);
	*p_resolution = p_dev->temp_buffer[0x00]*p_dev->temp_buffer[0x01];
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f893 2500 	ldrb.w	r2, [r3, #1280]	@ 0x500
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f893 3501 	ldrb.w	r3, [r3, #1281]	@ 0x501
 8009516:	fb12 f303 	smulbb	r3, r2, r3
 800951a:	b2da      	uxtb	r2, r3
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	701a      	strb	r2, [r3, #0]

	return status;
 8009520:	7bfb      	ldrb	r3, [r7, #15]
}
 8009522:	4618      	mov	r0, r3
 8009524:	3710      	adds	r7, #16
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}

0800952a <vl53l5cx_set_resolution>:


uint8_t vl53l5cx_set_resolution(
		VL53L5CX_Configuration 		 *p_dev,
		uint8_t				resolution)
{
 800952a:	b580      	push	{r7, lr}
 800952c:	b084      	sub	sp, #16
 800952e:	af00      	add	r7, sp, #0
 8009530:	6078      	str	r0, [r7, #4]
 8009532:	460b      	mov	r3, r1
 8009534:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L5CX_STATUS_OK;
 8009536:	2300      	movs	r3, #0
 8009538:	73fb      	strb	r3, [r7, #15]

	switch(resolution){
 800953a:	78fb      	ldrb	r3, [r7, #3]
 800953c:	2b10      	cmp	r3, #16
 800953e:	d002      	beq.n	8009546 <vl53l5cx_set_resolution+0x1c>
 8009540:	2b40      	cmp	r3, #64	@ 0x40
 8009542:	d055      	beq.n	80095f0 <vl53l5cx_set_resolution+0xc6>
 8009544:	e0a9      	b.n	800969a <vl53l5cx_set_resolution+0x170>
		case VL53L5CX_RESOLUTION_4X4:
			status |= vl53l5cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
			status |= vl53l5cx_dci_read_data(p_dev,
 800954c:	2310      	movs	r3, #16
 800954e:	f64a 5238 	movw	r2, #44344	@ 0xad38
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f000 f8be 	bl	80096d4 <vl53l5cx_dci_read_data>
 8009558:	4603      	mov	r3, r0
 800955a:	461a      	mov	r2, r3
 800955c:	7bfb      	ldrb	r3, [r7, #15]
 800955e:	4313      	orrs	r3, r2
 8009560:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 64;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2240      	movs	r2, #64	@ 0x40
 8009566:	f883 2504 	strb.w	r2, [r3, #1284]	@ 0x504
			p_dev->temp_buffer[0x06] = 64;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2240      	movs	r2, #64	@ 0x40
 800956e:	f883 2506 	strb.w	r2, [r3, #1286]	@ 0x506
			p_dev->temp_buffer[0x09] = 4;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2204      	movs	r2, #4
 8009576:	f883 2509 	strb.w	r2, [r3, #1289]	@ 0x509
			status |= vl53l5cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
			status |= vl53l5cx_dci_write_data(p_dev,
 8009580:	2310      	movs	r3, #16
 8009582:	f64a 5238 	movw	r2, #44344	@ 0xad38
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f000 f92e 	bl	80097e8 <vl53l5cx_dci_write_data>
 800958c:	4603      	mov	r3, r0
 800958e:	461a      	mov	r2, r3
 8009590:	7bfb      	ldrb	r3, [r7, #15]
 8009592:	4313      	orrs	r3, r2
 8009594:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_DSS_CONFIG, 16);

			status |= vl53l5cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
			status |= vl53l5cx_dci_read_data(p_dev,
 800959c:	2308      	movs	r3, #8
 800959e:	f245 4250 	movw	r2, #21584	@ 0x5450
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f000 f896 	bl	80096d4 <vl53l5cx_dci_read_data>
 80095a8:	4603      	mov	r3, r0
 80095aa:	461a      	mov	r2, r3
 80095ac:	7bfb      	ldrb	r3, [r7, #15]
 80095ae:	4313      	orrs	r3, r2
 80095b0:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 4;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2204      	movs	r2, #4
 80095b6:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
			p_dev->temp_buffer[0x01] = 4;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2204      	movs	r2, #4
 80095be:	f883 2501 	strb.w	r2, [r3, #1281]	@ 0x501
			p_dev->temp_buffer[0x04] = 8;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2208      	movs	r2, #8
 80095c6:	f883 2504 	strb.w	r2, [r3, #1284]	@ 0x504
			p_dev->temp_buffer[0x05] = 8;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2208      	movs	r2, #8
 80095ce:	f883 2505 	strb.w	r2, [r3, #1285]	@ 0x505
			status |= vl53l5cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
			status |= vl53l5cx_dci_write_data(p_dev,
 80095d8:	2308      	movs	r3, #8
 80095da:	f245 4250 	movw	r2, #21584	@ 0x5450
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 f902 	bl	80097e8 <vl53l5cx_dci_write_data>
 80095e4:	4603      	mov	r3, r0
 80095e6:	461a      	mov	r2, r3
 80095e8:	7bfb      	ldrb	r3, [r7, #15]
 80095ea:	4313      	orrs	r3, r2
 80095ec:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_ZONE_CONFIG, 8);
			break;
 80095ee:	e057      	b.n	80096a0 <vl53l5cx_set_resolution+0x176>

		case VL53L5CX_RESOLUTION_8X8:
			status |= vl53l5cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
			status |= vl53l5cx_dci_read_data(p_dev,
 80095f6:	2310      	movs	r3, #16
 80095f8:	f64a 5238 	movw	r2, #44344	@ 0xad38
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f000 f869 	bl	80096d4 <vl53l5cx_dci_read_data>
 8009602:	4603      	mov	r3, r0
 8009604:	461a      	mov	r2, r3
 8009606:	7bfb      	ldrb	r3, [r7, #15]
 8009608:	4313      	orrs	r3, r2
 800960a:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 16;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2210      	movs	r2, #16
 8009610:	f883 2504 	strb.w	r2, [r3, #1284]	@ 0x504
			p_dev->temp_buffer[0x06] = 16;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2210      	movs	r2, #16
 8009618:	f883 2506 	strb.w	r2, [r3, #1286]	@ 0x506
			p_dev->temp_buffer[0x09] = 1;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2201      	movs	r2, #1
 8009620:	f883 2509 	strb.w	r2, [r3, #1289]	@ 0x509
			status |= vl53l5cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
			status |= vl53l5cx_dci_write_data(p_dev,
 800962a:	2310      	movs	r3, #16
 800962c:	f64a 5238 	movw	r2, #44344	@ 0xad38
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f000 f8d9 	bl	80097e8 <vl53l5cx_dci_write_data>
 8009636:	4603      	mov	r3, r0
 8009638:	461a      	mov	r2, r3
 800963a:	7bfb      	ldrb	r3, [r7, #15]
 800963c:	4313      	orrs	r3, r2
 800963e:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_DSS_CONFIG, 16);

			status |= vl53l5cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
			status |= vl53l5cx_dci_read_data(p_dev,
 8009646:	2308      	movs	r3, #8
 8009648:	f245 4250 	movw	r2, #21584	@ 0x5450
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f000 f841 	bl	80096d4 <vl53l5cx_dci_read_data>
 8009652:	4603      	mov	r3, r0
 8009654:	461a      	mov	r2, r3
 8009656:	7bfb      	ldrb	r3, [r7, #15]
 8009658:	4313      	orrs	r3, r2
 800965a:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 8;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2208      	movs	r2, #8
 8009660:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
			p_dev->temp_buffer[0x01] = 8;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2208      	movs	r2, #8
 8009668:	f883 2501 	strb.w	r2, [r3, #1281]	@ 0x501
			p_dev->temp_buffer[0x04] = 4;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2204      	movs	r2, #4
 8009670:	f883 2504 	strb.w	r2, [r3, #1284]	@ 0x504
			p_dev->temp_buffer[0x05] = 4;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2204      	movs	r2, #4
 8009678:	f883 2505 	strb.w	r2, [r3, #1285]	@ 0x505
			status |= vl53l5cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
			status |= vl53l5cx_dci_write_data(p_dev,
 8009682:	2308      	movs	r3, #8
 8009684:	f245 4250 	movw	r2, #21584	@ 0x5450
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f000 f8ad 	bl	80097e8 <vl53l5cx_dci_write_data>
 800968e:	4603      	mov	r3, r0
 8009690:	461a      	mov	r2, r3
 8009692:	7bfb      	ldrb	r3, [r7, #15]
 8009694:	4313      	orrs	r3, r2
 8009696:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_ZONE_CONFIG, 8);

			break;
 8009698:	e002      	b.n	80096a0 <vl53l5cx_set_resolution+0x176>

		default:
			status = VL53L5CX_STATUS_INVALID_PARAM;
 800969a:	237f      	movs	r3, #127	@ 0x7f
 800969c:	73fb      	strb	r3, [r7, #15]
			break;
 800969e:	bf00      	nop
		}

	status |= _vl53l5cx_send_offset_data(p_dev, resolution);
 80096a0:	78fb      	ldrb	r3, [r7, #3]
 80096a2:	4619      	mov	r1, r3
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f7fe fb69 	bl	8007d7c <_vl53l5cx_send_offset_data>
 80096aa:	4603      	mov	r3, r0
 80096ac:	461a      	mov	r2, r3
 80096ae:	7bfb      	ldrb	r3, [r7, #15]
 80096b0:	4313      	orrs	r3, r2
 80096b2:	73fb      	strb	r3, [r7, #15]
	status |= _vl53l5cx_send_xtalk_data(p_dev, resolution);
 80096b4:	78fb      	ldrb	r3, [r7, #3]
 80096b6:	4619      	mov	r1, r3
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f7fe fd2b 	bl	8008114 <_vl53l5cx_send_xtalk_data>
 80096be:	4603      	mov	r3, r0
 80096c0:	461a      	mov	r2, r3
 80096c2:	7bfb      	ldrb	r3, [r7, #15]
 80096c4:	4313      	orrs	r3, r2
 80096c6:	73fb      	strb	r3, [r7, #15]

	return status;
 80096c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3710      	adds	r7, #16
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}
	...

080096d4 <vl53l5cx_dci_read_data>:
uint8_t vl53l5cx_dci_read_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b08c      	sub	sp, #48	@ 0x30
 80096d8:	af02      	add	r7, sp, #8
 80096da:	60f8      	str	r0, [r7, #12]
 80096dc:	60b9      	str	r1, [r7, #8]
 80096de:	607a      	str	r2, [r7, #4]
 80096e0:	807b      	strh	r3, [r7, #2]
	int16_t i;
	uint8_t status = VL53L5CX_STATUS_OK;
 80096e2:	2300      	movs	r3, #0
 80096e4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        uint32_t rd_size = (uint32_t) data_size + (uint32_t)12;
 80096e8:	887b      	ldrh	r3, [r7, #2]
 80096ea:	330c      	adds	r3, #12
 80096ec:	623b      	str	r3, [r7, #32]
	uint8_t cmd[] = {0x00, 0x00, 0x00, 0x00,
 80096ee:	4a3d      	ldr	r2, [pc, #244]	@ (80097e4 <vl53l5cx_dci_read_data+0x110>)
 80096f0:	f107 0314 	add.w	r3, r7, #20
 80096f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80096f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x00, 0x00, 0x00, 0x0f,
			0x00, 0x02, 0x00, 0x08};

	/* Check if tmp buffer is large enough */
	if((data_size + (uint16_t)12)>(uint16_t)VL53L5CX_TEMPORARY_BUFFER_SIZE)
 80096fa:	887b      	ldrh	r3, [r7, #2]
 80096fc:	f5b3 6fb4 	cmp.w	r3, #1440	@ 0x5a0
 8009700:	d903      	bls.n	800970a <vl53l5cx_dci_read_data+0x36>
	{
		status |= VL53L5CX_STATUS_ERROR;
 8009702:	23ff      	movs	r3, #255	@ 0xff
 8009704:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8009708:	e065      	b.n	80097d6 <vl53l5cx_dci_read_data+0x102>
	}
	else
	{
		cmd[0] = (uint8_t)(index >> 8);	
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	0a1b      	lsrs	r3, r3, #8
 800970e:	b2db      	uxtb	r3, r3
 8009710:	753b      	strb	r3, [r7, #20]
		cmd[1] = (uint8_t)(index & (uint32_t)0xff);			
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	b2db      	uxtb	r3, r3
 8009716:	757b      	strb	r3, [r7, #21]
		cmd[2] = (uint8_t)((data_size & (uint16_t)0xff0) >> 4);
 8009718:	887b      	ldrh	r3, [r7, #2]
 800971a:	111b      	asrs	r3, r3, #4
 800971c:	b2db      	uxtb	r3, r3
 800971e:	75bb      	strb	r3, [r7, #22]
		cmd[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 8009720:	887b      	ldrh	r3, [r7, #2]
 8009722:	b2db      	uxtb	r3, r3
 8009724:	011b      	lsls	r3, r3, #4
 8009726:	b2db      	uxtb	r3, r3
 8009728:	75fb      	strb	r3, [r7, #23]

	/* Request data reading from FW */
		status |= VL53L5CX_WrMulti(&(p_dev->platform),
 800972a:	68f8      	ldr	r0, [r7, #12]
 800972c:	f107 0214 	add.w	r2, r7, #20
 8009730:	230c      	movs	r3, #12
 8009732:	f642 71f4 	movw	r1, #12276	@ 0x2ff4
 8009736:	f7f8 f94b 	bl	80019d0 <VL53L5CX_WrMulti>
 800973a:	4603      	mov	r3, r0
 800973c:	461a      	mov	r2, r3
 800973e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009742:	4313      	orrs	r3, r2
 8009744:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			(VL53L5CX_UI_CMD_END-(uint16_t)11),cmd, sizeof(cmd));
		status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8009748:	2303      	movs	r3, #3
 800974a:	9301      	str	r3, [sp, #4]
 800974c:	23ff      	movs	r3, #255	@ 0xff
 800974e:	9300      	str	r3, [sp, #0]
 8009750:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8009754:	2201      	movs	r2, #1
 8009756:	2104      	movs	r1, #4
 8009758:	68f8      	ldr	r0, [r7, #12]
 800975a:	f7fe fa7d 	bl	8007c58 <_vl53l5cx_poll_for_answer>
 800975e:	4603      	mov	r3, r0
 8009760:	461a      	mov	r2, r3
 8009762:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009766:	4313      	orrs	r3, r2
 8009768:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			VL53L5CX_UI_CMD_STATUS,
			0xff, 0x03);

	/* Read new data sent (4 bytes header + data_size + 8 bytes footer) */
		status |= VL53L5CX_RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 800976c:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer, rd_size);
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
		status |= VL53L5CX_RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8009774:	6a3b      	ldr	r3, [r7, #32]
 8009776:	f642 4104 	movw	r1, #11268	@ 0x2c04
 800977a:	f7f8 f949 	bl	8001a10 <VL53L5CX_RdMulti>
 800977e:	4603      	mov	r3, r0
 8009780:	461a      	mov	r2, r3
 8009782:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009786:	4313      	orrs	r3, r2
 8009788:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		VL53L5CX_SwapBuffer(p_dev->temp_buffer, data_size + (uint16_t)12);
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
 8009792:	887b      	ldrh	r3, [r7, #2]
 8009794:	330c      	adds	r3, #12
 8009796:	b29b      	uxth	r3, r3
 8009798:	4619      	mov	r1, r3
 800979a:	4610      	mov	r0, r2
 800979c:	f7f8 f958 	bl	8001a50 <VL53L5CX_SwapBuffer>

	/* Copy data from FW into input structure (-4 bytes to remove header) */
		for(i = 0 ; i < (int16_t)data_size;i++){
 80097a0:	2300      	movs	r3, #0
 80097a2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80097a4:	e011      	b.n	80097ca <vl53l5cx_dci_read_data+0xf6>
			data[i] = p_dev->temp_buffer[i + 4];
 80097a6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80097aa:	1d1a      	adds	r2, r3, #4
 80097ac:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80097b0:	68b9      	ldr	r1, [r7, #8]
 80097b2:	440b      	add	r3, r1
 80097b4:	68f9      	ldr	r1, [r7, #12]
 80097b6:	440a      	add	r2, r1
 80097b8:	f892 2500 	ldrb.w	r2, [r2, #1280]	@ 0x500
 80097bc:	701a      	strb	r2, [r3, #0]
		for(i = 0 ; i < (int16_t)data_size;i++){
 80097be:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80097c2:	b29b      	uxth	r3, r3
 80097c4:	3301      	adds	r3, #1
 80097c6:	b29b      	uxth	r3, r3
 80097c8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80097ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80097ce:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 80097d2:	429a      	cmp	r2, r3
 80097d4:	dbe7      	blt.n	80097a6 <vl53l5cx_dci_read_data+0xd2>
		}
	}

	return status;
 80097d6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3728      	adds	r7, #40	@ 0x28
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}
 80097e2:	bf00      	nop
 80097e4:	0800cc84 	.word	0x0800cc84

080097e8 <vl53l5cx_dci_write_data>:
uint8_t vl53l5cx_dci_write_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b08c      	sub	sp, #48	@ 0x30
 80097ec:	af02      	add	r7, sp, #8
 80097ee:	60f8      	str	r0, [r7, #12]
 80097f0:	60b9      	str	r1, [r7, #8]
 80097f2:	607a      	str	r2, [r7, #4]
 80097f4:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L5CX_STATUS_OK;
 80097f6:	2300      	movs	r3, #0
 80097f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	int16_t i;

	uint8_t headers[] = {0x00, 0x00, 0x00, 0x00};
 80097fc:	2300      	movs	r3, #0
 80097fe:	61fb      	str	r3, [r7, #28]
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8009800:	2300      	movs	r3, #0
 8009802:	753b      	strb	r3, [r7, #20]
 8009804:	2300      	movs	r3, #0
 8009806:	757b      	strb	r3, [r7, #21]
 8009808:	2300      	movs	r3, #0
 800980a:	75bb      	strb	r3, [r7, #22]
 800980c:	230f      	movs	r3, #15
 800980e:	75fb      	strb	r3, [r7, #23]
 8009810:	2305      	movs	r3, #5
 8009812:	763b      	strb	r3, [r7, #24]
 8009814:	2301      	movs	r3, #1
 8009816:	767b      	strb	r3, [r7, #25]
			(uint8_t)((data_size + (uint16_t)8) >> 8), 
 8009818:	887b      	ldrh	r3, [r7, #2]
 800981a:	3308      	adds	r3, #8
 800981c:	121b      	asrs	r3, r3, #8
 800981e:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8009820:	76bb      	strb	r3, [r7, #26]
			(uint8_t)((data_size + (uint16_t)8) & (uint8_t)0xFF)};
 8009822:	887b      	ldrh	r3, [r7, #2]
 8009824:	b2db      	uxtb	r3, r3
 8009826:	3308      	adds	r3, #8
 8009828:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 800982a:	76fb      	strb	r3, [r7, #27]

	uint16_t address = (uint16_t)VL53L5CX_UI_CMD_END - 
 800982c:	887b      	ldrh	r3, [r7, #2]
 800982e:	f5c3 533f 	rsb	r3, r3, #12224	@ 0x2fc0
 8009832:	3334      	adds	r3, #52	@ 0x34
 8009834:	847b      	strh	r3, [r7, #34]	@ 0x22
		(data_size + (uint16_t)12) + (uint16_t)1;

	/* Check if cmd buffer is large enough */
	if((data_size + (uint16_t)12) 
 8009836:	887b      	ldrh	r3, [r7, #2]
 8009838:	f5b3 6fb4 	cmp.w	r3, #1440	@ 0x5a0
 800983c:	d903      	bls.n	8009846 <vl53l5cx_dci_write_data+0x5e>
           > (uint16_t)VL53L5CX_TEMPORARY_BUFFER_SIZE)
	{
		status |= VL53L5CX_STATUS_ERROR;
 800983e:	23ff      	movs	r3, #255	@ 0xff
 8009840:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009844:	e068      	b.n	8009918 <vl53l5cx_dci_write_data+0x130>
	}
	else
	{
		headers[0] = (uint8_t)(index >> 8);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	0a1b      	lsrs	r3, r3, #8
 800984a:	b2db      	uxtb	r3, r3
 800984c:	773b      	strb	r3, [r7, #28]
		headers[1] = (uint8_t)(index & (uint32_t)0xff);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	b2db      	uxtb	r3, r3
 8009852:	777b      	strb	r3, [r7, #29]
		headers[2] = (uint8_t)(((data_size & (uint16_t)0xff0) >> 4));
 8009854:	887b      	ldrh	r3, [r7, #2]
 8009856:	111b      	asrs	r3, r3, #4
 8009858:	b2db      	uxtb	r3, r3
 800985a:	77bb      	strb	r3, [r7, #30]
		headers[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 800985c:	887b      	ldrh	r3, [r7, #2]
 800985e:	b2db      	uxtb	r3, r3
 8009860:	011b      	lsls	r3, r3, #4
 8009862:	b2db      	uxtb	r3, r3
 8009864:	77fb      	strb	r3, [r7, #31]

	/* Copy data from structure to FW format (+4 bytes to add header) */
		VL53L5CX_SwapBuffer(data, data_size);
 8009866:	887b      	ldrh	r3, [r7, #2]
 8009868:	4619      	mov	r1, r3
 800986a:	68b8      	ldr	r0, [r7, #8]
 800986c:	f7f8 f8f0 	bl	8001a50 <VL53L5CX_SwapBuffer>
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 8009870:	887b      	ldrh	r3, [r7, #2]
 8009872:	3b01      	subs	r3, #1
 8009874:	b29b      	uxth	r3, r3
 8009876:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009878:	e012      	b.n	80098a0 <vl53l5cx_dci_write_data+0xb8>
		{
			p_dev->temp_buffer[i + 4] = data[i];
 800987a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800987e:	68ba      	ldr	r2, [r7, #8]
 8009880:	441a      	add	r2, r3
 8009882:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8009886:	3304      	adds	r3, #4
 8009888:	7811      	ldrb	r1, [r2, #0]
 800988a:	68fa      	ldr	r2, [r7, #12]
 800988c:	4413      	add	r3, r2
 800988e:	460a      	mov	r2, r1
 8009890:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 8009894:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8009898:	b29b      	uxth	r3, r3
 800989a:	3b01      	subs	r3, #1
 800989c:	b29b      	uxth	r3, r3
 800989e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80098a0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	dae8      	bge.n	800987a <vl53l5cx_dci_write_data+0x92>
		}

	/* Add headers and footer */
		(void)memcpy(&p_dev->temp_buffer[0], headers, sizeof(headers));
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098ae:	69fa      	ldr	r2, [r7, #28]
 80098b0:	601a      	str	r2, [r3, #0]
		(void)memcpy(&p_dev->temp_buffer[data_size + (uint16_t)4],
 80098b2:	887b      	ldrh	r3, [r7, #2]
 80098b4:	3304      	adds	r3, #4
 80098b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098ba:	68fa      	ldr	r2, [r7, #12]
 80098bc:	4413      	add	r3, r2
 80098be:	461a      	mov	r2, r3
 80098c0:	f107 0314 	add.w	r3, r7, #20
 80098c4:	cb03      	ldmia	r3!, {r0, r1}
 80098c6:	6010      	str	r0, [r2, #0]
 80098c8:	6051      	str	r1, [r2, #4]
			footer, sizeof(footer));

	/* Send data to FW */
		status |= VL53L5CX_WrMulti(&(p_dev->platform),address,
 80098ca:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer,
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
			(uint32_t)((uint32_t)data_size + (uint32_t)12));
 80098d2:	887b      	ldrh	r3, [r7, #2]
		status |= VL53L5CX_WrMulti(&(p_dev->platform),address,
 80098d4:	330c      	adds	r3, #12
 80098d6:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 80098d8:	f7f8 f87a 	bl	80019d0 <VL53L5CX_WrMulti>
 80098dc:	4603      	mov	r3, r0
 80098de:	461a      	mov	r2, r3
 80098e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80098e4:	4313      	orrs	r3, r2
 80098e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 80098ea:	2303      	movs	r3, #3
 80098ec:	9301      	str	r3, [sp, #4]
 80098ee:	23ff      	movs	r3, #255	@ 0xff
 80098f0:	9300      	str	r3, [sp, #0]
 80098f2:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 80098f6:	2201      	movs	r2, #1
 80098f8:	2104      	movs	r1, #4
 80098fa:	68f8      	ldr	r0, [r7, #12]
 80098fc:	f7fe f9ac 	bl	8007c58 <_vl53l5cx_poll_for_answer>
 8009900:	4603      	mov	r3, r0
 8009902:	461a      	mov	r2, r3
 8009904:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009908:	4313      	orrs	r3, r2
 800990a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

		VL53L5CX_SwapBuffer(data, data_size);
 800990e:	887b      	ldrh	r3, [r7, #2]
 8009910:	4619      	mov	r1, r3
 8009912:	68b8      	ldr	r0, [r7, #8]
 8009914:	f7f8 f89c 	bl	8001a50 <VL53L5CX_SwapBuffer>
	}

	return status;
 8009918:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800991c:	4618      	mov	r0, r3
 800991e:	3728      	adds	r7, #40	@ 0x28
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}

08009924 <vl53l5cx_dci_replace_data>:
		uint32_t			index,
		uint16_t			data_size,
		uint8_t				*new_data,
		uint16_t			new_data_size,
		uint16_t			new_data_pos)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b086      	sub	sp, #24
 8009928:	af00      	add	r7, sp, #0
 800992a:	60f8      	str	r0, [r7, #12]
 800992c:	60b9      	str	r1, [r7, #8]
 800992e:	607a      	str	r2, [r7, #4]
 8009930:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L5CX_STATUS_OK;
 8009932:	2300      	movs	r3, #0
 8009934:	75fb      	strb	r3, [r7, #23]

	status |= vl53l5cx_dci_read_data(p_dev, data, index, data_size);
 8009936:	887b      	ldrh	r3, [r7, #2]
 8009938:	687a      	ldr	r2, [r7, #4]
 800993a:	68b9      	ldr	r1, [r7, #8]
 800993c:	68f8      	ldr	r0, [r7, #12]
 800993e:	f7ff fec9 	bl	80096d4 <vl53l5cx_dci_read_data>
 8009942:	4603      	mov	r3, r0
 8009944:	461a      	mov	r2, r3
 8009946:	7dfb      	ldrb	r3, [r7, #23]
 8009948:	4313      	orrs	r3, r2
 800994a:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(&(data[new_data_pos]), new_data, new_data_size);
 800994c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800994e:	68ba      	ldr	r2, [r7, #8]
 8009950:	4413      	add	r3, r2
 8009952:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009954:	6a39      	ldr	r1, [r7, #32]
 8009956:	4618      	mov	r0, r3
 8009958:	f000 fdf3 	bl	800a542 <memcpy>
	status |= vl53l5cx_dci_write_data(p_dev, data, index, data_size);
 800995c:	887b      	ldrh	r3, [r7, #2]
 800995e:	687a      	ldr	r2, [r7, #4]
 8009960:	68b9      	ldr	r1, [r7, #8]
 8009962:	68f8      	ldr	r0, [r7, #12]
 8009964:	f7ff ff40 	bl	80097e8 <vl53l5cx_dci_write_data>
 8009968:	4603      	mov	r3, r0
 800996a:	461a      	mov	r2, r3
 800996c:	7dfb      	ldrb	r3, [r7, #23]
 800996e:	4313      	orrs	r3, r2
 8009970:	75fb      	strb	r3, [r7, #23]

	return status;
 8009972:	7dfb      	ldrb	r3, [r7, #23]
}
 8009974:	4618      	mov	r0, r3
 8009976:	3718      	adds	r7, #24
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}

0800997c <__cvt>:
 800997c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009980:	ec57 6b10 	vmov	r6, r7, d0
 8009984:	2f00      	cmp	r7, #0
 8009986:	460c      	mov	r4, r1
 8009988:	4619      	mov	r1, r3
 800998a:	463b      	mov	r3, r7
 800998c:	bfbb      	ittet	lt
 800998e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009992:	461f      	movlt	r7, r3
 8009994:	2300      	movge	r3, #0
 8009996:	232d      	movlt	r3, #45	@ 0x2d
 8009998:	700b      	strb	r3, [r1, #0]
 800999a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800999c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80099a0:	4691      	mov	r9, r2
 80099a2:	f023 0820 	bic.w	r8, r3, #32
 80099a6:	bfbc      	itt	lt
 80099a8:	4632      	movlt	r2, r6
 80099aa:	4616      	movlt	r6, r2
 80099ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80099b0:	d005      	beq.n	80099be <__cvt+0x42>
 80099b2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80099b6:	d100      	bne.n	80099ba <__cvt+0x3e>
 80099b8:	3401      	adds	r4, #1
 80099ba:	2102      	movs	r1, #2
 80099bc:	e000      	b.n	80099c0 <__cvt+0x44>
 80099be:	2103      	movs	r1, #3
 80099c0:	ab03      	add	r3, sp, #12
 80099c2:	9301      	str	r3, [sp, #4]
 80099c4:	ab02      	add	r3, sp, #8
 80099c6:	9300      	str	r3, [sp, #0]
 80099c8:	ec47 6b10 	vmov	d0, r6, r7
 80099cc:	4653      	mov	r3, sl
 80099ce:	4622      	mov	r2, r4
 80099d0:	f000 fe4e 	bl	800a670 <_dtoa_r>
 80099d4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80099d8:	4605      	mov	r5, r0
 80099da:	d119      	bne.n	8009a10 <__cvt+0x94>
 80099dc:	f019 0f01 	tst.w	r9, #1
 80099e0:	d00e      	beq.n	8009a00 <__cvt+0x84>
 80099e2:	eb00 0904 	add.w	r9, r0, r4
 80099e6:	2200      	movs	r2, #0
 80099e8:	2300      	movs	r3, #0
 80099ea:	4630      	mov	r0, r6
 80099ec:	4639      	mov	r1, r7
 80099ee:	f7f7 f86b 	bl	8000ac8 <__aeabi_dcmpeq>
 80099f2:	b108      	cbz	r0, 80099f8 <__cvt+0x7c>
 80099f4:	f8cd 900c 	str.w	r9, [sp, #12]
 80099f8:	2230      	movs	r2, #48	@ 0x30
 80099fa:	9b03      	ldr	r3, [sp, #12]
 80099fc:	454b      	cmp	r3, r9
 80099fe:	d31e      	bcc.n	8009a3e <__cvt+0xc2>
 8009a00:	9b03      	ldr	r3, [sp, #12]
 8009a02:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a04:	1b5b      	subs	r3, r3, r5
 8009a06:	4628      	mov	r0, r5
 8009a08:	6013      	str	r3, [r2, #0]
 8009a0a:	b004      	add	sp, #16
 8009a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a10:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009a14:	eb00 0904 	add.w	r9, r0, r4
 8009a18:	d1e5      	bne.n	80099e6 <__cvt+0x6a>
 8009a1a:	7803      	ldrb	r3, [r0, #0]
 8009a1c:	2b30      	cmp	r3, #48	@ 0x30
 8009a1e:	d10a      	bne.n	8009a36 <__cvt+0xba>
 8009a20:	2200      	movs	r2, #0
 8009a22:	2300      	movs	r3, #0
 8009a24:	4630      	mov	r0, r6
 8009a26:	4639      	mov	r1, r7
 8009a28:	f7f7 f84e 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a2c:	b918      	cbnz	r0, 8009a36 <__cvt+0xba>
 8009a2e:	f1c4 0401 	rsb	r4, r4, #1
 8009a32:	f8ca 4000 	str.w	r4, [sl]
 8009a36:	f8da 3000 	ldr.w	r3, [sl]
 8009a3a:	4499      	add	r9, r3
 8009a3c:	e7d3      	b.n	80099e6 <__cvt+0x6a>
 8009a3e:	1c59      	adds	r1, r3, #1
 8009a40:	9103      	str	r1, [sp, #12]
 8009a42:	701a      	strb	r2, [r3, #0]
 8009a44:	e7d9      	b.n	80099fa <__cvt+0x7e>

08009a46 <__exponent>:
 8009a46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a48:	2900      	cmp	r1, #0
 8009a4a:	bfba      	itte	lt
 8009a4c:	4249      	neglt	r1, r1
 8009a4e:	232d      	movlt	r3, #45	@ 0x2d
 8009a50:	232b      	movge	r3, #43	@ 0x2b
 8009a52:	2909      	cmp	r1, #9
 8009a54:	7002      	strb	r2, [r0, #0]
 8009a56:	7043      	strb	r3, [r0, #1]
 8009a58:	dd29      	ble.n	8009aae <__exponent+0x68>
 8009a5a:	f10d 0307 	add.w	r3, sp, #7
 8009a5e:	461d      	mov	r5, r3
 8009a60:	270a      	movs	r7, #10
 8009a62:	461a      	mov	r2, r3
 8009a64:	fbb1 f6f7 	udiv	r6, r1, r7
 8009a68:	fb07 1416 	mls	r4, r7, r6, r1
 8009a6c:	3430      	adds	r4, #48	@ 0x30
 8009a6e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009a72:	460c      	mov	r4, r1
 8009a74:	2c63      	cmp	r4, #99	@ 0x63
 8009a76:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8009a7a:	4631      	mov	r1, r6
 8009a7c:	dcf1      	bgt.n	8009a62 <__exponent+0x1c>
 8009a7e:	3130      	adds	r1, #48	@ 0x30
 8009a80:	1e94      	subs	r4, r2, #2
 8009a82:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009a86:	1c41      	adds	r1, r0, #1
 8009a88:	4623      	mov	r3, r4
 8009a8a:	42ab      	cmp	r3, r5
 8009a8c:	d30a      	bcc.n	8009aa4 <__exponent+0x5e>
 8009a8e:	f10d 0309 	add.w	r3, sp, #9
 8009a92:	1a9b      	subs	r3, r3, r2
 8009a94:	42ac      	cmp	r4, r5
 8009a96:	bf88      	it	hi
 8009a98:	2300      	movhi	r3, #0
 8009a9a:	3302      	adds	r3, #2
 8009a9c:	4403      	add	r3, r0
 8009a9e:	1a18      	subs	r0, r3, r0
 8009aa0:	b003      	add	sp, #12
 8009aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009aa4:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009aa8:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009aac:	e7ed      	b.n	8009a8a <__exponent+0x44>
 8009aae:	2330      	movs	r3, #48	@ 0x30
 8009ab0:	3130      	adds	r1, #48	@ 0x30
 8009ab2:	7083      	strb	r3, [r0, #2]
 8009ab4:	70c1      	strb	r1, [r0, #3]
 8009ab6:	1d03      	adds	r3, r0, #4
 8009ab8:	e7f1      	b.n	8009a9e <__exponent+0x58>
	...

08009abc <_printf_float>:
 8009abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ac0:	b08d      	sub	sp, #52	@ 0x34
 8009ac2:	460c      	mov	r4, r1
 8009ac4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009ac8:	4616      	mov	r6, r2
 8009aca:	461f      	mov	r7, r3
 8009acc:	4605      	mov	r5, r0
 8009ace:	f000 fd07 	bl	800a4e0 <_localeconv_r>
 8009ad2:	6803      	ldr	r3, [r0, #0]
 8009ad4:	9304      	str	r3, [sp, #16]
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f7f6 fbca 	bl	8000270 <strlen>
 8009adc:	2300      	movs	r3, #0
 8009ade:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ae0:	f8d8 3000 	ldr.w	r3, [r8]
 8009ae4:	9005      	str	r0, [sp, #20]
 8009ae6:	3307      	adds	r3, #7
 8009ae8:	f023 0307 	bic.w	r3, r3, #7
 8009aec:	f103 0208 	add.w	r2, r3, #8
 8009af0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009af4:	f8d4 b000 	ldr.w	fp, [r4]
 8009af8:	f8c8 2000 	str.w	r2, [r8]
 8009afc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009b00:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009b04:	9307      	str	r3, [sp, #28]
 8009b06:	f8cd 8018 	str.w	r8, [sp, #24]
 8009b0a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009b0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b12:	4b9c      	ldr	r3, [pc, #624]	@ (8009d84 <_printf_float+0x2c8>)
 8009b14:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009b18:	f7f7 f808 	bl	8000b2c <__aeabi_dcmpun>
 8009b1c:	bb70      	cbnz	r0, 8009b7c <_printf_float+0xc0>
 8009b1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b22:	4b98      	ldr	r3, [pc, #608]	@ (8009d84 <_printf_float+0x2c8>)
 8009b24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009b28:	f7f6 ffe2 	bl	8000af0 <__aeabi_dcmple>
 8009b2c:	bb30      	cbnz	r0, 8009b7c <_printf_float+0xc0>
 8009b2e:	2200      	movs	r2, #0
 8009b30:	2300      	movs	r3, #0
 8009b32:	4640      	mov	r0, r8
 8009b34:	4649      	mov	r1, r9
 8009b36:	f7f6 ffd1 	bl	8000adc <__aeabi_dcmplt>
 8009b3a:	b110      	cbz	r0, 8009b42 <_printf_float+0x86>
 8009b3c:	232d      	movs	r3, #45	@ 0x2d
 8009b3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b42:	4a91      	ldr	r2, [pc, #580]	@ (8009d88 <_printf_float+0x2cc>)
 8009b44:	4b91      	ldr	r3, [pc, #580]	@ (8009d8c <_printf_float+0x2d0>)
 8009b46:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009b4a:	bf94      	ite	ls
 8009b4c:	4690      	movls	r8, r2
 8009b4e:	4698      	movhi	r8, r3
 8009b50:	2303      	movs	r3, #3
 8009b52:	6123      	str	r3, [r4, #16]
 8009b54:	f02b 0304 	bic.w	r3, fp, #4
 8009b58:	6023      	str	r3, [r4, #0]
 8009b5a:	f04f 0900 	mov.w	r9, #0
 8009b5e:	9700      	str	r7, [sp, #0]
 8009b60:	4633      	mov	r3, r6
 8009b62:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009b64:	4621      	mov	r1, r4
 8009b66:	4628      	mov	r0, r5
 8009b68:	f000 f9d2 	bl	8009f10 <_printf_common>
 8009b6c:	3001      	adds	r0, #1
 8009b6e:	f040 808d 	bne.w	8009c8c <_printf_float+0x1d0>
 8009b72:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009b76:	b00d      	add	sp, #52	@ 0x34
 8009b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b7c:	4642      	mov	r2, r8
 8009b7e:	464b      	mov	r3, r9
 8009b80:	4640      	mov	r0, r8
 8009b82:	4649      	mov	r1, r9
 8009b84:	f7f6 ffd2 	bl	8000b2c <__aeabi_dcmpun>
 8009b88:	b140      	cbz	r0, 8009b9c <_printf_float+0xe0>
 8009b8a:	464b      	mov	r3, r9
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	bfbc      	itt	lt
 8009b90:	232d      	movlt	r3, #45	@ 0x2d
 8009b92:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009b96:	4a7e      	ldr	r2, [pc, #504]	@ (8009d90 <_printf_float+0x2d4>)
 8009b98:	4b7e      	ldr	r3, [pc, #504]	@ (8009d94 <_printf_float+0x2d8>)
 8009b9a:	e7d4      	b.n	8009b46 <_printf_float+0x8a>
 8009b9c:	6863      	ldr	r3, [r4, #4]
 8009b9e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009ba2:	9206      	str	r2, [sp, #24]
 8009ba4:	1c5a      	adds	r2, r3, #1
 8009ba6:	d13b      	bne.n	8009c20 <_printf_float+0x164>
 8009ba8:	2306      	movs	r3, #6
 8009baa:	6063      	str	r3, [r4, #4]
 8009bac:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	6022      	str	r2, [r4, #0]
 8009bb4:	9303      	str	r3, [sp, #12]
 8009bb6:	ab0a      	add	r3, sp, #40	@ 0x28
 8009bb8:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009bbc:	ab09      	add	r3, sp, #36	@ 0x24
 8009bbe:	9300      	str	r3, [sp, #0]
 8009bc0:	6861      	ldr	r1, [r4, #4]
 8009bc2:	ec49 8b10 	vmov	d0, r8, r9
 8009bc6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009bca:	4628      	mov	r0, r5
 8009bcc:	f7ff fed6 	bl	800997c <__cvt>
 8009bd0:	9b06      	ldr	r3, [sp, #24]
 8009bd2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009bd4:	2b47      	cmp	r3, #71	@ 0x47
 8009bd6:	4680      	mov	r8, r0
 8009bd8:	d129      	bne.n	8009c2e <_printf_float+0x172>
 8009bda:	1cc8      	adds	r0, r1, #3
 8009bdc:	db02      	blt.n	8009be4 <_printf_float+0x128>
 8009bde:	6863      	ldr	r3, [r4, #4]
 8009be0:	4299      	cmp	r1, r3
 8009be2:	dd41      	ble.n	8009c68 <_printf_float+0x1ac>
 8009be4:	f1aa 0a02 	sub.w	sl, sl, #2
 8009be8:	fa5f fa8a 	uxtb.w	sl, sl
 8009bec:	3901      	subs	r1, #1
 8009bee:	4652      	mov	r2, sl
 8009bf0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009bf4:	9109      	str	r1, [sp, #36]	@ 0x24
 8009bf6:	f7ff ff26 	bl	8009a46 <__exponent>
 8009bfa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009bfc:	1813      	adds	r3, r2, r0
 8009bfe:	2a01      	cmp	r2, #1
 8009c00:	4681      	mov	r9, r0
 8009c02:	6123      	str	r3, [r4, #16]
 8009c04:	dc02      	bgt.n	8009c0c <_printf_float+0x150>
 8009c06:	6822      	ldr	r2, [r4, #0]
 8009c08:	07d2      	lsls	r2, r2, #31
 8009c0a:	d501      	bpl.n	8009c10 <_printf_float+0x154>
 8009c0c:	3301      	adds	r3, #1
 8009c0e:	6123      	str	r3, [r4, #16]
 8009c10:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d0a2      	beq.n	8009b5e <_printf_float+0xa2>
 8009c18:	232d      	movs	r3, #45	@ 0x2d
 8009c1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c1e:	e79e      	b.n	8009b5e <_printf_float+0xa2>
 8009c20:	9a06      	ldr	r2, [sp, #24]
 8009c22:	2a47      	cmp	r2, #71	@ 0x47
 8009c24:	d1c2      	bne.n	8009bac <_printf_float+0xf0>
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d1c0      	bne.n	8009bac <_printf_float+0xf0>
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	e7bd      	b.n	8009baa <_printf_float+0xee>
 8009c2e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009c32:	d9db      	bls.n	8009bec <_printf_float+0x130>
 8009c34:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009c38:	d118      	bne.n	8009c6c <_printf_float+0x1b0>
 8009c3a:	2900      	cmp	r1, #0
 8009c3c:	6863      	ldr	r3, [r4, #4]
 8009c3e:	dd0b      	ble.n	8009c58 <_printf_float+0x19c>
 8009c40:	6121      	str	r1, [r4, #16]
 8009c42:	b913      	cbnz	r3, 8009c4a <_printf_float+0x18e>
 8009c44:	6822      	ldr	r2, [r4, #0]
 8009c46:	07d0      	lsls	r0, r2, #31
 8009c48:	d502      	bpl.n	8009c50 <_printf_float+0x194>
 8009c4a:	3301      	adds	r3, #1
 8009c4c:	440b      	add	r3, r1
 8009c4e:	6123      	str	r3, [r4, #16]
 8009c50:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009c52:	f04f 0900 	mov.w	r9, #0
 8009c56:	e7db      	b.n	8009c10 <_printf_float+0x154>
 8009c58:	b913      	cbnz	r3, 8009c60 <_printf_float+0x1a4>
 8009c5a:	6822      	ldr	r2, [r4, #0]
 8009c5c:	07d2      	lsls	r2, r2, #31
 8009c5e:	d501      	bpl.n	8009c64 <_printf_float+0x1a8>
 8009c60:	3302      	adds	r3, #2
 8009c62:	e7f4      	b.n	8009c4e <_printf_float+0x192>
 8009c64:	2301      	movs	r3, #1
 8009c66:	e7f2      	b.n	8009c4e <_printf_float+0x192>
 8009c68:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009c6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c6e:	4299      	cmp	r1, r3
 8009c70:	db05      	blt.n	8009c7e <_printf_float+0x1c2>
 8009c72:	6823      	ldr	r3, [r4, #0]
 8009c74:	6121      	str	r1, [r4, #16]
 8009c76:	07d8      	lsls	r0, r3, #31
 8009c78:	d5ea      	bpl.n	8009c50 <_printf_float+0x194>
 8009c7a:	1c4b      	adds	r3, r1, #1
 8009c7c:	e7e7      	b.n	8009c4e <_printf_float+0x192>
 8009c7e:	2900      	cmp	r1, #0
 8009c80:	bfd4      	ite	le
 8009c82:	f1c1 0202 	rsble	r2, r1, #2
 8009c86:	2201      	movgt	r2, #1
 8009c88:	4413      	add	r3, r2
 8009c8a:	e7e0      	b.n	8009c4e <_printf_float+0x192>
 8009c8c:	6823      	ldr	r3, [r4, #0]
 8009c8e:	055a      	lsls	r2, r3, #21
 8009c90:	d407      	bmi.n	8009ca2 <_printf_float+0x1e6>
 8009c92:	6923      	ldr	r3, [r4, #16]
 8009c94:	4642      	mov	r2, r8
 8009c96:	4631      	mov	r1, r6
 8009c98:	4628      	mov	r0, r5
 8009c9a:	47b8      	blx	r7
 8009c9c:	3001      	adds	r0, #1
 8009c9e:	d12b      	bne.n	8009cf8 <_printf_float+0x23c>
 8009ca0:	e767      	b.n	8009b72 <_printf_float+0xb6>
 8009ca2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009ca6:	f240 80dd 	bls.w	8009e64 <_printf_float+0x3a8>
 8009caa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009cae:	2200      	movs	r2, #0
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	f7f6 ff09 	bl	8000ac8 <__aeabi_dcmpeq>
 8009cb6:	2800      	cmp	r0, #0
 8009cb8:	d033      	beq.n	8009d22 <_printf_float+0x266>
 8009cba:	4a37      	ldr	r2, [pc, #220]	@ (8009d98 <_printf_float+0x2dc>)
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	4631      	mov	r1, r6
 8009cc0:	4628      	mov	r0, r5
 8009cc2:	47b8      	blx	r7
 8009cc4:	3001      	adds	r0, #1
 8009cc6:	f43f af54 	beq.w	8009b72 <_printf_float+0xb6>
 8009cca:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009cce:	4543      	cmp	r3, r8
 8009cd0:	db02      	blt.n	8009cd8 <_printf_float+0x21c>
 8009cd2:	6823      	ldr	r3, [r4, #0]
 8009cd4:	07d8      	lsls	r0, r3, #31
 8009cd6:	d50f      	bpl.n	8009cf8 <_printf_float+0x23c>
 8009cd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009cdc:	4631      	mov	r1, r6
 8009cde:	4628      	mov	r0, r5
 8009ce0:	47b8      	blx	r7
 8009ce2:	3001      	adds	r0, #1
 8009ce4:	f43f af45 	beq.w	8009b72 <_printf_float+0xb6>
 8009ce8:	f04f 0900 	mov.w	r9, #0
 8009cec:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8009cf0:	f104 0a1a 	add.w	sl, r4, #26
 8009cf4:	45c8      	cmp	r8, r9
 8009cf6:	dc09      	bgt.n	8009d0c <_printf_float+0x250>
 8009cf8:	6823      	ldr	r3, [r4, #0]
 8009cfa:	079b      	lsls	r3, r3, #30
 8009cfc:	f100 8103 	bmi.w	8009f06 <_printf_float+0x44a>
 8009d00:	68e0      	ldr	r0, [r4, #12]
 8009d02:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d04:	4298      	cmp	r0, r3
 8009d06:	bfb8      	it	lt
 8009d08:	4618      	movlt	r0, r3
 8009d0a:	e734      	b.n	8009b76 <_printf_float+0xba>
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	4652      	mov	r2, sl
 8009d10:	4631      	mov	r1, r6
 8009d12:	4628      	mov	r0, r5
 8009d14:	47b8      	blx	r7
 8009d16:	3001      	adds	r0, #1
 8009d18:	f43f af2b 	beq.w	8009b72 <_printf_float+0xb6>
 8009d1c:	f109 0901 	add.w	r9, r9, #1
 8009d20:	e7e8      	b.n	8009cf4 <_printf_float+0x238>
 8009d22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	dc39      	bgt.n	8009d9c <_printf_float+0x2e0>
 8009d28:	4a1b      	ldr	r2, [pc, #108]	@ (8009d98 <_printf_float+0x2dc>)
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	4631      	mov	r1, r6
 8009d2e:	4628      	mov	r0, r5
 8009d30:	47b8      	blx	r7
 8009d32:	3001      	adds	r0, #1
 8009d34:	f43f af1d 	beq.w	8009b72 <_printf_float+0xb6>
 8009d38:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009d3c:	ea59 0303 	orrs.w	r3, r9, r3
 8009d40:	d102      	bne.n	8009d48 <_printf_float+0x28c>
 8009d42:	6823      	ldr	r3, [r4, #0]
 8009d44:	07d9      	lsls	r1, r3, #31
 8009d46:	d5d7      	bpl.n	8009cf8 <_printf_float+0x23c>
 8009d48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d4c:	4631      	mov	r1, r6
 8009d4e:	4628      	mov	r0, r5
 8009d50:	47b8      	blx	r7
 8009d52:	3001      	adds	r0, #1
 8009d54:	f43f af0d 	beq.w	8009b72 <_printf_float+0xb6>
 8009d58:	f04f 0a00 	mov.w	sl, #0
 8009d5c:	f104 0b1a 	add.w	fp, r4, #26
 8009d60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d62:	425b      	negs	r3, r3
 8009d64:	4553      	cmp	r3, sl
 8009d66:	dc01      	bgt.n	8009d6c <_printf_float+0x2b0>
 8009d68:	464b      	mov	r3, r9
 8009d6a:	e793      	b.n	8009c94 <_printf_float+0x1d8>
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	465a      	mov	r2, fp
 8009d70:	4631      	mov	r1, r6
 8009d72:	4628      	mov	r0, r5
 8009d74:	47b8      	blx	r7
 8009d76:	3001      	adds	r0, #1
 8009d78:	f43f aefb 	beq.w	8009b72 <_printf_float+0xb6>
 8009d7c:	f10a 0a01 	add.w	sl, sl, #1
 8009d80:	e7ee      	b.n	8009d60 <_printf_float+0x2a4>
 8009d82:	bf00      	nop
 8009d84:	7fefffff 	.word	0x7fefffff
 8009d88:	080223d4 	.word	0x080223d4
 8009d8c:	080223d8 	.word	0x080223d8
 8009d90:	080223dc 	.word	0x080223dc
 8009d94:	080223e0 	.word	0x080223e0
 8009d98:	080223e4 	.word	0x080223e4
 8009d9c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009d9e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009da2:	4553      	cmp	r3, sl
 8009da4:	bfa8      	it	ge
 8009da6:	4653      	movge	r3, sl
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	4699      	mov	r9, r3
 8009dac:	dc36      	bgt.n	8009e1c <_printf_float+0x360>
 8009dae:	f04f 0b00 	mov.w	fp, #0
 8009db2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009db6:	f104 021a 	add.w	r2, r4, #26
 8009dba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009dbc:	9306      	str	r3, [sp, #24]
 8009dbe:	eba3 0309 	sub.w	r3, r3, r9
 8009dc2:	455b      	cmp	r3, fp
 8009dc4:	dc31      	bgt.n	8009e2a <_printf_float+0x36e>
 8009dc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dc8:	459a      	cmp	sl, r3
 8009dca:	dc3a      	bgt.n	8009e42 <_printf_float+0x386>
 8009dcc:	6823      	ldr	r3, [r4, #0]
 8009dce:	07da      	lsls	r2, r3, #31
 8009dd0:	d437      	bmi.n	8009e42 <_printf_float+0x386>
 8009dd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dd4:	ebaa 0903 	sub.w	r9, sl, r3
 8009dd8:	9b06      	ldr	r3, [sp, #24]
 8009dda:	ebaa 0303 	sub.w	r3, sl, r3
 8009dde:	4599      	cmp	r9, r3
 8009de0:	bfa8      	it	ge
 8009de2:	4699      	movge	r9, r3
 8009de4:	f1b9 0f00 	cmp.w	r9, #0
 8009de8:	dc33      	bgt.n	8009e52 <_printf_float+0x396>
 8009dea:	f04f 0800 	mov.w	r8, #0
 8009dee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009df2:	f104 0b1a 	add.w	fp, r4, #26
 8009df6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009df8:	ebaa 0303 	sub.w	r3, sl, r3
 8009dfc:	eba3 0309 	sub.w	r3, r3, r9
 8009e00:	4543      	cmp	r3, r8
 8009e02:	f77f af79 	ble.w	8009cf8 <_printf_float+0x23c>
 8009e06:	2301      	movs	r3, #1
 8009e08:	465a      	mov	r2, fp
 8009e0a:	4631      	mov	r1, r6
 8009e0c:	4628      	mov	r0, r5
 8009e0e:	47b8      	blx	r7
 8009e10:	3001      	adds	r0, #1
 8009e12:	f43f aeae 	beq.w	8009b72 <_printf_float+0xb6>
 8009e16:	f108 0801 	add.w	r8, r8, #1
 8009e1a:	e7ec      	b.n	8009df6 <_printf_float+0x33a>
 8009e1c:	4642      	mov	r2, r8
 8009e1e:	4631      	mov	r1, r6
 8009e20:	4628      	mov	r0, r5
 8009e22:	47b8      	blx	r7
 8009e24:	3001      	adds	r0, #1
 8009e26:	d1c2      	bne.n	8009dae <_printf_float+0x2f2>
 8009e28:	e6a3      	b.n	8009b72 <_printf_float+0xb6>
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	4631      	mov	r1, r6
 8009e2e:	4628      	mov	r0, r5
 8009e30:	9206      	str	r2, [sp, #24]
 8009e32:	47b8      	blx	r7
 8009e34:	3001      	adds	r0, #1
 8009e36:	f43f ae9c 	beq.w	8009b72 <_printf_float+0xb6>
 8009e3a:	9a06      	ldr	r2, [sp, #24]
 8009e3c:	f10b 0b01 	add.w	fp, fp, #1
 8009e40:	e7bb      	b.n	8009dba <_printf_float+0x2fe>
 8009e42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e46:	4631      	mov	r1, r6
 8009e48:	4628      	mov	r0, r5
 8009e4a:	47b8      	blx	r7
 8009e4c:	3001      	adds	r0, #1
 8009e4e:	d1c0      	bne.n	8009dd2 <_printf_float+0x316>
 8009e50:	e68f      	b.n	8009b72 <_printf_float+0xb6>
 8009e52:	9a06      	ldr	r2, [sp, #24]
 8009e54:	464b      	mov	r3, r9
 8009e56:	4442      	add	r2, r8
 8009e58:	4631      	mov	r1, r6
 8009e5a:	4628      	mov	r0, r5
 8009e5c:	47b8      	blx	r7
 8009e5e:	3001      	adds	r0, #1
 8009e60:	d1c3      	bne.n	8009dea <_printf_float+0x32e>
 8009e62:	e686      	b.n	8009b72 <_printf_float+0xb6>
 8009e64:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009e68:	f1ba 0f01 	cmp.w	sl, #1
 8009e6c:	dc01      	bgt.n	8009e72 <_printf_float+0x3b6>
 8009e6e:	07db      	lsls	r3, r3, #31
 8009e70:	d536      	bpl.n	8009ee0 <_printf_float+0x424>
 8009e72:	2301      	movs	r3, #1
 8009e74:	4642      	mov	r2, r8
 8009e76:	4631      	mov	r1, r6
 8009e78:	4628      	mov	r0, r5
 8009e7a:	47b8      	blx	r7
 8009e7c:	3001      	adds	r0, #1
 8009e7e:	f43f ae78 	beq.w	8009b72 <_printf_float+0xb6>
 8009e82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e86:	4631      	mov	r1, r6
 8009e88:	4628      	mov	r0, r5
 8009e8a:	47b8      	blx	r7
 8009e8c:	3001      	adds	r0, #1
 8009e8e:	f43f ae70 	beq.w	8009b72 <_printf_float+0xb6>
 8009e92:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009e96:	2200      	movs	r2, #0
 8009e98:	2300      	movs	r3, #0
 8009e9a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8009e9e:	f7f6 fe13 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ea2:	b9c0      	cbnz	r0, 8009ed6 <_printf_float+0x41a>
 8009ea4:	4653      	mov	r3, sl
 8009ea6:	f108 0201 	add.w	r2, r8, #1
 8009eaa:	4631      	mov	r1, r6
 8009eac:	4628      	mov	r0, r5
 8009eae:	47b8      	blx	r7
 8009eb0:	3001      	adds	r0, #1
 8009eb2:	d10c      	bne.n	8009ece <_printf_float+0x412>
 8009eb4:	e65d      	b.n	8009b72 <_printf_float+0xb6>
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	465a      	mov	r2, fp
 8009eba:	4631      	mov	r1, r6
 8009ebc:	4628      	mov	r0, r5
 8009ebe:	47b8      	blx	r7
 8009ec0:	3001      	adds	r0, #1
 8009ec2:	f43f ae56 	beq.w	8009b72 <_printf_float+0xb6>
 8009ec6:	f108 0801 	add.w	r8, r8, #1
 8009eca:	45d0      	cmp	r8, sl
 8009ecc:	dbf3      	blt.n	8009eb6 <_printf_float+0x3fa>
 8009ece:	464b      	mov	r3, r9
 8009ed0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009ed4:	e6df      	b.n	8009c96 <_printf_float+0x1da>
 8009ed6:	f04f 0800 	mov.w	r8, #0
 8009eda:	f104 0b1a 	add.w	fp, r4, #26
 8009ede:	e7f4      	b.n	8009eca <_printf_float+0x40e>
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	4642      	mov	r2, r8
 8009ee4:	e7e1      	b.n	8009eaa <_printf_float+0x3ee>
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	464a      	mov	r2, r9
 8009eea:	4631      	mov	r1, r6
 8009eec:	4628      	mov	r0, r5
 8009eee:	47b8      	blx	r7
 8009ef0:	3001      	adds	r0, #1
 8009ef2:	f43f ae3e 	beq.w	8009b72 <_printf_float+0xb6>
 8009ef6:	f108 0801 	add.w	r8, r8, #1
 8009efa:	68e3      	ldr	r3, [r4, #12]
 8009efc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009efe:	1a5b      	subs	r3, r3, r1
 8009f00:	4543      	cmp	r3, r8
 8009f02:	dcf0      	bgt.n	8009ee6 <_printf_float+0x42a>
 8009f04:	e6fc      	b.n	8009d00 <_printf_float+0x244>
 8009f06:	f04f 0800 	mov.w	r8, #0
 8009f0a:	f104 0919 	add.w	r9, r4, #25
 8009f0e:	e7f4      	b.n	8009efa <_printf_float+0x43e>

08009f10 <_printf_common>:
 8009f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f14:	4616      	mov	r6, r2
 8009f16:	4698      	mov	r8, r3
 8009f18:	688a      	ldr	r2, [r1, #8]
 8009f1a:	690b      	ldr	r3, [r1, #16]
 8009f1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009f20:	4293      	cmp	r3, r2
 8009f22:	bfb8      	it	lt
 8009f24:	4613      	movlt	r3, r2
 8009f26:	6033      	str	r3, [r6, #0]
 8009f28:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009f2c:	4607      	mov	r7, r0
 8009f2e:	460c      	mov	r4, r1
 8009f30:	b10a      	cbz	r2, 8009f36 <_printf_common+0x26>
 8009f32:	3301      	adds	r3, #1
 8009f34:	6033      	str	r3, [r6, #0]
 8009f36:	6823      	ldr	r3, [r4, #0]
 8009f38:	0699      	lsls	r1, r3, #26
 8009f3a:	bf42      	ittt	mi
 8009f3c:	6833      	ldrmi	r3, [r6, #0]
 8009f3e:	3302      	addmi	r3, #2
 8009f40:	6033      	strmi	r3, [r6, #0]
 8009f42:	6825      	ldr	r5, [r4, #0]
 8009f44:	f015 0506 	ands.w	r5, r5, #6
 8009f48:	d106      	bne.n	8009f58 <_printf_common+0x48>
 8009f4a:	f104 0a19 	add.w	sl, r4, #25
 8009f4e:	68e3      	ldr	r3, [r4, #12]
 8009f50:	6832      	ldr	r2, [r6, #0]
 8009f52:	1a9b      	subs	r3, r3, r2
 8009f54:	42ab      	cmp	r3, r5
 8009f56:	dc26      	bgt.n	8009fa6 <_printf_common+0x96>
 8009f58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009f5c:	6822      	ldr	r2, [r4, #0]
 8009f5e:	3b00      	subs	r3, #0
 8009f60:	bf18      	it	ne
 8009f62:	2301      	movne	r3, #1
 8009f64:	0692      	lsls	r2, r2, #26
 8009f66:	d42b      	bmi.n	8009fc0 <_printf_common+0xb0>
 8009f68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009f6c:	4641      	mov	r1, r8
 8009f6e:	4638      	mov	r0, r7
 8009f70:	47c8      	blx	r9
 8009f72:	3001      	adds	r0, #1
 8009f74:	d01e      	beq.n	8009fb4 <_printf_common+0xa4>
 8009f76:	6823      	ldr	r3, [r4, #0]
 8009f78:	6922      	ldr	r2, [r4, #16]
 8009f7a:	f003 0306 	and.w	r3, r3, #6
 8009f7e:	2b04      	cmp	r3, #4
 8009f80:	bf02      	ittt	eq
 8009f82:	68e5      	ldreq	r5, [r4, #12]
 8009f84:	6833      	ldreq	r3, [r6, #0]
 8009f86:	1aed      	subeq	r5, r5, r3
 8009f88:	68a3      	ldr	r3, [r4, #8]
 8009f8a:	bf0c      	ite	eq
 8009f8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f90:	2500      	movne	r5, #0
 8009f92:	4293      	cmp	r3, r2
 8009f94:	bfc4      	itt	gt
 8009f96:	1a9b      	subgt	r3, r3, r2
 8009f98:	18ed      	addgt	r5, r5, r3
 8009f9a:	2600      	movs	r6, #0
 8009f9c:	341a      	adds	r4, #26
 8009f9e:	42b5      	cmp	r5, r6
 8009fa0:	d11a      	bne.n	8009fd8 <_printf_common+0xc8>
 8009fa2:	2000      	movs	r0, #0
 8009fa4:	e008      	b.n	8009fb8 <_printf_common+0xa8>
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	4652      	mov	r2, sl
 8009faa:	4641      	mov	r1, r8
 8009fac:	4638      	mov	r0, r7
 8009fae:	47c8      	blx	r9
 8009fb0:	3001      	adds	r0, #1
 8009fb2:	d103      	bne.n	8009fbc <_printf_common+0xac>
 8009fb4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fbc:	3501      	adds	r5, #1
 8009fbe:	e7c6      	b.n	8009f4e <_printf_common+0x3e>
 8009fc0:	18e1      	adds	r1, r4, r3
 8009fc2:	1c5a      	adds	r2, r3, #1
 8009fc4:	2030      	movs	r0, #48	@ 0x30
 8009fc6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009fca:	4422      	add	r2, r4
 8009fcc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009fd0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009fd4:	3302      	adds	r3, #2
 8009fd6:	e7c7      	b.n	8009f68 <_printf_common+0x58>
 8009fd8:	2301      	movs	r3, #1
 8009fda:	4622      	mov	r2, r4
 8009fdc:	4641      	mov	r1, r8
 8009fde:	4638      	mov	r0, r7
 8009fe0:	47c8      	blx	r9
 8009fe2:	3001      	adds	r0, #1
 8009fe4:	d0e6      	beq.n	8009fb4 <_printf_common+0xa4>
 8009fe6:	3601      	adds	r6, #1
 8009fe8:	e7d9      	b.n	8009f9e <_printf_common+0x8e>
	...

08009fec <_printf_i>:
 8009fec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ff0:	7e0f      	ldrb	r7, [r1, #24]
 8009ff2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009ff4:	2f78      	cmp	r7, #120	@ 0x78
 8009ff6:	4691      	mov	r9, r2
 8009ff8:	4680      	mov	r8, r0
 8009ffa:	460c      	mov	r4, r1
 8009ffc:	469a      	mov	sl, r3
 8009ffe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a002:	d807      	bhi.n	800a014 <_printf_i+0x28>
 800a004:	2f62      	cmp	r7, #98	@ 0x62
 800a006:	d80a      	bhi.n	800a01e <_printf_i+0x32>
 800a008:	2f00      	cmp	r7, #0
 800a00a:	f000 80d2 	beq.w	800a1b2 <_printf_i+0x1c6>
 800a00e:	2f58      	cmp	r7, #88	@ 0x58
 800a010:	f000 80b9 	beq.w	800a186 <_printf_i+0x19a>
 800a014:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a018:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a01c:	e03a      	b.n	800a094 <_printf_i+0xa8>
 800a01e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a022:	2b15      	cmp	r3, #21
 800a024:	d8f6      	bhi.n	800a014 <_printf_i+0x28>
 800a026:	a101      	add	r1, pc, #4	@ (adr r1, 800a02c <_printf_i+0x40>)
 800a028:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a02c:	0800a085 	.word	0x0800a085
 800a030:	0800a099 	.word	0x0800a099
 800a034:	0800a015 	.word	0x0800a015
 800a038:	0800a015 	.word	0x0800a015
 800a03c:	0800a015 	.word	0x0800a015
 800a040:	0800a015 	.word	0x0800a015
 800a044:	0800a099 	.word	0x0800a099
 800a048:	0800a015 	.word	0x0800a015
 800a04c:	0800a015 	.word	0x0800a015
 800a050:	0800a015 	.word	0x0800a015
 800a054:	0800a015 	.word	0x0800a015
 800a058:	0800a199 	.word	0x0800a199
 800a05c:	0800a0c3 	.word	0x0800a0c3
 800a060:	0800a153 	.word	0x0800a153
 800a064:	0800a015 	.word	0x0800a015
 800a068:	0800a015 	.word	0x0800a015
 800a06c:	0800a1bb 	.word	0x0800a1bb
 800a070:	0800a015 	.word	0x0800a015
 800a074:	0800a0c3 	.word	0x0800a0c3
 800a078:	0800a015 	.word	0x0800a015
 800a07c:	0800a015 	.word	0x0800a015
 800a080:	0800a15b 	.word	0x0800a15b
 800a084:	6833      	ldr	r3, [r6, #0]
 800a086:	1d1a      	adds	r2, r3, #4
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	6032      	str	r2, [r6, #0]
 800a08c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a090:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a094:	2301      	movs	r3, #1
 800a096:	e09d      	b.n	800a1d4 <_printf_i+0x1e8>
 800a098:	6833      	ldr	r3, [r6, #0]
 800a09a:	6820      	ldr	r0, [r4, #0]
 800a09c:	1d19      	adds	r1, r3, #4
 800a09e:	6031      	str	r1, [r6, #0]
 800a0a0:	0606      	lsls	r6, r0, #24
 800a0a2:	d501      	bpl.n	800a0a8 <_printf_i+0xbc>
 800a0a4:	681d      	ldr	r5, [r3, #0]
 800a0a6:	e003      	b.n	800a0b0 <_printf_i+0xc4>
 800a0a8:	0645      	lsls	r5, r0, #25
 800a0aa:	d5fb      	bpl.n	800a0a4 <_printf_i+0xb8>
 800a0ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a0b0:	2d00      	cmp	r5, #0
 800a0b2:	da03      	bge.n	800a0bc <_printf_i+0xd0>
 800a0b4:	232d      	movs	r3, #45	@ 0x2d
 800a0b6:	426d      	negs	r5, r5
 800a0b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a0bc:	4859      	ldr	r0, [pc, #356]	@ (800a224 <_printf_i+0x238>)
 800a0be:	230a      	movs	r3, #10
 800a0c0:	e011      	b.n	800a0e6 <_printf_i+0xfa>
 800a0c2:	6821      	ldr	r1, [r4, #0]
 800a0c4:	6833      	ldr	r3, [r6, #0]
 800a0c6:	0608      	lsls	r0, r1, #24
 800a0c8:	f853 5b04 	ldr.w	r5, [r3], #4
 800a0cc:	d402      	bmi.n	800a0d4 <_printf_i+0xe8>
 800a0ce:	0649      	lsls	r1, r1, #25
 800a0d0:	bf48      	it	mi
 800a0d2:	b2ad      	uxthmi	r5, r5
 800a0d4:	2f6f      	cmp	r7, #111	@ 0x6f
 800a0d6:	4853      	ldr	r0, [pc, #332]	@ (800a224 <_printf_i+0x238>)
 800a0d8:	6033      	str	r3, [r6, #0]
 800a0da:	bf14      	ite	ne
 800a0dc:	230a      	movne	r3, #10
 800a0de:	2308      	moveq	r3, #8
 800a0e0:	2100      	movs	r1, #0
 800a0e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a0e6:	6866      	ldr	r6, [r4, #4]
 800a0e8:	60a6      	str	r6, [r4, #8]
 800a0ea:	2e00      	cmp	r6, #0
 800a0ec:	bfa2      	ittt	ge
 800a0ee:	6821      	ldrge	r1, [r4, #0]
 800a0f0:	f021 0104 	bicge.w	r1, r1, #4
 800a0f4:	6021      	strge	r1, [r4, #0]
 800a0f6:	b90d      	cbnz	r5, 800a0fc <_printf_i+0x110>
 800a0f8:	2e00      	cmp	r6, #0
 800a0fa:	d04b      	beq.n	800a194 <_printf_i+0x1a8>
 800a0fc:	4616      	mov	r6, r2
 800a0fe:	fbb5 f1f3 	udiv	r1, r5, r3
 800a102:	fb03 5711 	mls	r7, r3, r1, r5
 800a106:	5dc7      	ldrb	r7, [r0, r7]
 800a108:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a10c:	462f      	mov	r7, r5
 800a10e:	42bb      	cmp	r3, r7
 800a110:	460d      	mov	r5, r1
 800a112:	d9f4      	bls.n	800a0fe <_printf_i+0x112>
 800a114:	2b08      	cmp	r3, #8
 800a116:	d10b      	bne.n	800a130 <_printf_i+0x144>
 800a118:	6823      	ldr	r3, [r4, #0]
 800a11a:	07df      	lsls	r7, r3, #31
 800a11c:	d508      	bpl.n	800a130 <_printf_i+0x144>
 800a11e:	6923      	ldr	r3, [r4, #16]
 800a120:	6861      	ldr	r1, [r4, #4]
 800a122:	4299      	cmp	r1, r3
 800a124:	bfde      	ittt	le
 800a126:	2330      	movle	r3, #48	@ 0x30
 800a128:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a12c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800a130:	1b92      	subs	r2, r2, r6
 800a132:	6122      	str	r2, [r4, #16]
 800a134:	f8cd a000 	str.w	sl, [sp]
 800a138:	464b      	mov	r3, r9
 800a13a:	aa03      	add	r2, sp, #12
 800a13c:	4621      	mov	r1, r4
 800a13e:	4640      	mov	r0, r8
 800a140:	f7ff fee6 	bl	8009f10 <_printf_common>
 800a144:	3001      	adds	r0, #1
 800a146:	d14a      	bne.n	800a1de <_printf_i+0x1f2>
 800a148:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a14c:	b004      	add	sp, #16
 800a14e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a152:	6823      	ldr	r3, [r4, #0]
 800a154:	f043 0320 	orr.w	r3, r3, #32
 800a158:	6023      	str	r3, [r4, #0]
 800a15a:	4833      	ldr	r0, [pc, #204]	@ (800a228 <_printf_i+0x23c>)
 800a15c:	2778      	movs	r7, #120	@ 0x78
 800a15e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a162:	6823      	ldr	r3, [r4, #0]
 800a164:	6831      	ldr	r1, [r6, #0]
 800a166:	061f      	lsls	r7, r3, #24
 800a168:	f851 5b04 	ldr.w	r5, [r1], #4
 800a16c:	d402      	bmi.n	800a174 <_printf_i+0x188>
 800a16e:	065f      	lsls	r7, r3, #25
 800a170:	bf48      	it	mi
 800a172:	b2ad      	uxthmi	r5, r5
 800a174:	6031      	str	r1, [r6, #0]
 800a176:	07d9      	lsls	r1, r3, #31
 800a178:	bf44      	itt	mi
 800a17a:	f043 0320 	orrmi.w	r3, r3, #32
 800a17e:	6023      	strmi	r3, [r4, #0]
 800a180:	b11d      	cbz	r5, 800a18a <_printf_i+0x19e>
 800a182:	2310      	movs	r3, #16
 800a184:	e7ac      	b.n	800a0e0 <_printf_i+0xf4>
 800a186:	4827      	ldr	r0, [pc, #156]	@ (800a224 <_printf_i+0x238>)
 800a188:	e7e9      	b.n	800a15e <_printf_i+0x172>
 800a18a:	6823      	ldr	r3, [r4, #0]
 800a18c:	f023 0320 	bic.w	r3, r3, #32
 800a190:	6023      	str	r3, [r4, #0]
 800a192:	e7f6      	b.n	800a182 <_printf_i+0x196>
 800a194:	4616      	mov	r6, r2
 800a196:	e7bd      	b.n	800a114 <_printf_i+0x128>
 800a198:	6833      	ldr	r3, [r6, #0]
 800a19a:	6825      	ldr	r5, [r4, #0]
 800a19c:	6961      	ldr	r1, [r4, #20]
 800a19e:	1d18      	adds	r0, r3, #4
 800a1a0:	6030      	str	r0, [r6, #0]
 800a1a2:	062e      	lsls	r6, r5, #24
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	d501      	bpl.n	800a1ac <_printf_i+0x1c0>
 800a1a8:	6019      	str	r1, [r3, #0]
 800a1aa:	e002      	b.n	800a1b2 <_printf_i+0x1c6>
 800a1ac:	0668      	lsls	r0, r5, #25
 800a1ae:	d5fb      	bpl.n	800a1a8 <_printf_i+0x1bc>
 800a1b0:	8019      	strh	r1, [r3, #0]
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	6123      	str	r3, [r4, #16]
 800a1b6:	4616      	mov	r6, r2
 800a1b8:	e7bc      	b.n	800a134 <_printf_i+0x148>
 800a1ba:	6833      	ldr	r3, [r6, #0]
 800a1bc:	1d1a      	adds	r2, r3, #4
 800a1be:	6032      	str	r2, [r6, #0]
 800a1c0:	681e      	ldr	r6, [r3, #0]
 800a1c2:	6862      	ldr	r2, [r4, #4]
 800a1c4:	2100      	movs	r1, #0
 800a1c6:	4630      	mov	r0, r6
 800a1c8:	f7f6 f802 	bl	80001d0 <memchr>
 800a1cc:	b108      	cbz	r0, 800a1d2 <_printf_i+0x1e6>
 800a1ce:	1b80      	subs	r0, r0, r6
 800a1d0:	6060      	str	r0, [r4, #4]
 800a1d2:	6863      	ldr	r3, [r4, #4]
 800a1d4:	6123      	str	r3, [r4, #16]
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a1dc:	e7aa      	b.n	800a134 <_printf_i+0x148>
 800a1de:	6923      	ldr	r3, [r4, #16]
 800a1e0:	4632      	mov	r2, r6
 800a1e2:	4649      	mov	r1, r9
 800a1e4:	4640      	mov	r0, r8
 800a1e6:	47d0      	blx	sl
 800a1e8:	3001      	adds	r0, #1
 800a1ea:	d0ad      	beq.n	800a148 <_printf_i+0x15c>
 800a1ec:	6823      	ldr	r3, [r4, #0]
 800a1ee:	079b      	lsls	r3, r3, #30
 800a1f0:	d413      	bmi.n	800a21a <_printf_i+0x22e>
 800a1f2:	68e0      	ldr	r0, [r4, #12]
 800a1f4:	9b03      	ldr	r3, [sp, #12]
 800a1f6:	4298      	cmp	r0, r3
 800a1f8:	bfb8      	it	lt
 800a1fa:	4618      	movlt	r0, r3
 800a1fc:	e7a6      	b.n	800a14c <_printf_i+0x160>
 800a1fe:	2301      	movs	r3, #1
 800a200:	4632      	mov	r2, r6
 800a202:	4649      	mov	r1, r9
 800a204:	4640      	mov	r0, r8
 800a206:	47d0      	blx	sl
 800a208:	3001      	adds	r0, #1
 800a20a:	d09d      	beq.n	800a148 <_printf_i+0x15c>
 800a20c:	3501      	adds	r5, #1
 800a20e:	68e3      	ldr	r3, [r4, #12]
 800a210:	9903      	ldr	r1, [sp, #12]
 800a212:	1a5b      	subs	r3, r3, r1
 800a214:	42ab      	cmp	r3, r5
 800a216:	dcf2      	bgt.n	800a1fe <_printf_i+0x212>
 800a218:	e7eb      	b.n	800a1f2 <_printf_i+0x206>
 800a21a:	2500      	movs	r5, #0
 800a21c:	f104 0619 	add.w	r6, r4, #25
 800a220:	e7f5      	b.n	800a20e <_printf_i+0x222>
 800a222:	bf00      	nop
 800a224:	080223e6 	.word	0x080223e6
 800a228:	080223f7 	.word	0x080223f7

0800a22c <siprintf>:
 800a22c:	b40e      	push	{r1, r2, r3}
 800a22e:	b500      	push	{lr}
 800a230:	b09c      	sub	sp, #112	@ 0x70
 800a232:	ab1d      	add	r3, sp, #116	@ 0x74
 800a234:	9002      	str	r0, [sp, #8]
 800a236:	9006      	str	r0, [sp, #24]
 800a238:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a23c:	4809      	ldr	r0, [pc, #36]	@ (800a264 <siprintf+0x38>)
 800a23e:	9107      	str	r1, [sp, #28]
 800a240:	9104      	str	r1, [sp, #16]
 800a242:	4909      	ldr	r1, [pc, #36]	@ (800a268 <siprintf+0x3c>)
 800a244:	f853 2b04 	ldr.w	r2, [r3], #4
 800a248:	9105      	str	r1, [sp, #20]
 800a24a:	6800      	ldr	r0, [r0, #0]
 800a24c:	9301      	str	r3, [sp, #4]
 800a24e:	a902      	add	r1, sp, #8
 800a250:	f001 f82e 	bl	800b2b0 <_svfiprintf_r>
 800a254:	9b02      	ldr	r3, [sp, #8]
 800a256:	2200      	movs	r2, #0
 800a258:	701a      	strb	r2, [r3, #0]
 800a25a:	b01c      	add	sp, #112	@ 0x70
 800a25c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a260:	b003      	add	sp, #12
 800a262:	4770      	bx	lr
 800a264:	2000001c 	.word	0x2000001c
 800a268:	ffff0208 	.word	0xffff0208

0800a26c <std>:
 800a26c:	2300      	movs	r3, #0
 800a26e:	b510      	push	{r4, lr}
 800a270:	4604      	mov	r4, r0
 800a272:	e9c0 3300 	strd	r3, r3, [r0]
 800a276:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a27a:	6083      	str	r3, [r0, #8]
 800a27c:	8181      	strh	r1, [r0, #12]
 800a27e:	6643      	str	r3, [r0, #100]	@ 0x64
 800a280:	81c2      	strh	r2, [r0, #14]
 800a282:	6183      	str	r3, [r0, #24]
 800a284:	4619      	mov	r1, r3
 800a286:	2208      	movs	r2, #8
 800a288:	305c      	adds	r0, #92	@ 0x5c
 800a28a:	f000 f921 	bl	800a4d0 <memset>
 800a28e:	4b0d      	ldr	r3, [pc, #52]	@ (800a2c4 <std+0x58>)
 800a290:	6263      	str	r3, [r4, #36]	@ 0x24
 800a292:	4b0d      	ldr	r3, [pc, #52]	@ (800a2c8 <std+0x5c>)
 800a294:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a296:	4b0d      	ldr	r3, [pc, #52]	@ (800a2cc <std+0x60>)
 800a298:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a29a:	4b0d      	ldr	r3, [pc, #52]	@ (800a2d0 <std+0x64>)
 800a29c:	6323      	str	r3, [r4, #48]	@ 0x30
 800a29e:	4b0d      	ldr	r3, [pc, #52]	@ (800a2d4 <std+0x68>)
 800a2a0:	6224      	str	r4, [r4, #32]
 800a2a2:	429c      	cmp	r4, r3
 800a2a4:	d006      	beq.n	800a2b4 <std+0x48>
 800a2a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a2aa:	4294      	cmp	r4, r2
 800a2ac:	d002      	beq.n	800a2b4 <std+0x48>
 800a2ae:	33d0      	adds	r3, #208	@ 0xd0
 800a2b0:	429c      	cmp	r4, r3
 800a2b2:	d105      	bne.n	800a2c0 <std+0x54>
 800a2b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a2b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2bc:	f000 b93e 	b.w	800a53c <__retarget_lock_init_recursive>
 800a2c0:	bd10      	pop	{r4, pc}
 800a2c2:	bf00      	nop
 800a2c4:	0800c0f5 	.word	0x0800c0f5
 800a2c8:	0800c117 	.word	0x0800c117
 800a2cc:	0800c14f 	.word	0x0800c14f
 800a2d0:	0800c173 	.word	0x0800c173
 800a2d4:	200014b0 	.word	0x200014b0

0800a2d8 <stdio_exit_handler>:
 800a2d8:	4a02      	ldr	r2, [pc, #8]	@ (800a2e4 <stdio_exit_handler+0xc>)
 800a2da:	4903      	ldr	r1, [pc, #12]	@ (800a2e8 <stdio_exit_handler+0x10>)
 800a2dc:	4803      	ldr	r0, [pc, #12]	@ (800a2ec <stdio_exit_handler+0x14>)
 800a2de:	f000 b869 	b.w	800a3b4 <_fwalk_sglue>
 800a2e2:	bf00      	nop
 800a2e4:	20000010 	.word	0x20000010
 800a2e8:	0800b989 	.word	0x0800b989
 800a2ec:	20000020 	.word	0x20000020

0800a2f0 <cleanup_stdio>:
 800a2f0:	6841      	ldr	r1, [r0, #4]
 800a2f2:	4b0c      	ldr	r3, [pc, #48]	@ (800a324 <cleanup_stdio+0x34>)
 800a2f4:	4299      	cmp	r1, r3
 800a2f6:	b510      	push	{r4, lr}
 800a2f8:	4604      	mov	r4, r0
 800a2fa:	d001      	beq.n	800a300 <cleanup_stdio+0x10>
 800a2fc:	f001 fb44 	bl	800b988 <_fflush_r>
 800a300:	68a1      	ldr	r1, [r4, #8]
 800a302:	4b09      	ldr	r3, [pc, #36]	@ (800a328 <cleanup_stdio+0x38>)
 800a304:	4299      	cmp	r1, r3
 800a306:	d002      	beq.n	800a30e <cleanup_stdio+0x1e>
 800a308:	4620      	mov	r0, r4
 800a30a:	f001 fb3d 	bl	800b988 <_fflush_r>
 800a30e:	68e1      	ldr	r1, [r4, #12]
 800a310:	4b06      	ldr	r3, [pc, #24]	@ (800a32c <cleanup_stdio+0x3c>)
 800a312:	4299      	cmp	r1, r3
 800a314:	d004      	beq.n	800a320 <cleanup_stdio+0x30>
 800a316:	4620      	mov	r0, r4
 800a318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a31c:	f001 bb34 	b.w	800b988 <_fflush_r>
 800a320:	bd10      	pop	{r4, pc}
 800a322:	bf00      	nop
 800a324:	200014b0 	.word	0x200014b0
 800a328:	20001518 	.word	0x20001518
 800a32c:	20001580 	.word	0x20001580

0800a330 <global_stdio_init.part.0>:
 800a330:	b510      	push	{r4, lr}
 800a332:	4b0b      	ldr	r3, [pc, #44]	@ (800a360 <global_stdio_init.part.0+0x30>)
 800a334:	4c0b      	ldr	r4, [pc, #44]	@ (800a364 <global_stdio_init.part.0+0x34>)
 800a336:	4a0c      	ldr	r2, [pc, #48]	@ (800a368 <global_stdio_init.part.0+0x38>)
 800a338:	601a      	str	r2, [r3, #0]
 800a33a:	4620      	mov	r0, r4
 800a33c:	2200      	movs	r2, #0
 800a33e:	2104      	movs	r1, #4
 800a340:	f7ff ff94 	bl	800a26c <std>
 800a344:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a348:	2201      	movs	r2, #1
 800a34a:	2109      	movs	r1, #9
 800a34c:	f7ff ff8e 	bl	800a26c <std>
 800a350:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a354:	2202      	movs	r2, #2
 800a356:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a35a:	2112      	movs	r1, #18
 800a35c:	f7ff bf86 	b.w	800a26c <std>
 800a360:	200015e8 	.word	0x200015e8
 800a364:	200014b0 	.word	0x200014b0
 800a368:	0800a2d9 	.word	0x0800a2d9

0800a36c <__sfp_lock_acquire>:
 800a36c:	4801      	ldr	r0, [pc, #4]	@ (800a374 <__sfp_lock_acquire+0x8>)
 800a36e:	f000 b8e6 	b.w	800a53e <__retarget_lock_acquire_recursive>
 800a372:	bf00      	nop
 800a374:	200015ed 	.word	0x200015ed

0800a378 <__sfp_lock_release>:
 800a378:	4801      	ldr	r0, [pc, #4]	@ (800a380 <__sfp_lock_release+0x8>)
 800a37a:	f000 b8e1 	b.w	800a540 <__retarget_lock_release_recursive>
 800a37e:	bf00      	nop
 800a380:	200015ed 	.word	0x200015ed

0800a384 <__sinit>:
 800a384:	b510      	push	{r4, lr}
 800a386:	4604      	mov	r4, r0
 800a388:	f7ff fff0 	bl	800a36c <__sfp_lock_acquire>
 800a38c:	6a23      	ldr	r3, [r4, #32]
 800a38e:	b11b      	cbz	r3, 800a398 <__sinit+0x14>
 800a390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a394:	f7ff bff0 	b.w	800a378 <__sfp_lock_release>
 800a398:	4b04      	ldr	r3, [pc, #16]	@ (800a3ac <__sinit+0x28>)
 800a39a:	6223      	str	r3, [r4, #32]
 800a39c:	4b04      	ldr	r3, [pc, #16]	@ (800a3b0 <__sinit+0x2c>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d1f5      	bne.n	800a390 <__sinit+0xc>
 800a3a4:	f7ff ffc4 	bl	800a330 <global_stdio_init.part.0>
 800a3a8:	e7f2      	b.n	800a390 <__sinit+0xc>
 800a3aa:	bf00      	nop
 800a3ac:	0800a2f1 	.word	0x0800a2f1
 800a3b0:	200015e8 	.word	0x200015e8

0800a3b4 <_fwalk_sglue>:
 800a3b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3b8:	4607      	mov	r7, r0
 800a3ba:	4688      	mov	r8, r1
 800a3bc:	4614      	mov	r4, r2
 800a3be:	2600      	movs	r6, #0
 800a3c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a3c4:	f1b9 0901 	subs.w	r9, r9, #1
 800a3c8:	d505      	bpl.n	800a3d6 <_fwalk_sglue+0x22>
 800a3ca:	6824      	ldr	r4, [r4, #0]
 800a3cc:	2c00      	cmp	r4, #0
 800a3ce:	d1f7      	bne.n	800a3c0 <_fwalk_sglue+0xc>
 800a3d0:	4630      	mov	r0, r6
 800a3d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3d6:	89ab      	ldrh	r3, [r5, #12]
 800a3d8:	2b01      	cmp	r3, #1
 800a3da:	d907      	bls.n	800a3ec <_fwalk_sglue+0x38>
 800a3dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a3e0:	3301      	adds	r3, #1
 800a3e2:	d003      	beq.n	800a3ec <_fwalk_sglue+0x38>
 800a3e4:	4629      	mov	r1, r5
 800a3e6:	4638      	mov	r0, r7
 800a3e8:	47c0      	blx	r8
 800a3ea:	4306      	orrs	r6, r0
 800a3ec:	3568      	adds	r5, #104	@ 0x68
 800a3ee:	e7e9      	b.n	800a3c4 <_fwalk_sglue+0x10>

0800a3f0 <iprintf>:
 800a3f0:	b40f      	push	{r0, r1, r2, r3}
 800a3f2:	b507      	push	{r0, r1, r2, lr}
 800a3f4:	4906      	ldr	r1, [pc, #24]	@ (800a410 <iprintf+0x20>)
 800a3f6:	ab04      	add	r3, sp, #16
 800a3f8:	6808      	ldr	r0, [r1, #0]
 800a3fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3fe:	6881      	ldr	r1, [r0, #8]
 800a400:	9301      	str	r3, [sp, #4]
 800a402:	f001 f87b 	bl	800b4fc <_vfiprintf_r>
 800a406:	b003      	add	sp, #12
 800a408:	f85d eb04 	ldr.w	lr, [sp], #4
 800a40c:	b004      	add	sp, #16
 800a40e:	4770      	bx	lr
 800a410:	2000001c 	.word	0x2000001c

0800a414 <_puts_r>:
 800a414:	6a03      	ldr	r3, [r0, #32]
 800a416:	b570      	push	{r4, r5, r6, lr}
 800a418:	6884      	ldr	r4, [r0, #8]
 800a41a:	4605      	mov	r5, r0
 800a41c:	460e      	mov	r6, r1
 800a41e:	b90b      	cbnz	r3, 800a424 <_puts_r+0x10>
 800a420:	f7ff ffb0 	bl	800a384 <__sinit>
 800a424:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a426:	07db      	lsls	r3, r3, #31
 800a428:	d405      	bmi.n	800a436 <_puts_r+0x22>
 800a42a:	89a3      	ldrh	r3, [r4, #12]
 800a42c:	0598      	lsls	r0, r3, #22
 800a42e:	d402      	bmi.n	800a436 <_puts_r+0x22>
 800a430:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a432:	f000 f884 	bl	800a53e <__retarget_lock_acquire_recursive>
 800a436:	89a3      	ldrh	r3, [r4, #12]
 800a438:	0719      	lsls	r1, r3, #28
 800a43a:	d502      	bpl.n	800a442 <_puts_r+0x2e>
 800a43c:	6923      	ldr	r3, [r4, #16]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d135      	bne.n	800a4ae <_puts_r+0x9a>
 800a442:	4621      	mov	r1, r4
 800a444:	4628      	mov	r0, r5
 800a446:	f001 ff05 	bl	800c254 <__swsetup_r>
 800a44a:	b380      	cbz	r0, 800a4ae <_puts_r+0x9a>
 800a44c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800a450:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a452:	07da      	lsls	r2, r3, #31
 800a454:	d405      	bmi.n	800a462 <_puts_r+0x4e>
 800a456:	89a3      	ldrh	r3, [r4, #12]
 800a458:	059b      	lsls	r3, r3, #22
 800a45a:	d402      	bmi.n	800a462 <_puts_r+0x4e>
 800a45c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a45e:	f000 f86f 	bl	800a540 <__retarget_lock_release_recursive>
 800a462:	4628      	mov	r0, r5
 800a464:	bd70      	pop	{r4, r5, r6, pc}
 800a466:	2b00      	cmp	r3, #0
 800a468:	da04      	bge.n	800a474 <_puts_r+0x60>
 800a46a:	69a2      	ldr	r2, [r4, #24]
 800a46c:	429a      	cmp	r2, r3
 800a46e:	dc17      	bgt.n	800a4a0 <_puts_r+0x8c>
 800a470:	290a      	cmp	r1, #10
 800a472:	d015      	beq.n	800a4a0 <_puts_r+0x8c>
 800a474:	6823      	ldr	r3, [r4, #0]
 800a476:	1c5a      	adds	r2, r3, #1
 800a478:	6022      	str	r2, [r4, #0]
 800a47a:	7019      	strb	r1, [r3, #0]
 800a47c:	68a3      	ldr	r3, [r4, #8]
 800a47e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a482:	3b01      	subs	r3, #1
 800a484:	60a3      	str	r3, [r4, #8]
 800a486:	2900      	cmp	r1, #0
 800a488:	d1ed      	bne.n	800a466 <_puts_r+0x52>
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	da11      	bge.n	800a4b2 <_puts_r+0x9e>
 800a48e:	4622      	mov	r2, r4
 800a490:	210a      	movs	r1, #10
 800a492:	4628      	mov	r0, r5
 800a494:	f001 fe9f 	bl	800c1d6 <__swbuf_r>
 800a498:	3001      	adds	r0, #1
 800a49a:	d0d7      	beq.n	800a44c <_puts_r+0x38>
 800a49c:	250a      	movs	r5, #10
 800a49e:	e7d7      	b.n	800a450 <_puts_r+0x3c>
 800a4a0:	4622      	mov	r2, r4
 800a4a2:	4628      	mov	r0, r5
 800a4a4:	f001 fe97 	bl	800c1d6 <__swbuf_r>
 800a4a8:	3001      	adds	r0, #1
 800a4aa:	d1e7      	bne.n	800a47c <_puts_r+0x68>
 800a4ac:	e7ce      	b.n	800a44c <_puts_r+0x38>
 800a4ae:	3e01      	subs	r6, #1
 800a4b0:	e7e4      	b.n	800a47c <_puts_r+0x68>
 800a4b2:	6823      	ldr	r3, [r4, #0]
 800a4b4:	1c5a      	adds	r2, r3, #1
 800a4b6:	6022      	str	r2, [r4, #0]
 800a4b8:	220a      	movs	r2, #10
 800a4ba:	701a      	strb	r2, [r3, #0]
 800a4bc:	e7ee      	b.n	800a49c <_puts_r+0x88>
	...

0800a4c0 <puts>:
 800a4c0:	4b02      	ldr	r3, [pc, #8]	@ (800a4cc <puts+0xc>)
 800a4c2:	4601      	mov	r1, r0
 800a4c4:	6818      	ldr	r0, [r3, #0]
 800a4c6:	f7ff bfa5 	b.w	800a414 <_puts_r>
 800a4ca:	bf00      	nop
 800a4cc:	2000001c 	.word	0x2000001c

0800a4d0 <memset>:
 800a4d0:	4402      	add	r2, r0
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d100      	bne.n	800a4da <memset+0xa>
 800a4d8:	4770      	bx	lr
 800a4da:	f803 1b01 	strb.w	r1, [r3], #1
 800a4de:	e7f9      	b.n	800a4d4 <memset+0x4>

0800a4e0 <_localeconv_r>:
 800a4e0:	4800      	ldr	r0, [pc, #0]	@ (800a4e4 <_localeconv_r+0x4>)
 800a4e2:	4770      	bx	lr
 800a4e4:	2000015c 	.word	0x2000015c

0800a4e8 <__errno>:
 800a4e8:	4b01      	ldr	r3, [pc, #4]	@ (800a4f0 <__errno+0x8>)
 800a4ea:	6818      	ldr	r0, [r3, #0]
 800a4ec:	4770      	bx	lr
 800a4ee:	bf00      	nop
 800a4f0:	2000001c 	.word	0x2000001c

0800a4f4 <__libc_init_array>:
 800a4f4:	b570      	push	{r4, r5, r6, lr}
 800a4f6:	4d0d      	ldr	r5, [pc, #52]	@ (800a52c <__libc_init_array+0x38>)
 800a4f8:	4c0d      	ldr	r4, [pc, #52]	@ (800a530 <__libc_init_array+0x3c>)
 800a4fa:	1b64      	subs	r4, r4, r5
 800a4fc:	10a4      	asrs	r4, r4, #2
 800a4fe:	2600      	movs	r6, #0
 800a500:	42a6      	cmp	r6, r4
 800a502:	d109      	bne.n	800a518 <__libc_init_array+0x24>
 800a504:	4d0b      	ldr	r5, [pc, #44]	@ (800a534 <__libc_init_array+0x40>)
 800a506:	4c0c      	ldr	r4, [pc, #48]	@ (800a538 <__libc_init_array+0x44>)
 800a508:	f002 f8ee 	bl	800c6e8 <_init>
 800a50c:	1b64      	subs	r4, r4, r5
 800a50e:	10a4      	asrs	r4, r4, #2
 800a510:	2600      	movs	r6, #0
 800a512:	42a6      	cmp	r6, r4
 800a514:	d105      	bne.n	800a522 <__libc_init_array+0x2e>
 800a516:	bd70      	pop	{r4, r5, r6, pc}
 800a518:	f855 3b04 	ldr.w	r3, [r5], #4
 800a51c:	4798      	blx	r3
 800a51e:	3601      	adds	r6, #1
 800a520:	e7ee      	b.n	800a500 <__libc_init_array+0xc>
 800a522:	f855 3b04 	ldr.w	r3, [r5], #4
 800a526:	4798      	blx	r3
 800a528:	3601      	adds	r6, #1
 800a52a:	e7f2      	b.n	800a512 <__libc_init_array+0x1e>
 800a52c:	08022750 	.word	0x08022750
 800a530:	08022750 	.word	0x08022750
 800a534:	08022750 	.word	0x08022750
 800a538:	08022754 	.word	0x08022754

0800a53c <__retarget_lock_init_recursive>:
 800a53c:	4770      	bx	lr

0800a53e <__retarget_lock_acquire_recursive>:
 800a53e:	4770      	bx	lr

0800a540 <__retarget_lock_release_recursive>:
 800a540:	4770      	bx	lr

0800a542 <memcpy>:
 800a542:	440a      	add	r2, r1
 800a544:	4291      	cmp	r1, r2
 800a546:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800a54a:	d100      	bne.n	800a54e <memcpy+0xc>
 800a54c:	4770      	bx	lr
 800a54e:	b510      	push	{r4, lr}
 800a550:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a554:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a558:	4291      	cmp	r1, r2
 800a55a:	d1f9      	bne.n	800a550 <memcpy+0xe>
 800a55c:	bd10      	pop	{r4, pc}

0800a55e <quorem>:
 800a55e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a562:	6903      	ldr	r3, [r0, #16]
 800a564:	690c      	ldr	r4, [r1, #16]
 800a566:	42a3      	cmp	r3, r4
 800a568:	4607      	mov	r7, r0
 800a56a:	db7e      	blt.n	800a66a <quorem+0x10c>
 800a56c:	3c01      	subs	r4, #1
 800a56e:	f101 0814 	add.w	r8, r1, #20
 800a572:	00a3      	lsls	r3, r4, #2
 800a574:	f100 0514 	add.w	r5, r0, #20
 800a578:	9300      	str	r3, [sp, #0]
 800a57a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a57e:	9301      	str	r3, [sp, #4]
 800a580:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a584:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a588:	3301      	adds	r3, #1
 800a58a:	429a      	cmp	r2, r3
 800a58c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a590:	fbb2 f6f3 	udiv	r6, r2, r3
 800a594:	d32e      	bcc.n	800a5f4 <quorem+0x96>
 800a596:	f04f 0a00 	mov.w	sl, #0
 800a59a:	46c4      	mov	ip, r8
 800a59c:	46ae      	mov	lr, r5
 800a59e:	46d3      	mov	fp, sl
 800a5a0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a5a4:	b298      	uxth	r0, r3
 800a5a6:	fb06 a000 	mla	r0, r6, r0, sl
 800a5aa:	0c02      	lsrs	r2, r0, #16
 800a5ac:	0c1b      	lsrs	r3, r3, #16
 800a5ae:	fb06 2303 	mla	r3, r6, r3, r2
 800a5b2:	f8de 2000 	ldr.w	r2, [lr]
 800a5b6:	b280      	uxth	r0, r0
 800a5b8:	b292      	uxth	r2, r2
 800a5ba:	1a12      	subs	r2, r2, r0
 800a5bc:	445a      	add	r2, fp
 800a5be:	f8de 0000 	ldr.w	r0, [lr]
 800a5c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a5c6:	b29b      	uxth	r3, r3
 800a5c8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a5cc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a5d0:	b292      	uxth	r2, r2
 800a5d2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a5d6:	45e1      	cmp	r9, ip
 800a5d8:	f84e 2b04 	str.w	r2, [lr], #4
 800a5dc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a5e0:	d2de      	bcs.n	800a5a0 <quorem+0x42>
 800a5e2:	9b00      	ldr	r3, [sp, #0]
 800a5e4:	58eb      	ldr	r3, [r5, r3]
 800a5e6:	b92b      	cbnz	r3, 800a5f4 <quorem+0x96>
 800a5e8:	9b01      	ldr	r3, [sp, #4]
 800a5ea:	3b04      	subs	r3, #4
 800a5ec:	429d      	cmp	r5, r3
 800a5ee:	461a      	mov	r2, r3
 800a5f0:	d32f      	bcc.n	800a652 <quorem+0xf4>
 800a5f2:	613c      	str	r4, [r7, #16]
 800a5f4:	4638      	mov	r0, r7
 800a5f6:	f001 fc75 	bl	800bee4 <__mcmp>
 800a5fa:	2800      	cmp	r0, #0
 800a5fc:	db25      	blt.n	800a64a <quorem+0xec>
 800a5fe:	4629      	mov	r1, r5
 800a600:	2000      	movs	r0, #0
 800a602:	f858 2b04 	ldr.w	r2, [r8], #4
 800a606:	f8d1 c000 	ldr.w	ip, [r1]
 800a60a:	fa1f fe82 	uxth.w	lr, r2
 800a60e:	fa1f f38c 	uxth.w	r3, ip
 800a612:	eba3 030e 	sub.w	r3, r3, lr
 800a616:	4403      	add	r3, r0
 800a618:	0c12      	lsrs	r2, r2, #16
 800a61a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a61e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a622:	b29b      	uxth	r3, r3
 800a624:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a628:	45c1      	cmp	r9, r8
 800a62a:	f841 3b04 	str.w	r3, [r1], #4
 800a62e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a632:	d2e6      	bcs.n	800a602 <quorem+0xa4>
 800a634:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a638:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a63c:	b922      	cbnz	r2, 800a648 <quorem+0xea>
 800a63e:	3b04      	subs	r3, #4
 800a640:	429d      	cmp	r5, r3
 800a642:	461a      	mov	r2, r3
 800a644:	d30b      	bcc.n	800a65e <quorem+0x100>
 800a646:	613c      	str	r4, [r7, #16]
 800a648:	3601      	adds	r6, #1
 800a64a:	4630      	mov	r0, r6
 800a64c:	b003      	add	sp, #12
 800a64e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a652:	6812      	ldr	r2, [r2, #0]
 800a654:	3b04      	subs	r3, #4
 800a656:	2a00      	cmp	r2, #0
 800a658:	d1cb      	bne.n	800a5f2 <quorem+0x94>
 800a65a:	3c01      	subs	r4, #1
 800a65c:	e7c6      	b.n	800a5ec <quorem+0x8e>
 800a65e:	6812      	ldr	r2, [r2, #0]
 800a660:	3b04      	subs	r3, #4
 800a662:	2a00      	cmp	r2, #0
 800a664:	d1ef      	bne.n	800a646 <quorem+0xe8>
 800a666:	3c01      	subs	r4, #1
 800a668:	e7ea      	b.n	800a640 <quorem+0xe2>
 800a66a:	2000      	movs	r0, #0
 800a66c:	e7ee      	b.n	800a64c <quorem+0xee>
	...

0800a670 <_dtoa_r>:
 800a670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a674:	69c7      	ldr	r7, [r0, #28]
 800a676:	b099      	sub	sp, #100	@ 0x64
 800a678:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a67c:	ec55 4b10 	vmov	r4, r5, d0
 800a680:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a682:	9109      	str	r1, [sp, #36]	@ 0x24
 800a684:	4683      	mov	fp, r0
 800a686:	920e      	str	r2, [sp, #56]	@ 0x38
 800a688:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a68a:	b97f      	cbnz	r7, 800a6ac <_dtoa_r+0x3c>
 800a68c:	2010      	movs	r0, #16
 800a68e:	f001 f84d 	bl	800b72c <malloc>
 800a692:	4602      	mov	r2, r0
 800a694:	f8cb 001c 	str.w	r0, [fp, #28]
 800a698:	b920      	cbnz	r0, 800a6a4 <_dtoa_r+0x34>
 800a69a:	4ba7      	ldr	r3, [pc, #668]	@ (800a938 <_dtoa_r+0x2c8>)
 800a69c:	21ef      	movs	r1, #239	@ 0xef
 800a69e:	48a7      	ldr	r0, [pc, #668]	@ (800a93c <_dtoa_r+0x2cc>)
 800a6a0:	f001 ff22 	bl	800c4e8 <__assert_func>
 800a6a4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a6a8:	6007      	str	r7, [r0, #0]
 800a6aa:	60c7      	str	r7, [r0, #12]
 800a6ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a6b0:	6819      	ldr	r1, [r3, #0]
 800a6b2:	b159      	cbz	r1, 800a6cc <_dtoa_r+0x5c>
 800a6b4:	685a      	ldr	r2, [r3, #4]
 800a6b6:	604a      	str	r2, [r1, #4]
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	4093      	lsls	r3, r2
 800a6bc:	608b      	str	r3, [r1, #8]
 800a6be:	4658      	mov	r0, fp
 800a6c0:	f001 f9d6 	bl	800ba70 <_Bfree>
 800a6c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	601a      	str	r2, [r3, #0]
 800a6cc:	1e2b      	subs	r3, r5, #0
 800a6ce:	bfb9      	ittee	lt
 800a6d0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a6d4:	9303      	strlt	r3, [sp, #12]
 800a6d6:	2300      	movge	r3, #0
 800a6d8:	6033      	strge	r3, [r6, #0]
 800a6da:	9f03      	ldr	r7, [sp, #12]
 800a6dc:	4b98      	ldr	r3, [pc, #608]	@ (800a940 <_dtoa_r+0x2d0>)
 800a6de:	bfbc      	itt	lt
 800a6e0:	2201      	movlt	r2, #1
 800a6e2:	6032      	strlt	r2, [r6, #0]
 800a6e4:	43bb      	bics	r3, r7
 800a6e6:	d112      	bne.n	800a70e <_dtoa_r+0x9e>
 800a6e8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a6ea:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a6ee:	6013      	str	r3, [r2, #0]
 800a6f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a6f4:	4323      	orrs	r3, r4
 800a6f6:	f000 854d 	beq.w	800b194 <_dtoa_r+0xb24>
 800a6fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a6fc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a954 <_dtoa_r+0x2e4>
 800a700:	2b00      	cmp	r3, #0
 800a702:	f000 854f 	beq.w	800b1a4 <_dtoa_r+0xb34>
 800a706:	f10a 0303 	add.w	r3, sl, #3
 800a70a:	f000 bd49 	b.w	800b1a0 <_dtoa_r+0xb30>
 800a70e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a712:	2200      	movs	r2, #0
 800a714:	ec51 0b17 	vmov	r0, r1, d7
 800a718:	2300      	movs	r3, #0
 800a71a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a71e:	f7f6 f9d3 	bl	8000ac8 <__aeabi_dcmpeq>
 800a722:	4680      	mov	r8, r0
 800a724:	b158      	cbz	r0, 800a73e <_dtoa_r+0xce>
 800a726:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a728:	2301      	movs	r3, #1
 800a72a:	6013      	str	r3, [r2, #0]
 800a72c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a72e:	b113      	cbz	r3, 800a736 <_dtoa_r+0xc6>
 800a730:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a732:	4b84      	ldr	r3, [pc, #528]	@ (800a944 <_dtoa_r+0x2d4>)
 800a734:	6013      	str	r3, [r2, #0]
 800a736:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a958 <_dtoa_r+0x2e8>
 800a73a:	f000 bd33 	b.w	800b1a4 <_dtoa_r+0xb34>
 800a73e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a742:	aa16      	add	r2, sp, #88	@ 0x58
 800a744:	a917      	add	r1, sp, #92	@ 0x5c
 800a746:	4658      	mov	r0, fp
 800a748:	f001 fc7c 	bl	800c044 <__d2b>
 800a74c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a750:	4681      	mov	r9, r0
 800a752:	2e00      	cmp	r6, #0
 800a754:	d077      	beq.n	800a846 <_dtoa_r+0x1d6>
 800a756:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a758:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a75c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a760:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a764:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a768:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a76c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a770:	4619      	mov	r1, r3
 800a772:	2200      	movs	r2, #0
 800a774:	4b74      	ldr	r3, [pc, #464]	@ (800a948 <_dtoa_r+0x2d8>)
 800a776:	f7f5 fd87 	bl	8000288 <__aeabi_dsub>
 800a77a:	a369      	add	r3, pc, #420	@ (adr r3, 800a920 <_dtoa_r+0x2b0>)
 800a77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a780:	f7f5 ff3a 	bl	80005f8 <__aeabi_dmul>
 800a784:	a368      	add	r3, pc, #416	@ (adr r3, 800a928 <_dtoa_r+0x2b8>)
 800a786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a78a:	f7f5 fd7f 	bl	800028c <__adddf3>
 800a78e:	4604      	mov	r4, r0
 800a790:	4630      	mov	r0, r6
 800a792:	460d      	mov	r5, r1
 800a794:	f7f5 fec6 	bl	8000524 <__aeabi_i2d>
 800a798:	a365      	add	r3, pc, #404	@ (adr r3, 800a930 <_dtoa_r+0x2c0>)
 800a79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a79e:	f7f5 ff2b 	bl	80005f8 <__aeabi_dmul>
 800a7a2:	4602      	mov	r2, r0
 800a7a4:	460b      	mov	r3, r1
 800a7a6:	4620      	mov	r0, r4
 800a7a8:	4629      	mov	r1, r5
 800a7aa:	f7f5 fd6f 	bl	800028c <__adddf3>
 800a7ae:	4604      	mov	r4, r0
 800a7b0:	460d      	mov	r5, r1
 800a7b2:	f7f6 f9d1 	bl	8000b58 <__aeabi_d2iz>
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	4607      	mov	r7, r0
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	4620      	mov	r0, r4
 800a7be:	4629      	mov	r1, r5
 800a7c0:	f7f6 f98c 	bl	8000adc <__aeabi_dcmplt>
 800a7c4:	b140      	cbz	r0, 800a7d8 <_dtoa_r+0x168>
 800a7c6:	4638      	mov	r0, r7
 800a7c8:	f7f5 feac 	bl	8000524 <__aeabi_i2d>
 800a7cc:	4622      	mov	r2, r4
 800a7ce:	462b      	mov	r3, r5
 800a7d0:	f7f6 f97a 	bl	8000ac8 <__aeabi_dcmpeq>
 800a7d4:	b900      	cbnz	r0, 800a7d8 <_dtoa_r+0x168>
 800a7d6:	3f01      	subs	r7, #1
 800a7d8:	2f16      	cmp	r7, #22
 800a7da:	d851      	bhi.n	800a880 <_dtoa_r+0x210>
 800a7dc:	4b5b      	ldr	r3, [pc, #364]	@ (800a94c <_dtoa_r+0x2dc>)
 800a7de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a7ea:	f7f6 f977 	bl	8000adc <__aeabi_dcmplt>
 800a7ee:	2800      	cmp	r0, #0
 800a7f0:	d048      	beq.n	800a884 <_dtoa_r+0x214>
 800a7f2:	3f01      	subs	r7, #1
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	9312      	str	r3, [sp, #72]	@ 0x48
 800a7f8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a7fa:	1b9b      	subs	r3, r3, r6
 800a7fc:	1e5a      	subs	r2, r3, #1
 800a7fe:	bf44      	itt	mi
 800a800:	f1c3 0801 	rsbmi	r8, r3, #1
 800a804:	2300      	movmi	r3, #0
 800a806:	9208      	str	r2, [sp, #32]
 800a808:	bf54      	ite	pl
 800a80a:	f04f 0800 	movpl.w	r8, #0
 800a80e:	9308      	strmi	r3, [sp, #32]
 800a810:	2f00      	cmp	r7, #0
 800a812:	db39      	blt.n	800a888 <_dtoa_r+0x218>
 800a814:	9b08      	ldr	r3, [sp, #32]
 800a816:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a818:	443b      	add	r3, r7
 800a81a:	9308      	str	r3, [sp, #32]
 800a81c:	2300      	movs	r3, #0
 800a81e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a820:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a822:	2b09      	cmp	r3, #9
 800a824:	d864      	bhi.n	800a8f0 <_dtoa_r+0x280>
 800a826:	2b05      	cmp	r3, #5
 800a828:	bfc4      	itt	gt
 800a82a:	3b04      	subgt	r3, #4
 800a82c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a82e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a830:	f1a3 0302 	sub.w	r3, r3, #2
 800a834:	bfcc      	ite	gt
 800a836:	2400      	movgt	r4, #0
 800a838:	2401      	movle	r4, #1
 800a83a:	2b03      	cmp	r3, #3
 800a83c:	d863      	bhi.n	800a906 <_dtoa_r+0x296>
 800a83e:	e8df f003 	tbb	[pc, r3]
 800a842:	372a      	.short	0x372a
 800a844:	5535      	.short	0x5535
 800a846:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a84a:	441e      	add	r6, r3
 800a84c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a850:	2b20      	cmp	r3, #32
 800a852:	bfc1      	itttt	gt
 800a854:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a858:	409f      	lslgt	r7, r3
 800a85a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a85e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a862:	bfd6      	itet	le
 800a864:	f1c3 0320 	rsble	r3, r3, #32
 800a868:	ea47 0003 	orrgt.w	r0, r7, r3
 800a86c:	fa04 f003 	lslle.w	r0, r4, r3
 800a870:	f7f5 fe48 	bl	8000504 <__aeabi_ui2d>
 800a874:	2201      	movs	r2, #1
 800a876:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a87a:	3e01      	subs	r6, #1
 800a87c:	9214      	str	r2, [sp, #80]	@ 0x50
 800a87e:	e777      	b.n	800a770 <_dtoa_r+0x100>
 800a880:	2301      	movs	r3, #1
 800a882:	e7b8      	b.n	800a7f6 <_dtoa_r+0x186>
 800a884:	9012      	str	r0, [sp, #72]	@ 0x48
 800a886:	e7b7      	b.n	800a7f8 <_dtoa_r+0x188>
 800a888:	427b      	negs	r3, r7
 800a88a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a88c:	2300      	movs	r3, #0
 800a88e:	eba8 0807 	sub.w	r8, r8, r7
 800a892:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a894:	e7c4      	b.n	800a820 <_dtoa_r+0x1b0>
 800a896:	2300      	movs	r3, #0
 800a898:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a89a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	dc35      	bgt.n	800a90c <_dtoa_r+0x29c>
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	9300      	str	r3, [sp, #0]
 800a8a4:	9307      	str	r3, [sp, #28]
 800a8a6:	461a      	mov	r2, r3
 800a8a8:	920e      	str	r2, [sp, #56]	@ 0x38
 800a8aa:	e00b      	b.n	800a8c4 <_dtoa_r+0x254>
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	e7f3      	b.n	800a898 <_dtoa_r+0x228>
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a8b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a8b6:	18fb      	adds	r3, r7, r3
 800a8b8:	9300      	str	r3, [sp, #0]
 800a8ba:	3301      	adds	r3, #1
 800a8bc:	2b01      	cmp	r3, #1
 800a8be:	9307      	str	r3, [sp, #28]
 800a8c0:	bfb8      	it	lt
 800a8c2:	2301      	movlt	r3, #1
 800a8c4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a8c8:	2100      	movs	r1, #0
 800a8ca:	2204      	movs	r2, #4
 800a8cc:	f102 0514 	add.w	r5, r2, #20
 800a8d0:	429d      	cmp	r5, r3
 800a8d2:	d91f      	bls.n	800a914 <_dtoa_r+0x2a4>
 800a8d4:	6041      	str	r1, [r0, #4]
 800a8d6:	4658      	mov	r0, fp
 800a8d8:	f001 f88a 	bl	800b9f0 <_Balloc>
 800a8dc:	4682      	mov	sl, r0
 800a8de:	2800      	cmp	r0, #0
 800a8e0:	d13c      	bne.n	800a95c <_dtoa_r+0x2ec>
 800a8e2:	4b1b      	ldr	r3, [pc, #108]	@ (800a950 <_dtoa_r+0x2e0>)
 800a8e4:	4602      	mov	r2, r0
 800a8e6:	f240 11af 	movw	r1, #431	@ 0x1af
 800a8ea:	e6d8      	b.n	800a69e <_dtoa_r+0x2e>
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	e7e0      	b.n	800a8b2 <_dtoa_r+0x242>
 800a8f0:	2401      	movs	r4, #1
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8f6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a8f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a8fc:	9300      	str	r3, [sp, #0]
 800a8fe:	9307      	str	r3, [sp, #28]
 800a900:	2200      	movs	r2, #0
 800a902:	2312      	movs	r3, #18
 800a904:	e7d0      	b.n	800a8a8 <_dtoa_r+0x238>
 800a906:	2301      	movs	r3, #1
 800a908:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a90a:	e7f5      	b.n	800a8f8 <_dtoa_r+0x288>
 800a90c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a90e:	9300      	str	r3, [sp, #0]
 800a910:	9307      	str	r3, [sp, #28]
 800a912:	e7d7      	b.n	800a8c4 <_dtoa_r+0x254>
 800a914:	3101      	adds	r1, #1
 800a916:	0052      	lsls	r2, r2, #1
 800a918:	e7d8      	b.n	800a8cc <_dtoa_r+0x25c>
 800a91a:	bf00      	nop
 800a91c:	f3af 8000 	nop.w
 800a920:	636f4361 	.word	0x636f4361
 800a924:	3fd287a7 	.word	0x3fd287a7
 800a928:	8b60c8b3 	.word	0x8b60c8b3
 800a92c:	3fc68a28 	.word	0x3fc68a28
 800a930:	509f79fb 	.word	0x509f79fb
 800a934:	3fd34413 	.word	0x3fd34413
 800a938:	08022415 	.word	0x08022415
 800a93c:	0802242c 	.word	0x0802242c
 800a940:	7ff00000 	.word	0x7ff00000
 800a944:	080223e5 	.word	0x080223e5
 800a948:	3ff80000 	.word	0x3ff80000
 800a94c:	08022538 	.word	0x08022538
 800a950:	08022484 	.word	0x08022484
 800a954:	08022411 	.word	0x08022411
 800a958:	080223e4 	.word	0x080223e4
 800a95c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a960:	6018      	str	r0, [r3, #0]
 800a962:	9b07      	ldr	r3, [sp, #28]
 800a964:	2b0e      	cmp	r3, #14
 800a966:	f200 80a4 	bhi.w	800aab2 <_dtoa_r+0x442>
 800a96a:	2c00      	cmp	r4, #0
 800a96c:	f000 80a1 	beq.w	800aab2 <_dtoa_r+0x442>
 800a970:	2f00      	cmp	r7, #0
 800a972:	dd33      	ble.n	800a9dc <_dtoa_r+0x36c>
 800a974:	4bad      	ldr	r3, [pc, #692]	@ (800ac2c <_dtoa_r+0x5bc>)
 800a976:	f007 020f 	and.w	r2, r7, #15
 800a97a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a97e:	ed93 7b00 	vldr	d7, [r3]
 800a982:	05f8      	lsls	r0, r7, #23
 800a984:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a988:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a98c:	d516      	bpl.n	800a9bc <_dtoa_r+0x34c>
 800a98e:	4ba8      	ldr	r3, [pc, #672]	@ (800ac30 <_dtoa_r+0x5c0>)
 800a990:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a994:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a998:	f7f5 ff58 	bl	800084c <__aeabi_ddiv>
 800a99c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a9a0:	f004 040f 	and.w	r4, r4, #15
 800a9a4:	2603      	movs	r6, #3
 800a9a6:	4da2      	ldr	r5, [pc, #648]	@ (800ac30 <_dtoa_r+0x5c0>)
 800a9a8:	b954      	cbnz	r4, 800a9c0 <_dtoa_r+0x350>
 800a9aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a9ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9b2:	f7f5 ff4b 	bl	800084c <__aeabi_ddiv>
 800a9b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a9ba:	e028      	b.n	800aa0e <_dtoa_r+0x39e>
 800a9bc:	2602      	movs	r6, #2
 800a9be:	e7f2      	b.n	800a9a6 <_dtoa_r+0x336>
 800a9c0:	07e1      	lsls	r1, r4, #31
 800a9c2:	d508      	bpl.n	800a9d6 <_dtoa_r+0x366>
 800a9c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a9c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a9cc:	f7f5 fe14 	bl	80005f8 <__aeabi_dmul>
 800a9d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a9d4:	3601      	adds	r6, #1
 800a9d6:	1064      	asrs	r4, r4, #1
 800a9d8:	3508      	adds	r5, #8
 800a9da:	e7e5      	b.n	800a9a8 <_dtoa_r+0x338>
 800a9dc:	f000 80d2 	beq.w	800ab84 <_dtoa_r+0x514>
 800a9e0:	427c      	negs	r4, r7
 800a9e2:	4b92      	ldr	r3, [pc, #584]	@ (800ac2c <_dtoa_r+0x5bc>)
 800a9e4:	4d92      	ldr	r5, [pc, #584]	@ (800ac30 <_dtoa_r+0x5c0>)
 800a9e6:	f004 020f 	and.w	r2, r4, #15
 800a9ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a9f6:	f7f5 fdff 	bl	80005f8 <__aeabi_dmul>
 800a9fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a9fe:	1124      	asrs	r4, r4, #4
 800aa00:	2300      	movs	r3, #0
 800aa02:	2602      	movs	r6, #2
 800aa04:	2c00      	cmp	r4, #0
 800aa06:	f040 80b2 	bne.w	800ab6e <_dtoa_r+0x4fe>
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d1d3      	bne.n	800a9b6 <_dtoa_r+0x346>
 800aa0e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800aa10:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	f000 80b7 	beq.w	800ab88 <_dtoa_r+0x518>
 800aa1a:	4b86      	ldr	r3, [pc, #536]	@ (800ac34 <_dtoa_r+0x5c4>)
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	4620      	mov	r0, r4
 800aa20:	4629      	mov	r1, r5
 800aa22:	f7f6 f85b 	bl	8000adc <__aeabi_dcmplt>
 800aa26:	2800      	cmp	r0, #0
 800aa28:	f000 80ae 	beq.w	800ab88 <_dtoa_r+0x518>
 800aa2c:	9b07      	ldr	r3, [sp, #28]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	f000 80aa 	beq.w	800ab88 <_dtoa_r+0x518>
 800aa34:	9b00      	ldr	r3, [sp, #0]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	dd37      	ble.n	800aaaa <_dtoa_r+0x43a>
 800aa3a:	1e7b      	subs	r3, r7, #1
 800aa3c:	9304      	str	r3, [sp, #16]
 800aa3e:	4620      	mov	r0, r4
 800aa40:	4b7d      	ldr	r3, [pc, #500]	@ (800ac38 <_dtoa_r+0x5c8>)
 800aa42:	2200      	movs	r2, #0
 800aa44:	4629      	mov	r1, r5
 800aa46:	f7f5 fdd7 	bl	80005f8 <__aeabi_dmul>
 800aa4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa4e:	9c00      	ldr	r4, [sp, #0]
 800aa50:	3601      	adds	r6, #1
 800aa52:	4630      	mov	r0, r6
 800aa54:	f7f5 fd66 	bl	8000524 <__aeabi_i2d>
 800aa58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aa5c:	f7f5 fdcc 	bl	80005f8 <__aeabi_dmul>
 800aa60:	4b76      	ldr	r3, [pc, #472]	@ (800ac3c <_dtoa_r+0x5cc>)
 800aa62:	2200      	movs	r2, #0
 800aa64:	f7f5 fc12 	bl	800028c <__adddf3>
 800aa68:	4605      	mov	r5, r0
 800aa6a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800aa6e:	2c00      	cmp	r4, #0
 800aa70:	f040 808d 	bne.w	800ab8e <_dtoa_r+0x51e>
 800aa74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa78:	4b71      	ldr	r3, [pc, #452]	@ (800ac40 <_dtoa_r+0x5d0>)
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	f7f5 fc04 	bl	8000288 <__aeabi_dsub>
 800aa80:	4602      	mov	r2, r0
 800aa82:	460b      	mov	r3, r1
 800aa84:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aa88:	462a      	mov	r2, r5
 800aa8a:	4633      	mov	r3, r6
 800aa8c:	f7f6 f844 	bl	8000b18 <__aeabi_dcmpgt>
 800aa90:	2800      	cmp	r0, #0
 800aa92:	f040 828b 	bne.w	800afac <_dtoa_r+0x93c>
 800aa96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa9a:	462a      	mov	r2, r5
 800aa9c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800aaa0:	f7f6 f81c 	bl	8000adc <__aeabi_dcmplt>
 800aaa4:	2800      	cmp	r0, #0
 800aaa6:	f040 8128 	bne.w	800acfa <_dtoa_r+0x68a>
 800aaaa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800aaae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800aab2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	f2c0 815a 	blt.w	800ad6e <_dtoa_r+0x6fe>
 800aaba:	2f0e      	cmp	r7, #14
 800aabc:	f300 8157 	bgt.w	800ad6e <_dtoa_r+0x6fe>
 800aac0:	4b5a      	ldr	r3, [pc, #360]	@ (800ac2c <_dtoa_r+0x5bc>)
 800aac2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800aac6:	ed93 7b00 	vldr	d7, [r3]
 800aaca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aacc:	2b00      	cmp	r3, #0
 800aace:	ed8d 7b00 	vstr	d7, [sp]
 800aad2:	da03      	bge.n	800aadc <_dtoa_r+0x46c>
 800aad4:	9b07      	ldr	r3, [sp, #28]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	f340 8101 	ble.w	800acde <_dtoa_r+0x66e>
 800aadc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800aae0:	4656      	mov	r6, sl
 800aae2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aae6:	4620      	mov	r0, r4
 800aae8:	4629      	mov	r1, r5
 800aaea:	f7f5 feaf 	bl	800084c <__aeabi_ddiv>
 800aaee:	f7f6 f833 	bl	8000b58 <__aeabi_d2iz>
 800aaf2:	4680      	mov	r8, r0
 800aaf4:	f7f5 fd16 	bl	8000524 <__aeabi_i2d>
 800aaf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aafc:	f7f5 fd7c 	bl	80005f8 <__aeabi_dmul>
 800ab00:	4602      	mov	r2, r0
 800ab02:	460b      	mov	r3, r1
 800ab04:	4620      	mov	r0, r4
 800ab06:	4629      	mov	r1, r5
 800ab08:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ab0c:	f7f5 fbbc 	bl	8000288 <__aeabi_dsub>
 800ab10:	f806 4b01 	strb.w	r4, [r6], #1
 800ab14:	9d07      	ldr	r5, [sp, #28]
 800ab16:	eba6 040a 	sub.w	r4, r6, sl
 800ab1a:	42a5      	cmp	r5, r4
 800ab1c:	4602      	mov	r2, r0
 800ab1e:	460b      	mov	r3, r1
 800ab20:	f040 8117 	bne.w	800ad52 <_dtoa_r+0x6e2>
 800ab24:	f7f5 fbb2 	bl	800028c <__adddf3>
 800ab28:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab2c:	4604      	mov	r4, r0
 800ab2e:	460d      	mov	r5, r1
 800ab30:	f7f5 fff2 	bl	8000b18 <__aeabi_dcmpgt>
 800ab34:	2800      	cmp	r0, #0
 800ab36:	f040 80f9 	bne.w	800ad2c <_dtoa_r+0x6bc>
 800ab3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab3e:	4620      	mov	r0, r4
 800ab40:	4629      	mov	r1, r5
 800ab42:	f7f5 ffc1 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab46:	b118      	cbz	r0, 800ab50 <_dtoa_r+0x4e0>
 800ab48:	f018 0f01 	tst.w	r8, #1
 800ab4c:	f040 80ee 	bne.w	800ad2c <_dtoa_r+0x6bc>
 800ab50:	4649      	mov	r1, r9
 800ab52:	4658      	mov	r0, fp
 800ab54:	f000 ff8c 	bl	800ba70 <_Bfree>
 800ab58:	2300      	movs	r3, #0
 800ab5a:	7033      	strb	r3, [r6, #0]
 800ab5c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ab5e:	3701      	adds	r7, #1
 800ab60:	601f      	str	r7, [r3, #0]
 800ab62:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	f000 831d 	beq.w	800b1a4 <_dtoa_r+0xb34>
 800ab6a:	601e      	str	r6, [r3, #0]
 800ab6c:	e31a      	b.n	800b1a4 <_dtoa_r+0xb34>
 800ab6e:	07e2      	lsls	r2, r4, #31
 800ab70:	d505      	bpl.n	800ab7e <_dtoa_r+0x50e>
 800ab72:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ab76:	f7f5 fd3f 	bl	80005f8 <__aeabi_dmul>
 800ab7a:	3601      	adds	r6, #1
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	1064      	asrs	r4, r4, #1
 800ab80:	3508      	adds	r5, #8
 800ab82:	e73f      	b.n	800aa04 <_dtoa_r+0x394>
 800ab84:	2602      	movs	r6, #2
 800ab86:	e742      	b.n	800aa0e <_dtoa_r+0x39e>
 800ab88:	9c07      	ldr	r4, [sp, #28]
 800ab8a:	9704      	str	r7, [sp, #16]
 800ab8c:	e761      	b.n	800aa52 <_dtoa_r+0x3e2>
 800ab8e:	4b27      	ldr	r3, [pc, #156]	@ (800ac2c <_dtoa_r+0x5bc>)
 800ab90:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ab92:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ab96:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ab9a:	4454      	add	r4, sl
 800ab9c:	2900      	cmp	r1, #0
 800ab9e:	d053      	beq.n	800ac48 <_dtoa_r+0x5d8>
 800aba0:	4928      	ldr	r1, [pc, #160]	@ (800ac44 <_dtoa_r+0x5d4>)
 800aba2:	2000      	movs	r0, #0
 800aba4:	f7f5 fe52 	bl	800084c <__aeabi_ddiv>
 800aba8:	4633      	mov	r3, r6
 800abaa:	462a      	mov	r2, r5
 800abac:	f7f5 fb6c 	bl	8000288 <__aeabi_dsub>
 800abb0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800abb4:	4656      	mov	r6, sl
 800abb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abba:	f7f5 ffcd 	bl	8000b58 <__aeabi_d2iz>
 800abbe:	4605      	mov	r5, r0
 800abc0:	f7f5 fcb0 	bl	8000524 <__aeabi_i2d>
 800abc4:	4602      	mov	r2, r0
 800abc6:	460b      	mov	r3, r1
 800abc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abcc:	f7f5 fb5c 	bl	8000288 <__aeabi_dsub>
 800abd0:	3530      	adds	r5, #48	@ 0x30
 800abd2:	4602      	mov	r2, r0
 800abd4:	460b      	mov	r3, r1
 800abd6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800abda:	f806 5b01 	strb.w	r5, [r6], #1
 800abde:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800abe2:	f7f5 ff7b 	bl	8000adc <__aeabi_dcmplt>
 800abe6:	2800      	cmp	r0, #0
 800abe8:	d171      	bne.n	800acce <_dtoa_r+0x65e>
 800abea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800abee:	4911      	ldr	r1, [pc, #68]	@ (800ac34 <_dtoa_r+0x5c4>)
 800abf0:	2000      	movs	r0, #0
 800abf2:	f7f5 fb49 	bl	8000288 <__aeabi_dsub>
 800abf6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800abfa:	f7f5 ff6f 	bl	8000adc <__aeabi_dcmplt>
 800abfe:	2800      	cmp	r0, #0
 800ac00:	f040 8095 	bne.w	800ad2e <_dtoa_r+0x6be>
 800ac04:	42a6      	cmp	r6, r4
 800ac06:	f43f af50 	beq.w	800aaaa <_dtoa_r+0x43a>
 800ac0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ac0e:	4b0a      	ldr	r3, [pc, #40]	@ (800ac38 <_dtoa_r+0x5c8>)
 800ac10:	2200      	movs	r2, #0
 800ac12:	f7f5 fcf1 	bl	80005f8 <__aeabi_dmul>
 800ac16:	4b08      	ldr	r3, [pc, #32]	@ (800ac38 <_dtoa_r+0x5c8>)
 800ac18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac22:	f7f5 fce9 	bl	80005f8 <__aeabi_dmul>
 800ac26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac2a:	e7c4      	b.n	800abb6 <_dtoa_r+0x546>
 800ac2c:	08022538 	.word	0x08022538
 800ac30:	08022510 	.word	0x08022510
 800ac34:	3ff00000 	.word	0x3ff00000
 800ac38:	40240000 	.word	0x40240000
 800ac3c:	401c0000 	.word	0x401c0000
 800ac40:	40140000 	.word	0x40140000
 800ac44:	3fe00000 	.word	0x3fe00000
 800ac48:	4631      	mov	r1, r6
 800ac4a:	4628      	mov	r0, r5
 800ac4c:	f7f5 fcd4 	bl	80005f8 <__aeabi_dmul>
 800ac50:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ac54:	9415      	str	r4, [sp, #84]	@ 0x54
 800ac56:	4656      	mov	r6, sl
 800ac58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac5c:	f7f5 ff7c 	bl	8000b58 <__aeabi_d2iz>
 800ac60:	4605      	mov	r5, r0
 800ac62:	f7f5 fc5f 	bl	8000524 <__aeabi_i2d>
 800ac66:	4602      	mov	r2, r0
 800ac68:	460b      	mov	r3, r1
 800ac6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac6e:	f7f5 fb0b 	bl	8000288 <__aeabi_dsub>
 800ac72:	3530      	adds	r5, #48	@ 0x30
 800ac74:	f806 5b01 	strb.w	r5, [r6], #1
 800ac78:	4602      	mov	r2, r0
 800ac7a:	460b      	mov	r3, r1
 800ac7c:	42a6      	cmp	r6, r4
 800ac7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ac82:	f04f 0200 	mov.w	r2, #0
 800ac86:	d124      	bne.n	800acd2 <_dtoa_r+0x662>
 800ac88:	4bac      	ldr	r3, [pc, #688]	@ (800af3c <_dtoa_r+0x8cc>)
 800ac8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ac8e:	f7f5 fafd 	bl	800028c <__adddf3>
 800ac92:	4602      	mov	r2, r0
 800ac94:	460b      	mov	r3, r1
 800ac96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac9a:	f7f5 ff3d 	bl	8000b18 <__aeabi_dcmpgt>
 800ac9e:	2800      	cmp	r0, #0
 800aca0:	d145      	bne.n	800ad2e <_dtoa_r+0x6be>
 800aca2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800aca6:	49a5      	ldr	r1, [pc, #660]	@ (800af3c <_dtoa_r+0x8cc>)
 800aca8:	2000      	movs	r0, #0
 800acaa:	f7f5 faed 	bl	8000288 <__aeabi_dsub>
 800acae:	4602      	mov	r2, r0
 800acb0:	460b      	mov	r3, r1
 800acb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acb6:	f7f5 ff11 	bl	8000adc <__aeabi_dcmplt>
 800acba:	2800      	cmp	r0, #0
 800acbc:	f43f aef5 	beq.w	800aaaa <_dtoa_r+0x43a>
 800acc0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800acc2:	1e73      	subs	r3, r6, #1
 800acc4:	9315      	str	r3, [sp, #84]	@ 0x54
 800acc6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800acca:	2b30      	cmp	r3, #48	@ 0x30
 800accc:	d0f8      	beq.n	800acc0 <_dtoa_r+0x650>
 800acce:	9f04      	ldr	r7, [sp, #16]
 800acd0:	e73e      	b.n	800ab50 <_dtoa_r+0x4e0>
 800acd2:	4b9b      	ldr	r3, [pc, #620]	@ (800af40 <_dtoa_r+0x8d0>)
 800acd4:	f7f5 fc90 	bl	80005f8 <__aeabi_dmul>
 800acd8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800acdc:	e7bc      	b.n	800ac58 <_dtoa_r+0x5e8>
 800acde:	d10c      	bne.n	800acfa <_dtoa_r+0x68a>
 800ace0:	4b98      	ldr	r3, [pc, #608]	@ (800af44 <_dtoa_r+0x8d4>)
 800ace2:	2200      	movs	r2, #0
 800ace4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ace8:	f7f5 fc86 	bl	80005f8 <__aeabi_dmul>
 800acec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800acf0:	f7f5 ff08 	bl	8000b04 <__aeabi_dcmpge>
 800acf4:	2800      	cmp	r0, #0
 800acf6:	f000 8157 	beq.w	800afa8 <_dtoa_r+0x938>
 800acfa:	2400      	movs	r4, #0
 800acfc:	4625      	mov	r5, r4
 800acfe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad00:	43db      	mvns	r3, r3
 800ad02:	9304      	str	r3, [sp, #16]
 800ad04:	4656      	mov	r6, sl
 800ad06:	2700      	movs	r7, #0
 800ad08:	4621      	mov	r1, r4
 800ad0a:	4658      	mov	r0, fp
 800ad0c:	f000 feb0 	bl	800ba70 <_Bfree>
 800ad10:	2d00      	cmp	r5, #0
 800ad12:	d0dc      	beq.n	800acce <_dtoa_r+0x65e>
 800ad14:	b12f      	cbz	r7, 800ad22 <_dtoa_r+0x6b2>
 800ad16:	42af      	cmp	r7, r5
 800ad18:	d003      	beq.n	800ad22 <_dtoa_r+0x6b2>
 800ad1a:	4639      	mov	r1, r7
 800ad1c:	4658      	mov	r0, fp
 800ad1e:	f000 fea7 	bl	800ba70 <_Bfree>
 800ad22:	4629      	mov	r1, r5
 800ad24:	4658      	mov	r0, fp
 800ad26:	f000 fea3 	bl	800ba70 <_Bfree>
 800ad2a:	e7d0      	b.n	800acce <_dtoa_r+0x65e>
 800ad2c:	9704      	str	r7, [sp, #16]
 800ad2e:	4633      	mov	r3, r6
 800ad30:	461e      	mov	r6, r3
 800ad32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad36:	2a39      	cmp	r2, #57	@ 0x39
 800ad38:	d107      	bne.n	800ad4a <_dtoa_r+0x6da>
 800ad3a:	459a      	cmp	sl, r3
 800ad3c:	d1f8      	bne.n	800ad30 <_dtoa_r+0x6c0>
 800ad3e:	9a04      	ldr	r2, [sp, #16]
 800ad40:	3201      	adds	r2, #1
 800ad42:	9204      	str	r2, [sp, #16]
 800ad44:	2230      	movs	r2, #48	@ 0x30
 800ad46:	f88a 2000 	strb.w	r2, [sl]
 800ad4a:	781a      	ldrb	r2, [r3, #0]
 800ad4c:	3201      	adds	r2, #1
 800ad4e:	701a      	strb	r2, [r3, #0]
 800ad50:	e7bd      	b.n	800acce <_dtoa_r+0x65e>
 800ad52:	4b7b      	ldr	r3, [pc, #492]	@ (800af40 <_dtoa_r+0x8d0>)
 800ad54:	2200      	movs	r2, #0
 800ad56:	f7f5 fc4f 	bl	80005f8 <__aeabi_dmul>
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	4604      	mov	r4, r0
 800ad60:	460d      	mov	r5, r1
 800ad62:	f7f5 feb1 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad66:	2800      	cmp	r0, #0
 800ad68:	f43f aebb 	beq.w	800aae2 <_dtoa_r+0x472>
 800ad6c:	e6f0      	b.n	800ab50 <_dtoa_r+0x4e0>
 800ad6e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ad70:	2a00      	cmp	r2, #0
 800ad72:	f000 80db 	beq.w	800af2c <_dtoa_r+0x8bc>
 800ad76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ad78:	2a01      	cmp	r2, #1
 800ad7a:	f300 80bf 	bgt.w	800aefc <_dtoa_r+0x88c>
 800ad7e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ad80:	2a00      	cmp	r2, #0
 800ad82:	f000 80b7 	beq.w	800aef4 <_dtoa_r+0x884>
 800ad86:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ad8a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ad8c:	4646      	mov	r6, r8
 800ad8e:	9a08      	ldr	r2, [sp, #32]
 800ad90:	2101      	movs	r1, #1
 800ad92:	441a      	add	r2, r3
 800ad94:	4658      	mov	r0, fp
 800ad96:	4498      	add	r8, r3
 800ad98:	9208      	str	r2, [sp, #32]
 800ad9a:	f000 ff1d 	bl	800bbd8 <__i2b>
 800ad9e:	4605      	mov	r5, r0
 800ada0:	b15e      	cbz	r6, 800adba <_dtoa_r+0x74a>
 800ada2:	9b08      	ldr	r3, [sp, #32]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	dd08      	ble.n	800adba <_dtoa_r+0x74a>
 800ada8:	42b3      	cmp	r3, r6
 800adaa:	9a08      	ldr	r2, [sp, #32]
 800adac:	bfa8      	it	ge
 800adae:	4633      	movge	r3, r6
 800adb0:	eba8 0803 	sub.w	r8, r8, r3
 800adb4:	1af6      	subs	r6, r6, r3
 800adb6:	1ad3      	subs	r3, r2, r3
 800adb8:	9308      	str	r3, [sp, #32]
 800adba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800adbc:	b1f3      	cbz	r3, 800adfc <_dtoa_r+0x78c>
 800adbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	f000 80b7 	beq.w	800af34 <_dtoa_r+0x8c4>
 800adc6:	b18c      	cbz	r4, 800adec <_dtoa_r+0x77c>
 800adc8:	4629      	mov	r1, r5
 800adca:	4622      	mov	r2, r4
 800adcc:	4658      	mov	r0, fp
 800adce:	f000 ffc3 	bl	800bd58 <__pow5mult>
 800add2:	464a      	mov	r2, r9
 800add4:	4601      	mov	r1, r0
 800add6:	4605      	mov	r5, r0
 800add8:	4658      	mov	r0, fp
 800adda:	f000 ff13 	bl	800bc04 <__multiply>
 800adde:	4649      	mov	r1, r9
 800ade0:	9004      	str	r0, [sp, #16]
 800ade2:	4658      	mov	r0, fp
 800ade4:	f000 fe44 	bl	800ba70 <_Bfree>
 800ade8:	9b04      	ldr	r3, [sp, #16]
 800adea:	4699      	mov	r9, r3
 800adec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800adee:	1b1a      	subs	r2, r3, r4
 800adf0:	d004      	beq.n	800adfc <_dtoa_r+0x78c>
 800adf2:	4649      	mov	r1, r9
 800adf4:	4658      	mov	r0, fp
 800adf6:	f000 ffaf 	bl	800bd58 <__pow5mult>
 800adfa:	4681      	mov	r9, r0
 800adfc:	2101      	movs	r1, #1
 800adfe:	4658      	mov	r0, fp
 800ae00:	f000 feea 	bl	800bbd8 <__i2b>
 800ae04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae06:	4604      	mov	r4, r0
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	f000 81cf 	beq.w	800b1ac <_dtoa_r+0xb3c>
 800ae0e:	461a      	mov	r2, r3
 800ae10:	4601      	mov	r1, r0
 800ae12:	4658      	mov	r0, fp
 800ae14:	f000 ffa0 	bl	800bd58 <__pow5mult>
 800ae18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae1a:	2b01      	cmp	r3, #1
 800ae1c:	4604      	mov	r4, r0
 800ae1e:	f300 8095 	bgt.w	800af4c <_dtoa_r+0x8dc>
 800ae22:	9b02      	ldr	r3, [sp, #8]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	f040 8087 	bne.w	800af38 <_dtoa_r+0x8c8>
 800ae2a:	9b03      	ldr	r3, [sp, #12]
 800ae2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	f040 8089 	bne.w	800af48 <_dtoa_r+0x8d8>
 800ae36:	9b03      	ldr	r3, [sp, #12]
 800ae38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ae3c:	0d1b      	lsrs	r3, r3, #20
 800ae3e:	051b      	lsls	r3, r3, #20
 800ae40:	b12b      	cbz	r3, 800ae4e <_dtoa_r+0x7de>
 800ae42:	9b08      	ldr	r3, [sp, #32]
 800ae44:	3301      	adds	r3, #1
 800ae46:	9308      	str	r3, [sp, #32]
 800ae48:	f108 0801 	add.w	r8, r8, #1
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	f000 81b0 	beq.w	800b1b8 <_dtoa_r+0xb48>
 800ae58:	6923      	ldr	r3, [r4, #16]
 800ae5a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ae5e:	6918      	ldr	r0, [r3, #16]
 800ae60:	f000 fe6e 	bl	800bb40 <__hi0bits>
 800ae64:	f1c0 0020 	rsb	r0, r0, #32
 800ae68:	9b08      	ldr	r3, [sp, #32]
 800ae6a:	4418      	add	r0, r3
 800ae6c:	f010 001f 	ands.w	r0, r0, #31
 800ae70:	d077      	beq.n	800af62 <_dtoa_r+0x8f2>
 800ae72:	f1c0 0320 	rsb	r3, r0, #32
 800ae76:	2b04      	cmp	r3, #4
 800ae78:	dd6b      	ble.n	800af52 <_dtoa_r+0x8e2>
 800ae7a:	9b08      	ldr	r3, [sp, #32]
 800ae7c:	f1c0 001c 	rsb	r0, r0, #28
 800ae80:	4403      	add	r3, r0
 800ae82:	4480      	add	r8, r0
 800ae84:	4406      	add	r6, r0
 800ae86:	9308      	str	r3, [sp, #32]
 800ae88:	f1b8 0f00 	cmp.w	r8, #0
 800ae8c:	dd05      	ble.n	800ae9a <_dtoa_r+0x82a>
 800ae8e:	4649      	mov	r1, r9
 800ae90:	4642      	mov	r2, r8
 800ae92:	4658      	mov	r0, fp
 800ae94:	f000 ffba 	bl	800be0c <__lshift>
 800ae98:	4681      	mov	r9, r0
 800ae9a:	9b08      	ldr	r3, [sp, #32]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	dd05      	ble.n	800aeac <_dtoa_r+0x83c>
 800aea0:	4621      	mov	r1, r4
 800aea2:	461a      	mov	r2, r3
 800aea4:	4658      	mov	r0, fp
 800aea6:	f000 ffb1 	bl	800be0c <__lshift>
 800aeaa:	4604      	mov	r4, r0
 800aeac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d059      	beq.n	800af66 <_dtoa_r+0x8f6>
 800aeb2:	4621      	mov	r1, r4
 800aeb4:	4648      	mov	r0, r9
 800aeb6:	f001 f815 	bl	800bee4 <__mcmp>
 800aeba:	2800      	cmp	r0, #0
 800aebc:	da53      	bge.n	800af66 <_dtoa_r+0x8f6>
 800aebe:	1e7b      	subs	r3, r7, #1
 800aec0:	9304      	str	r3, [sp, #16]
 800aec2:	4649      	mov	r1, r9
 800aec4:	2300      	movs	r3, #0
 800aec6:	220a      	movs	r2, #10
 800aec8:	4658      	mov	r0, fp
 800aeca:	f000 fdf3 	bl	800bab4 <__multadd>
 800aece:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aed0:	4681      	mov	r9, r0
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	f000 8172 	beq.w	800b1bc <_dtoa_r+0xb4c>
 800aed8:	2300      	movs	r3, #0
 800aeda:	4629      	mov	r1, r5
 800aedc:	220a      	movs	r2, #10
 800aede:	4658      	mov	r0, fp
 800aee0:	f000 fde8 	bl	800bab4 <__multadd>
 800aee4:	9b00      	ldr	r3, [sp, #0]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	4605      	mov	r5, r0
 800aeea:	dc67      	bgt.n	800afbc <_dtoa_r+0x94c>
 800aeec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aeee:	2b02      	cmp	r3, #2
 800aef0:	dc41      	bgt.n	800af76 <_dtoa_r+0x906>
 800aef2:	e063      	b.n	800afbc <_dtoa_r+0x94c>
 800aef4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800aef6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800aefa:	e746      	b.n	800ad8a <_dtoa_r+0x71a>
 800aefc:	9b07      	ldr	r3, [sp, #28]
 800aefe:	1e5c      	subs	r4, r3, #1
 800af00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af02:	42a3      	cmp	r3, r4
 800af04:	bfbf      	itttt	lt
 800af06:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800af08:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800af0a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800af0c:	1ae3      	sublt	r3, r4, r3
 800af0e:	bfb4      	ite	lt
 800af10:	18d2      	addlt	r2, r2, r3
 800af12:	1b1c      	subge	r4, r3, r4
 800af14:	9b07      	ldr	r3, [sp, #28]
 800af16:	bfbc      	itt	lt
 800af18:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800af1a:	2400      	movlt	r4, #0
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	bfb5      	itete	lt
 800af20:	eba8 0603 	sublt.w	r6, r8, r3
 800af24:	9b07      	ldrge	r3, [sp, #28]
 800af26:	2300      	movlt	r3, #0
 800af28:	4646      	movge	r6, r8
 800af2a:	e730      	b.n	800ad8e <_dtoa_r+0x71e>
 800af2c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800af2e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800af30:	4646      	mov	r6, r8
 800af32:	e735      	b.n	800ada0 <_dtoa_r+0x730>
 800af34:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800af36:	e75c      	b.n	800adf2 <_dtoa_r+0x782>
 800af38:	2300      	movs	r3, #0
 800af3a:	e788      	b.n	800ae4e <_dtoa_r+0x7de>
 800af3c:	3fe00000 	.word	0x3fe00000
 800af40:	40240000 	.word	0x40240000
 800af44:	40140000 	.word	0x40140000
 800af48:	9b02      	ldr	r3, [sp, #8]
 800af4a:	e780      	b.n	800ae4e <_dtoa_r+0x7de>
 800af4c:	2300      	movs	r3, #0
 800af4e:	930a      	str	r3, [sp, #40]	@ 0x28
 800af50:	e782      	b.n	800ae58 <_dtoa_r+0x7e8>
 800af52:	d099      	beq.n	800ae88 <_dtoa_r+0x818>
 800af54:	9a08      	ldr	r2, [sp, #32]
 800af56:	331c      	adds	r3, #28
 800af58:	441a      	add	r2, r3
 800af5a:	4498      	add	r8, r3
 800af5c:	441e      	add	r6, r3
 800af5e:	9208      	str	r2, [sp, #32]
 800af60:	e792      	b.n	800ae88 <_dtoa_r+0x818>
 800af62:	4603      	mov	r3, r0
 800af64:	e7f6      	b.n	800af54 <_dtoa_r+0x8e4>
 800af66:	9b07      	ldr	r3, [sp, #28]
 800af68:	9704      	str	r7, [sp, #16]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	dc20      	bgt.n	800afb0 <_dtoa_r+0x940>
 800af6e:	9300      	str	r3, [sp, #0]
 800af70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af72:	2b02      	cmp	r3, #2
 800af74:	dd1e      	ble.n	800afb4 <_dtoa_r+0x944>
 800af76:	9b00      	ldr	r3, [sp, #0]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	f47f aec0 	bne.w	800acfe <_dtoa_r+0x68e>
 800af7e:	4621      	mov	r1, r4
 800af80:	2205      	movs	r2, #5
 800af82:	4658      	mov	r0, fp
 800af84:	f000 fd96 	bl	800bab4 <__multadd>
 800af88:	4601      	mov	r1, r0
 800af8a:	4604      	mov	r4, r0
 800af8c:	4648      	mov	r0, r9
 800af8e:	f000 ffa9 	bl	800bee4 <__mcmp>
 800af92:	2800      	cmp	r0, #0
 800af94:	f77f aeb3 	ble.w	800acfe <_dtoa_r+0x68e>
 800af98:	4656      	mov	r6, sl
 800af9a:	2331      	movs	r3, #49	@ 0x31
 800af9c:	f806 3b01 	strb.w	r3, [r6], #1
 800afa0:	9b04      	ldr	r3, [sp, #16]
 800afa2:	3301      	adds	r3, #1
 800afa4:	9304      	str	r3, [sp, #16]
 800afa6:	e6ae      	b.n	800ad06 <_dtoa_r+0x696>
 800afa8:	9c07      	ldr	r4, [sp, #28]
 800afaa:	9704      	str	r7, [sp, #16]
 800afac:	4625      	mov	r5, r4
 800afae:	e7f3      	b.n	800af98 <_dtoa_r+0x928>
 800afb0:	9b07      	ldr	r3, [sp, #28]
 800afb2:	9300      	str	r3, [sp, #0]
 800afb4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	f000 8104 	beq.w	800b1c4 <_dtoa_r+0xb54>
 800afbc:	2e00      	cmp	r6, #0
 800afbe:	dd05      	ble.n	800afcc <_dtoa_r+0x95c>
 800afc0:	4629      	mov	r1, r5
 800afc2:	4632      	mov	r2, r6
 800afc4:	4658      	mov	r0, fp
 800afc6:	f000 ff21 	bl	800be0c <__lshift>
 800afca:	4605      	mov	r5, r0
 800afcc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d05a      	beq.n	800b088 <_dtoa_r+0xa18>
 800afd2:	6869      	ldr	r1, [r5, #4]
 800afd4:	4658      	mov	r0, fp
 800afd6:	f000 fd0b 	bl	800b9f0 <_Balloc>
 800afda:	4606      	mov	r6, r0
 800afdc:	b928      	cbnz	r0, 800afea <_dtoa_r+0x97a>
 800afde:	4b84      	ldr	r3, [pc, #528]	@ (800b1f0 <_dtoa_r+0xb80>)
 800afe0:	4602      	mov	r2, r0
 800afe2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800afe6:	f7ff bb5a 	b.w	800a69e <_dtoa_r+0x2e>
 800afea:	692a      	ldr	r2, [r5, #16]
 800afec:	3202      	adds	r2, #2
 800afee:	0092      	lsls	r2, r2, #2
 800aff0:	f105 010c 	add.w	r1, r5, #12
 800aff4:	300c      	adds	r0, #12
 800aff6:	f7ff faa4 	bl	800a542 <memcpy>
 800affa:	2201      	movs	r2, #1
 800affc:	4631      	mov	r1, r6
 800affe:	4658      	mov	r0, fp
 800b000:	f000 ff04 	bl	800be0c <__lshift>
 800b004:	f10a 0301 	add.w	r3, sl, #1
 800b008:	9307      	str	r3, [sp, #28]
 800b00a:	9b00      	ldr	r3, [sp, #0]
 800b00c:	4453      	add	r3, sl
 800b00e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b010:	9b02      	ldr	r3, [sp, #8]
 800b012:	f003 0301 	and.w	r3, r3, #1
 800b016:	462f      	mov	r7, r5
 800b018:	930a      	str	r3, [sp, #40]	@ 0x28
 800b01a:	4605      	mov	r5, r0
 800b01c:	9b07      	ldr	r3, [sp, #28]
 800b01e:	4621      	mov	r1, r4
 800b020:	3b01      	subs	r3, #1
 800b022:	4648      	mov	r0, r9
 800b024:	9300      	str	r3, [sp, #0]
 800b026:	f7ff fa9a 	bl	800a55e <quorem>
 800b02a:	4639      	mov	r1, r7
 800b02c:	9002      	str	r0, [sp, #8]
 800b02e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b032:	4648      	mov	r0, r9
 800b034:	f000 ff56 	bl	800bee4 <__mcmp>
 800b038:	462a      	mov	r2, r5
 800b03a:	9008      	str	r0, [sp, #32]
 800b03c:	4621      	mov	r1, r4
 800b03e:	4658      	mov	r0, fp
 800b040:	f000 ff6c 	bl	800bf1c <__mdiff>
 800b044:	68c2      	ldr	r2, [r0, #12]
 800b046:	4606      	mov	r6, r0
 800b048:	bb02      	cbnz	r2, 800b08c <_dtoa_r+0xa1c>
 800b04a:	4601      	mov	r1, r0
 800b04c:	4648      	mov	r0, r9
 800b04e:	f000 ff49 	bl	800bee4 <__mcmp>
 800b052:	4602      	mov	r2, r0
 800b054:	4631      	mov	r1, r6
 800b056:	4658      	mov	r0, fp
 800b058:	920e      	str	r2, [sp, #56]	@ 0x38
 800b05a:	f000 fd09 	bl	800ba70 <_Bfree>
 800b05e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b060:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b062:	9e07      	ldr	r6, [sp, #28]
 800b064:	ea43 0102 	orr.w	r1, r3, r2
 800b068:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b06a:	4319      	orrs	r1, r3
 800b06c:	d110      	bne.n	800b090 <_dtoa_r+0xa20>
 800b06e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b072:	d029      	beq.n	800b0c8 <_dtoa_r+0xa58>
 800b074:	9b08      	ldr	r3, [sp, #32]
 800b076:	2b00      	cmp	r3, #0
 800b078:	dd02      	ble.n	800b080 <_dtoa_r+0xa10>
 800b07a:	9b02      	ldr	r3, [sp, #8]
 800b07c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b080:	9b00      	ldr	r3, [sp, #0]
 800b082:	f883 8000 	strb.w	r8, [r3]
 800b086:	e63f      	b.n	800ad08 <_dtoa_r+0x698>
 800b088:	4628      	mov	r0, r5
 800b08a:	e7bb      	b.n	800b004 <_dtoa_r+0x994>
 800b08c:	2201      	movs	r2, #1
 800b08e:	e7e1      	b.n	800b054 <_dtoa_r+0x9e4>
 800b090:	9b08      	ldr	r3, [sp, #32]
 800b092:	2b00      	cmp	r3, #0
 800b094:	db04      	blt.n	800b0a0 <_dtoa_r+0xa30>
 800b096:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b098:	430b      	orrs	r3, r1
 800b09a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b09c:	430b      	orrs	r3, r1
 800b09e:	d120      	bne.n	800b0e2 <_dtoa_r+0xa72>
 800b0a0:	2a00      	cmp	r2, #0
 800b0a2:	dded      	ble.n	800b080 <_dtoa_r+0xa10>
 800b0a4:	4649      	mov	r1, r9
 800b0a6:	2201      	movs	r2, #1
 800b0a8:	4658      	mov	r0, fp
 800b0aa:	f000 feaf 	bl	800be0c <__lshift>
 800b0ae:	4621      	mov	r1, r4
 800b0b0:	4681      	mov	r9, r0
 800b0b2:	f000 ff17 	bl	800bee4 <__mcmp>
 800b0b6:	2800      	cmp	r0, #0
 800b0b8:	dc03      	bgt.n	800b0c2 <_dtoa_r+0xa52>
 800b0ba:	d1e1      	bne.n	800b080 <_dtoa_r+0xa10>
 800b0bc:	f018 0f01 	tst.w	r8, #1
 800b0c0:	d0de      	beq.n	800b080 <_dtoa_r+0xa10>
 800b0c2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b0c6:	d1d8      	bne.n	800b07a <_dtoa_r+0xa0a>
 800b0c8:	9a00      	ldr	r2, [sp, #0]
 800b0ca:	2339      	movs	r3, #57	@ 0x39
 800b0cc:	7013      	strb	r3, [r2, #0]
 800b0ce:	4633      	mov	r3, r6
 800b0d0:	461e      	mov	r6, r3
 800b0d2:	3b01      	subs	r3, #1
 800b0d4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b0d8:	2a39      	cmp	r2, #57	@ 0x39
 800b0da:	d052      	beq.n	800b182 <_dtoa_r+0xb12>
 800b0dc:	3201      	adds	r2, #1
 800b0de:	701a      	strb	r2, [r3, #0]
 800b0e0:	e612      	b.n	800ad08 <_dtoa_r+0x698>
 800b0e2:	2a00      	cmp	r2, #0
 800b0e4:	dd07      	ble.n	800b0f6 <_dtoa_r+0xa86>
 800b0e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b0ea:	d0ed      	beq.n	800b0c8 <_dtoa_r+0xa58>
 800b0ec:	9a00      	ldr	r2, [sp, #0]
 800b0ee:	f108 0301 	add.w	r3, r8, #1
 800b0f2:	7013      	strb	r3, [r2, #0]
 800b0f4:	e608      	b.n	800ad08 <_dtoa_r+0x698>
 800b0f6:	9b07      	ldr	r3, [sp, #28]
 800b0f8:	9a07      	ldr	r2, [sp, #28]
 800b0fa:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b0fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b100:	4293      	cmp	r3, r2
 800b102:	d028      	beq.n	800b156 <_dtoa_r+0xae6>
 800b104:	4649      	mov	r1, r9
 800b106:	2300      	movs	r3, #0
 800b108:	220a      	movs	r2, #10
 800b10a:	4658      	mov	r0, fp
 800b10c:	f000 fcd2 	bl	800bab4 <__multadd>
 800b110:	42af      	cmp	r7, r5
 800b112:	4681      	mov	r9, r0
 800b114:	f04f 0300 	mov.w	r3, #0
 800b118:	f04f 020a 	mov.w	r2, #10
 800b11c:	4639      	mov	r1, r7
 800b11e:	4658      	mov	r0, fp
 800b120:	d107      	bne.n	800b132 <_dtoa_r+0xac2>
 800b122:	f000 fcc7 	bl	800bab4 <__multadd>
 800b126:	4607      	mov	r7, r0
 800b128:	4605      	mov	r5, r0
 800b12a:	9b07      	ldr	r3, [sp, #28]
 800b12c:	3301      	adds	r3, #1
 800b12e:	9307      	str	r3, [sp, #28]
 800b130:	e774      	b.n	800b01c <_dtoa_r+0x9ac>
 800b132:	f000 fcbf 	bl	800bab4 <__multadd>
 800b136:	4629      	mov	r1, r5
 800b138:	4607      	mov	r7, r0
 800b13a:	2300      	movs	r3, #0
 800b13c:	220a      	movs	r2, #10
 800b13e:	4658      	mov	r0, fp
 800b140:	f000 fcb8 	bl	800bab4 <__multadd>
 800b144:	4605      	mov	r5, r0
 800b146:	e7f0      	b.n	800b12a <_dtoa_r+0xaba>
 800b148:	9b00      	ldr	r3, [sp, #0]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	bfcc      	ite	gt
 800b14e:	461e      	movgt	r6, r3
 800b150:	2601      	movle	r6, #1
 800b152:	4456      	add	r6, sl
 800b154:	2700      	movs	r7, #0
 800b156:	4649      	mov	r1, r9
 800b158:	2201      	movs	r2, #1
 800b15a:	4658      	mov	r0, fp
 800b15c:	f000 fe56 	bl	800be0c <__lshift>
 800b160:	4621      	mov	r1, r4
 800b162:	4681      	mov	r9, r0
 800b164:	f000 febe 	bl	800bee4 <__mcmp>
 800b168:	2800      	cmp	r0, #0
 800b16a:	dcb0      	bgt.n	800b0ce <_dtoa_r+0xa5e>
 800b16c:	d102      	bne.n	800b174 <_dtoa_r+0xb04>
 800b16e:	f018 0f01 	tst.w	r8, #1
 800b172:	d1ac      	bne.n	800b0ce <_dtoa_r+0xa5e>
 800b174:	4633      	mov	r3, r6
 800b176:	461e      	mov	r6, r3
 800b178:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b17c:	2a30      	cmp	r2, #48	@ 0x30
 800b17e:	d0fa      	beq.n	800b176 <_dtoa_r+0xb06>
 800b180:	e5c2      	b.n	800ad08 <_dtoa_r+0x698>
 800b182:	459a      	cmp	sl, r3
 800b184:	d1a4      	bne.n	800b0d0 <_dtoa_r+0xa60>
 800b186:	9b04      	ldr	r3, [sp, #16]
 800b188:	3301      	adds	r3, #1
 800b18a:	9304      	str	r3, [sp, #16]
 800b18c:	2331      	movs	r3, #49	@ 0x31
 800b18e:	f88a 3000 	strb.w	r3, [sl]
 800b192:	e5b9      	b.n	800ad08 <_dtoa_r+0x698>
 800b194:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b196:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b1f4 <_dtoa_r+0xb84>
 800b19a:	b11b      	cbz	r3, 800b1a4 <_dtoa_r+0xb34>
 800b19c:	f10a 0308 	add.w	r3, sl, #8
 800b1a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b1a2:	6013      	str	r3, [r2, #0]
 800b1a4:	4650      	mov	r0, sl
 800b1a6:	b019      	add	sp, #100	@ 0x64
 800b1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1ae:	2b01      	cmp	r3, #1
 800b1b0:	f77f ae37 	ble.w	800ae22 <_dtoa_r+0x7b2>
 800b1b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b1b6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b1b8:	2001      	movs	r0, #1
 800b1ba:	e655      	b.n	800ae68 <_dtoa_r+0x7f8>
 800b1bc:	9b00      	ldr	r3, [sp, #0]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	f77f aed6 	ble.w	800af70 <_dtoa_r+0x900>
 800b1c4:	4656      	mov	r6, sl
 800b1c6:	4621      	mov	r1, r4
 800b1c8:	4648      	mov	r0, r9
 800b1ca:	f7ff f9c8 	bl	800a55e <quorem>
 800b1ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b1d2:	f806 8b01 	strb.w	r8, [r6], #1
 800b1d6:	9b00      	ldr	r3, [sp, #0]
 800b1d8:	eba6 020a 	sub.w	r2, r6, sl
 800b1dc:	4293      	cmp	r3, r2
 800b1de:	ddb3      	ble.n	800b148 <_dtoa_r+0xad8>
 800b1e0:	4649      	mov	r1, r9
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	220a      	movs	r2, #10
 800b1e6:	4658      	mov	r0, fp
 800b1e8:	f000 fc64 	bl	800bab4 <__multadd>
 800b1ec:	4681      	mov	r9, r0
 800b1ee:	e7ea      	b.n	800b1c6 <_dtoa_r+0xb56>
 800b1f0:	08022484 	.word	0x08022484
 800b1f4:	08022408 	.word	0x08022408

0800b1f8 <__ssputs_r>:
 800b1f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1fc:	688e      	ldr	r6, [r1, #8]
 800b1fe:	461f      	mov	r7, r3
 800b200:	42be      	cmp	r6, r7
 800b202:	680b      	ldr	r3, [r1, #0]
 800b204:	4682      	mov	sl, r0
 800b206:	460c      	mov	r4, r1
 800b208:	4690      	mov	r8, r2
 800b20a:	d82d      	bhi.n	800b268 <__ssputs_r+0x70>
 800b20c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b210:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b214:	d026      	beq.n	800b264 <__ssputs_r+0x6c>
 800b216:	6965      	ldr	r5, [r4, #20]
 800b218:	6909      	ldr	r1, [r1, #16]
 800b21a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b21e:	eba3 0901 	sub.w	r9, r3, r1
 800b222:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b226:	1c7b      	adds	r3, r7, #1
 800b228:	444b      	add	r3, r9
 800b22a:	106d      	asrs	r5, r5, #1
 800b22c:	429d      	cmp	r5, r3
 800b22e:	bf38      	it	cc
 800b230:	461d      	movcc	r5, r3
 800b232:	0553      	lsls	r3, r2, #21
 800b234:	d527      	bpl.n	800b286 <__ssputs_r+0x8e>
 800b236:	4629      	mov	r1, r5
 800b238:	f000 faa2 	bl	800b780 <_malloc_r>
 800b23c:	4606      	mov	r6, r0
 800b23e:	b360      	cbz	r0, 800b29a <__ssputs_r+0xa2>
 800b240:	6921      	ldr	r1, [r4, #16]
 800b242:	464a      	mov	r2, r9
 800b244:	f7ff f97d 	bl	800a542 <memcpy>
 800b248:	89a3      	ldrh	r3, [r4, #12]
 800b24a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b24e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b252:	81a3      	strh	r3, [r4, #12]
 800b254:	6126      	str	r6, [r4, #16]
 800b256:	6165      	str	r5, [r4, #20]
 800b258:	444e      	add	r6, r9
 800b25a:	eba5 0509 	sub.w	r5, r5, r9
 800b25e:	6026      	str	r6, [r4, #0]
 800b260:	60a5      	str	r5, [r4, #8]
 800b262:	463e      	mov	r6, r7
 800b264:	42be      	cmp	r6, r7
 800b266:	d900      	bls.n	800b26a <__ssputs_r+0x72>
 800b268:	463e      	mov	r6, r7
 800b26a:	6820      	ldr	r0, [r4, #0]
 800b26c:	4632      	mov	r2, r6
 800b26e:	4641      	mov	r1, r8
 800b270:	f001 f8a8 	bl	800c3c4 <memmove>
 800b274:	68a3      	ldr	r3, [r4, #8]
 800b276:	1b9b      	subs	r3, r3, r6
 800b278:	60a3      	str	r3, [r4, #8]
 800b27a:	6823      	ldr	r3, [r4, #0]
 800b27c:	4433      	add	r3, r6
 800b27e:	6023      	str	r3, [r4, #0]
 800b280:	2000      	movs	r0, #0
 800b282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b286:	462a      	mov	r2, r5
 800b288:	f000 ff77 	bl	800c17a <_realloc_r>
 800b28c:	4606      	mov	r6, r0
 800b28e:	2800      	cmp	r0, #0
 800b290:	d1e0      	bne.n	800b254 <__ssputs_r+0x5c>
 800b292:	6921      	ldr	r1, [r4, #16]
 800b294:	4650      	mov	r0, sl
 800b296:	f001 f959 	bl	800c54c <_free_r>
 800b29a:	230c      	movs	r3, #12
 800b29c:	f8ca 3000 	str.w	r3, [sl]
 800b2a0:	89a3      	ldrh	r3, [r4, #12]
 800b2a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b2a6:	81a3      	strh	r3, [r4, #12]
 800b2a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b2ac:	e7e9      	b.n	800b282 <__ssputs_r+0x8a>
	...

0800b2b0 <_svfiprintf_r>:
 800b2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2b4:	4698      	mov	r8, r3
 800b2b6:	898b      	ldrh	r3, [r1, #12]
 800b2b8:	061b      	lsls	r3, r3, #24
 800b2ba:	b09d      	sub	sp, #116	@ 0x74
 800b2bc:	4607      	mov	r7, r0
 800b2be:	460d      	mov	r5, r1
 800b2c0:	4614      	mov	r4, r2
 800b2c2:	d510      	bpl.n	800b2e6 <_svfiprintf_r+0x36>
 800b2c4:	690b      	ldr	r3, [r1, #16]
 800b2c6:	b973      	cbnz	r3, 800b2e6 <_svfiprintf_r+0x36>
 800b2c8:	2140      	movs	r1, #64	@ 0x40
 800b2ca:	f000 fa59 	bl	800b780 <_malloc_r>
 800b2ce:	6028      	str	r0, [r5, #0]
 800b2d0:	6128      	str	r0, [r5, #16]
 800b2d2:	b930      	cbnz	r0, 800b2e2 <_svfiprintf_r+0x32>
 800b2d4:	230c      	movs	r3, #12
 800b2d6:	603b      	str	r3, [r7, #0]
 800b2d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b2dc:	b01d      	add	sp, #116	@ 0x74
 800b2de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2e2:	2340      	movs	r3, #64	@ 0x40
 800b2e4:	616b      	str	r3, [r5, #20]
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b2ea:	2320      	movs	r3, #32
 800b2ec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b2f0:	f8cd 800c 	str.w	r8, [sp, #12]
 800b2f4:	2330      	movs	r3, #48	@ 0x30
 800b2f6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b494 <_svfiprintf_r+0x1e4>
 800b2fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b2fe:	f04f 0901 	mov.w	r9, #1
 800b302:	4623      	mov	r3, r4
 800b304:	469a      	mov	sl, r3
 800b306:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b30a:	b10a      	cbz	r2, 800b310 <_svfiprintf_r+0x60>
 800b30c:	2a25      	cmp	r2, #37	@ 0x25
 800b30e:	d1f9      	bne.n	800b304 <_svfiprintf_r+0x54>
 800b310:	ebba 0b04 	subs.w	fp, sl, r4
 800b314:	d00b      	beq.n	800b32e <_svfiprintf_r+0x7e>
 800b316:	465b      	mov	r3, fp
 800b318:	4622      	mov	r2, r4
 800b31a:	4629      	mov	r1, r5
 800b31c:	4638      	mov	r0, r7
 800b31e:	f7ff ff6b 	bl	800b1f8 <__ssputs_r>
 800b322:	3001      	adds	r0, #1
 800b324:	f000 80a7 	beq.w	800b476 <_svfiprintf_r+0x1c6>
 800b328:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b32a:	445a      	add	r2, fp
 800b32c:	9209      	str	r2, [sp, #36]	@ 0x24
 800b32e:	f89a 3000 	ldrb.w	r3, [sl]
 800b332:	2b00      	cmp	r3, #0
 800b334:	f000 809f 	beq.w	800b476 <_svfiprintf_r+0x1c6>
 800b338:	2300      	movs	r3, #0
 800b33a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b33e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b342:	f10a 0a01 	add.w	sl, sl, #1
 800b346:	9304      	str	r3, [sp, #16]
 800b348:	9307      	str	r3, [sp, #28]
 800b34a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b34e:	931a      	str	r3, [sp, #104]	@ 0x68
 800b350:	4654      	mov	r4, sl
 800b352:	2205      	movs	r2, #5
 800b354:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b358:	484e      	ldr	r0, [pc, #312]	@ (800b494 <_svfiprintf_r+0x1e4>)
 800b35a:	f7f4 ff39 	bl	80001d0 <memchr>
 800b35e:	9a04      	ldr	r2, [sp, #16]
 800b360:	b9d8      	cbnz	r0, 800b39a <_svfiprintf_r+0xea>
 800b362:	06d0      	lsls	r0, r2, #27
 800b364:	bf44      	itt	mi
 800b366:	2320      	movmi	r3, #32
 800b368:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b36c:	0711      	lsls	r1, r2, #28
 800b36e:	bf44      	itt	mi
 800b370:	232b      	movmi	r3, #43	@ 0x2b
 800b372:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b376:	f89a 3000 	ldrb.w	r3, [sl]
 800b37a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b37c:	d015      	beq.n	800b3aa <_svfiprintf_r+0xfa>
 800b37e:	9a07      	ldr	r2, [sp, #28]
 800b380:	4654      	mov	r4, sl
 800b382:	2000      	movs	r0, #0
 800b384:	f04f 0c0a 	mov.w	ip, #10
 800b388:	4621      	mov	r1, r4
 800b38a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b38e:	3b30      	subs	r3, #48	@ 0x30
 800b390:	2b09      	cmp	r3, #9
 800b392:	d94b      	bls.n	800b42c <_svfiprintf_r+0x17c>
 800b394:	b1b0      	cbz	r0, 800b3c4 <_svfiprintf_r+0x114>
 800b396:	9207      	str	r2, [sp, #28]
 800b398:	e014      	b.n	800b3c4 <_svfiprintf_r+0x114>
 800b39a:	eba0 0308 	sub.w	r3, r0, r8
 800b39e:	fa09 f303 	lsl.w	r3, r9, r3
 800b3a2:	4313      	orrs	r3, r2
 800b3a4:	9304      	str	r3, [sp, #16]
 800b3a6:	46a2      	mov	sl, r4
 800b3a8:	e7d2      	b.n	800b350 <_svfiprintf_r+0xa0>
 800b3aa:	9b03      	ldr	r3, [sp, #12]
 800b3ac:	1d19      	adds	r1, r3, #4
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	9103      	str	r1, [sp, #12]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	bfbb      	ittet	lt
 800b3b6:	425b      	neglt	r3, r3
 800b3b8:	f042 0202 	orrlt.w	r2, r2, #2
 800b3bc:	9307      	strge	r3, [sp, #28]
 800b3be:	9307      	strlt	r3, [sp, #28]
 800b3c0:	bfb8      	it	lt
 800b3c2:	9204      	strlt	r2, [sp, #16]
 800b3c4:	7823      	ldrb	r3, [r4, #0]
 800b3c6:	2b2e      	cmp	r3, #46	@ 0x2e
 800b3c8:	d10a      	bne.n	800b3e0 <_svfiprintf_r+0x130>
 800b3ca:	7863      	ldrb	r3, [r4, #1]
 800b3cc:	2b2a      	cmp	r3, #42	@ 0x2a
 800b3ce:	d132      	bne.n	800b436 <_svfiprintf_r+0x186>
 800b3d0:	9b03      	ldr	r3, [sp, #12]
 800b3d2:	1d1a      	adds	r2, r3, #4
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	9203      	str	r2, [sp, #12]
 800b3d8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b3dc:	3402      	adds	r4, #2
 800b3de:	9305      	str	r3, [sp, #20]
 800b3e0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b4a4 <_svfiprintf_r+0x1f4>
 800b3e4:	7821      	ldrb	r1, [r4, #0]
 800b3e6:	2203      	movs	r2, #3
 800b3e8:	4650      	mov	r0, sl
 800b3ea:	f7f4 fef1 	bl	80001d0 <memchr>
 800b3ee:	b138      	cbz	r0, 800b400 <_svfiprintf_r+0x150>
 800b3f0:	9b04      	ldr	r3, [sp, #16]
 800b3f2:	eba0 000a 	sub.w	r0, r0, sl
 800b3f6:	2240      	movs	r2, #64	@ 0x40
 800b3f8:	4082      	lsls	r2, r0
 800b3fa:	4313      	orrs	r3, r2
 800b3fc:	3401      	adds	r4, #1
 800b3fe:	9304      	str	r3, [sp, #16]
 800b400:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b404:	4824      	ldr	r0, [pc, #144]	@ (800b498 <_svfiprintf_r+0x1e8>)
 800b406:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b40a:	2206      	movs	r2, #6
 800b40c:	f7f4 fee0 	bl	80001d0 <memchr>
 800b410:	2800      	cmp	r0, #0
 800b412:	d036      	beq.n	800b482 <_svfiprintf_r+0x1d2>
 800b414:	4b21      	ldr	r3, [pc, #132]	@ (800b49c <_svfiprintf_r+0x1ec>)
 800b416:	bb1b      	cbnz	r3, 800b460 <_svfiprintf_r+0x1b0>
 800b418:	9b03      	ldr	r3, [sp, #12]
 800b41a:	3307      	adds	r3, #7
 800b41c:	f023 0307 	bic.w	r3, r3, #7
 800b420:	3308      	adds	r3, #8
 800b422:	9303      	str	r3, [sp, #12]
 800b424:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b426:	4433      	add	r3, r6
 800b428:	9309      	str	r3, [sp, #36]	@ 0x24
 800b42a:	e76a      	b.n	800b302 <_svfiprintf_r+0x52>
 800b42c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b430:	460c      	mov	r4, r1
 800b432:	2001      	movs	r0, #1
 800b434:	e7a8      	b.n	800b388 <_svfiprintf_r+0xd8>
 800b436:	2300      	movs	r3, #0
 800b438:	3401      	adds	r4, #1
 800b43a:	9305      	str	r3, [sp, #20]
 800b43c:	4619      	mov	r1, r3
 800b43e:	f04f 0c0a 	mov.w	ip, #10
 800b442:	4620      	mov	r0, r4
 800b444:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b448:	3a30      	subs	r2, #48	@ 0x30
 800b44a:	2a09      	cmp	r2, #9
 800b44c:	d903      	bls.n	800b456 <_svfiprintf_r+0x1a6>
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d0c6      	beq.n	800b3e0 <_svfiprintf_r+0x130>
 800b452:	9105      	str	r1, [sp, #20]
 800b454:	e7c4      	b.n	800b3e0 <_svfiprintf_r+0x130>
 800b456:	fb0c 2101 	mla	r1, ip, r1, r2
 800b45a:	4604      	mov	r4, r0
 800b45c:	2301      	movs	r3, #1
 800b45e:	e7f0      	b.n	800b442 <_svfiprintf_r+0x192>
 800b460:	ab03      	add	r3, sp, #12
 800b462:	9300      	str	r3, [sp, #0]
 800b464:	462a      	mov	r2, r5
 800b466:	4b0e      	ldr	r3, [pc, #56]	@ (800b4a0 <_svfiprintf_r+0x1f0>)
 800b468:	a904      	add	r1, sp, #16
 800b46a:	4638      	mov	r0, r7
 800b46c:	f7fe fb26 	bl	8009abc <_printf_float>
 800b470:	1c42      	adds	r2, r0, #1
 800b472:	4606      	mov	r6, r0
 800b474:	d1d6      	bne.n	800b424 <_svfiprintf_r+0x174>
 800b476:	89ab      	ldrh	r3, [r5, #12]
 800b478:	065b      	lsls	r3, r3, #25
 800b47a:	f53f af2d 	bmi.w	800b2d8 <_svfiprintf_r+0x28>
 800b47e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b480:	e72c      	b.n	800b2dc <_svfiprintf_r+0x2c>
 800b482:	ab03      	add	r3, sp, #12
 800b484:	9300      	str	r3, [sp, #0]
 800b486:	462a      	mov	r2, r5
 800b488:	4b05      	ldr	r3, [pc, #20]	@ (800b4a0 <_svfiprintf_r+0x1f0>)
 800b48a:	a904      	add	r1, sp, #16
 800b48c:	4638      	mov	r0, r7
 800b48e:	f7fe fdad 	bl	8009fec <_printf_i>
 800b492:	e7ed      	b.n	800b470 <_svfiprintf_r+0x1c0>
 800b494:	08022495 	.word	0x08022495
 800b498:	0802249f 	.word	0x0802249f
 800b49c:	08009abd 	.word	0x08009abd
 800b4a0:	0800b1f9 	.word	0x0800b1f9
 800b4a4:	0802249b 	.word	0x0802249b

0800b4a8 <__sfputc_r>:
 800b4a8:	6893      	ldr	r3, [r2, #8]
 800b4aa:	3b01      	subs	r3, #1
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	b410      	push	{r4}
 800b4b0:	6093      	str	r3, [r2, #8]
 800b4b2:	da08      	bge.n	800b4c6 <__sfputc_r+0x1e>
 800b4b4:	6994      	ldr	r4, [r2, #24]
 800b4b6:	42a3      	cmp	r3, r4
 800b4b8:	db01      	blt.n	800b4be <__sfputc_r+0x16>
 800b4ba:	290a      	cmp	r1, #10
 800b4bc:	d103      	bne.n	800b4c6 <__sfputc_r+0x1e>
 800b4be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b4c2:	f000 be88 	b.w	800c1d6 <__swbuf_r>
 800b4c6:	6813      	ldr	r3, [r2, #0]
 800b4c8:	1c58      	adds	r0, r3, #1
 800b4ca:	6010      	str	r0, [r2, #0]
 800b4cc:	7019      	strb	r1, [r3, #0]
 800b4ce:	4608      	mov	r0, r1
 800b4d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b4d4:	4770      	bx	lr

0800b4d6 <__sfputs_r>:
 800b4d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4d8:	4606      	mov	r6, r0
 800b4da:	460f      	mov	r7, r1
 800b4dc:	4614      	mov	r4, r2
 800b4de:	18d5      	adds	r5, r2, r3
 800b4e0:	42ac      	cmp	r4, r5
 800b4e2:	d101      	bne.n	800b4e8 <__sfputs_r+0x12>
 800b4e4:	2000      	movs	r0, #0
 800b4e6:	e007      	b.n	800b4f8 <__sfputs_r+0x22>
 800b4e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4ec:	463a      	mov	r2, r7
 800b4ee:	4630      	mov	r0, r6
 800b4f0:	f7ff ffda 	bl	800b4a8 <__sfputc_r>
 800b4f4:	1c43      	adds	r3, r0, #1
 800b4f6:	d1f3      	bne.n	800b4e0 <__sfputs_r+0xa>
 800b4f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b4fc <_vfiprintf_r>:
 800b4fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b500:	460d      	mov	r5, r1
 800b502:	b09d      	sub	sp, #116	@ 0x74
 800b504:	4614      	mov	r4, r2
 800b506:	4698      	mov	r8, r3
 800b508:	4606      	mov	r6, r0
 800b50a:	b118      	cbz	r0, 800b514 <_vfiprintf_r+0x18>
 800b50c:	6a03      	ldr	r3, [r0, #32]
 800b50e:	b90b      	cbnz	r3, 800b514 <_vfiprintf_r+0x18>
 800b510:	f7fe ff38 	bl	800a384 <__sinit>
 800b514:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b516:	07d9      	lsls	r1, r3, #31
 800b518:	d405      	bmi.n	800b526 <_vfiprintf_r+0x2a>
 800b51a:	89ab      	ldrh	r3, [r5, #12]
 800b51c:	059a      	lsls	r2, r3, #22
 800b51e:	d402      	bmi.n	800b526 <_vfiprintf_r+0x2a>
 800b520:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b522:	f7ff f80c 	bl	800a53e <__retarget_lock_acquire_recursive>
 800b526:	89ab      	ldrh	r3, [r5, #12]
 800b528:	071b      	lsls	r3, r3, #28
 800b52a:	d501      	bpl.n	800b530 <_vfiprintf_r+0x34>
 800b52c:	692b      	ldr	r3, [r5, #16]
 800b52e:	b99b      	cbnz	r3, 800b558 <_vfiprintf_r+0x5c>
 800b530:	4629      	mov	r1, r5
 800b532:	4630      	mov	r0, r6
 800b534:	f000 fe8e 	bl	800c254 <__swsetup_r>
 800b538:	b170      	cbz	r0, 800b558 <_vfiprintf_r+0x5c>
 800b53a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b53c:	07dc      	lsls	r4, r3, #31
 800b53e:	d504      	bpl.n	800b54a <_vfiprintf_r+0x4e>
 800b540:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b544:	b01d      	add	sp, #116	@ 0x74
 800b546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b54a:	89ab      	ldrh	r3, [r5, #12]
 800b54c:	0598      	lsls	r0, r3, #22
 800b54e:	d4f7      	bmi.n	800b540 <_vfiprintf_r+0x44>
 800b550:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b552:	f7fe fff5 	bl	800a540 <__retarget_lock_release_recursive>
 800b556:	e7f3      	b.n	800b540 <_vfiprintf_r+0x44>
 800b558:	2300      	movs	r3, #0
 800b55a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b55c:	2320      	movs	r3, #32
 800b55e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b562:	f8cd 800c 	str.w	r8, [sp, #12]
 800b566:	2330      	movs	r3, #48	@ 0x30
 800b568:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b718 <_vfiprintf_r+0x21c>
 800b56c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b570:	f04f 0901 	mov.w	r9, #1
 800b574:	4623      	mov	r3, r4
 800b576:	469a      	mov	sl, r3
 800b578:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b57c:	b10a      	cbz	r2, 800b582 <_vfiprintf_r+0x86>
 800b57e:	2a25      	cmp	r2, #37	@ 0x25
 800b580:	d1f9      	bne.n	800b576 <_vfiprintf_r+0x7a>
 800b582:	ebba 0b04 	subs.w	fp, sl, r4
 800b586:	d00b      	beq.n	800b5a0 <_vfiprintf_r+0xa4>
 800b588:	465b      	mov	r3, fp
 800b58a:	4622      	mov	r2, r4
 800b58c:	4629      	mov	r1, r5
 800b58e:	4630      	mov	r0, r6
 800b590:	f7ff ffa1 	bl	800b4d6 <__sfputs_r>
 800b594:	3001      	adds	r0, #1
 800b596:	f000 80a7 	beq.w	800b6e8 <_vfiprintf_r+0x1ec>
 800b59a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b59c:	445a      	add	r2, fp
 800b59e:	9209      	str	r2, [sp, #36]	@ 0x24
 800b5a0:	f89a 3000 	ldrb.w	r3, [sl]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	f000 809f 	beq.w	800b6e8 <_vfiprintf_r+0x1ec>
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b5b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5b4:	f10a 0a01 	add.w	sl, sl, #1
 800b5b8:	9304      	str	r3, [sp, #16]
 800b5ba:	9307      	str	r3, [sp, #28]
 800b5bc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b5c0:	931a      	str	r3, [sp, #104]	@ 0x68
 800b5c2:	4654      	mov	r4, sl
 800b5c4:	2205      	movs	r2, #5
 800b5c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5ca:	4853      	ldr	r0, [pc, #332]	@ (800b718 <_vfiprintf_r+0x21c>)
 800b5cc:	f7f4 fe00 	bl	80001d0 <memchr>
 800b5d0:	9a04      	ldr	r2, [sp, #16]
 800b5d2:	b9d8      	cbnz	r0, 800b60c <_vfiprintf_r+0x110>
 800b5d4:	06d1      	lsls	r1, r2, #27
 800b5d6:	bf44      	itt	mi
 800b5d8:	2320      	movmi	r3, #32
 800b5da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b5de:	0713      	lsls	r3, r2, #28
 800b5e0:	bf44      	itt	mi
 800b5e2:	232b      	movmi	r3, #43	@ 0x2b
 800b5e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b5e8:	f89a 3000 	ldrb.w	r3, [sl]
 800b5ec:	2b2a      	cmp	r3, #42	@ 0x2a
 800b5ee:	d015      	beq.n	800b61c <_vfiprintf_r+0x120>
 800b5f0:	9a07      	ldr	r2, [sp, #28]
 800b5f2:	4654      	mov	r4, sl
 800b5f4:	2000      	movs	r0, #0
 800b5f6:	f04f 0c0a 	mov.w	ip, #10
 800b5fa:	4621      	mov	r1, r4
 800b5fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b600:	3b30      	subs	r3, #48	@ 0x30
 800b602:	2b09      	cmp	r3, #9
 800b604:	d94b      	bls.n	800b69e <_vfiprintf_r+0x1a2>
 800b606:	b1b0      	cbz	r0, 800b636 <_vfiprintf_r+0x13a>
 800b608:	9207      	str	r2, [sp, #28]
 800b60a:	e014      	b.n	800b636 <_vfiprintf_r+0x13a>
 800b60c:	eba0 0308 	sub.w	r3, r0, r8
 800b610:	fa09 f303 	lsl.w	r3, r9, r3
 800b614:	4313      	orrs	r3, r2
 800b616:	9304      	str	r3, [sp, #16]
 800b618:	46a2      	mov	sl, r4
 800b61a:	e7d2      	b.n	800b5c2 <_vfiprintf_r+0xc6>
 800b61c:	9b03      	ldr	r3, [sp, #12]
 800b61e:	1d19      	adds	r1, r3, #4
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	9103      	str	r1, [sp, #12]
 800b624:	2b00      	cmp	r3, #0
 800b626:	bfbb      	ittet	lt
 800b628:	425b      	neglt	r3, r3
 800b62a:	f042 0202 	orrlt.w	r2, r2, #2
 800b62e:	9307      	strge	r3, [sp, #28]
 800b630:	9307      	strlt	r3, [sp, #28]
 800b632:	bfb8      	it	lt
 800b634:	9204      	strlt	r2, [sp, #16]
 800b636:	7823      	ldrb	r3, [r4, #0]
 800b638:	2b2e      	cmp	r3, #46	@ 0x2e
 800b63a:	d10a      	bne.n	800b652 <_vfiprintf_r+0x156>
 800b63c:	7863      	ldrb	r3, [r4, #1]
 800b63e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b640:	d132      	bne.n	800b6a8 <_vfiprintf_r+0x1ac>
 800b642:	9b03      	ldr	r3, [sp, #12]
 800b644:	1d1a      	adds	r2, r3, #4
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	9203      	str	r2, [sp, #12]
 800b64a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b64e:	3402      	adds	r4, #2
 800b650:	9305      	str	r3, [sp, #20]
 800b652:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b728 <_vfiprintf_r+0x22c>
 800b656:	7821      	ldrb	r1, [r4, #0]
 800b658:	2203      	movs	r2, #3
 800b65a:	4650      	mov	r0, sl
 800b65c:	f7f4 fdb8 	bl	80001d0 <memchr>
 800b660:	b138      	cbz	r0, 800b672 <_vfiprintf_r+0x176>
 800b662:	9b04      	ldr	r3, [sp, #16]
 800b664:	eba0 000a 	sub.w	r0, r0, sl
 800b668:	2240      	movs	r2, #64	@ 0x40
 800b66a:	4082      	lsls	r2, r0
 800b66c:	4313      	orrs	r3, r2
 800b66e:	3401      	adds	r4, #1
 800b670:	9304      	str	r3, [sp, #16]
 800b672:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b676:	4829      	ldr	r0, [pc, #164]	@ (800b71c <_vfiprintf_r+0x220>)
 800b678:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b67c:	2206      	movs	r2, #6
 800b67e:	f7f4 fda7 	bl	80001d0 <memchr>
 800b682:	2800      	cmp	r0, #0
 800b684:	d03f      	beq.n	800b706 <_vfiprintf_r+0x20a>
 800b686:	4b26      	ldr	r3, [pc, #152]	@ (800b720 <_vfiprintf_r+0x224>)
 800b688:	bb1b      	cbnz	r3, 800b6d2 <_vfiprintf_r+0x1d6>
 800b68a:	9b03      	ldr	r3, [sp, #12]
 800b68c:	3307      	adds	r3, #7
 800b68e:	f023 0307 	bic.w	r3, r3, #7
 800b692:	3308      	adds	r3, #8
 800b694:	9303      	str	r3, [sp, #12]
 800b696:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b698:	443b      	add	r3, r7
 800b69a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b69c:	e76a      	b.n	800b574 <_vfiprintf_r+0x78>
 800b69e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b6a2:	460c      	mov	r4, r1
 800b6a4:	2001      	movs	r0, #1
 800b6a6:	e7a8      	b.n	800b5fa <_vfiprintf_r+0xfe>
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	3401      	adds	r4, #1
 800b6ac:	9305      	str	r3, [sp, #20]
 800b6ae:	4619      	mov	r1, r3
 800b6b0:	f04f 0c0a 	mov.w	ip, #10
 800b6b4:	4620      	mov	r0, r4
 800b6b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6ba:	3a30      	subs	r2, #48	@ 0x30
 800b6bc:	2a09      	cmp	r2, #9
 800b6be:	d903      	bls.n	800b6c8 <_vfiprintf_r+0x1cc>
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d0c6      	beq.n	800b652 <_vfiprintf_r+0x156>
 800b6c4:	9105      	str	r1, [sp, #20]
 800b6c6:	e7c4      	b.n	800b652 <_vfiprintf_r+0x156>
 800b6c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6cc:	4604      	mov	r4, r0
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	e7f0      	b.n	800b6b4 <_vfiprintf_r+0x1b8>
 800b6d2:	ab03      	add	r3, sp, #12
 800b6d4:	9300      	str	r3, [sp, #0]
 800b6d6:	462a      	mov	r2, r5
 800b6d8:	4b12      	ldr	r3, [pc, #72]	@ (800b724 <_vfiprintf_r+0x228>)
 800b6da:	a904      	add	r1, sp, #16
 800b6dc:	4630      	mov	r0, r6
 800b6de:	f7fe f9ed 	bl	8009abc <_printf_float>
 800b6e2:	4607      	mov	r7, r0
 800b6e4:	1c78      	adds	r0, r7, #1
 800b6e6:	d1d6      	bne.n	800b696 <_vfiprintf_r+0x19a>
 800b6e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b6ea:	07d9      	lsls	r1, r3, #31
 800b6ec:	d405      	bmi.n	800b6fa <_vfiprintf_r+0x1fe>
 800b6ee:	89ab      	ldrh	r3, [r5, #12]
 800b6f0:	059a      	lsls	r2, r3, #22
 800b6f2:	d402      	bmi.n	800b6fa <_vfiprintf_r+0x1fe>
 800b6f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b6f6:	f7fe ff23 	bl	800a540 <__retarget_lock_release_recursive>
 800b6fa:	89ab      	ldrh	r3, [r5, #12]
 800b6fc:	065b      	lsls	r3, r3, #25
 800b6fe:	f53f af1f 	bmi.w	800b540 <_vfiprintf_r+0x44>
 800b702:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b704:	e71e      	b.n	800b544 <_vfiprintf_r+0x48>
 800b706:	ab03      	add	r3, sp, #12
 800b708:	9300      	str	r3, [sp, #0]
 800b70a:	462a      	mov	r2, r5
 800b70c:	4b05      	ldr	r3, [pc, #20]	@ (800b724 <_vfiprintf_r+0x228>)
 800b70e:	a904      	add	r1, sp, #16
 800b710:	4630      	mov	r0, r6
 800b712:	f7fe fc6b 	bl	8009fec <_printf_i>
 800b716:	e7e4      	b.n	800b6e2 <_vfiprintf_r+0x1e6>
 800b718:	08022495 	.word	0x08022495
 800b71c:	0802249f 	.word	0x0802249f
 800b720:	08009abd 	.word	0x08009abd
 800b724:	0800b4d7 	.word	0x0800b4d7
 800b728:	0802249b 	.word	0x0802249b

0800b72c <malloc>:
 800b72c:	4b02      	ldr	r3, [pc, #8]	@ (800b738 <malloc+0xc>)
 800b72e:	4601      	mov	r1, r0
 800b730:	6818      	ldr	r0, [r3, #0]
 800b732:	f000 b825 	b.w	800b780 <_malloc_r>
 800b736:	bf00      	nop
 800b738:	2000001c 	.word	0x2000001c

0800b73c <sbrk_aligned>:
 800b73c:	b570      	push	{r4, r5, r6, lr}
 800b73e:	4e0f      	ldr	r6, [pc, #60]	@ (800b77c <sbrk_aligned+0x40>)
 800b740:	460c      	mov	r4, r1
 800b742:	6831      	ldr	r1, [r6, #0]
 800b744:	4605      	mov	r5, r0
 800b746:	b911      	cbnz	r1, 800b74e <sbrk_aligned+0x12>
 800b748:	f000 feac 	bl	800c4a4 <_sbrk_r>
 800b74c:	6030      	str	r0, [r6, #0]
 800b74e:	4621      	mov	r1, r4
 800b750:	4628      	mov	r0, r5
 800b752:	f000 fea7 	bl	800c4a4 <_sbrk_r>
 800b756:	1c43      	adds	r3, r0, #1
 800b758:	d103      	bne.n	800b762 <sbrk_aligned+0x26>
 800b75a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800b75e:	4620      	mov	r0, r4
 800b760:	bd70      	pop	{r4, r5, r6, pc}
 800b762:	1cc4      	adds	r4, r0, #3
 800b764:	f024 0403 	bic.w	r4, r4, #3
 800b768:	42a0      	cmp	r0, r4
 800b76a:	d0f8      	beq.n	800b75e <sbrk_aligned+0x22>
 800b76c:	1a21      	subs	r1, r4, r0
 800b76e:	4628      	mov	r0, r5
 800b770:	f000 fe98 	bl	800c4a4 <_sbrk_r>
 800b774:	3001      	adds	r0, #1
 800b776:	d1f2      	bne.n	800b75e <sbrk_aligned+0x22>
 800b778:	e7ef      	b.n	800b75a <sbrk_aligned+0x1e>
 800b77a:	bf00      	nop
 800b77c:	200015f0 	.word	0x200015f0

0800b780 <_malloc_r>:
 800b780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b784:	1ccd      	adds	r5, r1, #3
 800b786:	f025 0503 	bic.w	r5, r5, #3
 800b78a:	3508      	adds	r5, #8
 800b78c:	2d0c      	cmp	r5, #12
 800b78e:	bf38      	it	cc
 800b790:	250c      	movcc	r5, #12
 800b792:	2d00      	cmp	r5, #0
 800b794:	4606      	mov	r6, r0
 800b796:	db01      	blt.n	800b79c <_malloc_r+0x1c>
 800b798:	42a9      	cmp	r1, r5
 800b79a:	d904      	bls.n	800b7a6 <_malloc_r+0x26>
 800b79c:	230c      	movs	r3, #12
 800b79e:	6033      	str	r3, [r6, #0]
 800b7a0:	2000      	movs	r0, #0
 800b7a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b87c <_malloc_r+0xfc>
 800b7aa:	f000 f915 	bl	800b9d8 <__malloc_lock>
 800b7ae:	f8d8 3000 	ldr.w	r3, [r8]
 800b7b2:	461c      	mov	r4, r3
 800b7b4:	bb44      	cbnz	r4, 800b808 <_malloc_r+0x88>
 800b7b6:	4629      	mov	r1, r5
 800b7b8:	4630      	mov	r0, r6
 800b7ba:	f7ff ffbf 	bl	800b73c <sbrk_aligned>
 800b7be:	1c43      	adds	r3, r0, #1
 800b7c0:	4604      	mov	r4, r0
 800b7c2:	d158      	bne.n	800b876 <_malloc_r+0xf6>
 800b7c4:	f8d8 4000 	ldr.w	r4, [r8]
 800b7c8:	4627      	mov	r7, r4
 800b7ca:	2f00      	cmp	r7, #0
 800b7cc:	d143      	bne.n	800b856 <_malloc_r+0xd6>
 800b7ce:	2c00      	cmp	r4, #0
 800b7d0:	d04b      	beq.n	800b86a <_malloc_r+0xea>
 800b7d2:	6823      	ldr	r3, [r4, #0]
 800b7d4:	4639      	mov	r1, r7
 800b7d6:	4630      	mov	r0, r6
 800b7d8:	eb04 0903 	add.w	r9, r4, r3
 800b7dc:	f000 fe62 	bl	800c4a4 <_sbrk_r>
 800b7e0:	4581      	cmp	r9, r0
 800b7e2:	d142      	bne.n	800b86a <_malloc_r+0xea>
 800b7e4:	6821      	ldr	r1, [r4, #0]
 800b7e6:	1a6d      	subs	r5, r5, r1
 800b7e8:	4629      	mov	r1, r5
 800b7ea:	4630      	mov	r0, r6
 800b7ec:	f7ff ffa6 	bl	800b73c <sbrk_aligned>
 800b7f0:	3001      	adds	r0, #1
 800b7f2:	d03a      	beq.n	800b86a <_malloc_r+0xea>
 800b7f4:	6823      	ldr	r3, [r4, #0]
 800b7f6:	442b      	add	r3, r5
 800b7f8:	6023      	str	r3, [r4, #0]
 800b7fa:	f8d8 3000 	ldr.w	r3, [r8]
 800b7fe:	685a      	ldr	r2, [r3, #4]
 800b800:	bb62      	cbnz	r2, 800b85c <_malloc_r+0xdc>
 800b802:	f8c8 7000 	str.w	r7, [r8]
 800b806:	e00f      	b.n	800b828 <_malloc_r+0xa8>
 800b808:	6822      	ldr	r2, [r4, #0]
 800b80a:	1b52      	subs	r2, r2, r5
 800b80c:	d420      	bmi.n	800b850 <_malloc_r+0xd0>
 800b80e:	2a0b      	cmp	r2, #11
 800b810:	d917      	bls.n	800b842 <_malloc_r+0xc2>
 800b812:	1961      	adds	r1, r4, r5
 800b814:	42a3      	cmp	r3, r4
 800b816:	6025      	str	r5, [r4, #0]
 800b818:	bf18      	it	ne
 800b81a:	6059      	strne	r1, [r3, #4]
 800b81c:	6863      	ldr	r3, [r4, #4]
 800b81e:	bf08      	it	eq
 800b820:	f8c8 1000 	streq.w	r1, [r8]
 800b824:	5162      	str	r2, [r4, r5]
 800b826:	604b      	str	r3, [r1, #4]
 800b828:	4630      	mov	r0, r6
 800b82a:	f000 f8db 	bl	800b9e4 <__malloc_unlock>
 800b82e:	f104 000b 	add.w	r0, r4, #11
 800b832:	1d23      	adds	r3, r4, #4
 800b834:	f020 0007 	bic.w	r0, r0, #7
 800b838:	1ac2      	subs	r2, r0, r3
 800b83a:	bf1c      	itt	ne
 800b83c:	1a1b      	subne	r3, r3, r0
 800b83e:	50a3      	strne	r3, [r4, r2]
 800b840:	e7af      	b.n	800b7a2 <_malloc_r+0x22>
 800b842:	6862      	ldr	r2, [r4, #4]
 800b844:	42a3      	cmp	r3, r4
 800b846:	bf0c      	ite	eq
 800b848:	f8c8 2000 	streq.w	r2, [r8]
 800b84c:	605a      	strne	r2, [r3, #4]
 800b84e:	e7eb      	b.n	800b828 <_malloc_r+0xa8>
 800b850:	4623      	mov	r3, r4
 800b852:	6864      	ldr	r4, [r4, #4]
 800b854:	e7ae      	b.n	800b7b4 <_malloc_r+0x34>
 800b856:	463c      	mov	r4, r7
 800b858:	687f      	ldr	r7, [r7, #4]
 800b85a:	e7b6      	b.n	800b7ca <_malloc_r+0x4a>
 800b85c:	461a      	mov	r2, r3
 800b85e:	685b      	ldr	r3, [r3, #4]
 800b860:	42a3      	cmp	r3, r4
 800b862:	d1fb      	bne.n	800b85c <_malloc_r+0xdc>
 800b864:	2300      	movs	r3, #0
 800b866:	6053      	str	r3, [r2, #4]
 800b868:	e7de      	b.n	800b828 <_malloc_r+0xa8>
 800b86a:	230c      	movs	r3, #12
 800b86c:	6033      	str	r3, [r6, #0]
 800b86e:	4630      	mov	r0, r6
 800b870:	f000 f8b8 	bl	800b9e4 <__malloc_unlock>
 800b874:	e794      	b.n	800b7a0 <_malloc_r+0x20>
 800b876:	6005      	str	r5, [r0, #0]
 800b878:	e7d6      	b.n	800b828 <_malloc_r+0xa8>
 800b87a:	bf00      	nop
 800b87c:	200015f4 	.word	0x200015f4

0800b880 <__sflush_r>:
 800b880:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b888:	0716      	lsls	r6, r2, #28
 800b88a:	4605      	mov	r5, r0
 800b88c:	460c      	mov	r4, r1
 800b88e:	d454      	bmi.n	800b93a <__sflush_r+0xba>
 800b890:	684b      	ldr	r3, [r1, #4]
 800b892:	2b00      	cmp	r3, #0
 800b894:	dc02      	bgt.n	800b89c <__sflush_r+0x1c>
 800b896:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b898:	2b00      	cmp	r3, #0
 800b89a:	dd48      	ble.n	800b92e <__sflush_r+0xae>
 800b89c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b89e:	2e00      	cmp	r6, #0
 800b8a0:	d045      	beq.n	800b92e <__sflush_r+0xae>
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b8a8:	682f      	ldr	r7, [r5, #0]
 800b8aa:	6a21      	ldr	r1, [r4, #32]
 800b8ac:	602b      	str	r3, [r5, #0]
 800b8ae:	d030      	beq.n	800b912 <__sflush_r+0x92>
 800b8b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b8b2:	89a3      	ldrh	r3, [r4, #12]
 800b8b4:	0759      	lsls	r1, r3, #29
 800b8b6:	d505      	bpl.n	800b8c4 <__sflush_r+0x44>
 800b8b8:	6863      	ldr	r3, [r4, #4]
 800b8ba:	1ad2      	subs	r2, r2, r3
 800b8bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b8be:	b10b      	cbz	r3, 800b8c4 <__sflush_r+0x44>
 800b8c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b8c2:	1ad2      	subs	r2, r2, r3
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b8c8:	6a21      	ldr	r1, [r4, #32]
 800b8ca:	4628      	mov	r0, r5
 800b8cc:	47b0      	blx	r6
 800b8ce:	1c43      	adds	r3, r0, #1
 800b8d0:	89a3      	ldrh	r3, [r4, #12]
 800b8d2:	d106      	bne.n	800b8e2 <__sflush_r+0x62>
 800b8d4:	6829      	ldr	r1, [r5, #0]
 800b8d6:	291d      	cmp	r1, #29
 800b8d8:	d82b      	bhi.n	800b932 <__sflush_r+0xb2>
 800b8da:	4a2a      	ldr	r2, [pc, #168]	@ (800b984 <__sflush_r+0x104>)
 800b8dc:	410a      	asrs	r2, r1
 800b8de:	07d6      	lsls	r6, r2, #31
 800b8e0:	d427      	bmi.n	800b932 <__sflush_r+0xb2>
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	6062      	str	r2, [r4, #4]
 800b8e6:	04d9      	lsls	r1, r3, #19
 800b8e8:	6922      	ldr	r2, [r4, #16]
 800b8ea:	6022      	str	r2, [r4, #0]
 800b8ec:	d504      	bpl.n	800b8f8 <__sflush_r+0x78>
 800b8ee:	1c42      	adds	r2, r0, #1
 800b8f0:	d101      	bne.n	800b8f6 <__sflush_r+0x76>
 800b8f2:	682b      	ldr	r3, [r5, #0]
 800b8f4:	b903      	cbnz	r3, 800b8f8 <__sflush_r+0x78>
 800b8f6:	6560      	str	r0, [r4, #84]	@ 0x54
 800b8f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b8fa:	602f      	str	r7, [r5, #0]
 800b8fc:	b1b9      	cbz	r1, 800b92e <__sflush_r+0xae>
 800b8fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b902:	4299      	cmp	r1, r3
 800b904:	d002      	beq.n	800b90c <__sflush_r+0x8c>
 800b906:	4628      	mov	r0, r5
 800b908:	f000 fe20 	bl	800c54c <_free_r>
 800b90c:	2300      	movs	r3, #0
 800b90e:	6363      	str	r3, [r4, #52]	@ 0x34
 800b910:	e00d      	b.n	800b92e <__sflush_r+0xae>
 800b912:	2301      	movs	r3, #1
 800b914:	4628      	mov	r0, r5
 800b916:	47b0      	blx	r6
 800b918:	4602      	mov	r2, r0
 800b91a:	1c50      	adds	r0, r2, #1
 800b91c:	d1c9      	bne.n	800b8b2 <__sflush_r+0x32>
 800b91e:	682b      	ldr	r3, [r5, #0]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d0c6      	beq.n	800b8b2 <__sflush_r+0x32>
 800b924:	2b1d      	cmp	r3, #29
 800b926:	d001      	beq.n	800b92c <__sflush_r+0xac>
 800b928:	2b16      	cmp	r3, #22
 800b92a:	d11e      	bne.n	800b96a <__sflush_r+0xea>
 800b92c:	602f      	str	r7, [r5, #0]
 800b92e:	2000      	movs	r0, #0
 800b930:	e022      	b.n	800b978 <__sflush_r+0xf8>
 800b932:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b936:	b21b      	sxth	r3, r3
 800b938:	e01b      	b.n	800b972 <__sflush_r+0xf2>
 800b93a:	690f      	ldr	r7, [r1, #16]
 800b93c:	2f00      	cmp	r7, #0
 800b93e:	d0f6      	beq.n	800b92e <__sflush_r+0xae>
 800b940:	0793      	lsls	r3, r2, #30
 800b942:	680e      	ldr	r6, [r1, #0]
 800b944:	bf08      	it	eq
 800b946:	694b      	ldreq	r3, [r1, #20]
 800b948:	600f      	str	r7, [r1, #0]
 800b94a:	bf18      	it	ne
 800b94c:	2300      	movne	r3, #0
 800b94e:	eba6 0807 	sub.w	r8, r6, r7
 800b952:	608b      	str	r3, [r1, #8]
 800b954:	f1b8 0f00 	cmp.w	r8, #0
 800b958:	dde9      	ble.n	800b92e <__sflush_r+0xae>
 800b95a:	6a21      	ldr	r1, [r4, #32]
 800b95c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b95e:	4643      	mov	r3, r8
 800b960:	463a      	mov	r2, r7
 800b962:	4628      	mov	r0, r5
 800b964:	47b0      	blx	r6
 800b966:	2800      	cmp	r0, #0
 800b968:	dc08      	bgt.n	800b97c <__sflush_r+0xfc>
 800b96a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b96e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b972:	81a3      	strh	r3, [r4, #12]
 800b974:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b97c:	4407      	add	r7, r0
 800b97e:	eba8 0800 	sub.w	r8, r8, r0
 800b982:	e7e7      	b.n	800b954 <__sflush_r+0xd4>
 800b984:	dfbffffe 	.word	0xdfbffffe

0800b988 <_fflush_r>:
 800b988:	b538      	push	{r3, r4, r5, lr}
 800b98a:	690b      	ldr	r3, [r1, #16]
 800b98c:	4605      	mov	r5, r0
 800b98e:	460c      	mov	r4, r1
 800b990:	b913      	cbnz	r3, 800b998 <_fflush_r+0x10>
 800b992:	2500      	movs	r5, #0
 800b994:	4628      	mov	r0, r5
 800b996:	bd38      	pop	{r3, r4, r5, pc}
 800b998:	b118      	cbz	r0, 800b9a2 <_fflush_r+0x1a>
 800b99a:	6a03      	ldr	r3, [r0, #32]
 800b99c:	b90b      	cbnz	r3, 800b9a2 <_fflush_r+0x1a>
 800b99e:	f7fe fcf1 	bl	800a384 <__sinit>
 800b9a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d0f3      	beq.n	800b992 <_fflush_r+0xa>
 800b9aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b9ac:	07d0      	lsls	r0, r2, #31
 800b9ae:	d404      	bmi.n	800b9ba <_fflush_r+0x32>
 800b9b0:	0599      	lsls	r1, r3, #22
 800b9b2:	d402      	bmi.n	800b9ba <_fflush_r+0x32>
 800b9b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b9b6:	f7fe fdc2 	bl	800a53e <__retarget_lock_acquire_recursive>
 800b9ba:	4628      	mov	r0, r5
 800b9bc:	4621      	mov	r1, r4
 800b9be:	f7ff ff5f 	bl	800b880 <__sflush_r>
 800b9c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b9c4:	07da      	lsls	r2, r3, #31
 800b9c6:	4605      	mov	r5, r0
 800b9c8:	d4e4      	bmi.n	800b994 <_fflush_r+0xc>
 800b9ca:	89a3      	ldrh	r3, [r4, #12]
 800b9cc:	059b      	lsls	r3, r3, #22
 800b9ce:	d4e1      	bmi.n	800b994 <_fflush_r+0xc>
 800b9d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b9d2:	f7fe fdb5 	bl	800a540 <__retarget_lock_release_recursive>
 800b9d6:	e7dd      	b.n	800b994 <_fflush_r+0xc>

0800b9d8 <__malloc_lock>:
 800b9d8:	4801      	ldr	r0, [pc, #4]	@ (800b9e0 <__malloc_lock+0x8>)
 800b9da:	f7fe bdb0 	b.w	800a53e <__retarget_lock_acquire_recursive>
 800b9de:	bf00      	nop
 800b9e0:	200015ec 	.word	0x200015ec

0800b9e4 <__malloc_unlock>:
 800b9e4:	4801      	ldr	r0, [pc, #4]	@ (800b9ec <__malloc_unlock+0x8>)
 800b9e6:	f7fe bdab 	b.w	800a540 <__retarget_lock_release_recursive>
 800b9ea:	bf00      	nop
 800b9ec:	200015ec 	.word	0x200015ec

0800b9f0 <_Balloc>:
 800b9f0:	b570      	push	{r4, r5, r6, lr}
 800b9f2:	69c6      	ldr	r6, [r0, #28]
 800b9f4:	4604      	mov	r4, r0
 800b9f6:	460d      	mov	r5, r1
 800b9f8:	b976      	cbnz	r6, 800ba18 <_Balloc+0x28>
 800b9fa:	2010      	movs	r0, #16
 800b9fc:	f7ff fe96 	bl	800b72c <malloc>
 800ba00:	4602      	mov	r2, r0
 800ba02:	61e0      	str	r0, [r4, #28]
 800ba04:	b920      	cbnz	r0, 800ba10 <_Balloc+0x20>
 800ba06:	4b18      	ldr	r3, [pc, #96]	@ (800ba68 <_Balloc+0x78>)
 800ba08:	4818      	ldr	r0, [pc, #96]	@ (800ba6c <_Balloc+0x7c>)
 800ba0a:	216b      	movs	r1, #107	@ 0x6b
 800ba0c:	f000 fd6c 	bl	800c4e8 <__assert_func>
 800ba10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba14:	6006      	str	r6, [r0, #0]
 800ba16:	60c6      	str	r6, [r0, #12]
 800ba18:	69e6      	ldr	r6, [r4, #28]
 800ba1a:	68f3      	ldr	r3, [r6, #12]
 800ba1c:	b183      	cbz	r3, 800ba40 <_Balloc+0x50>
 800ba1e:	69e3      	ldr	r3, [r4, #28]
 800ba20:	68db      	ldr	r3, [r3, #12]
 800ba22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ba26:	b9b8      	cbnz	r0, 800ba58 <_Balloc+0x68>
 800ba28:	2101      	movs	r1, #1
 800ba2a:	fa01 f605 	lsl.w	r6, r1, r5
 800ba2e:	1d72      	adds	r2, r6, #5
 800ba30:	0092      	lsls	r2, r2, #2
 800ba32:	4620      	mov	r0, r4
 800ba34:	f000 fd76 	bl	800c524 <_calloc_r>
 800ba38:	b160      	cbz	r0, 800ba54 <_Balloc+0x64>
 800ba3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ba3e:	e00e      	b.n	800ba5e <_Balloc+0x6e>
 800ba40:	2221      	movs	r2, #33	@ 0x21
 800ba42:	2104      	movs	r1, #4
 800ba44:	4620      	mov	r0, r4
 800ba46:	f000 fd6d 	bl	800c524 <_calloc_r>
 800ba4a:	69e3      	ldr	r3, [r4, #28]
 800ba4c:	60f0      	str	r0, [r6, #12]
 800ba4e:	68db      	ldr	r3, [r3, #12]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d1e4      	bne.n	800ba1e <_Balloc+0x2e>
 800ba54:	2000      	movs	r0, #0
 800ba56:	bd70      	pop	{r4, r5, r6, pc}
 800ba58:	6802      	ldr	r2, [r0, #0]
 800ba5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ba5e:	2300      	movs	r3, #0
 800ba60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ba64:	e7f7      	b.n	800ba56 <_Balloc+0x66>
 800ba66:	bf00      	nop
 800ba68:	08022415 	.word	0x08022415
 800ba6c:	080224a6 	.word	0x080224a6

0800ba70 <_Bfree>:
 800ba70:	b570      	push	{r4, r5, r6, lr}
 800ba72:	69c6      	ldr	r6, [r0, #28]
 800ba74:	4605      	mov	r5, r0
 800ba76:	460c      	mov	r4, r1
 800ba78:	b976      	cbnz	r6, 800ba98 <_Bfree+0x28>
 800ba7a:	2010      	movs	r0, #16
 800ba7c:	f7ff fe56 	bl	800b72c <malloc>
 800ba80:	4602      	mov	r2, r0
 800ba82:	61e8      	str	r0, [r5, #28]
 800ba84:	b920      	cbnz	r0, 800ba90 <_Bfree+0x20>
 800ba86:	4b09      	ldr	r3, [pc, #36]	@ (800baac <_Bfree+0x3c>)
 800ba88:	4809      	ldr	r0, [pc, #36]	@ (800bab0 <_Bfree+0x40>)
 800ba8a:	218f      	movs	r1, #143	@ 0x8f
 800ba8c:	f000 fd2c 	bl	800c4e8 <__assert_func>
 800ba90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba94:	6006      	str	r6, [r0, #0]
 800ba96:	60c6      	str	r6, [r0, #12]
 800ba98:	b13c      	cbz	r4, 800baaa <_Bfree+0x3a>
 800ba9a:	69eb      	ldr	r3, [r5, #28]
 800ba9c:	6862      	ldr	r2, [r4, #4]
 800ba9e:	68db      	ldr	r3, [r3, #12]
 800baa0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800baa4:	6021      	str	r1, [r4, #0]
 800baa6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800baaa:	bd70      	pop	{r4, r5, r6, pc}
 800baac:	08022415 	.word	0x08022415
 800bab0:	080224a6 	.word	0x080224a6

0800bab4 <__multadd>:
 800bab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bab8:	690d      	ldr	r5, [r1, #16]
 800baba:	4607      	mov	r7, r0
 800babc:	460c      	mov	r4, r1
 800babe:	461e      	mov	r6, r3
 800bac0:	f101 0c14 	add.w	ip, r1, #20
 800bac4:	2000      	movs	r0, #0
 800bac6:	f8dc 3000 	ldr.w	r3, [ip]
 800baca:	b299      	uxth	r1, r3
 800bacc:	fb02 6101 	mla	r1, r2, r1, r6
 800bad0:	0c1e      	lsrs	r6, r3, #16
 800bad2:	0c0b      	lsrs	r3, r1, #16
 800bad4:	fb02 3306 	mla	r3, r2, r6, r3
 800bad8:	b289      	uxth	r1, r1
 800bada:	3001      	adds	r0, #1
 800badc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bae0:	4285      	cmp	r5, r0
 800bae2:	f84c 1b04 	str.w	r1, [ip], #4
 800bae6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800baea:	dcec      	bgt.n	800bac6 <__multadd+0x12>
 800baec:	b30e      	cbz	r6, 800bb32 <__multadd+0x7e>
 800baee:	68a3      	ldr	r3, [r4, #8]
 800baf0:	42ab      	cmp	r3, r5
 800baf2:	dc19      	bgt.n	800bb28 <__multadd+0x74>
 800baf4:	6861      	ldr	r1, [r4, #4]
 800baf6:	4638      	mov	r0, r7
 800baf8:	3101      	adds	r1, #1
 800bafa:	f7ff ff79 	bl	800b9f0 <_Balloc>
 800bafe:	4680      	mov	r8, r0
 800bb00:	b928      	cbnz	r0, 800bb0e <__multadd+0x5a>
 800bb02:	4602      	mov	r2, r0
 800bb04:	4b0c      	ldr	r3, [pc, #48]	@ (800bb38 <__multadd+0x84>)
 800bb06:	480d      	ldr	r0, [pc, #52]	@ (800bb3c <__multadd+0x88>)
 800bb08:	21ba      	movs	r1, #186	@ 0xba
 800bb0a:	f000 fced 	bl	800c4e8 <__assert_func>
 800bb0e:	6922      	ldr	r2, [r4, #16]
 800bb10:	3202      	adds	r2, #2
 800bb12:	f104 010c 	add.w	r1, r4, #12
 800bb16:	0092      	lsls	r2, r2, #2
 800bb18:	300c      	adds	r0, #12
 800bb1a:	f7fe fd12 	bl	800a542 <memcpy>
 800bb1e:	4621      	mov	r1, r4
 800bb20:	4638      	mov	r0, r7
 800bb22:	f7ff ffa5 	bl	800ba70 <_Bfree>
 800bb26:	4644      	mov	r4, r8
 800bb28:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bb2c:	3501      	adds	r5, #1
 800bb2e:	615e      	str	r6, [r3, #20]
 800bb30:	6125      	str	r5, [r4, #16]
 800bb32:	4620      	mov	r0, r4
 800bb34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb38:	08022484 	.word	0x08022484
 800bb3c:	080224a6 	.word	0x080224a6

0800bb40 <__hi0bits>:
 800bb40:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bb44:	4603      	mov	r3, r0
 800bb46:	bf36      	itet	cc
 800bb48:	0403      	lslcc	r3, r0, #16
 800bb4a:	2000      	movcs	r0, #0
 800bb4c:	2010      	movcc	r0, #16
 800bb4e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bb52:	bf3c      	itt	cc
 800bb54:	021b      	lslcc	r3, r3, #8
 800bb56:	3008      	addcc	r0, #8
 800bb58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bb5c:	bf3c      	itt	cc
 800bb5e:	011b      	lslcc	r3, r3, #4
 800bb60:	3004      	addcc	r0, #4
 800bb62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb66:	bf3c      	itt	cc
 800bb68:	009b      	lslcc	r3, r3, #2
 800bb6a:	3002      	addcc	r0, #2
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	db05      	blt.n	800bb7c <__hi0bits+0x3c>
 800bb70:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bb74:	f100 0001 	add.w	r0, r0, #1
 800bb78:	bf08      	it	eq
 800bb7a:	2020      	moveq	r0, #32
 800bb7c:	4770      	bx	lr

0800bb7e <__lo0bits>:
 800bb7e:	6803      	ldr	r3, [r0, #0]
 800bb80:	4602      	mov	r2, r0
 800bb82:	f013 0007 	ands.w	r0, r3, #7
 800bb86:	d00b      	beq.n	800bba0 <__lo0bits+0x22>
 800bb88:	07d9      	lsls	r1, r3, #31
 800bb8a:	d421      	bmi.n	800bbd0 <__lo0bits+0x52>
 800bb8c:	0798      	lsls	r0, r3, #30
 800bb8e:	bf49      	itett	mi
 800bb90:	085b      	lsrmi	r3, r3, #1
 800bb92:	089b      	lsrpl	r3, r3, #2
 800bb94:	2001      	movmi	r0, #1
 800bb96:	6013      	strmi	r3, [r2, #0]
 800bb98:	bf5c      	itt	pl
 800bb9a:	6013      	strpl	r3, [r2, #0]
 800bb9c:	2002      	movpl	r0, #2
 800bb9e:	4770      	bx	lr
 800bba0:	b299      	uxth	r1, r3
 800bba2:	b909      	cbnz	r1, 800bba8 <__lo0bits+0x2a>
 800bba4:	0c1b      	lsrs	r3, r3, #16
 800bba6:	2010      	movs	r0, #16
 800bba8:	b2d9      	uxtb	r1, r3
 800bbaa:	b909      	cbnz	r1, 800bbb0 <__lo0bits+0x32>
 800bbac:	3008      	adds	r0, #8
 800bbae:	0a1b      	lsrs	r3, r3, #8
 800bbb0:	0719      	lsls	r1, r3, #28
 800bbb2:	bf04      	itt	eq
 800bbb4:	091b      	lsreq	r3, r3, #4
 800bbb6:	3004      	addeq	r0, #4
 800bbb8:	0799      	lsls	r1, r3, #30
 800bbba:	bf04      	itt	eq
 800bbbc:	089b      	lsreq	r3, r3, #2
 800bbbe:	3002      	addeq	r0, #2
 800bbc0:	07d9      	lsls	r1, r3, #31
 800bbc2:	d403      	bmi.n	800bbcc <__lo0bits+0x4e>
 800bbc4:	085b      	lsrs	r3, r3, #1
 800bbc6:	f100 0001 	add.w	r0, r0, #1
 800bbca:	d003      	beq.n	800bbd4 <__lo0bits+0x56>
 800bbcc:	6013      	str	r3, [r2, #0]
 800bbce:	4770      	bx	lr
 800bbd0:	2000      	movs	r0, #0
 800bbd2:	4770      	bx	lr
 800bbd4:	2020      	movs	r0, #32
 800bbd6:	4770      	bx	lr

0800bbd8 <__i2b>:
 800bbd8:	b510      	push	{r4, lr}
 800bbda:	460c      	mov	r4, r1
 800bbdc:	2101      	movs	r1, #1
 800bbde:	f7ff ff07 	bl	800b9f0 <_Balloc>
 800bbe2:	4602      	mov	r2, r0
 800bbe4:	b928      	cbnz	r0, 800bbf2 <__i2b+0x1a>
 800bbe6:	4b05      	ldr	r3, [pc, #20]	@ (800bbfc <__i2b+0x24>)
 800bbe8:	4805      	ldr	r0, [pc, #20]	@ (800bc00 <__i2b+0x28>)
 800bbea:	f240 1145 	movw	r1, #325	@ 0x145
 800bbee:	f000 fc7b 	bl	800c4e8 <__assert_func>
 800bbf2:	2301      	movs	r3, #1
 800bbf4:	6144      	str	r4, [r0, #20]
 800bbf6:	6103      	str	r3, [r0, #16]
 800bbf8:	bd10      	pop	{r4, pc}
 800bbfa:	bf00      	nop
 800bbfc:	08022484 	.word	0x08022484
 800bc00:	080224a6 	.word	0x080224a6

0800bc04 <__multiply>:
 800bc04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc08:	4614      	mov	r4, r2
 800bc0a:	690a      	ldr	r2, [r1, #16]
 800bc0c:	6923      	ldr	r3, [r4, #16]
 800bc0e:	429a      	cmp	r2, r3
 800bc10:	bfa8      	it	ge
 800bc12:	4623      	movge	r3, r4
 800bc14:	460f      	mov	r7, r1
 800bc16:	bfa4      	itt	ge
 800bc18:	460c      	movge	r4, r1
 800bc1a:	461f      	movge	r7, r3
 800bc1c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800bc20:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800bc24:	68a3      	ldr	r3, [r4, #8]
 800bc26:	6861      	ldr	r1, [r4, #4]
 800bc28:	eb0a 0609 	add.w	r6, sl, r9
 800bc2c:	42b3      	cmp	r3, r6
 800bc2e:	b085      	sub	sp, #20
 800bc30:	bfb8      	it	lt
 800bc32:	3101      	addlt	r1, #1
 800bc34:	f7ff fedc 	bl	800b9f0 <_Balloc>
 800bc38:	b930      	cbnz	r0, 800bc48 <__multiply+0x44>
 800bc3a:	4602      	mov	r2, r0
 800bc3c:	4b44      	ldr	r3, [pc, #272]	@ (800bd50 <__multiply+0x14c>)
 800bc3e:	4845      	ldr	r0, [pc, #276]	@ (800bd54 <__multiply+0x150>)
 800bc40:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bc44:	f000 fc50 	bl	800c4e8 <__assert_func>
 800bc48:	f100 0514 	add.w	r5, r0, #20
 800bc4c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bc50:	462b      	mov	r3, r5
 800bc52:	2200      	movs	r2, #0
 800bc54:	4543      	cmp	r3, r8
 800bc56:	d321      	bcc.n	800bc9c <__multiply+0x98>
 800bc58:	f107 0114 	add.w	r1, r7, #20
 800bc5c:	f104 0214 	add.w	r2, r4, #20
 800bc60:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800bc64:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800bc68:	9302      	str	r3, [sp, #8]
 800bc6a:	1b13      	subs	r3, r2, r4
 800bc6c:	3b15      	subs	r3, #21
 800bc6e:	f023 0303 	bic.w	r3, r3, #3
 800bc72:	3304      	adds	r3, #4
 800bc74:	f104 0715 	add.w	r7, r4, #21
 800bc78:	42ba      	cmp	r2, r7
 800bc7a:	bf38      	it	cc
 800bc7c:	2304      	movcc	r3, #4
 800bc7e:	9301      	str	r3, [sp, #4]
 800bc80:	9b02      	ldr	r3, [sp, #8]
 800bc82:	9103      	str	r1, [sp, #12]
 800bc84:	428b      	cmp	r3, r1
 800bc86:	d80c      	bhi.n	800bca2 <__multiply+0x9e>
 800bc88:	2e00      	cmp	r6, #0
 800bc8a:	dd03      	ble.n	800bc94 <__multiply+0x90>
 800bc8c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d05b      	beq.n	800bd4c <__multiply+0x148>
 800bc94:	6106      	str	r6, [r0, #16]
 800bc96:	b005      	add	sp, #20
 800bc98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc9c:	f843 2b04 	str.w	r2, [r3], #4
 800bca0:	e7d8      	b.n	800bc54 <__multiply+0x50>
 800bca2:	f8b1 a000 	ldrh.w	sl, [r1]
 800bca6:	f1ba 0f00 	cmp.w	sl, #0
 800bcaa:	d024      	beq.n	800bcf6 <__multiply+0xf2>
 800bcac:	f104 0e14 	add.w	lr, r4, #20
 800bcb0:	46a9      	mov	r9, r5
 800bcb2:	f04f 0c00 	mov.w	ip, #0
 800bcb6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bcba:	f8d9 3000 	ldr.w	r3, [r9]
 800bcbe:	fa1f fb87 	uxth.w	fp, r7
 800bcc2:	b29b      	uxth	r3, r3
 800bcc4:	fb0a 330b 	mla	r3, sl, fp, r3
 800bcc8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800bccc:	f8d9 7000 	ldr.w	r7, [r9]
 800bcd0:	4463      	add	r3, ip
 800bcd2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bcd6:	fb0a c70b 	mla	r7, sl, fp, ip
 800bcda:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800bcde:	b29b      	uxth	r3, r3
 800bce0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bce4:	4572      	cmp	r2, lr
 800bce6:	f849 3b04 	str.w	r3, [r9], #4
 800bcea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bcee:	d8e2      	bhi.n	800bcb6 <__multiply+0xb2>
 800bcf0:	9b01      	ldr	r3, [sp, #4]
 800bcf2:	f845 c003 	str.w	ip, [r5, r3]
 800bcf6:	9b03      	ldr	r3, [sp, #12]
 800bcf8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bcfc:	3104      	adds	r1, #4
 800bcfe:	f1b9 0f00 	cmp.w	r9, #0
 800bd02:	d021      	beq.n	800bd48 <__multiply+0x144>
 800bd04:	682b      	ldr	r3, [r5, #0]
 800bd06:	f104 0c14 	add.w	ip, r4, #20
 800bd0a:	46ae      	mov	lr, r5
 800bd0c:	f04f 0a00 	mov.w	sl, #0
 800bd10:	f8bc b000 	ldrh.w	fp, [ip]
 800bd14:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800bd18:	fb09 770b 	mla	r7, r9, fp, r7
 800bd1c:	4457      	add	r7, sl
 800bd1e:	b29b      	uxth	r3, r3
 800bd20:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bd24:	f84e 3b04 	str.w	r3, [lr], #4
 800bd28:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bd2c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bd30:	f8be 3000 	ldrh.w	r3, [lr]
 800bd34:	fb09 330a 	mla	r3, r9, sl, r3
 800bd38:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800bd3c:	4562      	cmp	r2, ip
 800bd3e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bd42:	d8e5      	bhi.n	800bd10 <__multiply+0x10c>
 800bd44:	9f01      	ldr	r7, [sp, #4]
 800bd46:	51eb      	str	r3, [r5, r7]
 800bd48:	3504      	adds	r5, #4
 800bd4a:	e799      	b.n	800bc80 <__multiply+0x7c>
 800bd4c:	3e01      	subs	r6, #1
 800bd4e:	e79b      	b.n	800bc88 <__multiply+0x84>
 800bd50:	08022484 	.word	0x08022484
 800bd54:	080224a6 	.word	0x080224a6

0800bd58 <__pow5mult>:
 800bd58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd5c:	4615      	mov	r5, r2
 800bd5e:	f012 0203 	ands.w	r2, r2, #3
 800bd62:	4607      	mov	r7, r0
 800bd64:	460e      	mov	r6, r1
 800bd66:	d007      	beq.n	800bd78 <__pow5mult+0x20>
 800bd68:	4c25      	ldr	r4, [pc, #148]	@ (800be00 <__pow5mult+0xa8>)
 800bd6a:	3a01      	subs	r2, #1
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bd72:	f7ff fe9f 	bl	800bab4 <__multadd>
 800bd76:	4606      	mov	r6, r0
 800bd78:	10ad      	asrs	r5, r5, #2
 800bd7a:	d03d      	beq.n	800bdf8 <__pow5mult+0xa0>
 800bd7c:	69fc      	ldr	r4, [r7, #28]
 800bd7e:	b97c      	cbnz	r4, 800bda0 <__pow5mult+0x48>
 800bd80:	2010      	movs	r0, #16
 800bd82:	f7ff fcd3 	bl	800b72c <malloc>
 800bd86:	4602      	mov	r2, r0
 800bd88:	61f8      	str	r0, [r7, #28]
 800bd8a:	b928      	cbnz	r0, 800bd98 <__pow5mult+0x40>
 800bd8c:	4b1d      	ldr	r3, [pc, #116]	@ (800be04 <__pow5mult+0xac>)
 800bd8e:	481e      	ldr	r0, [pc, #120]	@ (800be08 <__pow5mult+0xb0>)
 800bd90:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bd94:	f000 fba8 	bl	800c4e8 <__assert_func>
 800bd98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bd9c:	6004      	str	r4, [r0, #0]
 800bd9e:	60c4      	str	r4, [r0, #12]
 800bda0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bda4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bda8:	b94c      	cbnz	r4, 800bdbe <__pow5mult+0x66>
 800bdaa:	f240 2171 	movw	r1, #625	@ 0x271
 800bdae:	4638      	mov	r0, r7
 800bdb0:	f7ff ff12 	bl	800bbd8 <__i2b>
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	f8c8 0008 	str.w	r0, [r8, #8]
 800bdba:	4604      	mov	r4, r0
 800bdbc:	6003      	str	r3, [r0, #0]
 800bdbe:	f04f 0900 	mov.w	r9, #0
 800bdc2:	07eb      	lsls	r3, r5, #31
 800bdc4:	d50a      	bpl.n	800bddc <__pow5mult+0x84>
 800bdc6:	4631      	mov	r1, r6
 800bdc8:	4622      	mov	r2, r4
 800bdca:	4638      	mov	r0, r7
 800bdcc:	f7ff ff1a 	bl	800bc04 <__multiply>
 800bdd0:	4631      	mov	r1, r6
 800bdd2:	4680      	mov	r8, r0
 800bdd4:	4638      	mov	r0, r7
 800bdd6:	f7ff fe4b 	bl	800ba70 <_Bfree>
 800bdda:	4646      	mov	r6, r8
 800bddc:	106d      	asrs	r5, r5, #1
 800bdde:	d00b      	beq.n	800bdf8 <__pow5mult+0xa0>
 800bde0:	6820      	ldr	r0, [r4, #0]
 800bde2:	b938      	cbnz	r0, 800bdf4 <__pow5mult+0x9c>
 800bde4:	4622      	mov	r2, r4
 800bde6:	4621      	mov	r1, r4
 800bde8:	4638      	mov	r0, r7
 800bdea:	f7ff ff0b 	bl	800bc04 <__multiply>
 800bdee:	6020      	str	r0, [r4, #0]
 800bdf0:	f8c0 9000 	str.w	r9, [r0]
 800bdf4:	4604      	mov	r4, r0
 800bdf6:	e7e4      	b.n	800bdc2 <__pow5mult+0x6a>
 800bdf8:	4630      	mov	r0, r6
 800bdfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdfe:	bf00      	nop
 800be00:	08022500 	.word	0x08022500
 800be04:	08022415 	.word	0x08022415
 800be08:	080224a6 	.word	0x080224a6

0800be0c <__lshift>:
 800be0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be10:	460c      	mov	r4, r1
 800be12:	6849      	ldr	r1, [r1, #4]
 800be14:	6923      	ldr	r3, [r4, #16]
 800be16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800be1a:	68a3      	ldr	r3, [r4, #8]
 800be1c:	4607      	mov	r7, r0
 800be1e:	4691      	mov	r9, r2
 800be20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800be24:	f108 0601 	add.w	r6, r8, #1
 800be28:	42b3      	cmp	r3, r6
 800be2a:	db0b      	blt.n	800be44 <__lshift+0x38>
 800be2c:	4638      	mov	r0, r7
 800be2e:	f7ff fddf 	bl	800b9f0 <_Balloc>
 800be32:	4605      	mov	r5, r0
 800be34:	b948      	cbnz	r0, 800be4a <__lshift+0x3e>
 800be36:	4602      	mov	r2, r0
 800be38:	4b28      	ldr	r3, [pc, #160]	@ (800bedc <__lshift+0xd0>)
 800be3a:	4829      	ldr	r0, [pc, #164]	@ (800bee0 <__lshift+0xd4>)
 800be3c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800be40:	f000 fb52 	bl	800c4e8 <__assert_func>
 800be44:	3101      	adds	r1, #1
 800be46:	005b      	lsls	r3, r3, #1
 800be48:	e7ee      	b.n	800be28 <__lshift+0x1c>
 800be4a:	2300      	movs	r3, #0
 800be4c:	f100 0114 	add.w	r1, r0, #20
 800be50:	f100 0210 	add.w	r2, r0, #16
 800be54:	4618      	mov	r0, r3
 800be56:	4553      	cmp	r3, sl
 800be58:	db33      	blt.n	800bec2 <__lshift+0xb6>
 800be5a:	6920      	ldr	r0, [r4, #16]
 800be5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800be60:	f104 0314 	add.w	r3, r4, #20
 800be64:	f019 091f 	ands.w	r9, r9, #31
 800be68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800be6c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800be70:	d02b      	beq.n	800beca <__lshift+0xbe>
 800be72:	f1c9 0e20 	rsb	lr, r9, #32
 800be76:	468a      	mov	sl, r1
 800be78:	2200      	movs	r2, #0
 800be7a:	6818      	ldr	r0, [r3, #0]
 800be7c:	fa00 f009 	lsl.w	r0, r0, r9
 800be80:	4310      	orrs	r0, r2
 800be82:	f84a 0b04 	str.w	r0, [sl], #4
 800be86:	f853 2b04 	ldr.w	r2, [r3], #4
 800be8a:	459c      	cmp	ip, r3
 800be8c:	fa22 f20e 	lsr.w	r2, r2, lr
 800be90:	d8f3      	bhi.n	800be7a <__lshift+0x6e>
 800be92:	ebac 0304 	sub.w	r3, ip, r4
 800be96:	3b15      	subs	r3, #21
 800be98:	f023 0303 	bic.w	r3, r3, #3
 800be9c:	3304      	adds	r3, #4
 800be9e:	f104 0015 	add.w	r0, r4, #21
 800bea2:	4584      	cmp	ip, r0
 800bea4:	bf38      	it	cc
 800bea6:	2304      	movcc	r3, #4
 800bea8:	50ca      	str	r2, [r1, r3]
 800beaa:	b10a      	cbz	r2, 800beb0 <__lshift+0xa4>
 800beac:	f108 0602 	add.w	r6, r8, #2
 800beb0:	3e01      	subs	r6, #1
 800beb2:	4638      	mov	r0, r7
 800beb4:	612e      	str	r6, [r5, #16]
 800beb6:	4621      	mov	r1, r4
 800beb8:	f7ff fdda 	bl	800ba70 <_Bfree>
 800bebc:	4628      	mov	r0, r5
 800bebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bec2:	f842 0f04 	str.w	r0, [r2, #4]!
 800bec6:	3301      	adds	r3, #1
 800bec8:	e7c5      	b.n	800be56 <__lshift+0x4a>
 800beca:	3904      	subs	r1, #4
 800becc:	f853 2b04 	ldr.w	r2, [r3], #4
 800bed0:	f841 2f04 	str.w	r2, [r1, #4]!
 800bed4:	459c      	cmp	ip, r3
 800bed6:	d8f9      	bhi.n	800becc <__lshift+0xc0>
 800bed8:	e7ea      	b.n	800beb0 <__lshift+0xa4>
 800beda:	bf00      	nop
 800bedc:	08022484 	.word	0x08022484
 800bee0:	080224a6 	.word	0x080224a6

0800bee4 <__mcmp>:
 800bee4:	690a      	ldr	r2, [r1, #16]
 800bee6:	4603      	mov	r3, r0
 800bee8:	6900      	ldr	r0, [r0, #16]
 800beea:	1a80      	subs	r0, r0, r2
 800beec:	b530      	push	{r4, r5, lr}
 800beee:	d10e      	bne.n	800bf0e <__mcmp+0x2a>
 800bef0:	3314      	adds	r3, #20
 800bef2:	3114      	adds	r1, #20
 800bef4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bef8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800befc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bf00:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bf04:	4295      	cmp	r5, r2
 800bf06:	d003      	beq.n	800bf10 <__mcmp+0x2c>
 800bf08:	d205      	bcs.n	800bf16 <__mcmp+0x32>
 800bf0a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bf0e:	bd30      	pop	{r4, r5, pc}
 800bf10:	42a3      	cmp	r3, r4
 800bf12:	d3f3      	bcc.n	800befc <__mcmp+0x18>
 800bf14:	e7fb      	b.n	800bf0e <__mcmp+0x2a>
 800bf16:	2001      	movs	r0, #1
 800bf18:	e7f9      	b.n	800bf0e <__mcmp+0x2a>
	...

0800bf1c <__mdiff>:
 800bf1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf20:	4689      	mov	r9, r1
 800bf22:	4606      	mov	r6, r0
 800bf24:	4611      	mov	r1, r2
 800bf26:	4648      	mov	r0, r9
 800bf28:	4614      	mov	r4, r2
 800bf2a:	f7ff ffdb 	bl	800bee4 <__mcmp>
 800bf2e:	1e05      	subs	r5, r0, #0
 800bf30:	d112      	bne.n	800bf58 <__mdiff+0x3c>
 800bf32:	4629      	mov	r1, r5
 800bf34:	4630      	mov	r0, r6
 800bf36:	f7ff fd5b 	bl	800b9f0 <_Balloc>
 800bf3a:	4602      	mov	r2, r0
 800bf3c:	b928      	cbnz	r0, 800bf4a <__mdiff+0x2e>
 800bf3e:	4b3f      	ldr	r3, [pc, #252]	@ (800c03c <__mdiff+0x120>)
 800bf40:	f240 2137 	movw	r1, #567	@ 0x237
 800bf44:	483e      	ldr	r0, [pc, #248]	@ (800c040 <__mdiff+0x124>)
 800bf46:	f000 facf 	bl	800c4e8 <__assert_func>
 800bf4a:	2301      	movs	r3, #1
 800bf4c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bf50:	4610      	mov	r0, r2
 800bf52:	b003      	add	sp, #12
 800bf54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf58:	bfbc      	itt	lt
 800bf5a:	464b      	movlt	r3, r9
 800bf5c:	46a1      	movlt	r9, r4
 800bf5e:	4630      	mov	r0, r6
 800bf60:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bf64:	bfba      	itte	lt
 800bf66:	461c      	movlt	r4, r3
 800bf68:	2501      	movlt	r5, #1
 800bf6a:	2500      	movge	r5, #0
 800bf6c:	f7ff fd40 	bl	800b9f0 <_Balloc>
 800bf70:	4602      	mov	r2, r0
 800bf72:	b918      	cbnz	r0, 800bf7c <__mdiff+0x60>
 800bf74:	4b31      	ldr	r3, [pc, #196]	@ (800c03c <__mdiff+0x120>)
 800bf76:	f240 2145 	movw	r1, #581	@ 0x245
 800bf7a:	e7e3      	b.n	800bf44 <__mdiff+0x28>
 800bf7c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bf80:	6926      	ldr	r6, [r4, #16]
 800bf82:	60c5      	str	r5, [r0, #12]
 800bf84:	f109 0310 	add.w	r3, r9, #16
 800bf88:	f109 0514 	add.w	r5, r9, #20
 800bf8c:	f104 0e14 	add.w	lr, r4, #20
 800bf90:	f100 0b14 	add.w	fp, r0, #20
 800bf94:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bf98:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bf9c:	9301      	str	r3, [sp, #4]
 800bf9e:	46d9      	mov	r9, fp
 800bfa0:	f04f 0c00 	mov.w	ip, #0
 800bfa4:	9b01      	ldr	r3, [sp, #4]
 800bfa6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bfaa:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bfae:	9301      	str	r3, [sp, #4]
 800bfb0:	fa1f f38a 	uxth.w	r3, sl
 800bfb4:	4619      	mov	r1, r3
 800bfb6:	b283      	uxth	r3, r0
 800bfb8:	1acb      	subs	r3, r1, r3
 800bfba:	0c00      	lsrs	r0, r0, #16
 800bfbc:	4463      	add	r3, ip
 800bfbe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bfc2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bfc6:	b29b      	uxth	r3, r3
 800bfc8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bfcc:	4576      	cmp	r6, lr
 800bfce:	f849 3b04 	str.w	r3, [r9], #4
 800bfd2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bfd6:	d8e5      	bhi.n	800bfa4 <__mdiff+0x88>
 800bfd8:	1b33      	subs	r3, r6, r4
 800bfda:	3b15      	subs	r3, #21
 800bfdc:	f023 0303 	bic.w	r3, r3, #3
 800bfe0:	3415      	adds	r4, #21
 800bfe2:	3304      	adds	r3, #4
 800bfe4:	42a6      	cmp	r6, r4
 800bfe6:	bf38      	it	cc
 800bfe8:	2304      	movcc	r3, #4
 800bfea:	441d      	add	r5, r3
 800bfec:	445b      	add	r3, fp
 800bfee:	461e      	mov	r6, r3
 800bff0:	462c      	mov	r4, r5
 800bff2:	4544      	cmp	r4, r8
 800bff4:	d30e      	bcc.n	800c014 <__mdiff+0xf8>
 800bff6:	f108 0103 	add.w	r1, r8, #3
 800bffa:	1b49      	subs	r1, r1, r5
 800bffc:	f021 0103 	bic.w	r1, r1, #3
 800c000:	3d03      	subs	r5, #3
 800c002:	45a8      	cmp	r8, r5
 800c004:	bf38      	it	cc
 800c006:	2100      	movcc	r1, #0
 800c008:	440b      	add	r3, r1
 800c00a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c00e:	b191      	cbz	r1, 800c036 <__mdiff+0x11a>
 800c010:	6117      	str	r7, [r2, #16]
 800c012:	e79d      	b.n	800bf50 <__mdiff+0x34>
 800c014:	f854 1b04 	ldr.w	r1, [r4], #4
 800c018:	46e6      	mov	lr, ip
 800c01a:	0c08      	lsrs	r0, r1, #16
 800c01c:	fa1c fc81 	uxtah	ip, ip, r1
 800c020:	4471      	add	r1, lr
 800c022:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c026:	b289      	uxth	r1, r1
 800c028:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c02c:	f846 1b04 	str.w	r1, [r6], #4
 800c030:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c034:	e7dd      	b.n	800bff2 <__mdiff+0xd6>
 800c036:	3f01      	subs	r7, #1
 800c038:	e7e7      	b.n	800c00a <__mdiff+0xee>
 800c03a:	bf00      	nop
 800c03c:	08022484 	.word	0x08022484
 800c040:	080224a6 	.word	0x080224a6

0800c044 <__d2b>:
 800c044:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c048:	460f      	mov	r7, r1
 800c04a:	2101      	movs	r1, #1
 800c04c:	ec59 8b10 	vmov	r8, r9, d0
 800c050:	4616      	mov	r6, r2
 800c052:	f7ff fccd 	bl	800b9f0 <_Balloc>
 800c056:	4604      	mov	r4, r0
 800c058:	b930      	cbnz	r0, 800c068 <__d2b+0x24>
 800c05a:	4602      	mov	r2, r0
 800c05c:	4b23      	ldr	r3, [pc, #140]	@ (800c0ec <__d2b+0xa8>)
 800c05e:	4824      	ldr	r0, [pc, #144]	@ (800c0f0 <__d2b+0xac>)
 800c060:	f240 310f 	movw	r1, #783	@ 0x30f
 800c064:	f000 fa40 	bl	800c4e8 <__assert_func>
 800c068:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c06c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c070:	b10d      	cbz	r5, 800c076 <__d2b+0x32>
 800c072:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c076:	9301      	str	r3, [sp, #4]
 800c078:	f1b8 0300 	subs.w	r3, r8, #0
 800c07c:	d023      	beq.n	800c0c6 <__d2b+0x82>
 800c07e:	4668      	mov	r0, sp
 800c080:	9300      	str	r3, [sp, #0]
 800c082:	f7ff fd7c 	bl	800bb7e <__lo0bits>
 800c086:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c08a:	b1d0      	cbz	r0, 800c0c2 <__d2b+0x7e>
 800c08c:	f1c0 0320 	rsb	r3, r0, #32
 800c090:	fa02 f303 	lsl.w	r3, r2, r3
 800c094:	430b      	orrs	r3, r1
 800c096:	40c2      	lsrs	r2, r0
 800c098:	6163      	str	r3, [r4, #20]
 800c09a:	9201      	str	r2, [sp, #4]
 800c09c:	9b01      	ldr	r3, [sp, #4]
 800c09e:	61a3      	str	r3, [r4, #24]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	bf0c      	ite	eq
 800c0a4:	2201      	moveq	r2, #1
 800c0a6:	2202      	movne	r2, #2
 800c0a8:	6122      	str	r2, [r4, #16]
 800c0aa:	b1a5      	cbz	r5, 800c0d6 <__d2b+0x92>
 800c0ac:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c0b0:	4405      	add	r5, r0
 800c0b2:	603d      	str	r5, [r7, #0]
 800c0b4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c0b8:	6030      	str	r0, [r6, #0]
 800c0ba:	4620      	mov	r0, r4
 800c0bc:	b003      	add	sp, #12
 800c0be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c0c2:	6161      	str	r1, [r4, #20]
 800c0c4:	e7ea      	b.n	800c09c <__d2b+0x58>
 800c0c6:	a801      	add	r0, sp, #4
 800c0c8:	f7ff fd59 	bl	800bb7e <__lo0bits>
 800c0cc:	9b01      	ldr	r3, [sp, #4]
 800c0ce:	6163      	str	r3, [r4, #20]
 800c0d0:	3020      	adds	r0, #32
 800c0d2:	2201      	movs	r2, #1
 800c0d4:	e7e8      	b.n	800c0a8 <__d2b+0x64>
 800c0d6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c0da:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c0de:	6038      	str	r0, [r7, #0]
 800c0e0:	6918      	ldr	r0, [r3, #16]
 800c0e2:	f7ff fd2d 	bl	800bb40 <__hi0bits>
 800c0e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c0ea:	e7e5      	b.n	800c0b8 <__d2b+0x74>
 800c0ec:	08022484 	.word	0x08022484
 800c0f0:	080224a6 	.word	0x080224a6

0800c0f4 <__sread>:
 800c0f4:	b510      	push	{r4, lr}
 800c0f6:	460c      	mov	r4, r1
 800c0f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0fc:	f000 f9c0 	bl	800c480 <_read_r>
 800c100:	2800      	cmp	r0, #0
 800c102:	bfab      	itete	ge
 800c104:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c106:	89a3      	ldrhlt	r3, [r4, #12]
 800c108:	181b      	addge	r3, r3, r0
 800c10a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c10e:	bfac      	ite	ge
 800c110:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c112:	81a3      	strhlt	r3, [r4, #12]
 800c114:	bd10      	pop	{r4, pc}

0800c116 <__swrite>:
 800c116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c11a:	461f      	mov	r7, r3
 800c11c:	898b      	ldrh	r3, [r1, #12]
 800c11e:	05db      	lsls	r3, r3, #23
 800c120:	4605      	mov	r5, r0
 800c122:	460c      	mov	r4, r1
 800c124:	4616      	mov	r6, r2
 800c126:	d505      	bpl.n	800c134 <__swrite+0x1e>
 800c128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c12c:	2302      	movs	r3, #2
 800c12e:	2200      	movs	r2, #0
 800c130:	f000 f994 	bl	800c45c <_lseek_r>
 800c134:	89a3      	ldrh	r3, [r4, #12]
 800c136:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c13a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c13e:	81a3      	strh	r3, [r4, #12]
 800c140:	4632      	mov	r2, r6
 800c142:	463b      	mov	r3, r7
 800c144:	4628      	mov	r0, r5
 800c146:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c14a:	f000 b9bb 	b.w	800c4c4 <_write_r>

0800c14e <__sseek>:
 800c14e:	b510      	push	{r4, lr}
 800c150:	460c      	mov	r4, r1
 800c152:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c156:	f000 f981 	bl	800c45c <_lseek_r>
 800c15a:	1c43      	adds	r3, r0, #1
 800c15c:	89a3      	ldrh	r3, [r4, #12]
 800c15e:	bf15      	itete	ne
 800c160:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c162:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c166:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c16a:	81a3      	strheq	r3, [r4, #12]
 800c16c:	bf18      	it	ne
 800c16e:	81a3      	strhne	r3, [r4, #12]
 800c170:	bd10      	pop	{r4, pc}

0800c172 <__sclose>:
 800c172:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c176:	f000 b93f 	b.w	800c3f8 <_close_r>

0800c17a <_realloc_r>:
 800c17a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c17e:	4680      	mov	r8, r0
 800c180:	4615      	mov	r5, r2
 800c182:	460c      	mov	r4, r1
 800c184:	b921      	cbnz	r1, 800c190 <_realloc_r+0x16>
 800c186:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c18a:	4611      	mov	r1, r2
 800c18c:	f7ff baf8 	b.w	800b780 <_malloc_r>
 800c190:	b92a      	cbnz	r2, 800c19e <_realloc_r+0x24>
 800c192:	f000 f9db 	bl	800c54c <_free_r>
 800c196:	2400      	movs	r4, #0
 800c198:	4620      	mov	r0, r4
 800c19a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c19e:	f000 fa31 	bl	800c604 <_malloc_usable_size_r>
 800c1a2:	4285      	cmp	r5, r0
 800c1a4:	4606      	mov	r6, r0
 800c1a6:	d802      	bhi.n	800c1ae <_realloc_r+0x34>
 800c1a8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c1ac:	d8f4      	bhi.n	800c198 <_realloc_r+0x1e>
 800c1ae:	4629      	mov	r1, r5
 800c1b0:	4640      	mov	r0, r8
 800c1b2:	f7ff fae5 	bl	800b780 <_malloc_r>
 800c1b6:	4607      	mov	r7, r0
 800c1b8:	2800      	cmp	r0, #0
 800c1ba:	d0ec      	beq.n	800c196 <_realloc_r+0x1c>
 800c1bc:	42b5      	cmp	r5, r6
 800c1be:	462a      	mov	r2, r5
 800c1c0:	4621      	mov	r1, r4
 800c1c2:	bf28      	it	cs
 800c1c4:	4632      	movcs	r2, r6
 800c1c6:	f7fe f9bc 	bl	800a542 <memcpy>
 800c1ca:	4621      	mov	r1, r4
 800c1cc:	4640      	mov	r0, r8
 800c1ce:	f000 f9bd 	bl	800c54c <_free_r>
 800c1d2:	463c      	mov	r4, r7
 800c1d4:	e7e0      	b.n	800c198 <_realloc_r+0x1e>

0800c1d6 <__swbuf_r>:
 800c1d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1d8:	460e      	mov	r6, r1
 800c1da:	4614      	mov	r4, r2
 800c1dc:	4605      	mov	r5, r0
 800c1de:	b118      	cbz	r0, 800c1e8 <__swbuf_r+0x12>
 800c1e0:	6a03      	ldr	r3, [r0, #32]
 800c1e2:	b90b      	cbnz	r3, 800c1e8 <__swbuf_r+0x12>
 800c1e4:	f7fe f8ce 	bl	800a384 <__sinit>
 800c1e8:	69a3      	ldr	r3, [r4, #24]
 800c1ea:	60a3      	str	r3, [r4, #8]
 800c1ec:	89a3      	ldrh	r3, [r4, #12]
 800c1ee:	071a      	lsls	r2, r3, #28
 800c1f0:	d501      	bpl.n	800c1f6 <__swbuf_r+0x20>
 800c1f2:	6923      	ldr	r3, [r4, #16]
 800c1f4:	b943      	cbnz	r3, 800c208 <__swbuf_r+0x32>
 800c1f6:	4621      	mov	r1, r4
 800c1f8:	4628      	mov	r0, r5
 800c1fa:	f000 f82b 	bl	800c254 <__swsetup_r>
 800c1fe:	b118      	cbz	r0, 800c208 <__swbuf_r+0x32>
 800c200:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800c204:	4638      	mov	r0, r7
 800c206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c208:	6823      	ldr	r3, [r4, #0]
 800c20a:	6922      	ldr	r2, [r4, #16]
 800c20c:	1a98      	subs	r0, r3, r2
 800c20e:	6963      	ldr	r3, [r4, #20]
 800c210:	b2f6      	uxtb	r6, r6
 800c212:	4283      	cmp	r3, r0
 800c214:	4637      	mov	r7, r6
 800c216:	dc05      	bgt.n	800c224 <__swbuf_r+0x4e>
 800c218:	4621      	mov	r1, r4
 800c21a:	4628      	mov	r0, r5
 800c21c:	f7ff fbb4 	bl	800b988 <_fflush_r>
 800c220:	2800      	cmp	r0, #0
 800c222:	d1ed      	bne.n	800c200 <__swbuf_r+0x2a>
 800c224:	68a3      	ldr	r3, [r4, #8]
 800c226:	3b01      	subs	r3, #1
 800c228:	60a3      	str	r3, [r4, #8]
 800c22a:	6823      	ldr	r3, [r4, #0]
 800c22c:	1c5a      	adds	r2, r3, #1
 800c22e:	6022      	str	r2, [r4, #0]
 800c230:	701e      	strb	r6, [r3, #0]
 800c232:	6962      	ldr	r2, [r4, #20]
 800c234:	1c43      	adds	r3, r0, #1
 800c236:	429a      	cmp	r2, r3
 800c238:	d004      	beq.n	800c244 <__swbuf_r+0x6e>
 800c23a:	89a3      	ldrh	r3, [r4, #12]
 800c23c:	07db      	lsls	r3, r3, #31
 800c23e:	d5e1      	bpl.n	800c204 <__swbuf_r+0x2e>
 800c240:	2e0a      	cmp	r6, #10
 800c242:	d1df      	bne.n	800c204 <__swbuf_r+0x2e>
 800c244:	4621      	mov	r1, r4
 800c246:	4628      	mov	r0, r5
 800c248:	f7ff fb9e 	bl	800b988 <_fflush_r>
 800c24c:	2800      	cmp	r0, #0
 800c24e:	d0d9      	beq.n	800c204 <__swbuf_r+0x2e>
 800c250:	e7d6      	b.n	800c200 <__swbuf_r+0x2a>
	...

0800c254 <__swsetup_r>:
 800c254:	b538      	push	{r3, r4, r5, lr}
 800c256:	4b29      	ldr	r3, [pc, #164]	@ (800c2fc <__swsetup_r+0xa8>)
 800c258:	4605      	mov	r5, r0
 800c25a:	6818      	ldr	r0, [r3, #0]
 800c25c:	460c      	mov	r4, r1
 800c25e:	b118      	cbz	r0, 800c268 <__swsetup_r+0x14>
 800c260:	6a03      	ldr	r3, [r0, #32]
 800c262:	b90b      	cbnz	r3, 800c268 <__swsetup_r+0x14>
 800c264:	f7fe f88e 	bl	800a384 <__sinit>
 800c268:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c26c:	0719      	lsls	r1, r3, #28
 800c26e:	d422      	bmi.n	800c2b6 <__swsetup_r+0x62>
 800c270:	06da      	lsls	r2, r3, #27
 800c272:	d407      	bmi.n	800c284 <__swsetup_r+0x30>
 800c274:	2209      	movs	r2, #9
 800c276:	602a      	str	r2, [r5, #0]
 800c278:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c27c:	81a3      	strh	r3, [r4, #12]
 800c27e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c282:	e033      	b.n	800c2ec <__swsetup_r+0x98>
 800c284:	0758      	lsls	r0, r3, #29
 800c286:	d512      	bpl.n	800c2ae <__swsetup_r+0x5a>
 800c288:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c28a:	b141      	cbz	r1, 800c29e <__swsetup_r+0x4a>
 800c28c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c290:	4299      	cmp	r1, r3
 800c292:	d002      	beq.n	800c29a <__swsetup_r+0x46>
 800c294:	4628      	mov	r0, r5
 800c296:	f000 f959 	bl	800c54c <_free_r>
 800c29a:	2300      	movs	r3, #0
 800c29c:	6363      	str	r3, [r4, #52]	@ 0x34
 800c29e:	89a3      	ldrh	r3, [r4, #12]
 800c2a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c2a4:	81a3      	strh	r3, [r4, #12]
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	6063      	str	r3, [r4, #4]
 800c2aa:	6923      	ldr	r3, [r4, #16]
 800c2ac:	6023      	str	r3, [r4, #0]
 800c2ae:	89a3      	ldrh	r3, [r4, #12]
 800c2b0:	f043 0308 	orr.w	r3, r3, #8
 800c2b4:	81a3      	strh	r3, [r4, #12]
 800c2b6:	6923      	ldr	r3, [r4, #16]
 800c2b8:	b94b      	cbnz	r3, 800c2ce <__swsetup_r+0x7a>
 800c2ba:	89a3      	ldrh	r3, [r4, #12]
 800c2bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c2c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c2c4:	d003      	beq.n	800c2ce <__swsetup_r+0x7a>
 800c2c6:	4621      	mov	r1, r4
 800c2c8:	4628      	mov	r0, r5
 800c2ca:	f000 f83f 	bl	800c34c <__smakebuf_r>
 800c2ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2d2:	f013 0201 	ands.w	r2, r3, #1
 800c2d6:	d00a      	beq.n	800c2ee <__swsetup_r+0x9a>
 800c2d8:	2200      	movs	r2, #0
 800c2da:	60a2      	str	r2, [r4, #8]
 800c2dc:	6962      	ldr	r2, [r4, #20]
 800c2de:	4252      	negs	r2, r2
 800c2e0:	61a2      	str	r2, [r4, #24]
 800c2e2:	6922      	ldr	r2, [r4, #16]
 800c2e4:	b942      	cbnz	r2, 800c2f8 <__swsetup_r+0xa4>
 800c2e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c2ea:	d1c5      	bne.n	800c278 <__swsetup_r+0x24>
 800c2ec:	bd38      	pop	{r3, r4, r5, pc}
 800c2ee:	0799      	lsls	r1, r3, #30
 800c2f0:	bf58      	it	pl
 800c2f2:	6962      	ldrpl	r2, [r4, #20]
 800c2f4:	60a2      	str	r2, [r4, #8]
 800c2f6:	e7f4      	b.n	800c2e2 <__swsetup_r+0x8e>
 800c2f8:	2000      	movs	r0, #0
 800c2fa:	e7f7      	b.n	800c2ec <__swsetup_r+0x98>
 800c2fc:	2000001c 	.word	0x2000001c

0800c300 <__swhatbuf_r>:
 800c300:	b570      	push	{r4, r5, r6, lr}
 800c302:	460c      	mov	r4, r1
 800c304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c308:	2900      	cmp	r1, #0
 800c30a:	b096      	sub	sp, #88	@ 0x58
 800c30c:	4615      	mov	r5, r2
 800c30e:	461e      	mov	r6, r3
 800c310:	da0d      	bge.n	800c32e <__swhatbuf_r+0x2e>
 800c312:	89a3      	ldrh	r3, [r4, #12]
 800c314:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c318:	f04f 0100 	mov.w	r1, #0
 800c31c:	bf14      	ite	ne
 800c31e:	2340      	movne	r3, #64	@ 0x40
 800c320:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c324:	2000      	movs	r0, #0
 800c326:	6031      	str	r1, [r6, #0]
 800c328:	602b      	str	r3, [r5, #0]
 800c32a:	b016      	add	sp, #88	@ 0x58
 800c32c:	bd70      	pop	{r4, r5, r6, pc}
 800c32e:	466a      	mov	r2, sp
 800c330:	f000 f872 	bl	800c418 <_fstat_r>
 800c334:	2800      	cmp	r0, #0
 800c336:	dbec      	blt.n	800c312 <__swhatbuf_r+0x12>
 800c338:	9901      	ldr	r1, [sp, #4]
 800c33a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c33e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c342:	4259      	negs	r1, r3
 800c344:	4159      	adcs	r1, r3
 800c346:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c34a:	e7eb      	b.n	800c324 <__swhatbuf_r+0x24>

0800c34c <__smakebuf_r>:
 800c34c:	898b      	ldrh	r3, [r1, #12]
 800c34e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c350:	079d      	lsls	r5, r3, #30
 800c352:	4606      	mov	r6, r0
 800c354:	460c      	mov	r4, r1
 800c356:	d507      	bpl.n	800c368 <__smakebuf_r+0x1c>
 800c358:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c35c:	6023      	str	r3, [r4, #0]
 800c35e:	6123      	str	r3, [r4, #16]
 800c360:	2301      	movs	r3, #1
 800c362:	6163      	str	r3, [r4, #20]
 800c364:	b003      	add	sp, #12
 800c366:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c368:	ab01      	add	r3, sp, #4
 800c36a:	466a      	mov	r2, sp
 800c36c:	f7ff ffc8 	bl	800c300 <__swhatbuf_r>
 800c370:	9f00      	ldr	r7, [sp, #0]
 800c372:	4605      	mov	r5, r0
 800c374:	4639      	mov	r1, r7
 800c376:	4630      	mov	r0, r6
 800c378:	f7ff fa02 	bl	800b780 <_malloc_r>
 800c37c:	b948      	cbnz	r0, 800c392 <__smakebuf_r+0x46>
 800c37e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c382:	059a      	lsls	r2, r3, #22
 800c384:	d4ee      	bmi.n	800c364 <__smakebuf_r+0x18>
 800c386:	f023 0303 	bic.w	r3, r3, #3
 800c38a:	f043 0302 	orr.w	r3, r3, #2
 800c38e:	81a3      	strh	r3, [r4, #12]
 800c390:	e7e2      	b.n	800c358 <__smakebuf_r+0xc>
 800c392:	89a3      	ldrh	r3, [r4, #12]
 800c394:	6020      	str	r0, [r4, #0]
 800c396:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c39a:	81a3      	strh	r3, [r4, #12]
 800c39c:	9b01      	ldr	r3, [sp, #4]
 800c39e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c3a2:	b15b      	cbz	r3, 800c3bc <__smakebuf_r+0x70>
 800c3a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3a8:	4630      	mov	r0, r6
 800c3aa:	f000 f847 	bl	800c43c <_isatty_r>
 800c3ae:	b128      	cbz	r0, 800c3bc <__smakebuf_r+0x70>
 800c3b0:	89a3      	ldrh	r3, [r4, #12]
 800c3b2:	f023 0303 	bic.w	r3, r3, #3
 800c3b6:	f043 0301 	orr.w	r3, r3, #1
 800c3ba:	81a3      	strh	r3, [r4, #12]
 800c3bc:	89a3      	ldrh	r3, [r4, #12]
 800c3be:	431d      	orrs	r5, r3
 800c3c0:	81a5      	strh	r5, [r4, #12]
 800c3c2:	e7cf      	b.n	800c364 <__smakebuf_r+0x18>

0800c3c4 <memmove>:
 800c3c4:	4288      	cmp	r0, r1
 800c3c6:	b510      	push	{r4, lr}
 800c3c8:	eb01 0402 	add.w	r4, r1, r2
 800c3cc:	d902      	bls.n	800c3d4 <memmove+0x10>
 800c3ce:	4284      	cmp	r4, r0
 800c3d0:	4623      	mov	r3, r4
 800c3d2:	d807      	bhi.n	800c3e4 <memmove+0x20>
 800c3d4:	1e43      	subs	r3, r0, #1
 800c3d6:	42a1      	cmp	r1, r4
 800c3d8:	d008      	beq.n	800c3ec <memmove+0x28>
 800c3da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c3de:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c3e2:	e7f8      	b.n	800c3d6 <memmove+0x12>
 800c3e4:	4402      	add	r2, r0
 800c3e6:	4601      	mov	r1, r0
 800c3e8:	428a      	cmp	r2, r1
 800c3ea:	d100      	bne.n	800c3ee <memmove+0x2a>
 800c3ec:	bd10      	pop	{r4, pc}
 800c3ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c3f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c3f6:	e7f7      	b.n	800c3e8 <memmove+0x24>

0800c3f8 <_close_r>:
 800c3f8:	b538      	push	{r3, r4, r5, lr}
 800c3fa:	4d06      	ldr	r5, [pc, #24]	@ (800c414 <_close_r+0x1c>)
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	4604      	mov	r4, r0
 800c400:	4608      	mov	r0, r1
 800c402:	602b      	str	r3, [r5, #0]
 800c404:	f7f5 fc10 	bl	8001c28 <_close>
 800c408:	1c43      	adds	r3, r0, #1
 800c40a:	d102      	bne.n	800c412 <_close_r+0x1a>
 800c40c:	682b      	ldr	r3, [r5, #0]
 800c40e:	b103      	cbz	r3, 800c412 <_close_r+0x1a>
 800c410:	6023      	str	r3, [r4, #0]
 800c412:	bd38      	pop	{r3, r4, r5, pc}
 800c414:	200015f8 	.word	0x200015f8

0800c418 <_fstat_r>:
 800c418:	b538      	push	{r3, r4, r5, lr}
 800c41a:	4d07      	ldr	r5, [pc, #28]	@ (800c438 <_fstat_r+0x20>)
 800c41c:	2300      	movs	r3, #0
 800c41e:	4604      	mov	r4, r0
 800c420:	4608      	mov	r0, r1
 800c422:	4611      	mov	r1, r2
 800c424:	602b      	str	r3, [r5, #0]
 800c426:	f7f5 fc0b 	bl	8001c40 <_fstat>
 800c42a:	1c43      	adds	r3, r0, #1
 800c42c:	d102      	bne.n	800c434 <_fstat_r+0x1c>
 800c42e:	682b      	ldr	r3, [r5, #0]
 800c430:	b103      	cbz	r3, 800c434 <_fstat_r+0x1c>
 800c432:	6023      	str	r3, [r4, #0]
 800c434:	bd38      	pop	{r3, r4, r5, pc}
 800c436:	bf00      	nop
 800c438:	200015f8 	.word	0x200015f8

0800c43c <_isatty_r>:
 800c43c:	b538      	push	{r3, r4, r5, lr}
 800c43e:	4d06      	ldr	r5, [pc, #24]	@ (800c458 <_isatty_r+0x1c>)
 800c440:	2300      	movs	r3, #0
 800c442:	4604      	mov	r4, r0
 800c444:	4608      	mov	r0, r1
 800c446:	602b      	str	r3, [r5, #0]
 800c448:	f7f5 fc0a 	bl	8001c60 <_isatty>
 800c44c:	1c43      	adds	r3, r0, #1
 800c44e:	d102      	bne.n	800c456 <_isatty_r+0x1a>
 800c450:	682b      	ldr	r3, [r5, #0]
 800c452:	b103      	cbz	r3, 800c456 <_isatty_r+0x1a>
 800c454:	6023      	str	r3, [r4, #0]
 800c456:	bd38      	pop	{r3, r4, r5, pc}
 800c458:	200015f8 	.word	0x200015f8

0800c45c <_lseek_r>:
 800c45c:	b538      	push	{r3, r4, r5, lr}
 800c45e:	4d07      	ldr	r5, [pc, #28]	@ (800c47c <_lseek_r+0x20>)
 800c460:	4604      	mov	r4, r0
 800c462:	4608      	mov	r0, r1
 800c464:	4611      	mov	r1, r2
 800c466:	2200      	movs	r2, #0
 800c468:	602a      	str	r2, [r5, #0]
 800c46a:	461a      	mov	r2, r3
 800c46c:	f7f5 fc03 	bl	8001c76 <_lseek>
 800c470:	1c43      	adds	r3, r0, #1
 800c472:	d102      	bne.n	800c47a <_lseek_r+0x1e>
 800c474:	682b      	ldr	r3, [r5, #0]
 800c476:	b103      	cbz	r3, 800c47a <_lseek_r+0x1e>
 800c478:	6023      	str	r3, [r4, #0]
 800c47a:	bd38      	pop	{r3, r4, r5, pc}
 800c47c:	200015f8 	.word	0x200015f8

0800c480 <_read_r>:
 800c480:	b538      	push	{r3, r4, r5, lr}
 800c482:	4d07      	ldr	r5, [pc, #28]	@ (800c4a0 <_read_r+0x20>)
 800c484:	4604      	mov	r4, r0
 800c486:	4608      	mov	r0, r1
 800c488:	4611      	mov	r1, r2
 800c48a:	2200      	movs	r2, #0
 800c48c:	602a      	str	r2, [r5, #0]
 800c48e:	461a      	mov	r2, r3
 800c490:	f7f5 fbad 	bl	8001bee <_read>
 800c494:	1c43      	adds	r3, r0, #1
 800c496:	d102      	bne.n	800c49e <_read_r+0x1e>
 800c498:	682b      	ldr	r3, [r5, #0]
 800c49a:	b103      	cbz	r3, 800c49e <_read_r+0x1e>
 800c49c:	6023      	str	r3, [r4, #0]
 800c49e:	bd38      	pop	{r3, r4, r5, pc}
 800c4a0:	200015f8 	.word	0x200015f8

0800c4a4 <_sbrk_r>:
 800c4a4:	b538      	push	{r3, r4, r5, lr}
 800c4a6:	4d06      	ldr	r5, [pc, #24]	@ (800c4c0 <_sbrk_r+0x1c>)
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	4604      	mov	r4, r0
 800c4ac:	4608      	mov	r0, r1
 800c4ae:	602b      	str	r3, [r5, #0]
 800c4b0:	f7f5 fbee 	bl	8001c90 <_sbrk>
 800c4b4:	1c43      	adds	r3, r0, #1
 800c4b6:	d102      	bne.n	800c4be <_sbrk_r+0x1a>
 800c4b8:	682b      	ldr	r3, [r5, #0]
 800c4ba:	b103      	cbz	r3, 800c4be <_sbrk_r+0x1a>
 800c4bc:	6023      	str	r3, [r4, #0]
 800c4be:	bd38      	pop	{r3, r4, r5, pc}
 800c4c0:	200015f8 	.word	0x200015f8

0800c4c4 <_write_r>:
 800c4c4:	b538      	push	{r3, r4, r5, lr}
 800c4c6:	4d07      	ldr	r5, [pc, #28]	@ (800c4e4 <_write_r+0x20>)
 800c4c8:	4604      	mov	r4, r0
 800c4ca:	4608      	mov	r0, r1
 800c4cc:	4611      	mov	r1, r2
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	602a      	str	r2, [r5, #0]
 800c4d2:	461a      	mov	r2, r3
 800c4d4:	f7f4 fe08 	bl	80010e8 <_write>
 800c4d8:	1c43      	adds	r3, r0, #1
 800c4da:	d102      	bne.n	800c4e2 <_write_r+0x1e>
 800c4dc:	682b      	ldr	r3, [r5, #0]
 800c4de:	b103      	cbz	r3, 800c4e2 <_write_r+0x1e>
 800c4e0:	6023      	str	r3, [r4, #0]
 800c4e2:	bd38      	pop	{r3, r4, r5, pc}
 800c4e4:	200015f8 	.word	0x200015f8

0800c4e8 <__assert_func>:
 800c4e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c4ea:	4614      	mov	r4, r2
 800c4ec:	461a      	mov	r2, r3
 800c4ee:	4b09      	ldr	r3, [pc, #36]	@ (800c514 <__assert_func+0x2c>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	4605      	mov	r5, r0
 800c4f4:	68d8      	ldr	r0, [r3, #12]
 800c4f6:	b954      	cbnz	r4, 800c50e <__assert_func+0x26>
 800c4f8:	4b07      	ldr	r3, [pc, #28]	@ (800c518 <__assert_func+0x30>)
 800c4fa:	461c      	mov	r4, r3
 800c4fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c500:	9100      	str	r1, [sp, #0]
 800c502:	462b      	mov	r3, r5
 800c504:	4905      	ldr	r1, [pc, #20]	@ (800c51c <__assert_func+0x34>)
 800c506:	f000 f885 	bl	800c614 <fiprintf>
 800c50a:	f000 f8a2 	bl	800c652 <abort>
 800c50e:	4b04      	ldr	r3, [pc, #16]	@ (800c520 <__assert_func+0x38>)
 800c510:	e7f4      	b.n	800c4fc <__assert_func+0x14>
 800c512:	bf00      	nop
 800c514:	2000001c 	.word	0x2000001c
 800c518:	08022746 	.word	0x08022746
 800c51c:	08022718 	.word	0x08022718
 800c520:	0802270b 	.word	0x0802270b

0800c524 <_calloc_r>:
 800c524:	b570      	push	{r4, r5, r6, lr}
 800c526:	fba1 5402 	umull	r5, r4, r1, r2
 800c52a:	b93c      	cbnz	r4, 800c53c <_calloc_r+0x18>
 800c52c:	4629      	mov	r1, r5
 800c52e:	f7ff f927 	bl	800b780 <_malloc_r>
 800c532:	4606      	mov	r6, r0
 800c534:	b928      	cbnz	r0, 800c542 <_calloc_r+0x1e>
 800c536:	2600      	movs	r6, #0
 800c538:	4630      	mov	r0, r6
 800c53a:	bd70      	pop	{r4, r5, r6, pc}
 800c53c:	220c      	movs	r2, #12
 800c53e:	6002      	str	r2, [r0, #0]
 800c540:	e7f9      	b.n	800c536 <_calloc_r+0x12>
 800c542:	462a      	mov	r2, r5
 800c544:	4621      	mov	r1, r4
 800c546:	f7fd ffc3 	bl	800a4d0 <memset>
 800c54a:	e7f5      	b.n	800c538 <_calloc_r+0x14>

0800c54c <_free_r>:
 800c54c:	b538      	push	{r3, r4, r5, lr}
 800c54e:	4605      	mov	r5, r0
 800c550:	2900      	cmp	r1, #0
 800c552:	d041      	beq.n	800c5d8 <_free_r+0x8c>
 800c554:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c558:	1f0c      	subs	r4, r1, #4
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	bfb8      	it	lt
 800c55e:	18e4      	addlt	r4, r4, r3
 800c560:	f7ff fa3a 	bl	800b9d8 <__malloc_lock>
 800c564:	4a1d      	ldr	r2, [pc, #116]	@ (800c5dc <_free_r+0x90>)
 800c566:	6813      	ldr	r3, [r2, #0]
 800c568:	b933      	cbnz	r3, 800c578 <_free_r+0x2c>
 800c56a:	6063      	str	r3, [r4, #4]
 800c56c:	6014      	str	r4, [r2, #0]
 800c56e:	4628      	mov	r0, r5
 800c570:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c574:	f7ff ba36 	b.w	800b9e4 <__malloc_unlock>
 800c578:	42a3      	cmp	r3, r4
 800c57a:	d908      	bls.n	800c58e <_free_r+0x42>
 800c57c:	6820      	ldr	r0, [r4, #0]
 800c57e:	1821      	adds	r1, r4, r0
 800c580:	428b      	cmp	r3, r1
 800c582:	bf01      	itttt	eq
 800c584:	6819      	ldreq	r1, [r3, #0]
 800c586:	685b      	ldreq	r3, [r3, #4]
 800c588:	1809      	addeq	r1, r1, r0
 800c58a:	6021      	streq	r1, [r4, #0]
 800c58c:	e7ed      	b.n	800c56a <_free_r+0x1e>
 800c58e:	461a      	mov	r2, r3
 800c590:	685b      	ldr	r3, [r3, #4]
 800c592:	b10b      	cbz	r3, 800c598 <_free_r+0x4c>
 800c594:	42a3      	cmp	r3, r4
 800c596:	d9fa      	bls.n	800c58e <_free_r+0x42>
 800c598:	6811      	ldr	r1, [r2, #0]
 800c59a:	1850      	adds	r0, r2, r1
 800c59c:	42a0      	cmp	r0, r4
 800c59e:	d10b      	bne.n	800c5b8 <_free_r+0x6c>
 800c5a0:	6820      	ldr	r0, [r4, #0]
 800c5a2:	4401      	add	r1, r0
 800c5a4:	1850      	adds	r0, r2, r1
 800c5a6:	4283      	cmp	r3, r0
 800c5a8:	6011      	str	r1, [r2, #0]
 800c5aa:	d1e0      	bne.n	800c56e <_free_r+0x22>
 800c5ac:	6818      	ldr	r0, [r3, #0]
 800c5ae:	685b      	ldr	r3, [r3, #4]
 800c5b0:	6053      	str	r3, [r2, #4]
 800c5b2:	4408      	add	r0, r1
 800c5b4:	6010      	str	r0, [r2, #0]
 800c5b6:	e7da      	b.n	800c56e <_free_r+0x22>
 800c5b8:	d902      	bls.n	800c5c0 <_free_r+0x74>
 800c5ba:	230c      	movs	r3, #12
 800c5bc:	602b      	str	r3, [r5, #0]
 800c5be:	e7d6      	b.n	800c56e <_free_r+0x22>
 800c5c0:	6820      	ldr	r0, [r4, #0]
 800c5c2:	1821      	adds	r1, r4, r0
 800c5c4:	428b      	cmp	r3, r1
 800c5c6:	bf04      	itt	eq
 800c5c8:	6819      	ldreq	r1, [r3, #0]
 800c5ca:	685b      	ldreq	r3, [r3, #4]
 800c5cc:	6063      	str	r3, [r4, #4]
 800c5ce:	bf04      	itt	eq
 800c5d0:	1809      	addeq	r1, r1, r0
 800c5d2:	6021      	streq	r1, [r4, #0]
 800c5d4:	6054      	str	r4, [r2, #4]
 800c5d6:	e7ca      	b.n	800c56e <_free_r+0x22>
 800c5d8:	bd38      	pop	{r3, r4, r5, pc}
 800c5da:	bf00      	nop
 800c5dc:	200015f4 	.word	0x200015f4

0800c5e0 <__ascii_mbtowc>:
 800c5e0:	b082      	sub	sp, #8
 800c5e2:	b901      	cbnz	r1, 800c5e6 <__ascii_mbtowc+0x6>
 800c5e4:	a901      	add	r1, sp, #4
 800c5e6:	b142      	cbz	r2, 800c5fa <__ascii_mbtowc+0x1a>
 800c5e8:	b14b      	cbz	r3, 800c5fe <__ascii_mbtowc+0x1e>
 800c5ea:	7813      	ldrb	r3, [r2, #0]
 800c5ec:	600b      	str	r3, [r1, #0]
 800c5ee:	7812      	ldrb	r2, [r2, #0]
 800c5f0:	1e10      	subs	r0, r2, #0
 800c5f2:	bf18      	it	ne
 800c5f4:	2001      	movne	r0, #1
 800c5f6:	b002      	add	sp, #8
 800c5f8:	4770      	bx	lr
 800c5fa:	4610      	mov	r0, r2
 800c5fc:	e7fb      	b.n	800c5f6 <__ascii_mbtowc+0x16>
 800c5fe:	f06f 0001 	mvn.w	r0, #1
 800c602:	e7f8      	b.n	800c5f6 <__ascii_mbtowc+0x16>

0800c604 <_malloc_usable_size_r>:
 800c604:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c608:	1f18      	subs	r0, r3, #4
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	bfbc      	itt	lt
 800c60e:	580b      	ldrlt	r3, [r1, r0]
 800c610:	18c0      	addlt	r0, r0, r3
 800c612:	4770      	bx	lr

0800c614 <fiprintf>:
 800c614:	b40e      	push	{r1, r2, r3}
 800c616:	b503      	push	{r0, r1, lr}
 800c618:	4601      	mov	r1, r0
 800c61a:	ab03      	add	r3, sp, #12
 800c61c:	4805      	ldr	r0, [pc, #20]	@ (800c634 <fiprintf+0x20>)
 800c61e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c622:	6800      	ldr	r0, [r0, #0]
 800c624:	9301      	str	r3, [sp, #4]
 800c626:	f7fe ff69 	bl	800b4fc <_vfiprintf_r>
 800c62a:	b002      	add	sp, #8
 800c62c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c630:	b003      	add	sp, #12
 800c632:	4770      	bx	lr
 800c634:	2000001c 	.word	0x2000001c

0800c638 <__ascii_wctomb>:
 800c638:	4603      	mov	r3, r0
 800c63a:	4608      	mov	r0, r1
 800c63c:	b141      	cbz	r1, 800c650 <__ascii_wctomb+0x18>
 800c63e:	2aff      	cmp	r2, #255	@ 0xff
 800c640:	d904      	bls.n	800c64c <__ascii_wctomb+0x14>
 800c642:	228a      	movs	r2, #138	@ 0x8a
 800c644:	601a      	str	r2, [r3, #0]
 800c646:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c64a:	4770      	bx	lr
 800c64c:	700a      	strb	r2, [r1, #0]
 800c64e:	2001      	movs	r0, #1
 800c650:	4770      	bx	lr

0800c652 <abort>:
 800c652:	b508      	push	{r3, lr}
 800c654:	2006      	movs	r0, #6
 800c656:	f000 f82b 	bl	800c6b0 <raise>
 800c65a:	2001      	movs	r0, #1
 800c65c:	f7f5 fabc 	bl	8001bd8 <_exit>

0800c660 <_raise_r>:
 800c660:	291f      	cmp	r1, #31
 800c662:	b538      	push	{r3, r4, r5, lr}
 800c664:	4605      	mov	r5, r0
 800c666:	460c      	mov	r4, r1
 800c668:	d904      	bls.n	800c674 <_raise_r+0x14>
 800c66a:	2316      	movs	r3, #22
 800c66c:	6003      	str	r3, [r0, #0]
 800c66e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c672:	bd38      	pop	{r3, r4, r5, pc}
 800c674:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c676:	b112      	cbz	r2, 800c67e <_raise_r+0x1e>
 800c678:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c67c:	b94b      	cbnz	r3, 800c692 <_raise_r+0x32>
 800c67e:	4628      	mov	r0, r5
 800c680:	f000 f830 	bl	800c6e4 <_getpid_r>
 800c684:	4622      	mov	r2, r4
 800c686:	4601      	mov	r1, r0
 800c688:	4628      	mov	r0, r5
 800c68a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c68e:	f000 b817 	b.w	800c6c0 <_kill_r>
 800c692:	2b01      	cmp	r3, #1
 800c694:	d00a      	beq.n	800c6ac <_raise_r+0x4c>
 800c696:	1c59      	adds	r1, r3, #1
 800c698:	d103      	bne.n	800c6a2 <_raise_r+0x42>
 800c69a:	2316      	movs	r3, #22
 800c69c:	6003      	str	r3, [r0, #0]
 800c69e:	2001      	movs	r0, #1
 800c6a0:	e7e7      	b.n	800c672 <_raise_r+0x12>
 800c6a2:	2100      	movs	r1, #0
 800c6a4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c6a8:	4620      	mov	r0, r4
 800c6aa:	4798      	blx	r3
 800c6ac:	2000      	movs	r0, #0
 800c6ae:	e7e0      	b.n	800c672 <_raise_r+0x12>

0800c6b0 <raise>:
 800c6b0:	4b02      	ldr	r3, [pc, #8]	@ (800c6bc <raise+0xc>)
 800c6b2:	4601      	mov	r1, r0
 800c6b4:	6818      	ldr	r0, [r3, #0]
 800c6b6:	f7ff bfd3 	b.w	800c660 <_raise_r>
 800c6ba:	bf00      	nop
 800c6bc:	2000001c 	.word	0x2000001c

0800c6c0 <_kill_r>:
 800c6c0:	b538      	push	{r3, r4, r5, lr}
 800c6c2:	4d07      	ldr	r5, [pc, #28]	@ (800c6e0 <_kill_r+0x20>)
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	4604      	mov	r4, r0
 800c6c8:	4608      	mov	r0, r1
 800c6ca:	4611      	mov	r1, r2
 800c6cc:	602b      	str	r3, [r5, #0]
 800c6ce:	f7f5 fa73 	bl	8001bb8 <_kill>
 800c6d2:	1c43      	adds	r3, r0, #1
 800c6d4:	d102      	bne.n	800c6dc <_kill_r+0x1c>
 800c6d6:	682b      	ldr	r3, [r5, #0]
 800c6d8:	b103      	cbz	r3, 800c6dc <_kill_r+0x1c>
 800c6da:	6023      	str	r3, [r4, #0]
 800c6dc:	bd38      	pop	{r3, r4, r5, pc}
 800c6de:	bf00      	nop
 800c6e0:	200015f8 	.word	0x200015f8

0800c6e4 <_getpid_r>:
 800c6e4:	f7f5 ba60 	b.w	8001ba8 <_getpid>

0800c6e8 <_init>:
 800c6e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6ea:	bf00      	nop
 800c6ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6ee:	bc08      	pop	{r3}
 800c6f0:	469e      	mov	lr, r3
 800c6f2:	4770      	bx	lr

0800c6f4 <_fini>:
 800c6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6f6:	bf00      	nop
 800c6f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6fa:	bc08      	pop	{r3}
 800c6fc:	469e      	mov	lr, r3
 800c6fe:	4770      	bx	lr
