
Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c468  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00015e50  0800c5f8  0800c5f8  0000d5f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022448  08022448  000241d8  2**0
                  CONTENTS
  4 .ARM          00000008  08022448  08022448  00023448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022450  08022450  000241d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08022450  08022450  00023450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08022454  08022454  00023454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08022458  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001424  200001d8  08022630  000241d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015fc  08022630  000245fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000241d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000187ce  00000000  00000000  00024208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003564  00000000  00000000  0003c9d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001580  00000000  00000000  0003ff40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010c5  00000000  00000000  000414c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000296ee  00000000  00000000  00042585  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b0d1  00000000  00000000  0006bc73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9700  00000000  00000000  00086d44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00180444  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c3c  00000000  00000000  00180488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001870c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c5e0 	.word	0x0800c5e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800c5e0 	.word	0x0800c5e0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08a      	sub	sp, #40	@ 0x28
 8000e9c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9e:	f107 0314 	add.w	r3, r7, #20
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
 8000eaa:	60da      	str	r2, [r3, #12]
 8000eac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eae:	4b3c      	ldr	r3, [pc, #240]	@ (8000fa0 <MX_GPIO_Init+0x108>)
 8000eb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb2:	4a3b      	ldr	r2, [pc, #236]	@ (8000fa0 <MX_GPIO_Init+0x108>)
 8000eb4:	f043 0304 	orr.w	r3, r3, #4
 8000eb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eba:	4b39      	ldr	r3, [pc, #228]	@ (8000fa0 <MX_GPIO_Init+0x108>)
 8000ebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ebe:	f003 0304 	and.w	r3, r3, #4
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ec6:	4b36      	ldr	r3, [pc, #216]	@ (8000fa0 <MX_GPIO_Init+0x108>)
 8000ec8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eca:	4a35      	ldr	r2, [pc, #212]	@ (8000fa0 <MX_GPIO_Init+0x108>)
 8000ecc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ed0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ed2:	4b33      	ldr	r3, [pc, #204]	@ (8000fa0 <MX_GPIO_Init+0x108>)
 8000ed4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ede:	4b30      	ldr	r3, [pc, #192]	@ (8000fa0 <MX_GPIO_Init+0x108>)
 8000ee0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ee2:	4a2f      	ldr	r2, [pc, #188]	@ (8000fa0 <MX_GPIO_Init+0x108>)
 8000ee4:	f043 0301 	orr.w	r3, r3, #1
 8000ee8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eea:	4b2d      	ldr	r3, [pc, #180]	@ (8000fa0 <MX_GPIO_Init+0x108>)
 8000eec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	60bb      	str	r3, [r7, #8]
 8000ef4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef6:	4b2a      	ldr	r3, [pc, #168]	@ (8000fa0 <MX_GPIO_Init+0x108>)
 8000ef8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000efa:	4a29      	ldr	r2, [pc, #164]	@ (8000fa0 <MX_GPIO_Init+0x108>)
 8000efc:	f043 0302 	orr.w	r3, r3, #2
 8000f00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f02:	4b27      	ldr	r3, [pc, #156]	@ (8000fa0 <MX_GPIO_Init+0x108>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f06:	f003 0302 	and.w	r3, r3, #2
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2120      	movs	r1, #32
 8000f12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f16:	f001 fd65 	bl	80029e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f44f 7158 	mov.w	r1, #864	@ 0x360
 8000f20:	4820      	ldr	r0, [pc, #128]	@ (8000fa4 <MX_GPIO_Init+0x10c>)
 8000f22:	f001 fd5f 	bl	80029e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f26:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f2c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000f30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f36:	f107 0314 	add.w	r3, r7, #20
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4819      	ldr	r0, [pc, #100]	@ (8000fa4 <MX_GPIO_Init+0x10c>)
 8000f3e:	f001 fba7 	bl	8002690 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f42:	2320      	movs	r3, #32
 8000f44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f46:	2301      	movs	r3, #1
 8000f48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	4619      	mov	r1, r3
 8000f58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f5c:	f001 fb98 	bl	8002690 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8000f60:	f44f 7358 	mov.w	r3, #864	@ 0x360
 8000f64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f66:	2301      	movs	r3, #1
 8000f68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f72:	f107 0314 	add.w	r3, r7, #20
 8000f76:	4619      	mov	r1, r3
 8000f78:	480a      	ldr	r0, [pc, #40]	@ (8000fa4 <MX_GPIO_Init+0x10c>)
 8000f7a:	f001 fb89 	bl	8002690 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f7e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f8c:	f107 0314 	add.w	r3, r7, #20
 8000f90:	4619      	mov	r1, r3
 8000f92:	4805      	ldr	r0, [pc, #20]	@ (8000fa8 <MX_GPIO_Init+0x110>)
 8000f94:	f001 fb7c 	bl	8002690 <HAL_GPIO_Init>

}
 8000f98:	bf00      	nop
 8000f9a:	3728      	adds	r7, #40	@ 0x28
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	48000800 	.word	0x48000800
 8000fa8:	48000400 	.word	0x48000400

08000fac <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000fb0:	4b1b      	ldr	r3, [pc, #108]	@ (8001020 <MX_I2C3_Init+0x74>)
 8000fb2:	4a1c      	ldr	r2, [pc, #112]	@ (8001024 <MX_I2C3_Init+0x78>)
 8000fb4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00F12981;
 8000fb6:	4b1a      	ldr	r3, [pc, #104]	@ (8001020 <MX_I2C3_Init+0x74>)
 8000fb8:	4a1b      	ldr	r2, [pc, #108]	@ (8001028 <MX_I2C3_Init+0x7c>)
 8000fba:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000fbc:	4b18      	ldr	r3, [pc, #96]	@ (8001020 <MX_I2C3_Init+0x74>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fc2:	4b17      	ldr	r3, [pc, #92]	@ (8001020 <MX_I2C3_Init+0x74>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fc8:	4b15      	ldr	r3, [pc, #84]	@ (8001020 <MX_I2C3_Init+0x74>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000fce:	4b14      	ldr	r3, [pc, #80]	@ (8001020 <MX_I2C3_Init+0x74>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fd4:	4b12      	ldr	r3, [pc, #72]	@ (8001020 <MX_I2C3_Init+0x74>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fda:	4b11      	ldr	r3, [pc, #68]	@ (8001020 <MX_I2C3_Init+0x74>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fe0:	4b0f      	ldr	r3, [pc, #60]	@ (8001020 <MX_I2C3_Init+0x74>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000fe6:	480e      	ldr	r0, [pc, #56]	@ (8001020 <MX_I2C3_Init+0x74>)
 8000fe8:	f001 fd14 	bl	8002a14 <HAL_I2C_Init>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000ff2:	f000 fbe5 	bl	80017c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	4809      	ldr	r0, [pc, #36]	@ (8001020 <MX_I2C3_Init+0x74>)
 8000ffa:	f002 fb83 	bl	8003704 <HAL_I2CEx_ConfigAnalogFilter>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001004:	f000 fbdc 	bl	80017c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001008:	2100      	movs	r1, #0
 800100a:	4805      	ldr	r0, [pc, #20]	@ (8001020 <MX_I2C3_Init+0x74>)
 800100c:	f002 fbc5 	bl	800379a <HAL_I2CEx_ConfigDigitalFilter>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001016:	f000 fbd3 	bl	80017c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	200001f4 	.word	0x200001f4
 8001024:	40005c00 	.word	0x40005c00
 8001028:	00f12981 	.word	0x00f12981

0800102c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b0ac      	sub	sp, #176	@ 0xb0
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001044:	f107 0314 	add.w	r3, r7, #20
 8001048:	2288      	movs	r2, #136	@ 0x88
 800104a:	2100      	movs	r1, #0
 800104c:	4618      	mov	r0, r3
 800104e:	f009 f9bb 	bl	800a3c8 <memset>
  if(i2cHandle->Instance==I2C3)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a21      	ldr	r2, [pc, #132]	@ (80010dc <HAL_I2C_MspInit+0xb0>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d13b      	bne.n	80010d4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800105c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001060:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001062:	2300      	movs	r3, #0
 8001064:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001066:	f107 0314 	add.w	r3, r7, #20
 800106a:	4618      	mov	r0, r3
 800106c:	f003 fa46 	bl	80044fc <HAL_RCCEx_PeriphCLKConfig>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001076:	f000 fba3 	bl	80017c0 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800107a:	4b19      	ldr	r3, [pc, #100]	@ (80010e0 <HAL_I2C_MspInit+0xb4>)
 800107c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800107e:	4a18      	ldr	r2, [pc, #96]	@ (80010e0 <HAL_I2C_MspInit+0xb4>)
 8001080:	f043 0304 	orr.w	r3, r3, #4
 8001084:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001086:	4b16      	ldr	r3, [pc, #88]	@ (80010e0 <HAL_I2C_MspInit+0xb4>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800108a:	f003 0304 	and.w	r3, r3, #4
 800108e:	613b      	str	r3, [r7, #16]
 8001090:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001092:	2303      	movs	r3, #3
 8001094:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001098:	2312      	movs	r3, #18
 800109a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a4:	2303      	movs	r3, #3
 80010a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80010aa:	2304      	movs	r3, #4
 80010ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010b0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010b4:	4619      	mov	r1, r3
 80010b6:	480b      	ldr	r0, [pc, #44]	@ (80010e4 <HAL_I2C_MspInit+0xb8>)
 80010b8:	f001 faea 	bl	8002690 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80010bc:	4b08      	ldr	r3, [pc, #32]	@ (80010e0 <HAL_I2C_MspInit+0xb4>)
 80010be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010c0:	4a07      	ldr	r2, [pc, #28]	@ (80010e0 <HAL_I2C_MspInit+0xb4>)
 80010c2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80010c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80010c8:	4b05      	ldr	r3, [pc, #20]	@ (80010e0 <HAL_I2C_MspInit+0xb4>)
 80010ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80010d4:	bf00      	nop
 80010d6:	37b0      	adds	r7, #176	@ 0xb0
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40005c00 	.word	0x40005c00
 80010e0:	40021000 	.word	0x40021000
 80010e4:	48000800 	.word	0x48000800

080010e8 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Funkcja do obsługi printf przez UART
int _write(int file, char* ptr, int len){
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	b29a      	uxth	r2, r3
 80010f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010fc:	68b9      	ldr	r1, [r7, #8]
 80010fe:	4804      	ldr	r0, [pc, #16]	@ (8001110 <_write+0x28>)
 8001100:	f005 f96a 	bl	80063d8 <HAL_UART_Transmit>
    return len;
 8001104:	687b      	ldr	r3, [r7, #4]
}
 8001106:	4618      	mov	r0, r3
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20001424 	.word	0x20001424

08001114 <HAL_TIM_PeriodElapsedCallback>:

// Funkcja wywoływana przy przepełnieniu timera
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
    if (htim == &htim6) {
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4a11      	ldr	r2, [pc, #68]	@ (8001164 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d119      	bne.n	8001158 <HAL_TIM_PeriodElapsedCallback+0x44>

        count = __HAL_TIM_GET_COUNTER(&htim2);
 8001124:	4b10      	ldr	r3, [pc, #64]	@ (8001168 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800112a:	4a10      	ldr	r2, [pc, #64]	@ (800116c <HAL_TIM_PeriodElapsedCallback+0x58>)
 800112c:	6013      	str	r3, [r2, #0]
        count1 = __HAL_TIM_GET_COUNTER(&htim3);
 800112e:	4b10      	ldr	r3, [pc, #64]	@ (8001170 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001134:	4a0f      	ldr	r2, [pc, #60]	@ (8001174 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001136:	6013      	str	r3, [r2, #0]

        htim2.Instance->CNT = 0;
 8001138:	4b0b      	ldr	r3, [pc, #44]	@ (8001168 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2200      	movs	r2, #0
 800113e:	625a      	str	r2, [r3, #36]	@ 0x24
        htim3.Instance->CNT = 0;
 8001140:	4b0b      	ldr	r3, [pc, #44]	@ (8001170 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2200      	movs	r2, #0
 8001146:	625a      	str	r2, [r3, #36]	@ 0x24

        // Obliczanie prędkości na podstawie enkoderów
        speed_L = count;   // Dostosuj zgodnie z rozdzielczością enkodera
 8001148:	4b08      	ldr	r3, [pc, #32]	@ (800116c <HAL_TIM_PeriodElapsedCallback+0x58>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a0a      	ldr	r2, [pc, #40]	@ (8001178 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800114e:	6013      	str	r3, [r2, #0]
        speed_R = count1;
 8001150:	4b08      	ldr	r3, [pc, #32]	@ (8001174 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a09      	ldr	r2, [pc, #36]	@ (800117c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001156:	6013      	str	r3, [r2, #0]

        // Tutaj możesz dodać dodatkowe obliczenia prędkości
    }
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	200013d8 	.word	0x200013d8
 8001168:	20001340 	.word	0x20001340
 800116c:	20001250 	.word	0x20001250
 8001170:	2000138c 	.word	0x2000138c
 8001174:	20001254 	.word	0x20001254
 8001178:	20001248 	.word	0x20001248
 800117c:	2000124c 	.word	0x2000124c

08001180 <ProcessReceivedData>:

// Funkcja do przetwarzania danych odebranych przez UART
void ProcessReceivedData(uint8_t* data, uint16_t length)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	460b      	mov	r3, r1
 800118a:	807b      	strh	r3, [r7, #2]
    if (length >= sizeof(float) * 2) {
 800118c:	887b      	ldrh	r3, [r7, #2]
 800118e:	2b07      	cmp	r3, #7
 8001190:	d910      	bls.n	80011b4 <ProcessReceivedData+0x34>
        float targetX, targetY;
        memcpy(&targetX, data, sizeof(float));
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	60fb      	str	r3, [r7, #12]
        memcpy(&targetY, data + sizeof(float), sizeof(float));
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3304      	adds	r3, #4
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	60bb      	str	r3, [r7, #8]
        SetTarget(targetX, targetY);
 80011a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80011a4:	ed97 7a02 	vldr	s14, [r7, #8]
 80011a8:	eef0 0a47 	vmov.f32	s1, s14
 80011ac:	eeb0 0a67 	vmov.f32	s0, s15
 80011b0:	f000 f864 	bl	800127c <SetTarget>
    }
}
 80011b4:	bf00      	nop
 80011b6:	3710      	adds	r7, #16
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <HAL_UART_RxCpltCallback>:

// Callback dla przerwania UART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a07      	ldr	r2, [pc, #28]	@ (80011e8 <HAL_UART_RxCpltCallback+0x2c>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d108      	bne.n	80011e0 <HAL_UART_RxCpltCallback+0x24>
        ProcessReceivedData(uartBuffer, UART_BUFFER_SIZE);
 80011ce:	2140      	movs	r1, #64	@ 0x40
 80011d0:	4806      	ldr	r0, [pc, #24]	@ (80011ec <HAL_UART_RxCpltCallback+0x30>)
 80011d2:	f7ff ffd5 	bl	8001180 <ProcessReceivedData>
        HAL_UART_Receive_IT(&huart2, uartBuffer, UART_BUFFER_SIZE);
 80011d6:	2240      	movs	r2, #64	@ 0x40
 80011d8:	4904      	ldr	r1, [pc, #16]	@ (80011ec <HAL_UART_RxCpltCallback+0x30>)
 80011da:	4805      	ldr	r0, [pc, #20]	@ (80011f0 <HAL_UART_RxCpltCallback+0x34>)
 80011dc:	f005 f986 	bl	80064ec <HAL_UART_Receive_IT>
    }
}
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40004400 	.word	0x40004400
 80011ec:	20001258 	.word	0x20001258
 80011f0:	20001424 	.word	0x20001424

080011f4 <PID_Init>:

// Inicjalizacja regulatora PID
void PID_Init(PID_TypeDef *pid, float Kp, float Ki, float Kd, float setpoint) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6178      	str	r0, [r7, #20]
 80011fc:	ed87 0a04 	vstr	s0, [r7, #16]
 8001200:	edc7 0a03 	vstr	s1, [r7, #12]
 8001204:	ed87 1a02 	vstr	s2, [r7, #8]
 8001208:	edc7 1a01 	vstr	s3, [r7, #4]
    pid->Kp = Kp;
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	601a      	str	r2, [r3, #0]
    pid->Ki = Ki;
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	68fa      	ldr	r2, [r7, #12]
 8001216:	605a      	str	r2, [r3, #4]
    pid->Kd = Kd;
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	68ba      	ldr	r2, [r7, #8]
 800121c:	609a      	str	r2, [r3, #8]
    pid->setpoint = setpoint;
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	60da      	str	r2, [r3, #12]
    pid->prev_error = 0;
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	f04f 0200 	mov.w	r2, #0
 800122a:	611a      	str	r2, [r3, #16]
    pid->integral = 0;
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	f04f 0200 	mov.w	r2, #0
 8001232:	615a      	str	r2, [r3, #20]
    pid->output = 0;
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	f04f 0200 	mov.w	r2, #0
 800123a:	619a      	str	r2, [r3, #24]
    pid->prev_time = HAL_GetTick();
 800123c:	f001 f868 	bl	8002310 <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	61da      	str	r2, [r3, #28]
}
 8001246:	bf00      	nop
 8001248:	3718      	adds	r7, #24
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <Odometry_Init>:
void SetSpeed(PID_TypeDef *pid, float setpoint) {
    pid->setpoint = setpoint;
}

// Inicjalizacja odometrii
void Odometry_Init(Odometry_TypeDef *odom) {
 800124e:	b480      	push	{r7}
 8001250:	b083      	sub	sp, #12
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
    odom->x = 0.0f;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f04f 0200 	mov.w	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
    odom->y = 0.0f;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f04f 0200 	mov.w	r2, #0
 8001264:	605a      	str	r2, [r3, #4]
    odom->theta = 0.0f;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f04f 0200 	mov.w	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
	...

0800127c <SetTarget>:
    odom->x += v * cos(odom->theta) * dt;
    odom->y += v * sin(odom->theta) * dt;
}

// Ustawienie nowego celu
void SetTarget(float x, float y) {
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	ed87 0a01 	vstr	s0, [r7, #4]
 8001286:	edc7 0a00 	vstr	s1, [r7]
    target.x = x;
 800128a:	4a06      	ldr	r2, [pc, #24]	@ (80012a4 <SetTarget+0x28>)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6013      	str	r3, [r2, #0]
    target.y = y;
 8001290:	4a04      	ldr	r2, [pc, #16]	@ (80012a4 <SetTarget+0x28>)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	6053      	str	r3, [r2, #4]
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	200012e8 	.word	0x200012e8

080012a8 <SetMotorDirection>:
    *speed_L_target = linear_speed - (WHEEL_BASE / 2) * angular_speed;
    *speed_R_target = linear_speed + (WHEEL_BASE / 2) * angular_speed;
}

// Ustawienie kierunku obrotu silników
void SetMotorDirection(int direction_L, int direction_R) {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
    if (direction_L == 1) {
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d10b      	bne.n	80012d0 <SetMotorDirection+0x28>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80012b8:	2201      	movs	r2, #1
 80012ba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012be:	4819      	ldr	r0, [pc, #100]	@ (8001324 <SetMotorDirection+0x7c>)
 80012c0:	f001 fb90 	bl	80029e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 80012c4:	2200      	movs	r2, #0
 80012c6:	2120      	movs	r1, #32
 80012c8:	4816      	ldr	r0, [pc, #88]	@ (8001324 <SetMotorDirection+0x7c>)
 80012ca:	f001 fb8b 	bl	80029e4 <HAL_GPIO_WritePin>
 80012ce:	e00a      	b.n	80012e6 <SetMotorDirection+0x3e>
    } else {
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80012d0:	2200      	movs	r2, #0
 80012d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012d6:	4813      	ldr	r0, [pc, #76]	@ (8001324 <SetMotorDirection+0x7c>)
 80012d8:	f001 fb84 	bl	80029e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 80012dc:	2201      	movs	r2, #1
 80012de:	2120      	movs	r1, #32
 80012e0:	4810      	ldr	r0, [pc, #64]	@ (8001324 <SetMotorDirection+0x7c>)
 80012e2:	f001 fb7f 	bl	80029e4 <HAL_GPIO_WritePin>
    }

    if (direction_R == 1) {
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d10b      	bne.n	8001304 <SetMotorDirection+0x5c>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80012ec:	2200      	movs	r2, #0
 80012ee:	2140      	movs	r1, #64	@ 0x40
 80012f0:	480c      	ldr	r0, [pc, #48]	@ (8001324 <SetMotorDirection+0x7c>)
 80012f2:	f001 fb77 	bl	80029e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80012f6:	2201      	movs	r2, #1
 80012f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012fc:	4809      	ldr	r0, [pc, #36]	@ (8001324 <SetMotorDirection+0x7c>)
 80012fe:	f001 fb71 	bl	80029e4 <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
    }
}
 8001302:	e00a      	b.n	800131a <SetMotorDirection+0x72>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8001304:	2201      	movs	r2, #1
 8001306:	2140      	movs	r1, #64	@ 0x40
 8001308:	4806      	ldr	r0, [pc, #24]	@ (8001324 <SetMotorDirection+0x7c>)
 800130a:	f001 fb6b 	bl	80029e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800130e:	2200      	movs	r2, #0
 8001310:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001314:	4803      	ldr	r0, [pc, #12]	@ (8001324 <SetMotorDirection+0x7c>)
 8001316:	f001 fb65 	bl	80029e4 <HAL_GPIO_WritePin>
}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	48000800 	.word	0x48000800

08001328 <main>:
/**
  * @brief  Główna funkcja programu.
  * @retval int
  */
int main(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  // Inicjalizacja zmiennych, struktur, PID itd.
  Odometry_Init(&odom);
 800132e:	4859      	ldr	r0, [pc, #356]	@ (8001494 <main+0x16c>)
 8001330:	f7ff ff8d 	bl	800124e <Odometry_Init>
  PID_Init(&pid_L, 6, 1.5, 0.1, 1);
 8001334:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 8001338:	ed9f 1a57 	vldr	s2, [pc, #348]	@ 8001498 <main+0x170>
 800133c:	eef7 0a08 	vmov.f32	s1, #120	@ 0x3fc00000  1.5
 8001340:	eeb1 0a08 	vmov.f32	s0, #24	@ 0x40c00000  6.0
 8001344:	4855      	ldr	r0, [pc, #340]	@ (800149c <main+0x174>)
 8001346:	f7ff ff55 	bl	80011f4 <PID_Init>
  PID_Init(&pid_R, 6, 1.5, 0.3, 1);
 800134a:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 800134e:	ed9f 1a54 	vldr	s2, [pc, #336]	@ 80014a0 <main+0x178>
 8001352:	eef7 0a08 	vmov.f32	s1, #120	@ 0x3fc00000  1.5
 8001356:	eeb1 0a08 	vmov.f32	s0, #24	@ 0x40c00000  6.0
 800135a:	4852      	ldr	r0, [pc, #328]	@ (80014a4 <main+0x17c>)
 800135c:	f7ff ff4a 	bl	80011f4 <PID_Init>
  SetTarget(0.5f, 0);
 8001360:	eddf 0a51 	vldr	s1, [pc, #324]	@ 80014a8 <main+0x180>
 8001364:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8001368:	f7ff ff88 	bl	800127c <SetTarget>
  /* USER CODE END 1 */

  /* Inicjalizacja MCU --------------------------------------------------------*/

  /* Reset wszystkich peryferiów, inicjalizacja interfejsu Flash i Systicka. */
  HAL_Init();
 800136c:	f000 ff60 	bl	8002230 <HAL_Init>
  /* USER CODE BEGIN Init */
  // Twoja inicjalizacja
  /* USER CODE END Init */

  /* Konfiguracja zegara systemowego */
  SystemClock_Config();
 8001370:	f000 f8ba 	bl	80014e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  // Dodatkowa konfiguracja systemu, jeśli potrzebna
  /* USER CODE END SysInit */

  /* Inicjalizacja wszystkich skonfigurowanych peryferiów */
  MX_GPIO_Init();
 8001374:	f7ff fd90 	bl	8000e98 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001378:	f000 fe9c 	bl	80020b4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800137c:	f000 fc2c 	bl	8001bd8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001380:	f000 fcc6 	bl	8001d10 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001384:	f000 fd18 	bl	8001db8 <MX_TIM3_Init>
  MX_TIM6_Init();
 8001388:	f000 fd6c 	bl	8001e64 <MX_TIM6_Init>
  MX_I2C3_Init(); // Upewnij się, że używasz odpowiedniego I2C
 800138c:	f7ff fe0e 	bl	8000fac <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart2, uartBuffer, UART_BUFFER_SIZE);
 8001390:	2240      	movs	r2, #64	@ 0x40
 8001392:	4946      	ldr	r1, [pc, #280]	@ (80014ac <main+0x184>)
 8001394:	4846      	ldr	r0, [pc, #280]	@ (80014b0 <main+0x188>)
 8001396:	f005 f8a9 	bl	80064ec <HAL_UART_Receive_IT>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800139a:	2100      	movs	r1, #0
 800139c:	4845      	ldr	r0, [pc, #276]	@ (80014b4 <main+0x18c>)
 800139e:	f003 fe89 	bl	80050b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80013a2:	2104      	movs	r1, #4
 80013a4:	4843      	ldr	r0, [pc, #268]	@ (80014b4 <main+0x18c>)
 80013a6:	f003 fe85 	bl	80050b4 <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80013aa:	213c      	movs	r1, #60	@ 0x3c
 80013ac:	4842      	ldr	r0, [pc, #264]	@ (80014b8 <main+0x190>)
 80013ae:	f004 f82d 	bl	800540c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80013b2:	213c      	movs	r1, #60	@ 0x3c
 80013b4:	4841      	ldr	r0, [pc, #260]	@ (80014bc <main+0x194>)
 80013b6:	f004 f829 	bl	800540c <HAL_TIM_Encoder_Start>

  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 200);
 80013ba:	4b3e      	ldr	r3, [pc, #248]	@ (80014b4 <main+0x18c>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	22c8      	movs	r2, #200	@ 0xc8
 80013c0:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 200);
 80013c2:	4b3c      	ldr	r3, [pc, #240]	@ (80014b4 <main+0x18c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	22c8      	movs	r2, #200	@ 0xc8
 80013c8:	639a      	str	r2, [r3, #56]	@ 0x38

  HAL_TIM_Base_Start_IT(&htim6);
 80013ca:	483d      	ldr	r0, [pc, #244]	@ (80014c0 <main+0x198>)
 80013cc:	f003 fdaa 	bl	8004f24 <HAL_TIM_Base_Start_IT>

  // Skanowanie urządzeń I2C
  Scan_I2C_Devices();
 80013d0:	f000 f9c0 	bl	8001754 <Scan_I2C_Devices>

  // Inicjalizacja czujnika
  Initialize_Sensor();
 80013d4:	f000 f932 	bl	800163c <Initialize_Sensor>

  // Start pomiarów z czujnika
  printf("Rozpoczynanie pomiarów...\r\n");
 80013d8:	483a      	ldr	r0, [pc, #232]	@ (80014c4 <main+0x19c>)
 80013da:	f008 ffed 	bl	800a3b8 <puts>
  int status = vl53l5cx_start_ranging(&dev);
 80013de:	483a      	ldr	r0, [pc, #232]	@ (80014c8 <main+0x1a0>)
 80013e0:	f007 fbf6 	bl	8008bd0 <vl53l5cx_start_ranging>
 80013e4:	4603      	mov	r3, r0
 80013e6:	60bb      	str	r3, [r7, #8]
  if (status == VL53L5CX_STATUS_OK) {
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d103      	bne.n	80013f6 <main+0xce>
      printf("Pomiary rozpoczęte pomyślnie\r\n");
 80013ee:	4837      	ldr	r0, [pc, #220]	@ (80014cc <main+0x1a4>)
 80013f0:	f008 ffe2 	bl	800a3b8 <puts>
 80013f4:	e003      	b.n	80013fe <main+0xd6>
  } else {
      printf("Błąd rozpoczynania pomiarów, kod błędu: %d\r\n", status);
 80013f6:	68b9      	ldr	r1, [r7, #8]
 80013f8:	4835      	ldr	r0, [pc, #212]	@ (80014d0 <main+0x1a8>)
 80013fa:	f008 ff75 	bl	800a2e8 <iprintf>
  }

  SetMotorDirection(0,0);
 80013fe:	2100      	movs	r1, #0
 8001400:	2000      	movs	r0, #0
 8001402:	f7ff ff51 	bl	80012a8 <SetMotorDirection>

  uint32_t prev_time = HAL_GetTick();
 8001406:	f000 ff83 	bl	8002310 <HAL_GetTick>
 800140a:	60f8      	str	r0, [r7, #12]
  /* Nieskończona pętla */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      // Odczyt danych z czujnika
      uint8_t isReady = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	70fb      	strb	r3, [r7, #3]
      status = vl53l5cx_check_data_ready(&dev, &isReady);
 8001410:	1cfb      	adds	r3, r7, #3
 8001412:	4619      	mov	r1, r3
 8001414:	482c      	ldr	r0, [pc, #176]	@ (80014c8 <main+0x1a0>)
 8001416:	f007 fd55 	bl	8008ec4 <vl53l5cx_check_data_ready>
 800141a:	4603      	mov	r3, r0
 800141c:	60bb      	str	r3, [r7, #8]
      if (status == VL53L5CX_STATUS_OK && isReady) {
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d114      	bne.n	800144e <main+0x126>
 8001424:	78fb      	ldrb	r3, [r7, #3]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d011      	beq.n	800144e <main+0x126>
          status = vl53l5cx_get_ranging_data(&dev, &results);
 800142a:	492a      	ldr	r1, [pc, #168]	@ (80014d4 <main+0x1ac>)
 800142c:	4826      	ldr	r0, [pc, #152]	@ (80014c8 <main+0x1a0>)
 800142e:	f007 fd99 	bl	8008f64 <vl53l5cx_get_ranging_data>
 8001432:	4603      	mov	r3, r0
 8001434:	60bb      	str	r3, [r7, #8]
          if (status == VL53L5CX_STATUS_OK) {
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d103      	bne.n	8001444 <main+0x11c>
              ProcessData(&results);
 800143c:	4825      	ldr	r0, [pc, #148]	@ (80014d4 <main+0x1ac>)
 800143e:	f000 f8a5 	bl	800158c <ProcessData>
          if (status == VL53L5CX_STATUS_OK) {
 8001442:	e007      	b.n	8001454 <main+0x12c>
          } else {
              printf("Błąd odczytu danych z czujnika, kod błędu: %d\r\n", status);
 8001444:	68b9      	ldr	r1, [r7, #8]
 8001446:	4824      	ldr	r0, [pc, #144]	@ (80014d8 <main+0x1b0>)
 8001448:	f008 ff4e 	bl	800a2e8 <iprintf>
          if (status == VL53L5CX_STATUS_OK) {
 800144c:	e002      	b.n	8001454 <main+0x12c>
          }
      } else {
          printf("Czujnik nie ma nowych danych do odczytu\r\n");
 800144e:	4823      	ldr	r0, [pc, #140]	@ (80014dc <main+0x1b4>)
 8001450:	f008 ffb2 	bl	800a3b8 <puts>
      }

      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 200);
 8001454:	4b17      	ldr	r3, [pc, #92]	@ (80014b4 <main+0x18c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	22c8      	movs	r2, #200	@ 0xc8
 800145a:	635a      	str	r2, [r3, #52]	@ 0x34
      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 200);
 800145c:	4b15      	ldr	r3, [pc, #84]	@ (80014b4 <main+0x18c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	22c8      	movs	r2, #200	@ 0xc8
 8001462:	639a      	str	r2, [r3, #56]	@ 0x38


      // Aktualizacja odometrii
      uint32_t current_time = HAL_GetTick();
 8001464:	f000 ff54 	bl	8002310 <HAL_GetTick>
 8001468:	6078      	str	r0, [r7, #4]
      dt = (current_time - prev_time) / 1000.0f; // Konwersja ms na s
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	ee07 3a90 	vmov	s15, r3
 8001474:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001478:	eddf 6a19 	vldr	s13, [pc, #100]	@ 80014e0 <main+0x1b8>
 800147c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001480:	4b18      	ldr	r3, [pc, #96]	@ (80014e4 <main+0x1bc>)
 8001482:	edc3 7a00 	vstr	s15, [r3]
      prev_time = current_time;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	60fb      	str	r3, [r7, #12]
      //__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, (uint32_t)pwm_R);

      // Wysyłanie danych do aplikacji Qt
      //SendDataToQt(&odom, &target, pwm_L, pwm_R, speed_L, speed_R);

      HAL_Delay(3000); // Odpowiedni delay, aby nie przeciążać magistrali I2C
 800148a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800148e:	f000 ff4b 	bl	8002328 <HAL_Delay>
  {
 8001492:	e7bb      	b.n	800140c <main+0xe4>
 8001494:	200012dc 	.word	0x200012dc
 8001498:	3dcccccd 	.word	0x3dcccccd
 800149c:	2000129c 	.word	0x2000129c
 80014a0:	3e99999a 	.word	0x3e99999a
 80014a4:	200012bc 	.word	0x200012bc
 80014a8:	00000000 	.word	0x00000000
 80014ac:	20001258 	.word	0x20001258
 80014b0:	20001424 	.word	0x20001424
 80014b4:	200012f4 	.word	0x200012f4
 80014b8:	20001340 	.word	0x20001340
 80014bc:	2000138c 	.word	0x2000138c
 80014c0:	200013d8 	.word	0x200013d8
 80014c4:	0800c628 	.word	0x0800c628
 80014c8:	20000248 	.word	0x20000248
 80014cc:	0800c644 	.word	0x0800c644
 80014d0:	0800c664 	.word	0x0800c664
 80014d4:	20000cf8 	.word	0x20000cf8
 80014d8:	0800c698 	.word	0x0800c698
 80014dc:	0800c6cc 	.word	0x0800c6cc
 80014e0:	447a0000 	.word	0x447a0000
 80014e4:	20001298 	.word	0x20001298

080014e8 <SystemClock_Config>:
/**
  * @brief Konfiguracja zegara systemowego
  * @retval None
  */
void SystemClock_Config(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b096      	sub	sp, #88	@ 0x58
 80014ec:	af00      	add	r7, sp, #0
  // Konfiguracja zegara systemowego
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ee:	f107 0314 	add.w	r3, r7, #20
 80014f2:	2244      	movs	r2, #68	@ 0x44
 80014f4:	2100      	movs	r1, #0
 80014f6:	4618      	mov	r0, r3
 80014f8:	f008 ff66 	bl	800a3c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014fc:	463b      	mov	r3, r7
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]
 8001506:	60da      	str	r2, [r3, #12]
 8001508:	611a      	str	r2, [r3, #16]

  /** Konfiguracja głównego regulatora napięcia wewnętrznego */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800150a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800150e:	f002 f99f 	bl	8003850 <HAL_PWREx_ControlVoltageScaling>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001518:	f000 f952 	bl	80017c0 <Error_Handler>
  }

  /** Inicjalizacja oscylatorów RCC zgodnie ze specyfikowanymi parametrami */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800151c:	2302      	movs	r3, #2
 800151e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001520:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001524:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001526:	2310      	movs	r3, #16
 8001528:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800152a:	2302      	movs	r3, #2
 800152c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800152e:	2302      	movs	r3, #2
 8001530:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001532:	2301      	movs	r3, #1
 8001534:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001536:	230a      	movs	r3, #10
 8001538:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800153a:	2307      	movs	r3, #7
 800153c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800153e:	2302      	movs	r3, #2
 8001540:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001542:	2302      	movs	r3, #2
 8001544:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001546:	f107 0314 	add.w	r3, r7, #20
 800154a:	4618      	mov	r0, r3
 800154c:	f002 f9d6 	bl	80038fc <HAL_RCC_OscConfig>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001556:	f000 f933 	bl	80017c0 <Error_Handler>
  }

  /** Inicjalizacja zegarów CPU, AHB i APB */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800155a:	230f      	movs	r3, #15
 800155c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800155e:	2303      	movs	r3, #3
 8001560:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001562:	2300      	movs	r3, #0
 8001564:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800156a:	2300      	movs	r3, #0
 800156c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800156e:	463b      	mov	r3, r7
 8001570:	2104      	movs	r1, #4
 8001572:	4618      	mov	r0, r3
 8001574:	f002 fd9e 	bl	80040b4 <HAL_RCC_ClockConfig>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800157e:	f000 f91f 	bl	80017c0 <Error_Handler>
  }
}
 8001582:	bf00      	nop
 8001584:	3758      	adds	r7, #88	@ 0x58
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <ProcessData>:

/* USER CODE BEGIN 4 */

// Funkcja do przetwarzania danych z czujnika
void ProcessData(VL53L5CX_ResultsData *results) {
 800158c:	b580      	push	{r7, lr}
 800158e:	f5ad 6d82 	sub.w	sp, sp, #1040	@ 0x410
 8001592:	af00      	add	r7, sp, #0
 8001594:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001598:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 800159c:	6018      	str	r0, [r3, #0]
    char buffer[1024];

    for (int i = 0; i < 64; i++) {
 800159e:	2300      	movs	r3, #0
 80015a0:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c
 80015a4:	e026      	b.n	80015f4 <ProcessData+0x68>
        sprintf(buffer, "%d ", results->distance_mm[i]);
 80015a6:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80015aa:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 80015b4:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	4413      	add	r3, r2
 80015bc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80015c0:	461a      	mov	r2, r3
 80015c2:	f107 030c 	add.w	r3, r7, #12
 80015c6:	491a      	ldr	r1, [pc, #104]	@ (8001630 <ProcessData+0xa4>)
 80015c8:	4618      	mov	r0, r3
 80015ca:	f008 fdab 	bl	800a124 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80015ce:	f107 030c 	add.w	r3, r7, #12
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7fe fe4c 	bl	8000270 <strlen>
 80015d8:	4603      	mov	r3, r0
 80015da:	b29a      	uxth	r2, r3
 80015dc:	f107 010c 	add.w	r1, r7, #12
 80015e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015e4:	4813      	ldr	r0, [pc, #76]	@ (8001634 <ProcessData+0xa8>)
 80015e6:	f004 fef7 	bl	80063d8 <HAL_UART_Transmit>
    for (int i = 0; i < 64; i++) {
 80015ea:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 80015ee:	3301      	adds	r3, #1
 80015f0:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c
 80015f4:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 80015f8:	2b3f      	cmp	r3, #63	@ 0x3f
 80015fa:	ddd4      	ble.n	80015a6 <ProcessData+0x1a>
    }

    // Dodanie nowej linii, aby oznaczyć koniec macierzy
    sprintf(buffer, "\n");
 80015fc:	f107 030c 	add.w	r3, r7, #12
 8001600:	490d      	ldr	r1, [pc, #52]	@ (8001638 <ProcessData+0xac>)
 8001602:	4618      	mov	r0, r3
 8001604:	f008 fd8e 	bl	800a124 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001608:	f107 030c 	add.w	r3, r7, #12
 800160c:	4618      	mov	r0, r3
 800160e:	f7fe fe2f 	bl	8000270 <strlen>
 8001612:	4603      	mov	r3, r0
 8001614:	b29a      	uxth	r2, r3
 8001616:	f107 010c 	add.w	r1, r7, #12
 800161a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800161e:	4805      	ldr	r0, [pc, #20]	@ (8001634 <ProcessData+0xa8>)
 8001620:	f004 feda 	bl	80063d8 <HAL_UART_Transmit>
}
 8001624:	bf00      	nop
 8001626:	f507 6782 	add.w	r7, r7, #1040	@ 0x410
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	0800c6f8 	.word	0x0800c6f8
 8001634:	20001424 	.word	0x20001424
 8001638:	0800c6fc 	.word	0x0800c6fc

0800163c <Initialize_Sensor>:


// Funkcja do inicjalizacji czujnika
void Initialize_Sensor(void) {
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
    uint8_t status;
    uint8_t is_alive = 0;
 8001642:	2300      	movs	r3, #0
 8001644:	70bb      	strb	r3, [r7, #2]

    for (int attempts = 0; attempts < 3; attempts++) {
 8001646:	2300      	movs	r3, #0
 8001648:	607b      	str	r3, [r7, #4]
 800164a:	e064      	b.n	8001716 <Initialize_Sensor+0xda>
        printf("Initializing sensor, attempt %d...\r\n", attempts + 1);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3301      	adds	r3, #1
 8001650:	4619      	mov	r1, r3
 8001652:	4835      	ldr	r0, [pc, #212]	@ (8001728 <Initialize_Sensor+0xec>)
 8001654:	f008 fe48 	bl	800a2e8 <iprintf>

        // Reset sensor
        VL53L5CX_Reset_Sensor(&dev.platform);
 8001658:	4834      	ldr	r0, [pc, #208]	@ (800172c <Initialize_Sensor+0xf0>)
 800165a:	f000 f935 	bl	80018c8 <VL53L5CX_Reset_Sensor>

        dev.platform.address = VL53L5CX_DEFAULT_I2C_ADDRESS;
 800165e:	4b33      	ldr	r3, [pc, #204]	@ (800172c <Initialize_Sensor+0xf0>)
 8001660:	2252      	movs	r2, #82	@ 0x52
 8001662:	801a      	strh	r2, [r3, #0]

        // Check if the sensor is alive at the default address
        status = vl53l5cx_is_alive(&dev, &is_alive);
 8001664:	1cbb      	adds	r3, r7, #2
 8001666:	4619      	mov	r1, r3
 8001668:	4830      	ldr	r0, [pc, #192]	@ (800172c <Initialize_Sensor+0xf0>)
 800166a:	f006 fdfb 	bl	8008264 <vl53l5cx_is_alive>
 800166e:	4603      	mov	r3, r0
 8001670:	70fb      	strb	r3, [r7, #3]
        printf("Sensor status (default address): %d, is_alive: %d\r\n", status, is_alive);
 8001672:	78fb      	ldrb	r3, [r7, #3]
 8001674:	78ba      	ldrb	r2, [r7, #2]
 8001676:	4619      	mov	r1, r3
 8001678:	482d      	ldr	r0, [pc, #180]	@ (8001730 <Initialize_Sensor+0xf4>)
 800167a:	f008 fe35 	bl	800a2e8 <iprintf>

        if (status == VL53L5CX_STATUS_OK && is_alive) {
 800167e:	78fb      	ldrb	r3, [r7, #3]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d13b      	bne.n	80016fc <Initialize_Sensor+0xc0>
 8001684:	78bb      	ldrb	r3, [r7, #2]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d038      	beq.n	80016fc <Initialize_Sensor+0xc0>
            // Initialize sensor
            status = vl53l5cx_init(&dev);
 800168a:	4828      	ldr	r0, [pc, #160]	@ (800172c <Initialize_Sensor+0xf0>)
 800168c:	f006 fe34 	bl	80082f8 <vl53l5cx_init>
 8001690:	4603      	mov	r3, r0
 8001692:	70fb      	strb	r3, [r7, #3]
            if (status == VL53L5CX_STATUS_OK) {
 8001694:	78fb      	ldrb	r3, [r7, #3]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d12a      	bne.n	80016f0 <Initialize_Sensor+0xb4>
                printf("Sensor initialized with address 0x%02X\r\n", sensor_address);
 800169a:	4b26      	ldr	r3, [pc, #152]	@ (8001734 <Initialize_Sensor+0xf8>)
 800169c:	881b      	ldrh	r3, [r3, #0]
 800169e:	4619      	mov	r1, r3
 80016a0:	4825      	ldr	r0, [pc, #148]	@ (8001738 <Initialize_Sensor+0xfc>)
 80016a2:	f008 fe21 	bl	800a2e8 <iprintf>

                // Set resolution to 8x8
                status = vl53l5cx_set_resolution(&dev, VL53L5CX_RESOLUTION_8X8);
 80016a6:	2140      	movs	r1, #64	@ 0x40
 80016a8:	4820      	ldr	r0, [pc, #128]	@ (800172c <Initialize_Sensor+0xf0>)
 80016aa:	f007 fe9a 	bl	80093e2 <vl53l5cx_set_resolution>
 80016ae:	4603      	mov	r3, r0
 80016b0:	70fb      	strb	r3, [r7, #3]
                if (status != VL53L5CX_STATUS_OK) {
 80016b2:	78fb      	ldrb	r3, [r7, #3]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d005      	beq.n	80016c4 <Initialize_Sensor+0x88>
                    printf("Failed to set resolution to 8x8, error code: %d\r\n", status);
 80016b8:	78fb      	ldrb	r3, [r7, #3]
 80016ba:	4619      	mov	r1, r3
 80016bc:	481f      	ldr	r0, [pc, #124]	@ (800173c <Initialize_Sensor+0x100>)
 80016be:	f008 fe13 	bl	800a2e8 <iprintf>
                    continue; // Try again
 80016c2:	e025      	b.n	8001710 <Initialize_Sensor+0xd4>
                } else {
                    printf("Resolution set to 8x8 successfully\r\n");
 80016c4:	481e      	ldr	r0, [pc, #120]	@ (8001740 <Initialize_Sensor+0x104>)
 80016c6:	f008 fe77 	bl	800a3b8 <puts>
                }


                // Set ranging frequency to 15Hz (max for 8x8)
                status = vl53l5cx_set_ranging_frequency_hz(&dev, 15);
 80016ca:	210f      	movs	r1, #15
 80016cc:	4817      	ldr	r0, [pc, #92]	@ (800172c <Initialize_Sensor+0xf0>)
 80016ce:	f007 ff5c 	bl	800958a <vl53l5cx_set_ranging_frequency_hz>
 80016d2:	4603      	mov	r3, r0
 80016d4:	70fb      	strb	r3, [r7, #3]
                if (status != VL53L5CX_STATUS_OK) {
 80016d6:	78fb      	ldrb	r3, [r7, #3]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d005      	beq.n	80016e8 <Initialize_Sensor+0xac>
                    printf("Failed to set ranging frequency to 15Hz, error code: %d\r\n", status);
 80016dc:	78fb      	ldrb	r3, [r7, #3]
 80016de:	4619      	mov	r1, r3
 80016e0:	4818      	ldr	r0, [pc, #96]	@ (8001744 <Initialize_Sensor+0x108>)
 80016e2:	f008 fe01 	bl	800a2e8 <iprintf>
                    continue; // Try again
 80016e6:	e013      	b.n	8001710 <Initialize_Sensor+0xd4>
                } else {
                    printf("Ranging frequency set to 15Hz successfully\r\n");
 80016e8:	4817      	ldr	r0, [pc, #92]	@ (8001748 <Initialize_Sensor+0x10c>)
 80016ea:	f008 fe65 	bl	800a3b8 <puts>
                }

                // Initialization successful
                break;
 80016ee:	e016      	b.n	800171e <Initialize_Sensor+0xe2>
            } else {
                printf("Sensor initialization error, error code: %d\r\n", status);
 80016f0:	78fb      	ldrb	r3, [r7, #3]
 80016f2:	4619      	mov	r1, r3
 80016f4:	4815      	ldr	r0, [pc, #84]	@ (800174c <Initialize_Sensor+0x110>)
 80016f6:	f008 fdf7 	bl	800a2e8 <iprintf>
            if (status == VL53L5CX_STATUS_OK) {
 80016fa:	e005      	b.n	8001708 <Initialize_Sensor+0xcc>
            }
        } else {
            printf("Sensor not alive at default address, status: %d, is_alive: %d\r\n", status, is_alive);
 80016fc:	78fb      	ldrb	r3, [r7, #3]
 80016fe:	78ba      	ldrb	r2, [r7, #2]
 8001700:	4619      	mov	r1, r3
 8001702:	4813      	ldr	r0, [pc, #76]	@ (8001750 <Initialize_Sensor+0x114>)
 8001704:	f008 fdf0 	bl	800a2e8 <iprintf>
        }

        // Delay before retrying
        HAL_Delay(1000);
 8001708:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800170c:	f000 fe0c 	bl	8002328 <HAL_Delay>
    for (int attempts = 0; attempts < 3; attempts++) {
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	3301      	adds	r3, #1
 8001714:	607b      	str	r3, [r7, #4]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2b02      	cmp	r3, #2
 800171a:	dd97      	ble.n	800164c <Initialize_Sensor+0x10>
    }
}
 800171c:	bf00      	nop
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	0800c700 	.word	0x0800c700
 800172c:	20000248 	.word	0x20000248
 8001730:	0800c728 	.word	0x0800c728
 8001734:	20000000 	.word	0x20000000
 8001738:	0800c75c 	.word	0x0800c75c
 800173c:	0800c788 	.word	0x0800c788
 8001740:	0800c7bc 	.word	0x0800c7bc
 8001744:	0800c7e0 	.word	0x0800c7e0
 8001748:	0800c81c 	.word	0x0800c81c
 800174c:	0800c848 	.word	0x0800c848
 8001750:	0800c878 	.word	0x0800c878

08001754 <Scan_I2C_Devices>:

// Funkcja do skanowania magistrali I2C
void Scan_I2C_Devices() {
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
    printf("Skanowanie urządzeń I2C...\r\n");
 800175a:	4815      	ldr	r0, [pc, #84]	@ (80017b0 <Scan_I2C_Devices+0x5c>)
 800175c:	f008 fe2c 	bl	800a3b8 <puts>
    HAL_StatusTypeDef result;
    uint8_t i;
    for (i = 1; i < 128; i++) {
 8001760:	2301      	movs	r3, #1
 8001762:	71fb      	strb	r3, [r7, #7]
 8001764:	e015      	b.n	8001792 <Scan_I2C_Devices+0x3e>
        result = HAL_I2C_IsDeviceReady(&hi2c3, (uint16_t)(i << 1), 1, 10);
 8001766:	79fb      	ldrb	r3, [r7, #7]
 8001768:	b29b      	uxth	r3, r3
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	b299      	uxth	r1, r3
 800176e:	230a      	movs	r3, #10
 8001770:	2201      	movs	r2, #1
 8001772:	4810      	ldr	r0, [pc, #64]	@ (80017b4 <Scan_I2C_Devices+0x60>)
 8001774:	f001 fc18 	bl	8002fa8 <HAL_I2C_IsDeviceReady>
 8001778:	4603      	mov	r3, r0
 800177a:	71bb      	strb	r3, [r7, #6]
        if (result == HAL_OK) {
 800177c:	79bb      	ldrb	r3, [r7, #6]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d104      	bne.n	800178c <Scan_I2C_Devices+0x38>
            printf("Urządzenie znalezione pod adresem: 0x%02X\r\n", i);
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	4619      	mov	r1, r3
 8001786:	480c      	ldr	r0, [pc, #48]	@ (80017b8 <Scan_I2C_Devices+0x64>)
 8001788:	f008 fdae 	bl	800a2e8 <iprintf>
    for (i = 1; i < 128; i++) {
 800178c:	79fb      	ldrb	r3, [r7, #7]
 800178e:	3301      	adds	r3, #1
 8001790:	71fb      	strb	r3, [r7, #7]
 8001792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001796:	2b00      	cmp	r3, #0
 8001798:	dae5      	bge.n	8001766 <Scan_I2C_Devices+0x12>
        }
    }
    printf("Skanowanie zakończone.\r\n");
 800179a:	4808      	ldr	r0, [pc, #32]	@ (80017bc <Scan_I2C_Devices+0x68>)
 800179c:	f008 fe0c 	bl	800a3b8 <puts>
    HAL_Delay(100);
 80017a0:	2064      	movs	r0, #100	@ 0x64
 80017a2:	f000 fdc1 	bl	8002328 <HAL_Delay>
}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	0800c8b8 	.word	0x0800c8b8
 80017b4:	200001f4 	.word	0x200001f4
 80017b8:	0800c8d8 	.word	0x0800c8d8
 80017bc:	0800c908 	.word	0x0800c908

080017c0 <Error_Handler>:
/**
  * @brief  Ta funkcja jest wywoływana w przypadku wystąpienia błędu.
  * @retval None
  */
void Error_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017c4:	b672      	cpsid	i
}
 80017c6:	bf00      	nop
  // Obsługa błędów
  __disable_irq();
  while (1)
 80017c8:	bf00      	nop
 80017ca:	e7fd      	b.n	80017c8 <Error_Handler+0x8>

080017cc <VL53L5CX_RdByte>:

uint8_t VL53L5CX_RdByte(
    VL53L5CX_Platform *p_platform,
    uint16_t RegisterAddress,
    uint8_t *p_value)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08a      	sub	sp, #40	@ 0x28
 80017d0:	af04      	add	r7, sp, #16
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	460b      	mov	r3, r1
 80017d6:	607a      	str	r2, [r7, #4]
 80017d8:	817b      	strh	r3, [r7, #10]
    uint8_t status;
    status = HAL_I2C_Mem_Read(&hi2c3, p_platform->address, RegisterAddress, I2C_MEMADD_SIZE_16BIT, p_value, 1, I2C_TIMEOUT);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	8819      	ldrh	r1, [r3, #0]
 80017de:	897a      	ldrh	r2, [r7, #10]
 80017e0:	f241 3388 	movw	r3, #5000	@ 0x1388
 80017e4:	9302      	str	r3, [sp, #8]
 80017e6:	2301      	movs	r3, #1
 80017e8:	9301      	str	r3, [sp, #4]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	9300      	str	r3, [sp, #0]
 80017ee:	2302      	movs	r3, #2
 80017f0:	4804      	ldr	r0, [pc, #16]	@ (8001804 <VL53L5CX_RdByte+0x38>)
 80017f2:	f001 fabf 	bl	8002d74 <HAL_I2C_Mem_Read>
 80017f6:	4603      	mov	r3, r0
 80017f8:	75fb      	strb	r3, [r7, #23]
    return status;
 80017fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3718      	adds	r7, #24
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	200001f4 	.word	0x200001f4

08001808 <VL53L5CX_WrByte>:

uint8_t VL53L5CX_WrByte(
    VL53L5CX_Platform *p_platform,
    uint16_t RegisterAddress,
    uint8_t value)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b088      	sub	sp, #32
 800180c:	af04      	add	r7, sp, #16
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	460b      	mov	r3, r1
 8001812:	807b      	strh	r3, [r7, #2]
 8001814:	4613      	mov	r3, r2
 8001816:	707b      	strb	r3, [r7, #1]
    uint8_t status;
    status = HAL_I2C_Mem_Write(&hi2c3, p_platform->address, RegisterAddress, I2C_MEMADD_SIZE_16BIT, &value, 1, I2C_TIMEOUT);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	8819      	ldrh	r1, [r3, #0]
 800181c:	887a      	ldrh	r2, [r7, #2]
 800181e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001822:	9302      	str	r3, [sp, #8]
 8001824:	2301      	movs	r3, #1
 8001826:	9301      	str	r3, [sp, #4]
 8001828:	1c7b      	adds	r3, r7, #1
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	2302      	movs	r3, #2
 800182e:	4805      	ldr	r0, [pc, #20]	@ (8001844 <VL53L5CX_WrByte+0x3c>)
 8001830:	f001 f98c 	bl	8002b4c <HAL_I2C_Mem_Write>
 8001834:	4603      	mov	r3, r0
 8001836:	73fb      	strb	r3, [r7, #15]
    return status;
 8001838:	7bfb      	ldrb	r3, [r7, #15]
}
 800183a:	4618      	mov	r0, r3
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	200001f4 	.word	0x200001f4

08001848 <VL53L5CX_WrMulti>:
uint8_t VL53L5CX_WrMulti(
    VL53L5CX_Platform *p_platform,
    uint16_t RegisterAddress,
    uint8_t *p_values,
    uint32_t size)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08a      	sub	sp, #40	@ 0x28
 800184c:	af04      	add	r7, sp, #16
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	607a      	str	r2, [r7, #4]
 8001852:	603b      	str	r3, [r7, #0]
 8001854:	460b      	mov	r3, r1
 8001856:	817b      	strh	r3, [r7, #10]
    uint8_t status;
    status = HAL_I2C_Mem_Write(&hi2c3, p_platform->address, RegisterAddress, I2C_MEMADD_SIZE_16BIT, p_values, size, I2C_TIMEOUT);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	8819      	ldrh	r1, [r3, #0]
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	b29b      	uxth	r3, r3
 8001860:	897a      	ldrh	r2, [r7, #10]
 8001862:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001866:	9002      	str	r0, [sp, #8]
 8001868:	9301      	str	r3, [sp, #4]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	2302      	movs	r3, #2
 8001870:	4804      	ldr	r0, [pc, #16]	@ (8001884 <VL53L5CX_WrMulti+0x3c>)
 8001872:	f001 f96b 	bl	8002b4c <HAL_I2C_Mem_Write>
 8001876:	4603      	mov	r3, r0
 8001878:	75fb      	strb	r3, [r7, #23]
    return status;
 800187a:	7dfb      	ldrb	r3, [r7, #23]
}
 800187c:	4618      	mov	r0, r3
 800187e:	3718      	adds	r7, #24
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	200001f4 	.word	0x200001f4

08001888 <VL53L5CX_RdMulti>:
uint8_t VL53L5CX_RdMulti(
    VL53L5CX_Platform *p_platform,
    uint16_t RegisterAddress,
    uint8_t *p_values,
    uint32_t size)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b08a      	sub	sp, #40	@ 0x28
 800188c:	af04      	add	r7, sp, #16
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	607a      	str	r2, [r7, #4]
 8001892:	603b      	str	r3, [r7, #0]
 8001894:	460b      	mov	r3, r1
 8001896:	817b      	strh	r3, [r7, #10]
    uint8_t status;
    status = HAL_I2C_Mem_Read(&hi2c3, p_platform->address, RegisterAddress, I2C_MEMADD_SIZE_16BIT, p_values, size, I2C_TIMEOUT);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	8819      	ldrh	r1, [r3, #0]
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	b29b      	uxth	r3, r3
 80018a0:	897a      	ldrh	r2, [r7, #10]
 80018a2:	f241 3088 	movw	r0, #5000	@ 0x1388
 80018a6:	9002      	str	r0, [sp, #8]
 80018a8:	9301      	str	r3, [sp, #4]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	2302      	movs	r3, #2
 80018b0:	4804      	ldr	r0, [pc, #16]	@ (80018c4 <VL53L5CX_RdMulti+0x3c>)
 80018b2:	f001 fa5f 	bl	8002d74 <HAL_I2C_Mem_Read>
 80018b6:	4603      	mov	r3, r0
 80018b8:	75fb      	strb	r3, [r7, #23]
    return status;
 80018ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3718      	adds	r7, #24
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	200001f4 	.word	0x200001f4

080018c8 <VL53L5CX_Reset_Sensor>:

uint8_t VL53L5CX_Reset_Sensor(VL53L5CX_Platform *p_platform)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
    /* Ustawienie pinu resetu czujnika */
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80018d0:	2200      	movs	r2, #0
 80018d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018d6:	480b      	ldr	r0, [pc, #44]	@ (8001904 <VL53L5CX_Reset_Sensor+0x3c>)
 80018d8:	f001 f884 	bl	80029e4 <HAL_GPIO_WritePin>
    VL53L5CX_WaitMs(p_platform, 100);
 80018dc:	2164      	movs	r1, #100	@ 0x64
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f000 f848 	bl	8001974 <VL53L5CX_WaitMs>

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80018e4:	2201      	movs	r2, #1
 80018e6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018ea:	4806      	ldr	r0, [pc, #24]	@ (8001904 <VL53L5CX_Reset_Sensor+0x3c>)
 80018ec:	f001 f87a 	bl	80029e4 <HAL_GPIO_WritePin>
    VL53L5CX_WaitMs(p_platform, 100);
 80018f0:	2164      	movs	r1, #100	@ 0x64
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f000 f83e 	bl	8001974 <VL53L5CX_WaitMs>

    return 0;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	48000800 	.word	0x48000800

08001908 <VL53L5CX_SwapBuffer>:

void VL53L5CX_SwapBuffer(
    uint8_t         *buffer,
    uint16_t          size)
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	460b      	mov	r3, r1
 8001912:	807b      	strh	r3, [r7, #2]
    uint32_t i, tmp;

    /* Przykład implementacji z użyciem <string.h> */
    for(i = 0; i < size; i = i + 4)
 8001914:	2300      	movs	r3, #0
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	e021      	b.n	800195e <VL53L5CX_SwapBuffer+0x56>
    {
        tmp = (
          buffer[i]<<24)
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	4413      	add	r3, r2
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	061a      	lsls	r2, r3, #24
        |(buffer[i+1]<<16)
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	3301      	adds	r3, #1
 8001928:	6879      	ldr	r1, [r7, #4]
 800192a:	440b      	add	r3, r1
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	041b      	lsls	r3, r3, #16
 8001930:	431a      	orrs	r2, r3
        |(buffer[i+2]<<8)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	3302      	adds	r3, #2
 8001936:	6879      	ldr	r1, [r7, #4]
 8001938:	440b      	add	r3, r1
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	021b      	lsls	r3, r3, #8
 800193e:	4313      	orrs	r3, r2
        |(buffer[i+3]);
 8001940:	68fa      	ldr	r2, [r7, #12]
 8001942:	3203      	adds	r2, #3
 8001944:	6879      	ldr	r1, [r7, #4]
 8001946:	440a      	add	r2, r1
 8001948:	7812      	ldrb	r2, [r2, #0]
 800194a:	4313      	orrs	r3, r2
        tmp = (
 800194c:	60bb      	str	r3, [r7, #8]

        memcpy(&(buffer[i]), &tmp, 4);
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	4413      	add	r3, r2
 8001954:	68ba      	ldr	r2, [r7, #8]
 8001956:	601a      	str	r2, [r3, #0]
    for(i = 0; i < size; i = i + 4)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	3304      	adds	r3, #4
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	887b      	ldrh	r3, [r7, #2]
 8001960:	68fa      	ldr	r2, [r7, #12]
 8001962:	429a      	cmp	r2, r3
 8001964:	d3d9      	bcc.n	800191a <VL53L5CX_SwapBuffer+0x12>
    }
}
 8001966:	bf00      	nop
 8001968:	bf00      	nop
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <VL53L5CX_WaitMs>:

uint8_t VL53L5CX_WaitMs(
    VL53L5CX_Platform *p_platform,
    uint32_t TimeMs)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
    HAL_Delay(TimeMs);
 800197e:	6838      	ldr	r0, [r7, #0]
 8001980:	f000 fcd2 	bl	8002328 <HAL_Delay>
    return 0;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
	...

08001990 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001996:	4b0f      	ldr	r3, [pc, #60]	@ (80019d4 <HAL_MspInit+0x44>)
 8001998:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800199a:	4a0e      	ldr	r2, [pc, #56]	@ (80019d4 <HAL_MspInit+0x44>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80019a2:	4b0c      	ldr	r3, [pc, #48]	@ (80019d4 <HAL_MspInit+0x44>)
 80019a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	607b      	str	r3, [r7, #4]
 80019ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ae:	4b09      	ldr	r3, [pc, #36]	@ (80019d4 <HAL_MspInit+0x44>)
 80019b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019b2:	4a08      	ldr	r2, [pc, #32]	@ (80019d4 <HAL_MspInit+0x44>)
 80019b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80019ba:	4b06      	ldr	r3, [pc, #24]	@ (80019d4 <HAL_MspInit+0x44>)
 80019bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019c2:	603b      	str	r3, [r7, #0]
 80019c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	40021000 	.word	0x40021000

080019d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019dc:	bf00      	nop
 80019de:	e7fd      	b.n	80019dc <NMI_Handler+0x4>

080019e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019e4:	bf00      	nop
 80019e6:	e7fd      	b.n	80019e4 <HardFault_Handler+0x4>

080019e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019ec:	bf00      	nop
 80019ee:	e7fd      	b.n	80019ec <MemManage_Handler+0x4>

080019f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019f4:	bf00      	nop
 80019f6:	e7fd      	b.n	80019f4 <BusFault_Handler+0x4>

080019f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019fc:	bf00      	nop
 80019fe:	e7fd      	b.n	80019fc <UsageFault_Handler+0x4>

08001a00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a04:	bf00      	nop
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a2e:	f000 fc5b 	bl	80022e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
	...

08001a38 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a3c:	4802      	ldr	r0, [pc, #8]	@ (8001a48 <USART2_IRQHandler+0x10>)
 8001a3e:	f004 fda1 	bl	8006584 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20001424 	.word	0x20001424

08001a4c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a50:	4802      	ldr	r0, [pc, #8]	@ (8001a5c <TIM6_DAC_IRQHandler+0x10>)
 8001a52:	f003 fd69 	bl	8005528 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	200013d8 	.word	0x200013d8

08001a60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  return 1;
 8001a64:	2301      	movs	r3, #1
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <_kill>:

int _kill(int pid, int sig)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a7a:	f008 fcb1 	bl	800a3e0 <__errno>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2216      	movs	r2, #22
 8001a82:	601a      	str	r2, [r3, #0]
  return -1;
 8001a84:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <_exit>:

void _exit (int status)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a98:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f7ff ffe7 	bl	8001a70 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001aa2:	bf00      	nop
 8001aa4:	e7fd      	b.n	8001aa2 <_exit+0x12>

08001aa6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b086      	sub	sp, #24
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	60f8      	str	r0, [r7, #12]
 8001aae:	60b9      	str	r1, [r7, #8]
 8001ab0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	617b      	str	r3, [r7, #20]
 8001ab6:	e00a      	b.n	8001ace <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ab8:	f3af 8000 	nop.w
 8001abc:	4601      	mov	r1, r0
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	1c5a      	adds	r2, r3, #1
 8001ac2:	60ba      	str	r2, [r7, #8]
 8001ac4:	b2ca      	uxtb	r2, r1
 8001ac6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	3301      	adds	r3, #1
 8001acc:	617b      	str	r3, [r7, #20]
 8001ace:	697a      	ldr	r2, [r7, #20]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	dbf0      	blt.n	8001ab8 <_read+0x12>
  }

  return len;
 8001ad6:	687b      	ldr	r3, [r7, #4]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3718      	adds	r7, #24
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ae8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b08:	605a      	str	r2, [r3, #4]
  return 0;
 8001b0a:	2300      	movs	r3, #0
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <_isatty>:

int _isatty(int file)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b20:	2301      	movs	r3, #1
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b085      	sub	sp, #20
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	60f8      	str	r0, [r7, #12]
 8001b36:	60b9      	str	r1, [r7, #8]
 8001b38:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3714      	adds	r7, #20
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b50:	4a14      	ldr	r2, [pc, #80]	@ (8001ba4 <_sbrk+0x5c>)
 8001b52:	4b15      	ldr	r3, [pc, #84]	@ (8001ba8 <_sbrk+0x60>)
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b5c:	4b13      	ldr	r3, [pc, #76]	@ (8001bac <_sbrk+0x64>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d102      	bne.n	8001b6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b64:	4b11      	ldr	r3, [pc, #68]	@ (8001bac <_sbrk+0x64>)
 8001b66:	4a12      	ldr	r2, [pc, #72]	@ (8001bb0 <_sbrk+0x68>)
 8001b68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b6a:	4b10      	ldr	r3, [pc, #64]	@ (8001bac <_sbrk+0x64>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4413      	add	r3, r2
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d207      	bcs.n	8001b88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b78:	f008 fc32 	bl	800a3e0 <__errno>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	220c      	movs	r2, #12
 8001b80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b86:	e009      	b.n	8001b9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b88:	4b08      	ldr	r3, [pc, #32]	@ (8001bac <_sbrk+0x64>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b8e:	4b07      	ldr	r3, [pc, #28]	@ (8001bac <_sbrk+0x64>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4413      	add	r3, r2
 8001b96:	4a05      	ldr	r2, [pc, #20]	@ (8001bac <_sbrk+0x64>)
 8001b98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3718      	adds	r7, #24
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20018000 	.word	0x20018000
 8001ba8:	00000400 	.word	0x00000400
 8001bac:	200012f0 	.word	0x200012f0
 8001bb0:	20001600 	.word	0x20001600

08001bb4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001bb8:	4b06      	ldr	r3, [pc, #24]	@ (8001bd4 <SystemInit+0x20>)
 8001bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bbe:	4a05      	ldr	r2, [pc, #20]	@ (8001bd4 <SystemInit+0x20>)
 8001bc0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bc4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001bc8:	bf00      	nop
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b096      	sub	sp, #88	@ 0x58
 8001bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bde:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	605a      	str	r2, [r3, #4]
 8001be8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bea:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	605a      	str	r2, [r3, #4]
 8001bf4:	609a      	str	r2, [r3, #8]
 8001bf6:	60da      	str	r2, [r3, #12]
 8001bf8:	611a      	str	r2, [r3, #16]
 8001bfa:	615a      	str	r2, [r3, #20]
 8001bfc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001bfe:	1d3b      	adds	r3, r7, #4
 8001c00:	222c      	movs	r2, #44	@ 0x2c
 8001c02:	2100      	movs	r1, #0
 8001c04:	4618      	mov	r0, r3
 8001c06:	f008 fbdf 	bl	800a3c8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c0a:	4b3f      	ldr	r3, [pc, #252]	@ (8001d08 <MX_TIM1_Init+0x130>)
 8001c0c:	4a3f      	ldr	r2, [pc, #252]	@ (8001d0c <MX_TIM1_Init+0x134>)
 8001c0e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7999;
 8001c10:	4b3d      	ldr	r3, [pc, #244]	@ (8001d08 <MX_TIM1_Init+0x130>)
 8001c12:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001c16:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c18:	4b3b      	ldr	r3, [pc, #236]	@ (8001d08 <MX_TIM1_Init+0x130>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001c1e:	4b3a      	ldr	r3, [pc, #232]	@ (8001d08 <MX_TIM1_Init+0x130>)
 8001c20:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c24:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c26:	4b38      	ldr	r3, [pc, #224]	@ (8001d08 <MX_TIM1_Init+0x130>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c2c:	4b36      	ldr	r3, [pc, #216]	@ (8001d08 <MX_TIM1_Init+0x130>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c32:	4b35      	ldr	r3, [pc, #212]	@ (8001d08 <MX_TIM1_Init+0x130>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c38:	4833      	ldr	r0, [pc, #204]	@ (8001d08 <MX_TIM1_Init+0x130>)
 8001c3a:	f003 f9e3 	bl	8005004 <HAL_TIM_PWM_Init>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8001c44:	f7ff fdbc 	bl	80017c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c50:	2300      	movs	r3, #0
 8001c52:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c54:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001c58:	4619      	mov	r1, r3
 8001c5a:	482b      	ldr	r0, [pc, #172]	@ (8001d08 <MX_TIM1_Init+0x130>)
 8001c5c:	f004 fa4a 	bl	80060f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001c66:	f7ff fdab 	bl	80017c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c6a:	2360      	movs	r3, #96	@ 0x60
 8001c6c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c72:	2300      	movs	r3, #0
 8001c74:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c76:	2300      	movs	r3, #0
 8001c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c82:	2300      	movs	r3, #0
 8001c84:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c86:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	481e      	ldr	r0, [pc, #120]	@ (8001d08 <MX_TIM1_Init+0x130>)
 8001c90:	f003 fd52 	bl	8005738 <HAL_TIM_PWM_ConfigChannel>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001c9a:	f7ff fd91 	bl	80017c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c9e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001ca2:	2204      	movs	r2, #4
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4818      	ldr	r0, [pc, #96]	@ (8001d08 <MX_TIM1_Init+0x130>)
 8001ca8:	f003 fd46 	bl	8005738 <HAL_TIM_PWM_ConfigChannel>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8001cb2:	f7ff fd85 	bl	80017c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001cca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001cd8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001cdc:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ce6:	1d3b      	adds	r3, r7, #4
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4807      	ldr	r0, [pc, #28]	@ (8001d08 <MX_TIM1_Init+0x130>)
 8001cec:	f004 fa8a 	bl	8006204 <HAL_TIMEx_ConfigBreakDeadTime>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_TIM1_Init+0x122>
  {
    Error_Handler();
 8001cf6:	f7ff fd63 	bl	80017c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001cfa:	4803      	ldr	r0, [pc, #12]	@ (8001d08 <MX_TIM1_Init+0x130>)
 8001cfc:	f000 f9a2 	bl	8002044 <HAL_TIM_MspPostInit>

}
 8001d00:	bf00      	nop
 8001d02:	3758      	adds	r7, #88	@ 0x58
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	200012f4 	.word	0x200012f4
 8001d0c:	40012c00 	.word	0x40012c00

08001d10 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08c      	sub	sp, #48	@ 0x30
 8001d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d16:	f107 030c 	add.w	r3, r7, #12
 8001d1a:	2224      	movs	r2, #36	@ 0x24
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f008 fb52 	bl	800a3c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d24:	463b      	mov	r3, r7
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	605a      	str	r2, [r3, #4]
 8001d2c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d2e:	4b21      	ldr	r3, [pc, #132]	@ (8001db4 <MX_TIM2_Init+0xa4>)
 8001d30:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d34:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d36:	4b1f      	ldr	r3, [pc, #124]	@ (8001db4 <MX_TIM2_Init+0xa4>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d3c:	4b1d      	ldr	r3, [pc, #116]	@ (8001db4 <MX_TIM2_Init+0xa4>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001d42:	4b1c      	ldr	r3, [pc, #112]	@ (8001db4 <MX_TIM2_Init+0xa4>)
 8001d44:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d48:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d4a:	4b1a      	ldr	r3, [pc, #104]	@ (8001db4 <MX_TIM2_Init+0xa4>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d50:	4b18      	ldr	r3, [pc, #96]	@ (8001db4 <MX_TIM2_Init+0xa4>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d56:	2303      	movs	r3, #3
 8001d58:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d62:	2300      	movs	r3, #0
 8001d64:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001d66:	230f      	movs	r3, #15
 8001d68:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d72:	2300      	movs	r3, #0
 8001d74:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001d76:	2300      	movs	r3, #0
 8001d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001d7a:	f107 030c 	add.w	r3, r7, #12
 8001d7e:	4619      	mov	r1, r3
 8001d80:	480c      	ldr	r0, [pc, #48]	@ (8001db4 <MX_TIM2_Init+0xa4>)
 8001d82:	f003 fa9d 	bl	80052c0 <HAL_TIM_Encoder_Init>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001d8c:	f7ff fd18 	bl	80017c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d90:	2300      	movs	r3, #0
 8001d92:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d94:	2300      	movs	r3, #0
 8001d96:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d98:	463b      	mov	r3, r7
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4805      	ldr	r0, [pc, #20]	@ (8001db4 <MX_TIM2_Init+0xa4>)
 8001d9e:	f004 f9a9 	bl	80060f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001da8:	f7ff fd0a 	bl	80017c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001dac:	bf00      	nop
 8001dae:	3730      	adds	r7, #48	@ 0x30
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	20001340 	.word	0x20001340

08001db8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b08c      	sub	sp, #48	@ 0x30
 8001dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001dbe:	f107 030c 	add.w	r3, r7, #12
 8001dc2:	2224      	movs	r2, #36	@ 0x24
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f008 fafe 	bl	800a3c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dcc:	463b      	mov	r3, r7
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	605a      	str	r2, [r3, #4]
 8001dd4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001dd6:	4b21      	ldr	r3, [pc, #132]	@ (8001e5c <MX_TIM3_Init+0xa4>)
 8001dd8:	4a21      	ldr	r2, [pc, #132]	@ (8001e60 <MX_TIM3_Init+0xa8>)
 8001dda:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ddc:	4b1f      	ldr	r3, [pc, #124]	@ (8001e5c <MX_TIM3_Init+0xa4>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001de2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e5c <MX_TIM3_Init+0xa4>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001de8:	4b1c      	ldr	r3, [pc, #112]	@ (8001e5c <MX_TIM3_Init+0xa4>)
 8001dea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001dee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001df0:	4b1a      	ldr	r3, [pc, #104]	@ (8001e5c <MX_TIM3_Init+0xa4>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001df6:	4b19      	ldr	r3, [pc, #100]	@ (8001e5c <MX_TIM3_Init+0xa4>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e00:	2300      	movs	r3, #0
 8001e02:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e04:	2301      	movs	r3, #1
 8001e06:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001e0c:	230f      	movs	r3, #15
 8001e0e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e10:	2300      	movs	r3, #0
 8001e12:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e14:	2301      	movs	r3, #1
 8001e16:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001e20:	f107 030c 	add.w	r3, r7, #12
 8001e24:	4619      	mov	r1, r3
 8001e26:	480d      	ldr	r0, [pc, #52]	@ (8001e5c <MX_TIM3_Init+0xa4>)
 8001e28:	f003 fa4a 	bl	80052c0 <HAL_TIM_Encoder_Init>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001e32:	f7ff fcc5 	bl	80017c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e36:	2300      	movs	r3, #0
 8001e38:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e3e:	463b      	mov	r3, r7
 8001e40:	4619      	mov	r1, r3
 8001e42:	4806      	ldr	r0, [pc, #24]	@ (8001e5c <MX_TIM3_Init+0xa4>)
 8001e44:	f004 f956 	bl	80060f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001e4e:	f7ff fcb7 	bl	80017c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001e52:	bf00      	nop
 8001e54:	3730      	adds	r7, #48	@ 0x30
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	2000138c 	.word	0x2000138c
 8001e60:	40000400 	.word	0x40000400

08001e64 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e6a:	1d3b      	adds	r3, r7, #4
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	605a      	str	r2, [r3, #4]
 8001e72:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001e74:	4b15      	ldr	r3, [pc, #84]	@ (8001ecc <MX_TIM6_Init+0x68>)
 8001e76:	4a16      	ldr	r2, [pc, #88]	@ (8001ed0 <MX_TIM6_Init+0x6c>)
 8001e78:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8001e7a:	4b14      	ldr	r3, [pc, #80]	@ (8001ecc <MX_TIM6_Init+0x68>)
 8001e7c:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001e80:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e82:	4b12      	ldr	r3, [pc, #72]	@ (8001ecc <MX_TIM6_Init+0x68>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8001e88:	4b10      	ldr	r3, [pc, #64]	@ (8001ecc <MX_TIM6_Init+0x68>)
 8001e8a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001e8e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e90:	4b0e      	ldr	r3, [pc, #56]	@ (8001ecc <MX_TIM6_Init+0x68>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001e96:	480d      	ldr	r0, [pc, #52]	@ (8001ecc <MX_TIM6_Init+0x68>)
 8001e98:	f002 ffec 	bl	8004e74 <HAL_TIM_Base_Init>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001ea2:	f7ff fc8d 	bl	80017c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001eae:	1d3b      	adds	r3, r7, #4
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4806      	ldr	r0, [pc, #24]	@ (8001ecc <MX_TIM6_Init+0x68>)
 8001eb4:	f004 f91e 	bl	80060f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001ebe:	f7ff fc7f 	bl	80017c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001ec2:	bf00      	nop
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	200013d8 	.word	0x200013d8
 8001ed0:	40001000 	.word	0x40001000

08001ed4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a0a      	ldr	r2, [pc, #40]	@ (8001f0c <HAL_TIM_PWM_MspInit+0x38>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d10b      	bne.n	8001efe <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8001f10 <HAL_TIM_PWM_MspInit+0x3c>)
 8001ee8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eea:	4a09      	ldr	r2, [pc, #36]	@ (8001f10 <HAL_TIM_PWM_MspInit+0x3c>)
 8001eec:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ef0:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ef2:	4b07      	ldr	r3, [pc, #28]	@ (8001f10 <HAL_TIM_PWM_MspInit+0x3c>)
 8001ef4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ef6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001efe:	bf00      	nop
 8001f00:	3714      	adds	r7, #20
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	40012c00 	.word	0x40012c00
 8001f10:	40021000 	.word	0x40021000

08001f14 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b08c      	sub	sp, #48	@ 0x30
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1c:	f107 031c 	add.w	r3, r7, #28
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f34:	d129      	bne.n	8001f8a <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f36:	4b2e      	ldr	r3, [pc, #184]	@ (8001ff0 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f3a:	4a2d      	ldr	r2, [pc, #180]	@ (8001ff0 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001f3c:	f043 0301 	orr.w	r3, r3, #1
 8001f40:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f42:	4b2b      	ldr	r3, [pc, #172]	@ (8001ff0 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	61bb      	str	r3, [r7, #24]
 8001f4c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f4e:	4b28      	ldr	r3, [pc, #160]	@ (8001ff0 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f52:	4a27      	ldr	r2, [pc, #156]	@ (8001ff0 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001f54:	f043 0301 	orr.w	r3, r3, #1
 8001f58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f5a:	4b25      	ldr	r3, [pc, #148]	@ (8001ff0 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	617b      	str	r3, [r7, #20]
 8001f64:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f66:	2303      	movs	r3, #3
 8001f68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f72:	2300      	movs	r3, #0
 8001f74:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f76:	2301      	movs	r3, #1
 8001f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f7a:	f107 031c 	add.w	r3, r7, #28
 8001f7e:	4619      	mov	r1, r3
 8001f80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f84:	f000 fb84 	bl	8002690 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001f88:	e02d      	b.n	8001fe6 <HAL_TIM_Encoder_MspInit+0xd2>
  else if(tim_encoderHandle->Instance==TIM3)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a19      	ldr	r2, [pc, #100]	@ (8001ff4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d128      	bne.n	8001fe6 <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f94:	4b16      	ldr	r3, [pc, #88]	@ (8001ff0 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001f96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f98:	4a15      	ldr	r2, [pc, #84]	@ (8001ff0 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001f9a:	f043 0302 	orr.w	r3, r3, #2
 8001f9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fa0:	4b13      	ldr	r3, [pc, #76]	@ (8001ff0 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001fa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	613b      	str	r3, [r7, #16]
 8001faa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fac:	4b10      	ldr	r3, [pc, #64]	@ (8001ff0 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001fae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fb0:	4a0f      	ldr	r2, [pc, #60]	@ (8001ff0 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001fb2:	f043 0301 	orr.w	r3, r3, #1
 8001fb6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fb8:	4b0d      	ldr	r3, [pc, #52]	@ (8001ff0 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001fba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fc4:	23c0      	movs	r3, #192	@ 0xc0
 8001fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc8:	2302      	movs	r3, #2
 8001fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd8:	f107 031c 	add.w	r3, r7, #28
 8001fdc:	4619      	mov	r1, r3
 8001fde:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fe2:	f000 fb55 	bl	8002690 <HAL_GPIO_Init>
}
 8001fe6:	bf00      	nop
 8001fe8:	3730      	adds	r7, #48	@ 0x30
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	40000400 	.word	0x40000400

08001ff8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a0d      	ldr	r2, [pc, #52]	@ (800203c <HAL_TIM_Base_MspInit+0x44>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d113      	bne.n	8002032 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800200a:	4b0d      	ldr	r3, [pc, #52]	@ (8002040 <HAL_TIM_Base_MspInit+0x48>)
 800200c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800200e:	4a0c      	ldr	r2, [pc, #48]	@ (8002040 <HAL_TIM_Base_MspInit+0x48>)
 8002010:	f043 0310 	orr.w	r3, r3, #16
 8002014:	6593      	str	r3, [r2, #88]	@ 0x58
 8002016:	4b0a      	ldr	r3, [pc, #40]	@ (8002040 <HAL_TIM_Base_MspInit+0x48>)
 8002018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800201a:	f003 0310 	and.w	r3, r3, #16
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002022:	2200      	movs	r2, #0
 8002024:	2100      	movs	r1, #0
 8002026:	2036      	movs	r0, #54	@ 0x36
 8002028:	f000 fa7d 	bl	8002526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800202c:	2036      	movs	r0, #54	@ 0x36
 800202e:	f000 fa96 	bl	800255e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002032:	bf00      	nop
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40001000 	.word	0x40001000
 8002040:	40021000 	.word	0x40021000

08002044 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b088      	sub	sp, #32
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800204c:	f107 030c 	add.w	r3, r7, #12
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	60da      	str	r2, [r3, #12]
 800205a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a12      	ldr	r2, [pc, #72]	@ (80020ac <HAL_TIM_MspPostInit+0x68>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d11d      	bne.n	80020a2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002066:	4b12      	ldr	r3, [pc, #72]	@ (80020b0 <HAL_TIM_MspPostInit+0x6c>)
 8002068:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800206a:	4a11      	ldr	r2, [pc, #68]	@ (80020b0 <HAL_TIM_MspPostInit+0x6c>)
 800206c:	f043 0301 	orr.w	r3, r3, #1
 8002070:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002072:	4b0f      	ldr	r3, [pc, #60]	@ (80020b0 <HAL_TIM_MspPostInit+0x6c>)
 8002074:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	60bb      	str	r3, [r7, #8]
 800207c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800207e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002082:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002084:	2302      	movs	r3, #2
 8002086:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002088:	2300      	movs	r3, #0
 800208a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208c:	2300      	movs	r3, #0
 800208e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002090:	2301      	movs	r3, #1
 8002092:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002094:	f107 030c 	add.w	r3, r7, #12
 8002098:	4619      	mov	r1, r3
 800209a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800209e:	f000 faf7 	bl	8002690 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80020a2:	bf00      	nop
 80020a4:	3720      	adds	r7, #32
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	40012c00 	.word	0x40012c00
 80020b0:	40021000 	.word	0x40021000

080020b4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020b8:	4b14      	ldr	r3, [pc, #80]	@ (800210c <MX_USART2_UART_Init+0x58>)
 80020ba:	4a15      	ldr	r2, [pc, #84]	@ (8002110 <MX_USART2_UART_Init+0x5c>)
 80020bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80020be:	4b13      	ldr	r3, [pc, #76]	@ (800210c <MX_USART2_UART_Init+0x58>)
 80020c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80020c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020c6:	4b11      	ldr	r3, [pc, #68]	@ (800210c <MX_USART2_UART_Init+0x58>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020cc:	4b0f      	ldr	r3, [pc, #60]	@ (800210c <MX_USART2_UART_Init+0x58>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020d2:	4b0e      	ldr	r3, [pc, #56]	@ (800210c <MX_USART2_UART_Init+0x58>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020d8:	4b0c      	ldr	r3, [pc, #48]	@ (800210c <MX_USART2_UART_Init+0x58>)
 80020da:	220c      	movs	r2, #12
 80020dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020de:	4b0b      	ldr	r3, [pc, #44]	@ (800210c <MX_USART2_UART_Init+0x58>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020e4:	4b09      	ldr	r3, [pc, #36]	@ (800210c <MX_USART2_UART_Init+0x58>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020ea:	4b08      	ldr	r3, [pc, #32]	@ (800210c <MX_USART2_UART_Init+0x58>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020f0:	4b06      	ldr	r3, [pc, #24]	@ (800210c <MX_USART2_UART_Init+0x58>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020f6:	4805      	ldr	r0, [pc, #20]	@ (800210c <MX_USART2_UART_Init+0x58>)
 80020f8:	f004 f920 	bl	800633c <HAL_UART_Init>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002102:	f7ff fb5d 	bl	80017c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	20001424 	.word	0x20001424
 8002110:	40004400 	.word	0x40004400

08002114 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b0ac      	sub	sp, #176	@ 0xb0
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800211c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	605a      	str	r2, [r3, #4]
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	60da      	str	r2, [r3, #12]
 800212a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800212c:	f107 0314 	add.w	r3, r7, #20
 8002130:	2288      	movs	r2, #136	@ 0x88
 8002132:	2100      	movs	r1, #0
 8002134:	4618      	mov	r0, r3
 8002136:	f008 f947 	bl	800a3c8 <memset>
  if(uartHandle->Instance==USART2)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a25      	ldr	r2, [pc, #148]	@ (80021d4 <HAL_UART_MspInit+0xc0>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d143      	bne.n	80021cc <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002144:	2302      	movs	r3, #2
 8002146:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002148:	2300      	movs	r3, #0
 800214a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800214c:	f107 0314 	add.w	r3, r7, #20
 8002150:	4618      	mov	r0, r3
 8002152:	f002 f9d3 	bl	80044fc <HAL_RCCEx_PeriphCLKConfig>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800215c:	f7ff fb30 	bl	80017c0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002160:	4b1d      	ldr	r3, [pc, #116]	@ (80021d8 <HAL_UART_MspInit+0xc4>)
 8002162:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002164:	4a1c      	ldr	r2, [pc, #112]	@ (80021d8 <HAL_UART_MspInit+0xc4>)
 8002166:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800216a:	6593      	str	r3, [r2, #88]	@ 0x58
 800216c:	4b1a      	ldr	r3, [pc, #104]	@ (80021d8 <HAL_UART_MspInit+0xc4>)
 800216e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002170:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002174:	613b      	str	r3, [r7, #16]
 8002176:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002178:	4b17      	ldr	r3, [pc, #92]	@ (80021d8 <HAL_UART_MspInit+0xc4>)
 800217a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800217c:	4a16      	ldr	r2, [pc, #88]	@ (80021d8 <HAL_UART_MspInit+0xc4>)
 800217e:	f043 0301 	orr.w	r3, r3, #1
 8002182:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002184:	4b14      	ldr	r3, [pc, #80]	@ (80021d8 <HAL_UART_MspInit+0xc4>)
 8002186:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002190:	230c      	movs	r3, #12
 8002192:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002196:	2302      	movs	r3, #2
 8002198:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219c:	2300      	movs	r3, #0
 800219e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a2:	2303      	movs	r3, #3
 80021a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021a8:	2307      	movs	r3, #7
 80021aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ae:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80021b2:	4619      	mov	r1, r3
 80021b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021b8:	f000 fa6a 	bl	8002690 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80021bc:	2200      	movs	r2, #0
 80021be:	2100      	movs	r1, #0
 80021c0:	2026      	movs	r0, #38	@ 0x26
 80021c2:	f000 f9b0 	bl	8002526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80021c6:	2026      	movs	r0, #38	@ 0x26
 80021c8:	f000 f9c9 	bl	800255e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80021cc:	bf00      	nop
 80021ce:	37b0      	adds	r7, #176	@ 0xb0
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40004400 	.word	0x40004400
 80021d8:	40021000 	.word	0x40021000

080021dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80021dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002214 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80021e0:	f7ff fce8 	bl	8001bb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021e4:	480c      	ldr	r0, [pc, #48]	@ (8002218 <LoopForever+0x6>)
  ldr r1, =_edata
 80021e6:	490d      	ldr	r1, [pc, #52]	@ (800221c <LoopForever+0xa>)
  ldr r2, =_sidata
 80021e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002220 <LoopForever+0xe>)
  movs r3, #0
 80021ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021ec:	e002      	b.n	80021f4 <LoopCopyDataInit>

080021ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021f2:	3304      	adds	r3, #4

080021f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021f8:	d3f9      	bcc.n	80021ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002224 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021fc:	4c0a      	ldr	r4, [pc, #40]	@ (8002228 <LoopForever+0x16>)
  movs r3, #0
 80021fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002200:	e001      	b.n	8002206 <LoopFillZerobss>

08002202 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002202:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002204:	3204      	adds	r2, #4

08002206 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002206:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002208:	d3fb      	bcc.n	8002202 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800220a:	f008 f8ef 	bl	800a3ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800220e:	f7ff f88b 	bl	8001328 <main>

08002212 <LoopForever>:

LoopForever:
    b LoopForever
 8002212:	e7fe      	b.n	8002212 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002214:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002218:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800221c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002220:	08022458 	.word	0x08022458
  ldr r2, =_sbss
 8002224:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002228:	200015fc 	.word	0x200015fc

0800222c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800222c:	e7fe      	b.n	800222c <ADC1_2_IRQHandler>
	...

08002230 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002236:	2300      	movs	r3, #0
 8002238:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800223a:	4b0c      	ldr	r3, [pc, #48]	@ (800226c <HAL_Init+0x3c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a0b      	ldr	r2, [pc, #44]	@ (800226c <HAL_Init+0x3c>)
 8002240:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002244:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002246:	2003      	movs	r0, #3
 8002248:	f000 f962 	bl	8002510 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800224c:	2000      	movs	r0, #0
 800224e:	f000 f80f 	bl	8002270 <HAL_InitTick>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d002      	beq.n	800225e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	71fb      	strb	r3, [r7, #7]
 800225c:	e001      	b.n	8002262 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800225e:	f7ff fb97 	bl	8001990 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002262:	79fb      	ldrb	r3, [r7, #7]
}
 8002264:	4618      	mov	r0, r3
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40022000 	.word	0x40022000

08002270 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002278:	2300      	movs	r3, #0
 800227a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800227c:	4b17      	ldr	r3, [pc, #92]	@ (80022dc <HAL_InitTick+0x6c>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d023      	beq.n	80022cc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002284:	4b16      	ldr	r3, [pc, #88]	@ (80022e0 <HAL_InitTick+0x70>)
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	4b14      	ldr	r3, [pc, #80]	@ (80022dc <HAL_InitTick+0x6c>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	4619      	mov	r1, r3
 800228e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002292:	fbb3 f3f1 	udiv	r3, r3, r1
 8002296:	fbb2 f3f3 	udiv	r3, r2, r3
 800229a:	4618      	mov	r0, r3
 800229c:	f000 f96d 	bl	800257a <HAL_SYSTICK_Config>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d10f      	bne.n	80022c6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2b0f      	cmp	r3, #15
 80022aa:	d809      	bhi.n	80022c0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022ac:	2200      	movs	r2, #0
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80022b4:	f000 f937 	bl	8002526 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022b8:	4a0a      	ldr	r2, [pc, #40]	@ (80022e4 <HAL_InitTick+0x74>)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6013      	str	r3, [r2, #0]
 80022be:	e007      	b.n	80022d0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	73fb      	strb	r3, [r7, #15]
 80022c4:	e004      	b.n	80022d0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	73fb      	strb	r3, [r7, #15]
 80022ca:	e001      	b.n	80022d0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	2000000c 	.word	0x2000000c
 80022e0:	20000004 	.word	0x20000004
 80022e4:	20000008 	.word	0x20000008

080022e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022ec:	4b06      	ldr	r3, [pc, #24]	@ (8002308 <HAL_IncTick+0x20>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	461a      	mov	r2, r3
 80022f2:	4b06      	ldr	r3, [pc, #24]	@ (800230c <HAL_IncTick+0x24>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4413      	add	r3, r2
 80022f8:	4a04      	ldr	r2, [pc, #16]	@ (800230c <HAL_IncTick+0x24>)
 80022fa:	6013      	str	r3, [r2, #0]
}
 80022fc:	bf00      	nop
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	2000000c 	.word	0x2000000c
 800230c:	200014ac 	.word	0x200014ac

08002310 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  return uwTick;
 8002314:	4b03      	ldr	r3, [pc, #12]	@ (8002324 <HAL_GetTick+0x14>)
 8002316:	681b      	ldr	r3, [r3, #0]
}
 8002318:	4618      	mov	r0, r3
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	200014ac 	.word	0x200014ac

08002328 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002330:	f7ff ffee 	bl	8002310 <HAL_GetTick>
 8002334:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002340:	d005      	beq.n	800234e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002342:	4b0a      	ldr	r3, [pc, #40]	@ (800236c <HAL_Delay+0x44>)
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	461a      	mov	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	4413      	add	r3, r2
 800234c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800234e:	bf00      	nop
 8002350:	f7ff ffde 	bl	8002310 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	429a      	cmp	r2, r3
 800235e:	d8f7      	bhi.n	8002350 <HAL_Delay+0x28>
  {
  }
}
 8002360:	bf00      	nop
 8002362:	bf00      	nop
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	2000000c 	.word	0x2000000c

08002370 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002380:	4b0c      	ldr	r3, [pc, #48]	@ (80023b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002386:	68ba      	ldr	r2, [r7, #8]
 8002388:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800238c:	4013      	ands	r3, r2
 800238e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002398:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800239c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023a2:	4a04      	ldr	r2, [pc, #16]	@ (80023b4 <__NVIC_SetPriorityGrouping+0x44>)
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	60d3      	str	r3, [r2, #12]
}
 80023a8:	bf00      	nop
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	e000ed00 	.word	0xe000ed00

080023b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023bc:	4b04      	ldr	r3, [pc, #16]	@ (80023d0 <__NVIC_GetPriorityGrouping+0x18>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	0a1b      	lsrs	r3, r3, #8
 80023c2:	f003 0307 	and.w	r3, r3, #7
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	e000ed00 	.word	0xe000ed00

080023d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	4603      	mov	r3, r0
 80023dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	db0b      	blt.n	80023fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023e6:	79fb      	ldrb	r3, [r7, #7]
 80023e8:	f003 021f 	and.w	r2, r3, #31
 80023ec:	4907      	ldr	r1, [pc, #28]	@ (800240c <__NVIC_EnableIRQ+0x38>)
 80023ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f2:	095b      	lsrs	r3, r3, #5
 80023f4:	2001      	movs	r0, #1
 80023f6:	fa00 f202 	lsl.w	r2, r0, r2
 80023fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023fe:	bf00      	nop
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	e000e100 	.word	0xe000e100

08002410 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	4603      	mov	r3, r0
 8002418:	6039      	str	r1, [r7, #0]
 800241a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800241c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002420:	2b00      	cmp	r3, #0
 8002422:	db0a      	blt.n	800243a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	b2da      	uxtb	r2, r3
 8002428:	490c      	ldr	r1, [pc, #48]	@ (800245c <__NVIC_SetPriority+0x4c>)
 800242a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242e:	0112      	lsls	r2, r2, #4
 8002430:	b2d2      	uxtb	r2, r2
 8002432:	440b      	add	r3, r1
 8002434:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002438:	e00a      	b.n	8002450 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	b2da      	uxtb	r2, r3
 800243e:	4908      	ldr	r1, [pc, #32]	@ (8002460 <__NVIC_SetPriority+0x50>)
 8002440:	79fb      	ldrb	r3, [r7, #7]
 8002442:	f003 030f 	and.w	r3, r3, #15
 8002446:	3b04      	subs	r3, #4
 8002448:	0112      	lsls	r2, r2, #4
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	440b      	add	r3, r1
 800244e:	761a      	strb	r2, [r3, #24]
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	e000e100 	.word	0xe000e100
 8002460:	e000ed00 	.word	0xe000ed00

08002464 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002464:	b480      	push	{r7}
 8002466:	b089      	sub	sp, #36	@ 0x24
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f003 0307 	and.w	r3, r3, #7
 8002476:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	f1c3 0307 	rsb	r3, r3, #7
 800247e:	2b04      	cmp	r3, #4
 8002480:	bf28      	it	cs
 8002482:	2304      	movcs	r3, #4
 8002484:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	3304      	adds	r3, #4
 800248a:	2b06      	cmp	r3, #6
 800248c:	d902      	bls.n	8002494 <NVIC_EncodePriority+0x30>
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	3b03      	subs	r3, #3
 8002492:	e000      	b.n	8002496 <NVIC_EncodePriority+0x32>
 8002494:	2300      	movs	r3, #0
 8002496:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002498:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	43da      	mvns	r2, r3
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	401a      	ands	r2, r3
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024ac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	fa01 f303 	lsl.w	r3, r1, r3
 80024b6:	43d9      	mvns	r1, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024bc:	4313      	orrs	r3, r2
         );
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3724      	adds	r7, #36	@ 0x24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
	...

080024cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3b01      	subs	r3, #1
 80024d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024dc:	d301      	bcc.n	80024e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024de:	2301      	movs	r3, #1
 80024e0:	e00f      	b.n	8002502 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024e2:	4a0a      	ldr	r2, [pc, #40]	@ (800250c <SysTick_Config+0x40>)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	3b01      	subs	r3, #1
 80024e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024ea:	210f      	movs	r1, #15
 80024ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80024f0:	f7ff ff8e 	bl	8002410 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024f4:	4b05      	ldr	r3, [pc, #20]	@ (800250c <SysTick_Config+0x40>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024fa:	4b04      	ldr	r3, [pc, #16]	@ (800250c <SysTick_Config+0x40>)
 80024fc:	2207      	movs	r2, #7
 80024fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	e000e010 	.word	0xe000e010

08002510 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f7ff ff29 	bl	8002370 <__NVIC_SetPriorityGrouping>
}
 800251e:	bf00      	nop
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b086      	sub	sp, #24
 800252a:	af00      	add	r7, sp, #0
 800252c:	4603      	mov	r3, r0
 800252e:	60b9      	str	r1, [r7, #8]
 8002530:	607a      	str	r2, [r7, #4]
 8002532:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002534:	2300      	movs	r3, #0
 8002536:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002538:	f7ff ff3e 	bl	80023b8 <__NVIC_GetPriorityGrouping>
 800253c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	68b9      	ldr	r1, [r7, #8]
 8002542:	6978      	ldr	r0, [r7, #20]
 8002544:	f7ff ff8e 	bl	8002464 <NVIC_EncodePriority>
 8002548:	4602      	mov	r2, r0
 800254a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800254e:	4611      	mov	r1, r2
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff ff5d 	bl	8002410 <__NVIC_SetPriority>
}
 8002556:	bf00      	nop
 8002558:	3718      	adds	r7, #24
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b082      	sub	sp, #8
 8002562:	af00      	add	r7, sp, #0
 8002564:	4603      	mov	r3, r0
 8002566:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff ff31 	bl	80023d4 <__NVIC_EnableIRQ>
}
 8002572:	bf00      	nop
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b082      	sub	sp, #8
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7ff ffa2 	bl	80024cc <SysTick_Config>
 8002588:	4603      	mov	r3, r0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002592:	b480      	push	{r7}
 8002594:	b085      	sub	sp, #20
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800259a:	2300      	movs	r3, #0
 800259c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d008      	beq.n	80025bc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2204      	movs	r2, #4
 80025ae:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e022      	b.n	8002602 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f022 020e 	bic.w	r2, r2, #14
 80025ca:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 0201 	bic.w	r2, r2, #1
 80025da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025e0:	f003 021c 	and.w	r2, r3, #28
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e8:	2101      	movs	r1, #1
 80025ea:	fa01 f202 	lsl.w	r2, r1, r2
 80025ee:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002600:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002602:	4618      	mov	r0, r3
 8002604:	3714      	adds	r7, #20
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr

0800260e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b084      	sub	sp, #16
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002616:	2300      	movs	r3, #0
 8002618:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d005      	beq.n	8002632 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2204      	movs	r2, #4
 800262a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	73fb      	strb	r3, [r7, #15]
 8002630:	e029      	b.n	8002686 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f022 020e 	bic.w	r2, r2, #14
 8002640:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f022 0201 	bic.w	r2, r2, #1
 8002650:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002656:	f003 021c 	and.w	r2, r3, #28
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265e:	2101      	movs	r1, #1
 8002660:	fa01 f202 	lsl.w	r2, r1, r2
 8002664:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800267a:	2b00      	cmp	r3, #0
 800267c:	d003      	beq.n	8002686 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	4798      	blx	r3
    }
  }
  return status;
 8002686:	7bfb      	ldrb	r3, [r7, #15]
}
 8002688:	4618      	mov	r0, r3
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002690:	b480      	push	{r7}
 8002692:	b087      	sub	sp, #28
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800269a:	2300      	movs	r3, #0
 800269c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800269e:	e17f      	b.n	80029a0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	2101      	movs	r1, #1
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	fa01 f303 	lsl.w	r3, r1, r3
 80026ac:	4013      	ands	r3, r2
 80026ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f000 8171 	beq.w	800299a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f003 0303 	and.w	r3, r3, #3
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d005      	beq.n	80026d0 <HAL_GPIO_Init+0x40>
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f003 0303 	and.w	r3, r3, #3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d130      	bne.n	8002732 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	2203      	movs	r2, #3
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	43db      	mvns	r3, r3
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	4013      	ands	r3, r2
 80026e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	68da      	ldr	r2, [r3, #12]
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002706:	2201      	movs	r2, #1
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	43db      	mvns	r3, r3
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	4013      	ands	r3, r2
 8002714:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	091b      	lsrs	r3, r3, #4
 800271c:	f003 0201 	and.w	r2, r3, #1
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	4313      	orrs	r3, r2
 800272a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f003 0303 	and.w	r3, r3, #3
 800273a:	2b03      	cmp	r3, #3
 800273c:	d118      	bne.n	8002770 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002742:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002744:	2201      	movs	r2, #1
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	43db      	mvns	r3, r3
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	4013      	ands	r3, r2
 8002752:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	08db      	lsrs	r3, r3, #3
 800275a:	f003 0201 	and.w	r2, r3, #1
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	4313      	orrs	r3, r2
 8002768:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f003 0303 	and.w	r3, r3, #3
 8002778:	2b03      	cmp	r3, #3
 800277a:	d017      	beq.n	80027ac <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	2203      	movs	r2, #3
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	43db      	mvns	r3, r3
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	4013      	ands	r3, r2
 8002792:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f003 0303 	and.w	r3, r3, #3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d123      	bne.n	8002800 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	08da      	lsrs	r2, r3, #3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	3208      	adds	r2, #8
 80027c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	220f      	movs	r2, #15
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	43db      	mvns	r3, r3
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	4013      	ands	r3, r2
 80027da:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	691a      	ldr	r2, [r3, #16]
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	f003 0307 	and.w	r3, r3, #7
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	08da      	lsrs	r2, r3, #3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	3208      	adds	r2, #8
 80027fa:	6939      	ldr	r1, [r7, #16]
 80027fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	2203      	movs	r2, #3
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	43db      	mvns	r3, r3
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	4013      	ands	r3, r2
 8002816:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f003 0203 	and.w	r2, r3, #3
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	4313      	orrs	r3, r2
 800282c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	693a      	ldr	r2, [r7, #16]
 8002832:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800283c:	2b00      	cmp	r3, #0
 800283e:	f000 80ac 	beq.w	800299a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002842:	4b5f      	ldr	r3, [pc, #380]	@ (80029c0 <HAL_GPIO_Init+0x330>)
 8002844:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002846:	4a5e      	ldr	r2, [pc, #376]	@ (80029c0 <HAL_GPIO_Init+0x330>)
 8002848:	f043 0301 	orr.w	r3, r3, #1
 800284c:	6613      	str	r3, [r2, #96]	@ 0x60
 800284e:	4b5c      	ldr	r3, [pc, #368]	@ (80029c0 <HAL_GPIO_Init+0x330>)
 8002850:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	60bb      	str	r3, [r7, #8]
 8002858:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800285a:	4a5a      	ldr	r2, [pc, #360]	@ (80029c4 <HAL_GPIO_Init+0x334>)
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	089b      	lsrs	r3, r3, #2
 8002860:	3302      	adds	r3, #2
 8002862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002866:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	f003 0303 	and.w	r3, r3, #3
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	220f      	movs	r2, #15
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	43db      	mvns	r3, r3
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	4013      	ands	r3, r2
 800287c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002884:	d025      	beq.n	80028d2 <HAL_GPIO_Init+0x242>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a4f      	ldr	r2, [pc, #316]	@ (80029c8 <HAL_GPIO_Init+0x338>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d01f      	beq.n	80028ce <HAL_GPIO_Init+0x23e>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a4e      	ldr	r2, [pc, #312]	@ (80029cc <HAL_GPIO_Init+0x33c>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d019      	beq.n	80028ca <HAL_GPIO_Init+0x23a>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a4d      	ldr	r2, [pc, #308]	@ (80029d0 <HAL_GPIO_Init+0x340>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d013      	beq.n	80028c6 <HAL_GPIO_Init+0x236>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a4c      	ldr	r2, [pc, #304]	@ (80029d4 <HAL_GPIO_Init+0x344>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d00d      	beq.n	80028c2 <HAL_GPIO_Init+0x232>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a4b      	ldr	r2, [pc, #300]	@ (80029d8 <HAL_GPIO_Init+0x348>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d007      	beq.n	80028be <HAL_GPIO_Init+0x22e>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a4a      	ldr	r2, [pc, #296]	@ (80029dc <HAL_GPIO_Init+0x34c>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d101      	bne.n	80028ba <HAL_GPIO_Init+0x22a>
 80028b6:	2306      	movs	r3, #6
 80028b8:	e00c      	b.n	80028d4 <HAL_GPIO_Init+0x244>
 80028ba:	2307      	movs	r3, #7
 80028bc:	e00a      	b.n	80028d4 <HAL_GPIO_Init+0x244>
 80028be:	2305      	movs	r3, #5
 80028c0:	e008      	b.n	80028d4 <HAL_GPIO_Init+0x244>
 80028c2:	2304      	movs	r3, #4
 80028c4:	e006      	b.n	80028d4 <HAL_GPIO_Init+0x244>
 80028c6:	2303      	movs	r3, #3
 80028c8:	e004      	b.n	80028d4 <HAL_GPIO_Init+0x244>
 80028ca:	2302      	movs	r3, #2
 80028cc:	e002      	b.n	80028d4 <HAL_GPIO_Init+0x244>
 80028ce:	2301      	movs	r3, #1
 80028d0:	e000      	b.n	80028d4 <HAL_GPIO_Init+0x244>
 80028d2:	2300      	movs	r3, #0
 80028d4:	697a      	ldr	r2, [r7, #20]
 80028d6:	f002 0203 	and.w	r2, r2, #3
 80028da:	0092      	lsls	r2, r2, #2
 80028dc:	4093      	lsls	r3, r2
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80028e4:	4937      	ldr	r1, [pc, #220]	@ (80029c4 <HAL_GPIO_Init+0x334>)
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	089b      	lsrs	r3, r3, #2
 80028ea:	3302      	adds	r3, #2
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028f2:	4b3b      	ldr	r3, [pc, #236]	@ (80029e0 <HAL_GPIO_Init+0x350>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	43db      	mvns	r3, r3
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	4013      	ands	r3, r2
 8002900:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d003      	beq.n	8002916 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	4313      	orrs	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002916:	4a32      	ldr	r2, [pc, #200]	@ (80029e0 <HAL_GPIO_Init+0x350>)
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800291c:	4b30      	ldr	r3, [pc, #192]	@ (80029e0 <HAL_GPIO_Init+0x350>)
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	43db      	mvns	r3, r3
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	4013      	ands	r3, r2
 800292a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d003      	beq.n	8002940 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	4313      	orrs	r3, r2
 800293e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002940:	4a27      	ldr	r2, [pc, #156]	@ (80029e0 <HAL_GPIO_Init+0x350>)
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002946:	4b26      	ldr	r3, [pc, #152]	@ (80029e0 <HAL_GPIO_Init+0x350>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	43db      	mvns	r3, r3
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	4013      	ands	r3, r2
 8002954:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	4313      	orrs	r3, r2
 8002968:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800296a:	4a1d      	ldr	r2, [pc, #116]	@ (80029e0 <HAL_GPIO_Init+0x350>)
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002970:	4b1b      	ldr	r3, [pc, #108]	@ (80029e0 <HAL_GPIO_Init+0x350>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	43db      	mvns	r3, r3
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	4013      	ands	r3, r2
 800297e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d003      	beq.n	8002994 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	4313      	orrs	r3, r2
 8002992:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002994:	4a12      	ldr	r2, [pc, #72]	@ (80029e0 <HAL_GPIO_Init+0x350>)
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	3301      	adds	r3, #1
 800299e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	fa22 f303 	lsr.w	r3, r2, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f47f ae78 	bne.w	80026a0 <HAL_GPIO_Init+0x10>
  }
}
 80029b0:	bf00      	nop
 80029b2:	bf00      	nop
 80029b4:	371c      	adds	r7, #28
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	40021000 	.word	0x40021000
 80029c4:	40010000 	.word	0x40010000
 80029c8:	48000400 	.word	0x48000400
 80029cc:	48000800 	.word	0x48000800
 80029d0:	48000c00 	.word	0x48000c00
 80029d4:	48001000 	.word	0x48001000
 80029d8:	48001400 	.word	0x48001400
 80029dc:	48001800 	.word	0x48001800
 80029e0:	40010400 	.word	0x40010400

080029e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	460b      	mov	r3, r1
 80029ee:	807b      	strh	r3, [r7, #2]
 80029f0:	4613      	mov	r3, r2
 80029f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029f4:	787b      	ldrb	r3, [r7, #1]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029fa:	887a      	ldrh	r2, [r7, #2]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a00:	e002      	b.n	8002a08 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a02:	887a      	ldrh	r2, [r7, #2]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e08d      	b.n	8002b42 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d106      	bne.n	8002a40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f7fe faf6 	bl	800102c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2224      	movs	r2, #36	@ 0x24
 8002a44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f022 0201 	bic.w	r2, r2, #1
 8002a56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685a      	ldr	r2, [r3, #4]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a64:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	689a      	ldr	r2, [r3, #8]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a74:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d107      	bne.n	8002a8e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689a      	ldr	r2, [r3, #8]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a8a:	609a      	str	r2, [r3, #8]
 8002a8c:	e006      	b.n	8002a9c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	689a      	ldr	r2, [r3, #8]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002a9a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d108      	bne.n	8002ab6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	685a      	ldr	r2, [r3, #4]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ab2:	605a      	str	r2, [r3, #4]
 8002ab4:	e007      	b.n	8002ac6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ac4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	6812      	ldr	r2, [r2, #0]
 8002ad0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002ad4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ad8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68da      	ldr	r2, [r3, #12]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ae8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	691a      	ldr	r2, [r3, #16]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	430a      	orrs	r2, r1
 8002b02:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	69d9      	ldr	r1, [r3, #28]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a1a      	ldr	r2, [r3, #32]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	430a      	orrs	r2, r1
 8002b12:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f042 0201 	orr.w	r2, r2, #1
 8002b22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2220      	movs	r2, #32
 8002b2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
	...

08002b4c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b088      	sub	sp, #32
 8002b50:	af02      	add	r7, sp, #8
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	4608      	mov	r0, r1
 8002b56:	4611      	mov	r1, r2
 8002b58:	461a      	mov	r2, r3
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	817b      	strh	r3, [r7, #10]
 8002b5e:	460b      	mov	r3, r1
 8002b60:	813b      	strh	r3, [r7, #8]
 8002b62:	4613      	mov	r3, r2
 8002b64:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b20      	cmp	r3, #32
 8002b70:	f040 80f9 	bne.w	8002d66 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b74:	6a3b      	ldr	r3, [r7, #32]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d002      	beq.n	8002b80 <HAL_I2C_Mem_Write+0x34>
 8002b7a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d105      	bne.n	8002b8c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b86:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e0ed      	b.n	8002d68 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d101      	bne.n	8002b9a <HAL_I2C_Mem_Write+0x4e>
 8002b96:	2302      	movs	r3, #2
 8002b98:	e0e6      	b.n	8002d68 <HAL_I2C_Mem_Write+0x21c>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ba2:	f7ff fbb5 	bl	8002310 <HAL_GetTick>
 8002ba6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	9300      	str	r3, [sp, #0]
 8002bac:	2319      	movs	r3, #25
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002bb4:	68f8      	ldr	r0, [r7, #12]
 8002bb6:	f000 fbaf 	bl	8003318 <I2C_WaitOnFlagUntilTimeout>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e0d1      	b.n	8002d68 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2221      	movs	r2, #33	@ 0x21
 8002bc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2240      	movs	r2, #64	@ 0x40
 8002bd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6a3a      	ldr	r2, [r7, #32]
 8002bde:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002be4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002bec:	88f8      	ldrh	r0, [r7, #6]
 8002bee:	893a      	ldrh	r2, [r7, #8]
 8002bf0:	8979      	ldrh	r1, [r7, #10]
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	9301      	str	r3, [sp, #4]
 8002bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bf8:	9300      	str	r3, [sp, #0]
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	68f8      	ldr	r0, [r7, #12]
 8002bfe:	f000 fabf 	bl	8003180 <I2C_RequestMemoryWrite>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d005      	beq.n	8002c14 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e0a9      	b.n	8002d68 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	2bff      	cmp	r3, #255	@ 0xff
 8002c1c:	d90e      	bls.n	8002c3c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	22ff      	movs	r2, #255	@ 0xff
 8002c22:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c28:	b2da      	uxtb	r2, r3
 8002c2a:	8979      	ldrh	r1, [r7, #10]
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f000 fd33 	bl	80036a0 <I2C_TransferConfig>
 8002c3a:	e00f      	b.n	8002c5c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c4a:	b2da      	uxtb	r2, r3
 8002c4c:	8979      	ldrh	r1, [r7, #10]
 8002c4e:	2300      	movs	r3, #0
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f000 fd22 	bl	80036a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c5c:	697a      	ldr	r2, [r7, #20]
 8002c5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f000 fbb2 	bl	80033ca <I2C_WaitOnTXISFlagUntilTimeout>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d001      	beq.n	8002c70 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e07b      	b.n	8002d68 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c74:	781a      	ldrb	r2, [r3, #0]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c80:	1c5a      	adds	r2, r3, #1
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d034      	beq.n	8002d14 <HAL_I2C_Mem_Write+0x1c8>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d130      	bne.n	8002d14 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	9300      	str	r3, [sp, #0]
 8002cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cb8:	2200      	movs	r2, #0
 8002cba:	2180      	movs	r1, #128	@ 0x80
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	f000 fb2b 	bl	8003318 <I2C_WaitOnFlagUntilTimeout>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d001      	beq.n	8002ccc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e04d      	b.n	8002d68 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	2bff      	cmp	r3, #255	@ 0xff
 8002cd4:	d90e      	bls.n	8002cf4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	22ff      	movs	r2, #255	@ 0xff
 8002cda:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ce0:	b2da      	uxtb	r2, r3
 8002ce2:	8979      	ldrh	r1, [r7, #10]
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	9300      	str	r3, [sp, #0]
 8002ce8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002cec:	68f8      	ldr	r0, [r7, #12]
 8002cee:	f000 fcd7 	bl	80036a0 <I2C_TransferConfig>
 8002cf2:	e00f      	b.n	8002d14 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d02:	b2da      	uxtb	r2, r3
 8002d04:	8979      	ldrh	r1, [r7, #10]
 8002d06:	2300      	movs	r3, #0
 8002d08:	9300      	str	r3, [sp, #0]
 8002d0a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f000 fcc6 	bl	80036a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d19e      	bne.n	8002c5c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f000 fb98 	bl	8003458 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e01a      	b.n	8002d68 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2220      	movs	r2, #32
 8002d38:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	6859      	ldr	r1, [r3, #4]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	4b0a      	ldr	r3, [pc, #40]	@ (8002d70 <HAL_I2C_Mem_Write+0x224>)
 8002d46:	400b      	ands	r3, r1
 8002d48:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2220      	movs	r2, #32
 8002d4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002d62:	2300      	movs	r3, #0
 8002d64:	e000      	b.n	8002d68 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002d66:	2302      	movs	r3, #2
  }
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3718      	adds	r7, #24
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	fe00e800 	.word	0xfe00e800

08002d74 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b088      	sub	sp, #32
 8002d78:	af02      	add	r7, sp, #8
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	4608      	mov	r0, r1
 8002d7e:	4611      	mov	r1, r2
 8002d80:	461a      	mov	r2, r3
 8002d82:	4603      	mov	r3, r0
 8002d84:	817b      	strh	r3, [r7, #10]
 8002d86:	460b      	mov	r3, r1
 8002d88:	813b      	strh	r3, [r7, #8]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b20      	cmp	r3, #32
 8002d98:	f040 80fd 	bne.w	8002f96 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d9c:	6a3b      	ldr	r3, [r7, #32]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d002      	beq.n	8002da8 <HAL_I2C_Mem_Read+0x34>
 8002da2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d105      	bne.n	8002db4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002dae:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e0f1      	b.n	8002f98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d101      	bne.n	8002dc2 <HAL_I2C_Mem_Read+0x4e>
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	e0ea      	b.n	8002f98 <HAL_I2C_Mem_Read+0x224>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002dca:	f7ff faa1 	bl	8002310 <HAL_GetTick>
 8002dce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	2319      	movs	r3, #25
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f000 fa9b 	bl	8003318 <I2C_WaitOnFlagUntilTimeout>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e0d5      	b.n	8002f98 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2222      	movs	r2, #34	@ 0x22
 8002df0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2240      	movs	r2, #64	@ 0x40
 8002df8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6a3a      	ldr	r2, [r7, #32]
 8002e06:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002e0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2200      	movs	r2, #0
 8002e12:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e14:	88f8      	ldrh	r0, [r7, #6]
 8002e16:	893a      	ldrh	r2, [r7, #8]
 8002e18:	8979      	ldrh	r1, [r7, #10]
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	9301      	str	r3, [sp, #4]
 8002e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e20:	9300      	str	r3, [sp, #0]
 8002e22:	4603      	mov	r3, r0
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	f000 f9ff 	bl	8003228 <I2C_RequestMemoryRead>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d005      	beq.n	8002e3c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e0ad      	b.n	8002f98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	2bff      	cmp	r3, #255	@ 0xff
 8002e44:	d90e      	bls.n	8002e64 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e50:	b2da      	uxtb	r2, r3
 8002e52:	8979      	ldrh	r1, [r7, #10]
 8002e54:	4b52      	ldr	r3, [pc, #328]	@ (8002fa0 <HAL_I2C_Mem_Read+0x22c>)
 8002e56:	9300      	str	r3, [sp, #0]
 8002e58:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f000 fc1f 	bl	80036a0 <I2C_TransferConfig>
 8002e62:	e00f      	b.n	8002e84 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e68:	b29a      	uxth	r2, r3
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e72:	b2da      	uxtb	r2, r3
 8002e74:	8979      	ldrh	r1, [r7, #10]
 8002e76:	4b4a      	ldr	r3, [pc, #296]	@ (8002fa0 <HAL_I2C_Mem_Read+0x22c>)
 8002e78:	9300      	str	r3, [sp, #0]
 8002e7a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e7e:	68f8      	ldr	r0, [r7, #12]
 8002e80:	f000 fc0e 	bl	80036a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	9300      	str	r3, [sp, #0]
 8002e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	2104      	movs	r1, #4
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	f000 fa42 	bl	8003318 <I2C_WaitOnFlagUntilTimeout>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e07c      	b.n	8002f98 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea8:	b2d2      	uxtb	r2, r2
 8002eaa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb0:	1c5a      	adds	r2, r3, #1
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	b29a      	uxth	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d034      	beq.n	8002f44 <HAL_I2C_Mem_Read+0x1d0>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d130      	bne.n	8002f44 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	9300      	str	r3, [sp, #0]
 8002ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ee8:	2200      	movs	r2, #0
 8002eea:	2180      	movs	r1, #128	@ 0x80
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f000 fa13 	bl	8003318 <I2C_WaitOnFlagUntilTimeout>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e04d      	b.n	8002f98 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	2bff      	cmp	r3, #255	@ 0xff
 8002f04:	d90e      	bls.n	8002f24 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f10:	b2da      	uxtb	r2, r3
 8002f12:	8979      	ldrh	r1, [r7, #10]
 8002f14:	2300      	movs	r3, #0
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	f000 fbbf 	bl	80036a0 <I2C_TransferConfig>
 8002f22:	e00f      	b.n	8002f44 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f32:	b2da      	uxtb	r2, r3
 8002f34:	8979      	ldrh	r1, [r7, #10]
 8002f36:	2300      	movs	r3, #0
 8002f38:	9300      	str	r3, [sp, #0]
 8002f3a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f000 fbae 	bl	80036a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d19a      	bne.n	8002e84 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f4e:	697a      	ldr	r2, [r7, #20]
 8002f50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f000 fa80 	bl	8003458 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e01a      	b.n	8002f98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2220      	movs	r2, #32
 8002f68:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6859      	ldr	r1, [r3, #4]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa4 <HAL_I2C_Mem_Read+0x230>)
 8002f76:	400b      	ands	r3, r1
 8002f78:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2220      	movs	r2, #32
 8002f7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f92:	2300      	movs	r3, #0
 8002f94:	e000      	b.n	8002f98 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002f96:	2302      	movs	r3, #2
  }
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3718      	adds	r7, #24
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	80002400 	.word	0x80002400
 8002fa4:	fe00e800 	.word	0xfe00e800

08002fa8 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b08a      	sub	sp, #40	@ 0x28
 8002fac:	af02      	add	r7, sp, #8
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	607a      	str	r2, [r7, #4]
 8002fb2:	603b      	str	r3, [r7, #0]
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	2b20      	cmp	r3, #32
 8002fc6:	f040 80d6 	bne.w	8003176 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fd8:	d101      	bne.n	8002fde <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002fda:	2302      	movs	r3, #2
 8002fdc:	e0cc      	b.n	8003178 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d101      	bne.n	8002fec <HAL_I2C_IsDeviceReady+0x44>
 8002fe8:	2302      	movs	r3, #2
 8002fea:	e0c5      	b.n	8003178 <HAL_I2C_IsDeviceReady+0x1d0>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2224      	movs	r2, #36	@ 0x24
 8002ff8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d107      	bne.n	800301a <HAL_I2C_IsDeviceReady+0x72>
 800300a:	897b      	ldrh	r3, [r7, #10]
 800300c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003010:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003014:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003018:	e006      	b.n	8003028 <HAL_I2C_IsDeviceReady+0x80>
 800301a:	897b      	ldrh	r3, [r7, #10]
 800301c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003020:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003024:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	6812      	ldr	r2, [r2, #0]
 800302c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800302e:	f7ff f96f 	bl	8002310 <HAL_GetTick>
 8003032:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	f003 0320 	and.w	r3, r3, #32
 800303e:	2b20      	cmp	r3, #32
 8003040:	bf0c      	ite	eq
 8003042:	2301      	moveq	r3, #1
 8003044:	2300      	movne	r3, #0
 8003046:	b2db      	uxtb	r3, r3
 8003048:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	f003 0310 	and.w	r3, r3, #16
 8003054:	2b10      	cmp	r3, #16
 8003056:	bf0c      	ite	eq
 8003058:	2301      	moveq	r3, #1
 800305a:	2300      	movne	r3, #0
 800305c:	b2db      	uxtb	r3, r3
 800305e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003060:	e034      	b.n	80030cc <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003068:	d01a      	beq.n	80030a0 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800306a:	f7ff f951 	bl	8002310 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	683a      	ldr	r2, [r7, #0]
 8003076:	429a      	cmp	r2, r3
 8003078:	d302      	bcc.n	8003080 <HAL_I2C_IsDeviceReady+0xd8>
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d10f      	bne.n	80030a0 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2220      	movs	r2, #32
 8003084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800308c:	f043 0220 	orr.w	r2, r3, #32
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e06b      	b.n	8003178 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	f003 0320 	and.w	r3, r3, #32
 80030aa:	2b20      	cmp	r3, #32
 80030ac:	bf0c      	ite	eq
 80030ae:	2301      	moveq	r3, #1
 80030b0:	2300      	movne	r3, #0
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	f003 0310 	and.w	r3, r3, #16
 80030c0:	2b10      	cmp	r3, #16
 80030c2:	bf0c      	ite	eq
 80030c4:	2301      	moveq	r3, #1
 80030c6:	2300      	movne	r3, #0
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80030cc:	7ffb      	ldrb	r3, [r7, #31]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d102      	bne.n	80030d8 <HAL_I2C_IsDeviceReady+0x130>
 80030d2:	7fbb      	ldrb	r3, [r7, #30]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0c4      	beq.n	8003062 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	f003 0310 	and.w	r3, r3, #16
 80030e2:	2b10      	cmp	r3, #16
 80030e4:	d01a      	beq.n	800311c <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	2200      	movs	r2, #0
 80030ee:	2120      	movs	r1, #32
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f000 f911 	bl	8003318 <I2C_WaitOnFlagUntilTimeout>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d001      	beq.n	8003100 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e03b      	b.n	8003178 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2220      	movs	r2, #32
 8003106:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2220      	movs	r2, #32
 800310c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8003118:	2300      	movs	r3, #0
 800311a:	e02d      	b.n	8003178 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	9300      	str	r3, [sp, #0]
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	2200      	movs	r2, #0
 8003124:	2120      	movs	r1, #32
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f000 f8f6 	bl	8003318 <I2C_WaitOnFlagUntilTimeout>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e020      	b.n	8003178 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2210      	movs	r2, #16
 800313c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2220      	movs	r2, #32
 8003144:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	3301      	adds	r3, #1
 800314a:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	429a      	cmp	r2, r3
 8003152:	f63f af56 	bhi.w	8003002 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2220      	movs	r2, #32
 800315a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003162:	f043 0220 	orr.w	r2, r3, #32
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e000      	b.n	8003178 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8003176:	2302      	movs	r3, #2
  }
}
 8003178:	4618      	mov	r0, r3
 800317a:	3720      	adds	r7, #32
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af02      	add	r7, sp, #8
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	4608      	mov	r0, r1
 800318a:	4611      	mov	r1, r2
 800318c:	461a      	mov	r2, r3
 800318e:	4603      	mov	r3, r0
 8003190:	817b      	strh	r3, [r7, #10]
 8003192:	460b      	mov	r3, r1
 8003194:	813b      	strh	r3, [r7, #8]
 8003196:	4613      	mov	r3, r2
 8003198:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800319a:	88fb      	ldrh	r3, [r7, #6]
 800319c:	b2da      	uxtb	r2, r3
 800319e:	8979      	ldrh	r1, [r7, #10]
 80031a0:	4b20      	ldr	r3, [pc, #128]	@ (8003224 <I2C_RequestMemoryWrite+0xa4>)
 80031a2:	9300      	str	r3, [sp, #0]
 80031a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80031a8:	68f8      	ldr	r0, [r7, #12]
 80031aa:	f000 fa79 	bl	80036a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031ae:	69fa      	ldr	r2, [r7, #28]
 80031b0:	69b9      	ldr	r1, [r7, #24]
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f000 f909 	bl	80033ca <I2C_WaitOnTXISFlagUntilTimeout>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e02c      	b.n	800321c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031c2:	88fb      	ldrh	r3, [r7, #6]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d105      	bne.n	80031d4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031c8:	893b      	ldrh	r3, [r7, #8]
 80031ca:	b2da      	uxtb	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	629a      	str	r2, [r3, #40]	@ 0x28
 80031d2:	e015      	b.n	8003200 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80031d4:	893b      	ldrh	r3, [r7, #8]
 80031d6:	0a1b      	lsrs	r3, r3, #8
 80031d8:	b29b      	uxth	r3, r3
 80031da:	b2da      	uxtb	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031e2:	69fa      	ldr	r2, [r7, #28]
 80031e4:	69b9      	ldr	r1, [r7, #24]
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f000 f8ef 	bl	80033ca <I2C_WaitOnTXISFlagUntilTimeout>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e012      	b.n	800321c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031f6:	893b      	ldrh	r3, [r7, #8]
 80031f8:	b2da      	uxtb	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	9300      	str	r3, [sp, #0]
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	2200      	movs	r2, #0
 8003208:	2180      	movs	r1, #128	@ 0x80
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f000 f884 	bl	8003318 <I2C_WaitOnFlagUntilTimeout>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e000      	b.n	800321c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	80002000 	.word	0x80002000

08003228 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b086      	sub	sp, #24
 800322c:	af02      	add	r7, sp, #8
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	4608      	mov	r0, r1
 8003232:	4611      	mov	r1, r2
 8003234:	461a      	mov	r2, r3
 8003236:	4603      	mov	r3, r0
 8003238:	817b      	strh	r3, [r7, #10]
 800323a:	460b      	mov	r3, r1
 800323c:	813b      	strh	r3, [r7, #8]
 800323e:	4613      	mov	r3, r2
 8003240:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003242:	88fb      	ldrh	r3, [r7, #6]
 8003244:	b2da      	uxtb	r2, r3
 8003246:	8979      	ldrh	r1, [r7, #10]
 8003248:	4b20      	ldr	r3, [pc, #128]	@ (80032cc <I2C_RequestMemoryRead+0xa4>)
 800324a:	9300      	str	r3, [sp, #0]
 800324c:	2300      	movs	r3, #0
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f000 fa26 	bl	80036a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003254:	69fa      	ldr	r2, [r7, #28]
 8003256:	69b9      	ldr	r1, [r7, #24]
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f000 f8b6 	bl	80033ca <I2C_WaitOnTXISFlagUntilTimeout>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d001      	beq.n	8003268 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e02c      	b.n	80032c2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003268:	88fb      	ldrh	r3, [r7, #6]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d105      	bne.n	800327a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800326e:	893b      	ldrh	r3, [r7, #8]
 8003270:	b2da      	uxtb	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	629a      	str	r2, [r3, #40]	@ 0x28
 8003278:	e015      	b.n	80032a6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800327a:	893b      	ldrh	r3, [r7, #8]
 800327c:	0a1b      	lsrs	r3, r3, #8
 800327e:	b29b      	uxth	r3, r3
 8003280:	b2da      	uxtb	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003288:	69fa      	ldr	r2, [r7, #28]
 800328a:	69b9      	ldr	r1, [r7, #24]
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f000 f89c 	bl	80033ca <I2C_WaitOnTXISFlagUntilTimeout>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e012      	b.n	80032c2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800329c:	893b      	ldrh	r3, [r7, #8]
 800329e:	b2da      	uxtb	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	9300      	str	r3, [sp, #0]
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	2200      	movs	r2, #0
 80032ae:	2140      	movs	r1, #64	@ 0x40
 80032b0:	68f8      	ldr	r0, [r7, #12]
 80032b2:	f000 f831 	bl	8003318 <I2C_WaitOnFlagUntilTimeout>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d001      	beq.n	80032c0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e000      	b.n	80032c2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3710      	adds	r7, #16
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	80002000 	.word	0x80002000

080032d0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d103      	bne.n	80032ee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2200      	movs	r2, #0
 80032ec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d007      	beq.n	800330c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	699a      	ldr	r2, [r3, #24]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f042 0201 	orr.w	r2, r2, #1
 800330a:	619a      	str	r2, [r3, #24]
  }
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	603b      	str	r3, [r7, #0]
 8003324:	4613      	mov	r3, r2
 8003326:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003328:	e03b      	b.n	80033a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	6839      	ldr	r1, [r7, #0]
 800332e:	68f8      	ldr	r0, [r7, #12]
 8003330:	f000 f8d6 	bl	80034e0 <I2C_IsErrorOccurred>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e041      	b.n	80033c2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003344:	d02d      	beq.n	80033a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003346:	f7fe ffe3 	bl	8002310 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	429a      	cmp	r2, r3
 8003354:	d302      	bcc.n	800335c <I2C_WaitOnFlagUntilTimeout+0x44>
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d122      	bne.n	80033a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	699a      	ldr	r2, [r3, #24]
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	4013      	ands	r3, r2
 8003366:	68ba      	ldr	r2, [r7, #8]
 8003368:	429a      	cmp	r2, r3
 800336a:	bf0c      	ite	eq
 800336c:	2301      	moveq	r3, #1
 800336e:	2300      	movne	r3, #0
 8003370:	b2db      	uxtb	r3, r3
 8003372:	461a      	mov	r2, r3
 8003374:	79fb      	ldrb	r3, [r7, #7]
 8003376:	429a      	cmp	r2, r3
 8003378:	d113      	bne.n	80033a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800337e:	f043 0220 	orr.w	r2, r3, #32
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2220      	movs	r2, #32
 800338a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e00f      	b.n	80033c2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	699a      	ldr	r2, [r3, #24]
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	4013      	ands	r3, r2
 80033ac:	68ba      	ldr	r2, [r7, #8]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	bf0c      	ite	eq
 80033b2:	2301      	moveq	r3, #1
 80033b4:	2300      	movne	r3, #0
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	461a      	mov	r2, r3
 80033ba:	79fb      	ldrb	r3, [r7, #7]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d0b4      	beq.n	800332a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b084      	sub	sp, #16
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	60f8      	str	r0, [r7, #12]
 80033d2:	60b9      	str	r1, [r7, #8]
 80033d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80033d6:	e033      	b.n	8003440 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	68b9      	ldr	r1, [r7, #8]
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	f000 f87f 	bl	80034e0 <I2C_IsErrorOccurred>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e031      	b.n	8003450 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80033f2:	d025      	beq.n	8003440 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033f4:	f7fe ff8c 	bl	8002310 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	68ba      	ldr	r2, [r7, #8]
 8003400:	429a      	cmp	r2, r3
 8003402:	d302      	bcc.n	800340a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d11a      	bne.n	8003440 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	2b02      	cmp	r3, #2
 8003416:	d013      	beq.n	8003440 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800341c:	f043 0220 	orr.w	r2, r3, #32
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2220      	movs	r2, #32
 8003428:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e007      	b.n	8003450 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b02      	cmp	r3, #2
 800344c:	d1c4      	bne.n	80033d8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003464:	e02f      	b.n	80034c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	68b9      	ldr	r1, [r7, #8]
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f000 f838 	bl	80034e0 <I2C_IsErrorOccurred>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e02d      	b.n	80034d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800347a:	f7fe ff49 	bl	8002310 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	68ba      	ldr	r2, [r7, #8]
 8003486:	429a      	cmp	r2, r3
 8003488:	d302      	bcc.n	8003490 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d11a      	bne.n	80034c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	f003 0320 	and.w	r3, r3, #32
 800349a:	2b20      	cmp	r3, #32
 800349c:	d013      	beq.n	80034c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034a2:	f043 0220 	orr.w	r2, r3, #32
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2220      	movs	r2, #32
 80034ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e007      	b.n	80034d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	f003 0320 	and.w	r3, r3, #32
 80034d0:	2b20      	cmp	r3, #32
 80034d2:	d1c8      	bne.n	8003466 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3710      	adds	r7, #16
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
	...

080034e0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b08a      	sub	sp, #40	@ 0x28
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034ec:	2300      	movs	r3, #0
 80034ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80034fa:	2300      	movs	r3, #0
 80034fc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	f003 0310 	and.w	r3, r3, #16
 8003508:	2b00      	cmp	r3, #0
 800350a:	d068      	beq.n	80035de <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2210      	movs	r2, #16
 8003512:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003514:	e049      	b.n	80035aa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800351c:	d045      	beq.n	80035aa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800351e:	f7fe fef7 	bl	8002310 <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	68ba      	ldr	r2, [r7, #8]
 800352a:	429a      	cmp	r2, r3
 800352c:	d302      	bcc.n	8003534 <I2C_IsErrorOccurred+0x54>
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d13a      	bne.n	80035aa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800353e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003546:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003552:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003556:	d121      	bne.n	800359c <I2C_IsErrorOccurred+0xbc>
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800355e:	d01d      	beq.n	800359c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003560:	7cfb      	ldrb	r3, [r7, #19]
 8003562:	2b20      	cmp	r3, #32
 8003564:	d01a      	beq.n	800359c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685a      	ldr	r2, [r3, #4]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003574:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003576:	f7fe fecb 	bl	8002310 <HAL_GetTick>
 800357a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800357c:	e00e      	b.n	800359c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800357e:	f7fe fec7 	bl	8002310 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b19      	cmp	r3, #25
 800358a:	d907      	bls.n	800359c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800358c:	6a3b      	ldr	r3, [r7, #32]
 800358e:	f043 0320 	orr.w	r3, r3, #32
 8003592:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800359a:	e006      	b.n	80035aa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	f003 0320 	and.w	r3, r3, #32
 80035a6:	2b20      	cmp	r3, #32
 80035a8:	d1e9      	bne.n	800357e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	f003 0320 	and.w	r3, r3, #32
 80035b4:	2b20      	cmp	r3, #32
 80035b6:	d003      	beq.n	80035c0 <I2C_IsErrorOccurred+0xe0>
 80035b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d0aa      	beq.n	8003516 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80035c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d103      	bne.n	80035d0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2220      	movs	r2, #32
 80035ce:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80035d0:	6a3b      	ldr	r3, [r7, #32]
 80035d2:	f043 0304 	orr.w	r3, r3, #4
 80035d6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00b      	beq.n	8003608 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80035f0:	6a3b      	ldr	r3, [r7, #32]
 80035f2:	f043 0301 	orr.w	r3, r3, #1
 80035f6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003600:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00b      	beq.n	800362a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003612:	6a3b      	ldr	r3, [r7, #32]
 8003614:	f043 0308 	orr.w	r3, r3, #8
 8003618:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003622:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00b      	beq.n	800364c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003634:	6a3b      	ldr	r3, [r7, #32]
 8003636:	f043 0302 	orr.w	r3, r3, #2
 800363a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003644:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800364c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003650:	2b00      	cmp	r3, #0
 8003652:	d01c      	beq.n	800368e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	f7ff fe3b 	bl	80032d0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	6859      	ldr	r1, [r3, #4]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	4b0d      	ldr	r3, [pc, #52]	@ (800369c <I2C_IsErrorOccurred+0x1bc>)
 8003666:	400b      	ands	r3, r1
 8003668:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800366e:	6a3b      	ldr	r3, [r7, #32]
 8003670:	431a      	orrs	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2220      	movs	r2, #32
 800367a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800368e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003692:	4618      	mov	r0, r3
 8003694:	3728      	adds	r7, #40	@ 0x28
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	fe00e800 	.word	0xfe00e800

080036a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b087      	sub	sp, #28
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	607b      	str	r3, [r7, #4]
 80036aa:	460b      	mov	r3, r1
 80036ac:	817b      	strh	r3, [r7, #10]
 80036ae:	4613      	mov	r3, r2
 80036b0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036b2:	897b      	ldrh	r3, [r7, #10]
 80036b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80036b8:	7a7b      	ldrb	r3, [r7, #9]
 80036ba:	041b      	lsls	r3, r3, #16
 80036bc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036c0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036c6:	6a3b      	ldr	r3, [r7, #32]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80036ce:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	685a      	ldr	r2, [r3, #4]
 80036d6:	6a3b      	ldr	r3, [r7, #32]
 80036d8:	0d5b      	lsrs	r3, r3, #21
 80036da:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80036de:	4b08      	ldr	r3, [pc, #32]	@ (8003700 <I2C_TransferConfig+0x60>)
 80036e0:	430b      	orrs	r3, r1
 80036e2:	43db      	mvns	r3, r3
 80036e4:	ea02 0103 	and.w	r1, r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	697a      	ldr	r2, [r7, #20]
 80036ee:	430a      	orrs	r2, r1
 80036f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80036f2:	bf00      	nop
 80036f4:	371c      	adds	r7, #28
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	03ff63ff 	.word	0x03ff63ff

08003704 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b20      	cmp	r3, #32
 8003718:	d138      	bne.n	800378c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003720:	2b01      	cmp	r3, #1
 8003722:	d101      	bne.n	8003728 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003724:	2302      	movs	r3, #2
 8003726:	e032      	b.n	800378e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2224      	movs	r2, #36	@ 0x24
 8003734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f022 0201 	bic.w	r2, r2, #1
 8003746:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003756:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6819      	ldr	r1, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	430a      	orrs	r2, r1
 8003766:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f042 0201 	orr.w	r2, r2, #1
 8003776:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2220      	movs	r2, #32
 800377c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003788:	2300      	movs	r3, #0
 800378a:	e000      	b.n	800378e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800378c:	2302      	movs	r3, #2
  }
}
 800378e:	4618      	mov	r0, r3
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr

0800379a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800379a:	b480      	push	{r7}
 800379c:	b085      	sub	sp, #20
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
 80037a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b20      	cmp	r3, #32
 80037ae:	d139      	bne.n	8003824 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d101      	bne.n	80037be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80037ba:	2302      	movs	r3, #2
 80037bc:	e033      	b.n	8003826 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2224      	movs	r2, #36	@ 0x24
 80037ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 0201 	bic.w	r2, r2, #1
 80037dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80037ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	021b      	lsls	r3, r3, #8
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f042 0201 	orr.w	r2, r2, #1
 800380e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2220      	movs	r2, #32
 8003814:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003820:	2300      	movs	r3, #0
 8003822:	e000      	b.n	8003826 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003824:	2302      	movs	r3, #2
  }
}
 8003826:	4618      	mov	r0, r3
 8003828:	3714      	adds	r7, #20
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
	...

08003834 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003838:	4b04      	ldr	r3, [pc, #16]	@ (800384c <HAL_PWREx_GetVoltageRange+0x18>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003840:	4618      	mov	r0, r3
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	40007000 	.word	0x40007000

08003850 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800385e:	d130      	bne.n	80038c2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003860:	4b23      	ldr	r3, [pc, #140]	@ (80038f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003868:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800386c:	d038      	beq.n	80038e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800386e:	4b20      	ldr	r3, [pc, #128]	@ (80038f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003876:	4a1e      	ldr	r2, [pc, #120]	@ (80038f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003878:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800387c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800387e:	4b1d      	ldr	r3, [pc, #116]	@ (80038f4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2232      	movs	r2, #50	@ 0x32
 8003884:	fb02 f303 	mul.w	r3, r2, r3
 8003888:	4a1b      	ldr	r2, [pc, #108]	@ (80038f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800388a:	fba2 2303 	umull	r2, r3, r2, r3
 800388e:	0c9b      	lsrs	r3, r3, #18
 8003890:	3301      	adds	r3, #1
 8003892:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003894:	e002      	b.n	800389c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	3b01      	subs	r3, #1
 800389a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800389c:	4b14      	ldr	r3, [pc, #80]	@ (80038f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038a8:	d102      	bne.n	80038b0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1f2      	bne.n	8003896 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038b0:	4b0f      	ldr	r3, [pc, #60]	@ (80038f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038bc:	d110      	bne.n	80038e0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e00f      	b.n	80038e2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80038c2:	4b0b      	ldr	r3, [pc, #44]	@ (80038f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80038ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038ce:	d007      	beq.n	80038e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80038d0:	4b07      	ldr	r3, [pc, #28]	@ (80038f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80038d8:	4a05      	ldr	r2, [pc, #20]	@ (80038f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80038de:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3714      	adds	r7, #20
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	40007000 	.word	0x40007000
 80038f4:	20000004 	.word	0x20000004
 80038f8:	431bde83 	.word	0x431bde83

080038fc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b088      	sub	sp, #32
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e3ca      	b.n	80040a4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800390e:	4b97      	ldr	r3, [pc, #604]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f003 030c 	and.w	r3, r3, #12
 8003916:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003918:	4b94      	ldr	r3, [pc, #592]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	f003 0303 	and.w	r3, r3, #3
 8003920:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0310 	and.w	r3, r3, #16
 800392a:	2b00      	cmp	r3, #0
 800392c:	f000 80e4 	beq.w	8003af8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d007      	beq.n	8003946 <HAL_RCC_OscConfig+0x4a>
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	2b0c      	cmp	r3, #12
 800393a:	f040 808b 	bne.w	8003a54 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	2b01      	cmp	r3, #1
 8003942:	f040 8087 	bne.w	8003a54 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003946:	4b89      	ldr	r3, [pc, #548]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d005      	beq.n	800395e <HAL_RCC_OscConfig+0x62>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e3a2      	b.n	80040a4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a1a      	ldr	r2, [r3, #32]
 8003962:	4b82      	ldr	r3, [pc, #520]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0308 	and.w	r3, r3, #8
 800396a:	2b00      	cmp	r3, #0
 800396c:	d004      	beq.n	8003978 <HAL_RCC_OscConfig+0x7c>
 800396e:	4b7f      	ldr	r3, [pc, #508]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003976:	e005      	b.n	8003984 <HAL_RCC_OscConfig+0x88>
 8003978:	4b7c      	ldr	r3, [pc, #496]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 800397a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800397e:	091b      	lsrs	r3, r3, #4
 8003980:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003984:	4293      	cmp	r3, r2
 8003986:	d223      	bcs.n	80039d0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	4618      	mov	r0, r3
 800398e:	f000 fd55 	bl	800443c <RCC_SetFlashLatencyFromMSIRange>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d001      	beq.n	800399c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e383      	b.n	80040a4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800399c:	4b73      	ldr	r3, [pc, #460]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a72      	ldr	r2, [pc, #456]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 80039a2:	f043 0308 	orr.w	r3, r3, #8
 80039a6:	6013      	str	r3, [r2, #0]
 80039a8:	4b70      	ldr	r3, [pc, #448]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	496d      	ldr	r1, [pc, #436]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039ba:	4b6c      	ldr	r3, [pc, #432]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	69db      	ldr	r3, [r3, #28]
 80039c6:	021b      	lsls	r3, r3, #8
 80039c8:	4968      	ldr	r1, [pc, #416]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	604b      	str	r3, [r1, #4]
 80039ce:	e025      	b.n	8003a1c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039d0:	4b66      	ldr	r3, [pc, #408]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a65      	ldr	r2, [pc, #404]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 80039d6:	f043 0308 	orr.w	r3, r3, #8
 80039da:	6013      	str	r3, [r2, #0]
 80039dc:	4b63      	ldr	r3, [pc, #396]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	4960      	ldr	r1, [pc, #384]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039ee:	4b5f      	ldr	r3, [pc, #380]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	69db      	ldr	r3, [r3, #28]
 80039fa:	021b      	lsls	r3, r3, #8
 80039fc:	495b      	ldr	r1, [pc, #364]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d109      	bne.n	8003a1c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a1b      	ldr	r3, [r3, #32]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f000 fd15 	bl	800443c <RCC_SetFlashLatencyFromMSIRange>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d001      	beq.n	8003a1c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e343      	b.n	80040a4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a1c:	f000 fc4a 	bl	80042b4 <HAL_RCC_GetSysClockFreq>
 8003a20:	4602      	mov	r2, r0
 8003a22:	4b52      	ldr	r3, [pc, #328]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	091b      	lsrs	r3, r3, #4
 8003a28:	f003 030f 	and.w	r3, r3, #15
 8003a2c:	4950      	ldr	r1, [pc, #320]	@ (8003b70 <HAL_RCC_OscConfig+0x274>)
 8003a2e:	5ccb      	ldrb	r3, [r1, r3]
 8003a30:	f003 031f 	and.w	r3, r3, #31
 8003a34:	fa22 f303 	lsr.w	r3, r2, r3
 8003a38:	4a4e      	ldr	r2, [pc, #312]	@ (8003b74 <HAL_RCC_OscConfig+0x278>)
 8003a3a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003a3c:	4b4e      	ldr	r3, [pc, #312]	@ (8003b78 <HAL_RCC_OscConfig+0x27c>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7fe fc15 	bl	8002270 <HAL_InitTick>
 8003a46:	4603      	mov	r3, r0
 8003a48:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003a4a:	7bfb      	ldrb	r3, [r7, #15]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d052      	beq.n	8003af6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003a50:	7bfb      	ldrb	r3, [r7, #15]
 8003a52:	e327      	b.n	80040a4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d032      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a5c:	4b43      	ldr	r3, [pc, #268]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a42      	ldr	r2, [pc, #264]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 8003a62:	f043 0301 	orr.w	r3, r3, #1
 8003a66:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a68:	f7fe fc52 	bl	8002310 <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a6e:	e008      	b.n	8003a82 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a70:	f7fe fc4e 	bl	8002310 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e310      	b.n	80040a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a82:	4b3a      	ldr	r3, [pc, #232]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d0f0      	beq.n	8003a70 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a8e:	4b37      	ldr	r3, [pc, #220]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a36      	ldr	r2, [pc, #216]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 8003a94:	f043 0308 	orr.w	r3, r3, #8
 8003a98:	6013      	str	r3, [r2, #0]
 8003a9a:	4b34      	ldr	r3, [pc, #208]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	4931      	ldr	r1, [pc, #196]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003aac:	4b2f      	ldr	r3, [pc, #188]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	69db      	ldr	r3, [r3, #28]
 8003ab8:	021b      	lsls	r3, r3, #8
 8003aba:	492c      	ldr	r1, [pc, #176]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	604b      	str	r3, [r1, #4]
 8003ac0:	e01a      	b.n	8003af8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003ac2:	4b2a      	ldr	r3, [pc, #168]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a29      	ldr	r2, [pc, #164]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 8003ac8:	f023 0301 	bic.w	r3, r3, #1
 8003acc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ace:	f7fe fc1f 	bl	8002310 <HAL_GetTick>
 8003ad2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ad4:	e008      	b.n	8003ae8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ad6:	f7fe fc1b 	bl	8002310 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d901      	bls.n	8003ae8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e2dd      	b.n	80040a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ae8:	4b20      	ldr	r3, [pc, #128]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0302 	and.w	r3, r3, #2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1f0      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x1da>
 8003af4:	e000      	b.n	8003af8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003af6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d074      	beq.n	8003bee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	2b08      	cmp	r3, #8
 8003b08:	d005      	beq.n	8003b16 <HAL_RCC_OscConfig+0x21a>
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	2b0c      	cmp	r3, #12
 8003b0e:	d10e      	bne.n	8003b2e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	2b03      	cmp	r3, #3
 8003b14:	d10b      	bne.n	8003b2e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b16:	4b15      	ldr	r3, [pc, #84]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d064      	beq.n	8003bec <HAL_RCC_OscConfig+0x2f0>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d160      	bne.n	8003bec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e2ba      	b.n	80040a4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b36:	d106      	bne.n	8003b46 <HAL_RCC_OscConfig+0x24a>
 8003b38:	4b0c      	ldr	r3, [pc, #48]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a0b      	ldr	r2, [pc, #44]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 8003b3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b42:	6013      	str	r3, [r2, #0]
 8003b44:	e026      	b.n	8003b94 <HAL_RCC_OscConfig+0x298>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b4e:	d115      	bne.n	8003b7c <HAL_RCC_OscConfig+0x280>
 8003b50:	4b06      	ldr	r3, [pc, #24]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a05      	ldr	r2, [pc, #20]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 8003b56:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b5a:	6013      	str	r3, [r2, #0]
 8003b5c:	4b03      	ldr	r3, [pc, #12]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a02      	ldr	r2, [pc, #8]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 8003b62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b66:	6013      	str	r3, [r2, #0]
 8003b68:	e014      	b.n	8003b94 <HAL_RCC_OscConfig+0x298>
 8003b6a:	bf00      	nop
 8003b6c:	40021000 	.word	0x40021000
 8003b70:	0800c990 	.word	0x0800c990
 8003b74:	20000004 	.word	0x20000004
 8003b78:	20000008 	.word	0x20000008
 8003b7c:	4ba0      	ldr	r3, [pc, #640]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a9f      	ldr	r2, [pc, #636]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003b82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b86:	6013      	str	r3, [r2, #0]
 8003b88:	4b9d      	ldr	r3, [pc, #628]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a9c      	ldr	r2, [pc, #624]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003b8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d013      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b9c:	f7fe fbb8 	bl	8002310 <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ba2:	e008      	b.n	8003bb6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ba4:	f7fe fbb4 	bl	8002310 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b64      	cmp	r3, #100	@ 0x64
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e276      	b.n	80040a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bb6:	4b92      	ldr	r3, [pc, #584]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d0f0      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x2a8>
 8003bc2:	e014      	b.n	8003bee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc4:	f7fe fba4 	bl	8002310 <HAL_GetTick>
 8003bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bca:	e008      	b.n	8003bde <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bcc:	f7fe fba0 	bl	8002310 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b64      	cmp	r3, #100	@ 0x64
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e262      	b.n	80040a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bde:	4b88      	ldr	r3, [pc, #544]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1f0      	bne.n	8003bcc <HAL_RCC_OscConfig+0x2d0>
 8003bea:	e000      	b.n	8003bee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d060      	beq.n	8003cbc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	2b04      	cmp	r3, #4
 8003bfe:	d005      	beq.n	8003c0c <HAL_RCC_OscConfig+0x310>
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	2b0c      	cmp	r3, #12
 8003c04:	d119      	bne.n	8003c3a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d116      	bne.n	8003c3a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c0c:	4b7c      	ldr	r3, [pc, #496]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d005      	beq.n	8003c24 <HAL_RCC_OscConfig+0x328>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d101      	bne.n	8003c24 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e23f      	b.n	80040a4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c24:	4b76      	ldr	r3, [pc, #472]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	061b      	lsls	r3, r3, #24
 8003c32:	4973      	ldr	r1, [pc, #460]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c38:	e040      	b.n	8003cbc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d023      	beq.n	8003c8a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c42:	4b6f      	ldr	r3, [pc, #444]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a6e      	ldr	r2, [pc, #440]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003c48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c4e:	f7fe fb5f 	bl	8002310 <HAL_GetTick>
 8003c52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c54:	e008      	b.n	8003c68 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c56:	f7fe fb5b 	bl	8002310 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d901      	bls.n	8003c68 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e21d      	b.n	80040a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c68:	4b65      	ldr	r3, [pc, #404]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d0f0      	beq.n	8003c56 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c74:	4b62      	ldr	r3, [pc, #392]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	061b      	lsls	r3, r3, #24
 8003c82:	495f      	ldr	r1, [pc, #380]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	604b      	str	r3, [r1, #4]
 8003c88:	e018      	b.n	8003cbc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c8a:	4b5d      	ldr	r3, [pc, #372]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a5c      	ldr	r2, [pc, #368]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003c90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c96:	f7fe fb3b 	bl	8002310 <HAL_GetTick>
 8003c9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c9c:	e008      	b.n	8003cb0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c9e:	f7fe fb37 	bl	8002310 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d901      	bls.n	8003cb0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e1f9      	b.n	80040a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cb0:	4b53      	ldr	r3, [pc, #332]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1f0      	bne.n	8003c9e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0308 	and.w	r3, r3, #8
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d03c      	beq.n	8003d42 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	695b      	ldr	r3, [r3, #20]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d01c      	beq.n	8003d0a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cd0:	4b4b      	ldr	r3, [pc, #300]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003cd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cd6:	4a4a      	ldr	r2, [pc, #296]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003cd8:	f043 0301 	orr.w	r3, r3, #1
 8003cdc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce0:	f7fe fb16 	bl	8002310 <HAL_GetTick>
 8003ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ce6:	e008      	b.n	8003cfa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ce8:	f7fe fb12 	bl	8002310 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e1d4      	b.n	80040a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cfa:	4b41      	ldr	r3, [pc, #260]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003cfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d00:	f003 0302 	and.w	r3, r3, #2
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d0ef      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x3ec>
 8003d08:	e01b      	b.n	8003d42 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d0a:	4b3d      	ldr	r3, [pc, #244]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003d0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d10:	4a3b      	ldr	r2, [pc, #236]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003d12:	f023 0301 	bic.w	r3, r3, #1
 8003d16:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d1a:	f7fe faf9 	bl	8002310 <HAL_GetTick>
 8003d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d20:	e008      	b.n	8003d34 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d22:	f7fe faf5 	bl	8002310 <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d901      	bls.n	8003d34 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e1b7      	b.n	80040a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d34:	4b32      	ldr	r3, [pc, #200]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003d36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1ef      	bne.n	8003d22 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0304 	and.w	r3, r3, #4
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f000 80a6 	beq.w	8003e9c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d50:	2300      	movs	r3, #0
 8003d52:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d54:	4b2a      	ldr	r3, [pc, #168]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003d56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10d      	bne.n	8003d7c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d60:	4b27      	ldr	r3, [pc, #156]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003d62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d64:	4a26      	ldr	r2, [pc, #152]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003d66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d6c:	4b24      	ldr	r3, [pc, #144]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003d6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d74:	60bb      	str	r3, [r7, #8]
 8003d76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d7c:	4b21      	ldr	r3, [pc, #132]	@ (8003e04 <HAL_RCC_OscConfig+0x508>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d118      	bne.n	8003dba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d88:	4b1e      	ldr	r3, [pc, #120]	@ (8003e04 <HAL_RCC_OscConfig+0x508>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a1d      	ldr	r2, [pc, #116]	@ (8003e04 <HAL_RCC_OscConfig+0x508>)
 8003d8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d92:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d94:	f7fe fabc 	bl	8002310 <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d9c:	f7fe fab8 	bl	8002310 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e17a      	b.n	80040a4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dae:	4b15      	ldr	r3, [pc, #84]	@ (8003e04 <HAL_RCC_OscConfig+0x508>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d0f0      	beq.n	8003d9c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d108      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x4d8>
 8003dc2:	4b0f      	ldr	r3, [pc, #60]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dc8:	4a0d      	ldr	r2, [pc, #52]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003dca:	f043 0301 	orr.w	r3, r3, #1
 8003dce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003dd2:	e029      	b.n	8003e28 <HAL_RCC_OscConfig+0x52c>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	2b05      	cmp	r3, #5
 8003dda:	d115      	bne.n	8003e08 <HAL_RCC_OscConfig+0x50c>
 8003ddc:	4b08      	ldr	r3, [pc, #32]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003de2:	4a07      	ldr	r2, [pc, #28]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003de4:	f043 0304 	orr.w	r3, r3, #4
 8003de8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003dec:	4b04      	ldr	r3, [pc, #16]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003df2:	4a03      	ldr	r2, [pc, #12]	@ (8003e00 <HAL_RCC_OscConfig+0x504>)
 8003df4:	f043 0301 	orr.w	r3, r3, #1
 8003df8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003dfc:	e014      	b.n	8003e28 <HAL_RCC_OscConfig+0x52c>
 8003dfe:	bf00      	nop
 8003e00:	40021000 	.word	0x40021000
 8003e04:	40007000 	.word	0x40007000
 8003e08:	4b9c      	ldr	r3, [pc, #624]	@ (800407c <HAL_RCC_OscConfig+0x780>)
 8003e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e0e:	4a9b      	ldr	r2, [pc, #620]	@ (800407c <HAL_RCC_OscConfig+0x780>)
 8003e10:	f023 0301 	bic.w	r3, r3, #1
 8003e14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e18:	4b98      	ldr	r3, [pc, #608]	@ (800407c <HAL_RCC_OscConfig+0x780>)
 8003e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e1e:	4a97      	ldr	r2, [pc, #604]	@ (800407c <HAL_RCC_OscConfig+0x780>)
 8003e20:	f023 0304 	bic.w	r3, r3, #4
 8003e24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d016      	beq.n	8003e5e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e30:	f7fe fa6e 	bl	8002310 <HAL_GetTick>
 8003e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e36:	e00a      	b.n	8003e4e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e38:	f7fe fa6a 	bl	8002310 <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e12a      	b.n	80040a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e4e:	4b8b      	ldr	r3, [pc, #556]	@ (800407c <HAL_RCC_OscConfig+0x780>)
 8003e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d0ed      	beq.n	8003e38 <HAL_RCC_OscConfig+0x53c>
 8003e5c:	e015      	b.n	8003e8a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e5e:	f7fe fa57 	bl	8002310 <HAL_GetTick>
 8003e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e64:	e00a      	b.n	8003e7c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e66:	f7fe fa53 	bl	8002310 <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d901      	bls.n	8003e7c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e113      	b.n	80040a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e7c:	4b7f      	ldr	r3, [pc, #508]	@ (800407c <HAL_RCC_OscConfig+0x780>)
 8003e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1ed      	bne.n	8003e66 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e8a:	7ffb      	ldrb	r3, [r7, #31]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d105      	bne.n	8003e9c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e90:	4b7a      	ldr	r3, [pc, #488]	@ (800407c <HAL_RCC_OscConfig+0x780>)
 8003e92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e94:	4a79      	ldr	r2, [pc, #484]	@ (800407c <HAL_RCC_OscConfig+0x780>)
 8003e96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e9a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f000 80fe 	beq.w	80040a2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	f040 80d0 	bne.w	8004050 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003eb0:	4b72      	ldr	r3, [pc, #456]	@ (800407c <HAL_RCC_OscConfig+0x780>)
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	f003 0203 	and.w	r2, r3, #3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d130      	bne.n	8003f26 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d127      	bne.n	8003f26 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ee0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d11f      	bne.n	8003f26 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003ef0:	2a07      	cmp	r2, #7
 8003ef2:	bf14      	ite	ne
 8003ef4:	2201      	movne	r2, #1
 8003ef6:	2200      	moveq	r2, #0
 8003ef8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d113      	bne.n	8003f26 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f08:	085b      	lsrs	r3, r3, #1
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d109      	bne.n	8003f26 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1c:	085b      	lsrs	r3, r3, #1
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d06e      	beq.n	8004004 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	2b0c      	cmp	r3, #12
 8003f2a:	d069      	beq.n	8004000 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003f2c:	4b53      	ldr	r3, [pc, #332]	@ (800407c <HAL_RCC_OscConfig+0x780>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d105      	bne.n	8003f44 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003f38:	4b50      	ldr	r3, [pc, #320]	@ (800407c <HAL_RCC_OscConfig+0x780>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d001      	beq.n	8003f48 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e0ad      	b.n	80040a4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003f48:	4b4c      	ldr	r3, [pc, #304]	@ (800407c <HAL_RCC_OscConfig+0x780>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a4b      	ldr	r2, [pc, #300]	@ (800407c <HAL_RCC_OscConfig+0x780>)
 8003f4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f52:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f54:	f7fe f9dc 	bl	8002310 <HAL_GetTick>
 8003f58:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f5a:	e008      	b.n	8003f6e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f5c:	f7fe f9d8 	bl	8002310 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d901      	bls.n	8003f6e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e09a      	b.n	80040a4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f6e:	4b43      	ldr	r3, [pc, #268]	@ (800407c <HAL_RCC_OscConfig+0x780>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1f0      	bne.n	8003f5c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f7a:	4b40      	ldr	r3, [pc, #256]	@ (800407c <HAL_RCC_OscConfig+0x780>)
 8003f7c:	68da      	ldr	r2, [r3, #12]
 8003f7e:	4b40      	ldr	r3, [pc, #256]	@ (8004080 <HAL_RCC_OscConfig+0x784>)
 8003f80:	4013      	ands	r3, r2
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003f8a:	3a01      	subs	r2, #1
 8003f8c:	0112      	lsls	r2, r2, #4
 8003f8e:	4311      	orrs	r1, r2
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003f94:	0212      	lsls	r2, r2, #8
 8003f96:	4311      	orrs	r1, r2
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003f9c:	0852      	lsrs	r2, r2, #1
 8003f9e:	3a01      	subs	r2, #1
 8003fa0:	0552      	lsls	r2, r2, #21
 8003fa2:	4311      	orrs	r1, r2
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003fa8:	0852      	lsrs	r2, r2, #1
 8003faa:	3a01      	subs	r2, #1
 8003fac:	0652      	lsls	r2, r2, #25
 8003fae:	4311      	orrs	r1, r2
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003fb4:	0912      	lsrs	r2, r2, #4
 8003fb6:	0452      	lsls	r2, r2, #17
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	4930      	ldr	r1, [pc, #192]	@ (800407c <HAL_RCC_OscConfig+0x780>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003fc0:	4b2e      	ldr	r3, [pc, #184]	@ (800407c <HAL_RCC_OscConfig+0x780>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a2d      	ldr	r2, [pc, #180]	@ (800407c <HAL_RCC_OscConfig+0x780>)
 8003fc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fcc:	4b2b      	ldr	r3, [pc, #172]	@ (800407c <HAL_RCC_OscConfig+0x780>)
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	4a2a      	ldr	r2, [pc, #168]	@ (800407c <HAL_RCC_OscConfig+0x780>)
 8003fd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fd6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003fd8:	f7fe f99a 	bl	8002310 <HAL_GetTick>
 8003fdc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fde:	e008      	b.n	8003ff2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fe0:	f7fe f996 	bl	8002310 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e058      	b.n	80040a4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ff2:	4b22      	ldr	r3, [pc, #136]	@ (800407c <HAL_RCC_OscConfig+0x780>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d0f0      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ffe:	e050      	b.n	80040a2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e04f      	b.n	80040a4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004004:	4b1d      	ldr	r3, [pc, #116]	@ (800407c <HAL_RCC_OscConfig+0x780>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d148      	bne.n	80040a2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004010:	4b1a      	ldr	r3, [pc, #104]	@ (800407c <HAL_RCC_OscConfig+0x780>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a19      	ldr	r2, [pc, #100]	@ (800407c <HAL_RCC_OscConfig+0x780>)
 8004016:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800401a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800401c:	4b17      	ldr	r3, [pc, #92]	@ (800407c <HAL_RCC_OscConfig+0x780>)
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	4a16      	ldr	r2, [pc, #88]	@ (800407c <HAL_RCC_OscConfig+0x780>)
 8004022:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004026:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004028:	f7fe f972 	bl	8002310 <HAL_GetTick>
 800402c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800402e:	e008      	b.n	8004042 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004030:	f7fe f96e 	bl	8002310 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b02      	cmp	r3, #2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e030      	b.n	80040a4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004042:	4b0e      	ldr	r3, [pc, #56]	@ (800407c <HAL_RCC_OscConfig+0x780>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d0f0      	beq.n	8004030 <HAL_RCC_OscConfig+0x734>
 800404e:	e028      	b.n	80040a2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	2b0c      	cmp	r3, #12
 8004054:	d023      	beq.n	800409e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004056:	4b09      	ldr	r3, [pc, #36]	@ (800407c <HAL_RCC_OscConfig+0x780>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a08      	ldr	r2, [pc, #32]	@ (800407c <HAL_RCC_OscConfig+0x780>)
 800405c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004060:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004062:	f7fe f955 	bl	8002310 <HAL_GetTick>
 8004066:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004068:	e00c      	b.n	8004084 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800406a:	f7fe f951 	bl	8002310 <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	2b02      	cmp	r3, #2
 8004076:	d905      	bls.n	8004084 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e013      	b.n	80040a4 <HAL_RCC_OscConfig+0x7a8>
 800407c:	40021000 	.word	0x40021000
 8004080:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004084:	4b09      	ldr	r3, [pc, #36]	@ (80040ac <HAL_RCC_OscConfig+0x7b0>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1ec      	bne.n	800406a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004090:	4b06      	ldr	r3, [pc, #24]	@ (80040ac <HAL_RCC_OscConfig+0x7b0>)
 8004092:	68da      	ldr	r2, [r3, #12]
 8004094:	4905      	ldr	r1, [pc, #20]	@ (80040ac <HAL_RCC_OscConfig+0x7b0>)
 8004096:	4b06      	ldr	r3, [pc, #24]	@ (80040b0 <HAL_RCC_OscConfig+0x7b4>)
 8004098:	4013      	ands	r3, r2
 800409a:	60cb      	str	r3, [r1, #12]
 800409c:	e001      	b.n	80040a2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e000      	b.n	80040a4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3720      	adds	r7, #32
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	40021000 	.word	0x40021000
 80040b0:	feeefffc 	.word	0xfeeefffc

080040b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e0e7      	b.n	8004298 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040c8:	4b75      	ldr	r3, [pc, #468]	@ (80042a0 <HAL_RCC_ClockConfig+0x1ec>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0307 	and.w	r3, r3, #7
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d910      	bls.n	80040f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040d6:	4b72      	ldr	r3, [pc, #456]	@ (80042a0 <HAL_RCC_ClockConfig+0x1ec>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f023 0207 	bic.w	r2, r3, #7
 80040de:	4970      	ldr	r1, [pc, #448]	@ (80042a0 <HAL_RCC_ClockConfig+0x1ec>)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040e6:	4b6e      	ldr	r3, [pc, #440]	@ (80042a0 <HAL_RCC_ClockConfig+0x1ec>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0307 	and.w	r3, r3, #7
 80040ee:	683a      	ldr	r2, [r7, #0]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d001      	beq.n	80040f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e0cf      	b.n	8004298 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	2b00      	cmp	r3, #0
 8004102:	d010      	beq.n	8004126 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689a      	ldr	r2, [r3, #8]
 8004108:	4b66      	ldr	r3, [pc, #408]	@ (80042a4 <HAL_RCC_ClockConfig+0x1f0>)
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004110:	429a      	cmp	r2, r3
 8004112:	d908      	bls.n	8004126 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004114:	4b63      	ldr	r3, [pc, #396]	@ (80042a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	4960      	ldr	r1, [pc, #384]	@ (80042a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004122:	4313      	orrs	r3, r2
 8004124:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b00      	cmp	r3, #0
 8004130:	d04c      	beq.n	80041cc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	2b03      	cmp	r3, #3
 8004138:	d107      	bne.n	800414a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800413a:	4b5a      	ldr	r3, [pc, #360]	@ (80042a4 <HAL_RCC_ClockConfig+0x1f0>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d121      	bne.n	800418a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e0a6      	b.n	8004298 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	2b02      	cmp	r3, #2
 8004150:	d107      	bne.n	8004162 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004152:	4b54      	ldr	r3, [pc, #336]	@ (80042a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d115      	bne.n	800418a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e09a      	b.n	8004298 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d107      	bne.n	800417a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800416a:	4b4e      	ldr	r3, [pc, #312]	@ (80042a4 <HAL_RCC_ClockConfig+0x1f0>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d109      	bne.n	800418a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e08e      	b.n	8004298 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800417a:	4b4a      	ldr	r3, [pc, #296]	@ (80042a4 <HAL_RCC_ClockConfig+0x1f0>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e086      	b.n	8004298 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800418a:	4b46      	ldr	r3, [pc, #280]	@ (80042a4 <HAL_RCC_ClockConfig+0x1f0>)
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f023 0203 	bic.w	r2, r3, #3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	4943      	ldr	r1, [pc, #268]	@ (80042a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004198:	4313      	orrs	r3, r2
 800419a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800419c:	f7fe f8b8 	bl	8002310 <HAL_GetTick>
 80041a0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041a2:	e00a      	b.n	80041ba <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041a4:	f7fe f8b4 	bl	8002310 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d901      	bls.n	80041ba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e06e      	b.n	8004298 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ba:	4b3a      	ldr	r3, [pc, #232]	@ (80042a4 <HAL_RCC_ClockConfig+0x1f0>)
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f003 020c 	and.w	r2, r3, #12
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d1eb      	bne.n	80041a4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0302 	and.w	r3, r3, #2
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d010      	beq.n	80041fa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689a      	ldr	r2, [r3, #8]
 80041dc:	4b31      	ldr	r3, [pc, #196]	@ (80042a4 <HAL_RCC_ClockConfig+0x1f0>)
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d208      	bcs.n	80041fa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041e8:	4b2e      	ldr	r3, [pc, #184]	@ (80042a4 <HAL_RCC_ClockConfig+0x1f0>)
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	492b      	ldr	r1, [pc, #172]	@ (80042a4 <HAL_RCC_ClockConfig+0x1f0>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041fa:	4b29      	ldr	r3, [pc, #164]	@ (80042a0 <HAL_RCC_ClockConfig+0x1ec>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0307 	and.w	r3, r3, #7
 8004202:	683a      	ldr	r2, [r7, #0]
 8004204:	429a      	cmp	r2, r3
 8004206:	d210      	bcs.n	800422a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004208:	4b25      	ldr	r3, [pc, #148]	@ (80042a0 <HAL_RCC_ClockConfig+0x1ec>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f023 0207 	bic.w	r2, r3, #7
 8004210:	4923      	ldr	r1, [pc, #140]	@ (80042a0 <HAL_RCC_ClockConfig+0x1ec>)
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	4313      	orrs	r3, r2
 8004216:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004218:	4b21      	ldr	r3, [pc, #132]	@ (80042a0 <HAL_RCC_ClockConfig+0x1ec>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0307 	and.w	r3, r3, #7
 8004220:	683a      	ldr	r2, [r7, #0]
 8004222:	429a      	cmp	r2, r3
 8004224:	d001      	beq.n	800422a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e036      	b.n	8004298 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0304 	and.w	r3, r3, #4
 8004232:	2b00      	cmp	r3, #0
 8004234:	d008      	beq.n	8004248 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004236:	4b1b      	ldr	r3, [pc, #108]	@ (80042a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	4918      	ldr	r1, [pc, #96]	@ (80042a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004244:	4313      	orrs	r3, r2
 8004246:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0308 	and.w	r3, r3, #8
 8004250:	2b00      	cmp	r3, #0
 8004252:	d009      	beq.n	8004268 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004254:	4b13      	ldr	r3, [pc, #76]	@ (80042a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	00db      	lsls	r3, r3, #3
 8004262:	4910      	ldr	r1, [pc, #64]	@ (80042a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004264:	4313      	orrs	r3, r2
 8004266:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004268:	f000 f824 	bl	80042b4 <HAL_RCC_GetSysClockFreq>
 800426c:	4602      	mov	r2, r0
 800426e:	4b0d      	ldr	r3, [pc, #52]	@ (80042a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	091b      	lsrs	r3, r3, #4
 8004274:	f003 030f 	and.w	r3, r3, #15
 8004278:	490b      	ldr	r1, [pc, #44]	@ (80042a8 <HAL_RCC_ClockConfig+0x1f4>)
 800427a:	5ccb      	ldrb	r3, [r1, r3]
 800427c:	f003 031f 	and.w	r3, r3, #31
 8004280:	fa22 f303 	lsr.w	r3, r2, r3
 8004284:	4a09      	ldr	r2, [pc, #36]	@ (80042ac <HAL_RCC_ClockConfig+0x1f8>)
 8004286:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004288:	4b09      	ldr	r3, [pc, #36]	@ (80042b0 <HAL_RCC_ClockConfig+0x1fc>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4618      	mov	r0, r3
 800428e:	f7fd ffef 	bl	8002270 <HAL_InitTick>
 8004292:	4603      	mov	r3, r0
 8004294:	72fb      	strb	r3, [r7, #11]

  return status;
 8004296:	7afb      	ldrb	r3, [r7, #11]
}
 8004298:	4618      	mov	r0, r3
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	40022000 	.word	0x40022000
 80042a4:	40021000 	.word	0x40021000
 80042a8:	0800c990 	.word	0x0800c990
 80042ac:	20000004 	.word	0x20000004
 80042b0:	20000008 	.word	0x20000008

080042b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b089      	sub	sp, #36	@ 0x24
 80042b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80042ba:	2300      	movs	r3, #0
 80042bc:	61fb      	str	r3, [r7, #28]
 80042be:	2300      	movs	r3, #0
 80042c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042c2:	4b3e      	ldr	r3, [pc, #248]	@ (80043bc <HAL_RCC_GetSysClockFreq+0x108>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f003 030c 	and.w	r3, r3, #12
 80042ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042cc:	4b3b      	ldr	r3, [pc, #236]	@ (80043bc <HAL_RCC_GetSysClockFreq+0x108>)
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	f003 0303 	and.w	r3, r3, #3
 80042d4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d005      	beq.n	80042e8 <HAL_RCC_GetSysClockFreq+0x34>
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	2b0c      	cmp	r3, #12
 80042e0:	d121      	bne.n	8004326 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d11e      	bne.n	8004326 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80042e8:	4b34      	ldr	r3, [pc, #208]	@ (80043bc <HAL_RCC_GetSysClockFreq+0x108>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0308 	and.w	r3, r3, #8
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d107      	bne.n	8004304 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80042f4:	4b31      	ldr	r3, [pc, #196]	@ (80043bc <HAL_RCC_GetSysClockFreq+0x108>)
 80042f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042fa:	0a1b      	lsrs	r3, r3, #8
 80042fc:	f003 030f 	and.w	r3, r3, #15
 8004300:	61fb      	str	r3, [r7, #28]
 8004302:	e005      	b.n	8004310 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004304:	4b2d      	ldr	r3, [pc, #180]	@ (80043bc <HAL_RCC_GetSysClockFreq+0x108>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	091b      	lsrs	r3, r3, #4
 800430a:	f003 030f 	and.w	r3, r3, #15
 800430e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004310:	4a2b      	ldr	r2, [pc, #172]	@ (80043c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004318:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d10d      	bne.n	800433c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004324:	e00a      	b.n	800433c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	2b04      	cmp	r3, #4
 800432a:	d102      	bne.n	8004332 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800432c:	4b25      	ldr	r3, [pc, #148]	@ (80043c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800432e:	61bb      	str	r3, [r7, #24]
 8004330:	e004      	b.n	800433c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	2b08      	cmp	r3, #8
 8004336:	d101      	bne.n	800433c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004338:	4b23      	ldr	r3, [pc, #140]	@ (80043c8 <HAL_RCC_GetSysClockFreq+0x114>)
 800433a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	2b0c      	cmp	r3, #12
 8004340:	d134      	bne.n	80043ac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004342:	4b1e      	ldr	r3, [pc, #120]	@ (80043bc <HAL_RCC_GetSysClockFreq+0x108>)
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	f003 0303 	and.w	r3, r3, #3
 800434a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	2b02      	cmp	r3, #2
 8004350:	d003      	beq.n	800435a <HAL_RCC_GetSysClockFreq+0xa6>
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	2b03      	cmp	r3, #3
 8004356:	d003      	beq.n	8004360 <HAL_RCC_GetSysClockFreq+0xac>
 8004358:	e005      	b.n	8004366 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800435a:	4b1a      	ldr	r3, [pc, #104]	@ (80043c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800435c:	617b      	str	r3, [r7, #20]
      break;
 800435e:	e005      	b.n	800436c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004360:	4b19      	ldr	r3, [pc, #100]	@ (80043c8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004362:	617b      	str	r3, [r7, #20]
      break;
 8004364:	e002      	b.n	800436c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	617b      	str	r3, [r7, #20]
      break;
 800436a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800436c:	4b13      	ldr	r3, [pc, #76]	@ (80043bc <HAL_RCC_GetSysClockFreq+0x108>)
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	091b      	lsrs	r3, r3, #4
 8004372:	f003 0307 	and.w	r3, r3, #7
 8004376:	3301      	adds	r3, #1
 8004378:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800437a:	4b10      	ldr	r3, [pc, #64]	@ (80043bc <HAL_RCC_GetSysClockFreq+0x108>)
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	0a1b      	lsrs	r3, r3, #8
 8004380:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	fb03 f202 	mul.w	r2, r3, r2
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004390:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004392:	4b0a      	ldr	r3, [pc, #40]	@ (80043bc <HAL_RCC_GetSysClockFreq+0x108>)
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	0e5b      	lsrs	r3, r3, #25
 8004398:	f003 0303 	and.w	r3, r3, #3
 800439c:	3301      	adds	r3, #1
 800439e:	005b      	lsls	r3, r3, #1
 80043a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80043a2:	697a      	ldr	r2, [r7, #20]
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80043ac:	69bb      	ldr	r3, [r7, #24]
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3724      	adds	r7, #36	@ 0x24
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	40021000 	.word	0x40021000
 80043c0:	0800c9a8 	.word	0x0800c9a8
 80043c4:	00f42400 	.word	0x00f42400
 80043c8:	007a1200 	.word	0x007a1200

080043cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043cc:	b480      	push	{r7}
 80043ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043d0:	4b03      	ldr	r3, [pc, #12]	@ (80043e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80043d2:	681b      	ldr	r3, [r3, #0]
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	20000004 	.word	0x20000004

080043e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80043e8:	f7ff fff0 	bl	80043cc <HAL_RCC_GetHCLKFreq>
 80043ec:	4602      	mov	r2, r0
 80043ee:	4b06      	ldr	r3, [pc, #24]	@ (8004408 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	0a1b      	lsrs	r3, r3, #8
 80043f4:	f003 0307 	and.w	r3, r3, #7
 80043f8:	4904      	ldr	r1, [pc, #16]	@ (800440c <HAL_RCC_GetPCLK1Freq+0x28>)
 80043fa:	5ccb      	ldrb	r3, [r1, r3]
 80043fc:	f003 031f 	and.w	r3, r3, #31
 8004400:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004404:	4618      	mov	r0, r3
 8004406:	bd80      	pop	{r7, pc}
 8004408:	40021000 	.word	0x40021000
 800440c:	0800c9a0 	.word	0x0800c9a0

08004410 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004414:	f7ff ffda 	bl	80043cc <HAL_RCC_GetHCLKFreq>
 8004418:	4602      	mov	r2, r0
 800441a:	4b06      	ldr	r3, [pc, #24]	@ (8004434 <HAL_RCC_GetPCLK2Freq+0x24>)
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	0adb      	lsrs	r3, r3, #11
 8004420:	f003 0307 	and.w	r3, r3, #7
 8004424:	4904      	ldr	r1, [pc, #16]	@ (8004438 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004426:	5ccb      	ldrb	r3, [r1, r3]
 8004428:	f003 031f 	and.w	r3, r3, #31
 800442c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004430:	4618      	mov	r0, r3
 8004432:	bd80      	pop	{r7, pc}
 8004434:	40021000 	.word	0x40021000
 8004438:	0800c9a0 	.word	0x0800c9a0

0800443c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b086      	sub	sp, #24
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004444:	2300      	movs	r3, #0
 8004446:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004448:	4b2a      	ldr	r3, [pc, #168]	@ (80044f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800444a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800444c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d003      	beq.n	800445c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004454:	f7ff f9ee 	bl	8003834 <HAL_PWREx_GetVoltageRange>
 8004458:	6178      	str	r0, [r7, #20]
 800445a:	e014      	b.n	8004486 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800445c:	4b25      	ldr	r3, [pc, #148]	@ (80044f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800445e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004460:	4a24      	ldr	r2, [pc, #144]	@ (80044f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004462:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004466:	6593      	str	r3, [r2, #88]	@ 0x58
 8004468:	4b22      	ldr	r3, [pc, #136]	@ (80044f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800446a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800446c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004470:	60fb      	str	r3, [r7, #12]
 8004472:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004474:	f7ff f9de 	bl	8003834 <HAL_PWREx_GetVoltageRange>
 8004478:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800447a:	4b1e      	ldr	r3, [pc, #120]	@ (80044f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800447c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800447e:	4a1d      	ldr	r2, [pc, #116]	@ (80044f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004480:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004484:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800448c:	d10b      	bne.n	80044a6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2b80      	cmp	r3, #128	@ 0x80
 8004492:	d919      	bls.n	80044c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2ba0      	cmp	r3, #160	@ 0xa0
 8004498:	d902      	bls.n	80044a0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800449a:	2302      	movs	r3, #2
 800449c:	613b      	str	r3, [r7, #16]
 800449e:	e013      	b.n	80044c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044a0:	2301      	movs	r3, #1
 80044a2:	613b      	str	r3, [r7, #16]
 80044a4:	e010      	b.n	80044c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2b80      	cmp	r3, #128	@ 0x80
 80044aa:	d902      	bls.n	80044b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80044ac:	2303      	movs	r3, #3
 80044ae:	613b      	str	r3, [r7, #16]
 80044b0:	e00a      	b.n	80044c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2b80      	cmp	r3, #128	@ 0x80
 80044b6:	d102      	bne.n	80044be <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80044b8:	2302      	movs	r3, #2
 80044ba:	613b      	str	r3, [r7, #16]
 80044bc:	e004      	b.n	80044c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2b70      	cmp	r3, #112	@ 0x70
 80044c2:	d101      	bne.n	80044c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044c4:	2301      	movs	r3, #1
 80044c6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80044c8:	4b0b      	ldr	r3, [pc, #44]	@ (80044f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f023 0207 	bic.w	r2, r3, #7
 80044d0:	4909      	ldr	r1, [pc, #36]	@ (80044f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80044d8:	4b07      	ldr	r3, [pc, #28]	@ (80044f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0307 	and.w	r3, r3, #7
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d001      	beq.n	80044ea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e000      	b.n	80044ec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3718      	adds	r7, #24
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	40021000 	.word	0x40021000
 80044f8:	40022000 	.word	0x40022000

080044fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b086      	sub	sp, #24
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004504:	2300      	movs	r3, #0
 8004506:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004508:	2300      	movs	r3, #0
 800450a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004514:	2b00      	cmp	r3, #0
 8004516:	d041      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800451c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004520:	d02a      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004522:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004526:	d824      	bhi.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004528:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800452c:	d008      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800452e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004532:	d81e      	bhi.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00a      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004538:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800453c:	d010      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800453e:	e018      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004540:	4b86      	ldr	r3, [pc, #536]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	4a85      	ldr	r2, [pc, #532]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004546:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800454a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800454c:	e015      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	3304      	adds	r3, #4
 8004552:	2100      	movs	r1, #0
 8004554:	4618      	mov	r0, r3
 8004556:	f000 fabb 	bl	8004ad0 <RCCEx_PLLSAI1_Config>
 800455a:	4603      	mov	r3, r0
 800455c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800455e:	e00c      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	3320      	adds	r3, #32
 8004564:	2100      	movs	r1, #0
 8004566:	4618      	mov	r0, r3
 8004568:	f000 fba6 	bl	8004cb8 <RCCEx_PLLSAI2_Config>
 800456c:	4603      	mov	r3, r0
 800456e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004570:	e003      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	74fb      	strb	r3, [r7, #19]
      break;
 8004576:	e000      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004578:	bf00      	nop
    }

    if(ret == HAL_OK)
 800457a:	7cfb      	ldrb	r3, [r7, #19]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d10b      	bne.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004580:	4b76      	ldr	r3, [pc, #472]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004582:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004586:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800458e:	4973      	ldr	r1, [pc, #460]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004590:	4313      	orrs	r3, r2
 8004592:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004596:	e001      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004598:	7cfb      	ldrb	r3, [r7, #19]
 800459a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d041      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045ac:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80045b0:	d02a      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80045b2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80045b6:	d824      	bhi.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80045b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80045bc:	d008      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80045be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80045c2:	d81e      	bhi.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00a      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80045c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80045cc:	d010      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80045ce:	e018      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80045d0:	4b62      	ldr	r3, [pc, #392]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	4a61      	ldr	r2, [pc, #388]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045da:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80045dc:	e015      	b.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	3304      	adds	r3, #4
 80045e2:	2100      	movs	r1, #0
 80045e4:	4618      	mov	r0, r3
 80045e6:	f000 fa73 	bl	8004ad0 <RCCEx_PLLSAI1_Config>
 80045ea:	4603      	mov	r3, r0
 80045ec:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80045ee:	e00c      	b.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	3320      	adds	r3, #32
 80045f4:	2100      	movs	r1, #0
 80045f6:	4618      	mov	r0, r3
 80045f8:	f000 fb5e 	bl	8004cb8 <RCCEx_PLLSAI2_Config>
 80045fc:	4603      	mov	r3, r0
 80045fe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004600:	e003      	b.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	74fb      	strb	r3, [r7, #19]
      break;
 8004606:	e000      	b.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004608:	bf00      	nop
    }

    if(ret == HAL_OK)
 800460a:	7cfb      	ldrb	r3, [r7, #19]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d10b      	bne.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004610:	4b52      	ldr	r3, [pc, #328]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004616:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800461e:	494f      	ldr	r1, [pc, #316]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004620:	4313      	orrs	r3, r2
 8004622:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004626:	e001      	b.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004628:	7cfb      	ldrb	r3, [r7, #19]
 800462a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004634:	2b00      	cmp	r3, #0
 8004636:	f000 80a0 	beq.w	800477a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800463a:	2300      	movs	r3, #0
 800463c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800463e:	4b47      	ldr	r3, [pc, #284]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004642:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d101      	bne.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800464a:	2301      	movs	r3, #1
 800464c:	e000      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800464e:	2300      	movs	r3, #0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00d      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004654:	4b41      	ldr	r3, [pc, #260]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004656:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004658:	4a40      	ldr	r2, [pc, #256]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800465a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800465e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004660:	4b3e      	ldr	r3, [pc, #248]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004664:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004668:	60bb      	str	r3, [r7, #8]
 800466a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800466c:	2301      	movs	r3, #1
 800466e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004670:	4b3b      	ldr	r3, [pc, #236]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a3a      	ldr	r2, [pc, #232]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004676:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800467a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800467c:	f7fd fe48 	bl	8002310 <HAL_GetTick>
 8004680:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004682:	e009      	b.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004684:	f7fd fe44 	bl	8002310 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b02      	cmp	r3, #2
 8004690:	d902      	bls.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	74fb      	strb	r3, [r7, #19]
        break;
 8004696:	e005      	b.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004698:	4b31      	ldr	r3, [pc, #196]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d0ef      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80046a4:	7cfb      	ldrb	r3, [r7, #19]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d15c      	bne.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80046aa:	4b2c      	ldr	r3, [pc, #176]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046b4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d01f      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x200>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d019      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80046c8:	4b24      	ldr	r3, [pc, #144]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046d4:	4b21      	ldr	r3, [pc, #132]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046da:	4a20      	ldr	r2, [pc, #128]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046e4:	4b1d      	ldr	r3, [pc, #116]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046ea:	4a1c      	ldr	r2, [pc, #112]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80046f4:	4a19      	ldr	r2, [pc, #100]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	2b00      	cmp	r3, #0
 8004704:	d016      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004706:	f7fd fe03 	bl	8002310 <HAL_GetTick>
 800470a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800470c:	e00b      	b.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800470e:	f7fd fdff 	bl	8002310 <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	f241 3288 	movw	r2, #5000	@ 0x1388
 800471c:	4293      	cmp	r3, r2
 800471e:	d902      	bls.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	74fb      	strb	r3, [r7, #19]
            break;
 8004724:	e006      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004726:	4b0d      	ldr	r3, [pc, #52]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004728:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d0ec      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004734:	7cfb      	ldrb	r3, [r7, #19]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d10c      	bne.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800473a:	4b08      	ldr	r3, [pc, #32]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800473c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004740:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800474a:	4904      	ldr	r1, [pc, #16]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800474c:	4313      	orrs	r3, r2
 800474e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004752:	e009      	b.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004754:	7cfb      	ldrb	r3, [r7, #19]
 8004756:	74bb      	strb	r3, [r7, #18]
 8004758:	e006      	b.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800475a:	bf00      	nop
 800475c:	40021000 	.word	0x40021000
 8004760:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004764:	7cfb      	ldrb	r3, [r7, #19]
 8004766:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004768:	7c7b      	ldrb	r3, [r7, #17]
 800476a:	2b01      	cmp	r3, #1
 800476c:	d105      	bne.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800476e:	4b9e      	ldr	r3, [pc, #632]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004770:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004772:	4a9d      	ldr	r2, [pc, #628]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004774:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004778:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00a      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004786:	4b98      	ldr	r3, [pc, #608]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004788:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800478c:	f023 0203 	bic.w	r2, r3, #3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004794:	4994      	ldr	r1, [pc, #592]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004796:	4313      	orrs	r3, r2
 8004798:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0302 	and.w	r3, r3, #2
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00a      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047a8:	4b8f      	ldr	r3, [pc, #572]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ae:	f023 020c 	bic.w	r2, r3, #12
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047b6:	498c      	ldr	r1, [pc, #560]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0304 	and.w	r3, r3, #4
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00a      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80047ca:	4b87      	ldr	r3, [pc, #540]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047d0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d8:	4983      	ldr	r1, [pc, #524]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0308 	and.w	r3, r3, #8
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d00a      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80047ec:	4b7e      	ldr	r3, [pc, #504]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047f2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047fa:	497b      	ldr	r1, [pc, #492]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0310 	and.w	r3, r3, #16
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00a      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800480e:	4b76      	ldr	r3, [pc, #472]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004810:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004814:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800481c:	4972      	ldr	r1, [pc, #456]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800481e:	4313      	orrs	r3, r2
 8004820:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0320 	and.w	r3, r3, #32
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00a      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004830:	4b6d      	ldr	r3, [pc, #436]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004832:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004836:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800483e:	496a      	ldr	r1, [pc, #424]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004840:	4313      	orrs	r3, r2
 8004842:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00a      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004852:	4b65      	ldr	r3, [pc, #404]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004854:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004858:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004860:	4961      	ldr	r1, [pc, #388]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004862:	4313      	orrs	r3, r2
 8004864:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00a      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004874:	4b5c      	ldr	r3, [pc, #368]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004876:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800487a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004882:	4959      	ldr	r1, [pc, #356]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004884:	4313      	orrs	r3, r2
 8004886:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00a      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004896:	4b54      	ldr	r3, [pc, #336]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004898:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800489c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048a4:	4950      	ldr	r1, [pc, #320]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00a      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048b8:	4b4b      	ldr	r3, [pc, #300]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048be:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048c6:	4948      	ldr	r1, [pc, #288]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00a      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80048da:	4b43      	ldr	r3, [pc, #268]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048e0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048e8:	493f      	ldr	r1, [pc, #252]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d028      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048fc:	4b3a      	ldr	r3, [pc, #232]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004902:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800490a:	4937      	ldr	r1, [pc, #220]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800490c:	4313      	orrs	r3, r2
 800490e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004916:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800491a:	d106      	bne.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800491c:	4b32      	ldr	r3, [pc, #200]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	4a31      	ldr	r2, [pc, #196]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004922:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004926:	60d3      	str	r3, [r2, #12]
 8004928:	e011      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800492e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004932:	d10c      	bne.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	3304      	adds	r3, #4
 8004938:	2101      	movs	r1, #1
 800493a:	4618      	mov	r0, r3
 800493c:	f000 f8c8 	bl	8004ad0 <RCCEx_PLLSAI1_Config>
 8004940:	4603      	mov	r3, r0
 8004942:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004944:	7cfb      	ldrb	r3, [r7, #19]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800494a:	7cfb      	ldrb	r3, [r7, #19]
 800494c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d028      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800495a:	4b23      	ldr	r3, [pc, #140]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800495c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004960:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004968:	491f      	ldr	r1, [pc, #124]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800496a:	4313      	orrs	r3, r2
 800496c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004974:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004978:	d106      	bne.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800497a:	4b1b      	ldr	r3, [pc, #108]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	4a1a      	ldr	r2, [pc, #104]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004980:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004984:	60d3      	str	r3, [r2, #12]
 8004986:	e011      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800498c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004990:	d10c      	bne.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	3304      	adds	r3, #4
 8004996:	2101      	movs	r1, #1
 8004998:	4618      	mov	r0, r3
 800499a:	f000 f899 	bl	8004ad0 <RCCEx_PLLSAI1_Config>
 800499e:	4603      	mov	r3, r0
 80049a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049a2:	7cfb      	ldrb	r3, [r7, #19]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d001      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80049a8:	7cfb      	ldrb	r3, [r7, #19]
 80049aa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d02b      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049b8:	4b0b      	ldr	r3, [pc, #44]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049c6:	4908      	ldr	r1, [pc, #32]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049d6:	d109      	bne.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049d8:	4b03      	ldr	r3, [pc, #12]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	4a02      	ldr	r2, [pc, #8]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049e2:	60d3      	str	r3, [r2, #12]
 80049e4:	e014      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80049e6:	bf00      	nop
 80049e8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80049f4:	d10c      	bne.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	3304      	adds	r3, #4
 80049fa:	2101      	movs	r1, #1
 80049fc:	4618      	mov	r0, r3
 80049fe:	f000 f867 	bl	8004ad0 <RCCEx_PLLSAI1_Config>
 8004a02:	4603      	mov	r3, r0
 8004a04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a06:	7cfb      	ldrb	r3, [r7, #19]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d001      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004a0c:	7cfb      	ldrb	r3, [r7, #19]
 8004a0e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d02f      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a1c:	4b2b      	ldr	r3, [pc, #172]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a22:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a2a:	4928      	ldr	r1, [pc, #160]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a3a:	d10d      	bne.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	3304      	adds	r3, #4
 8004a40:	2102      	movs	r1, #2
 8004a42:	4618      	mov	r0, r3
 8004a44:	f000 f844 	bl	8004ad0 <RCCEx_PLLSAI1_Config>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a4c:	7cfb      	ldrb	r3, [r7, #19]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d014      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004a52:	7cfb      	ldrb	r3, [r7, #19]
 8004a54:	74bb      	strb	r3, [r7, #18]
 8004a56:	e011      	b.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a60:	d10c      	bne.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	3320      	adds	r3, #32
 8004a66:	2102      	movs	r1, #2
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f000 f925 	bl	8004cb8 <RCCEx_PLLSAI2_Config>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a72:	7cfb      	ldrb	r3, [r7, #19]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d001      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004a78:	7cfb      	ldrb	r3, [r7, #19]
 8004a7a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d00a      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a88:	4b10      	ldr	r3, [pc, #64]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a8e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a96:	490d      	ldr	r1, [pc, #52]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00b      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004aaa:	4b08      	ldr	r3, [pc, #32]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ab0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004aba:	4904      	ldr	r1, [pc, #16]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004ac2:	7cbb      	ldrb	r3, [r7, #18]
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3718      	adds	r7, #24
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	40021000 	.word	0x40021000

08004ad0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ada:	2300      	movs	r3, #0
 8004adc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004ade:	4b75      	ldr	r3, [pc, #468]	@ (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	f003 0303 	and.w	r3, r3, #3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d018      	beq.n	8004b1c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004aea:	4b72      	ldr	r3, [pc, #456]	@ (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	f003 0203 	and.w	r2, r3, #3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d10d      	bne.n	8004b16 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
       ||
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d009      	beq.n	8004b16 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004b02:	4b6c      	ldr	r3, [pc, #432]	@ (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	091b      	lsrs	r3, r3, #4
 8004b08:	f003 0307 	and.w	r3, r3, #7
 8004b0c:	1c5a      	adds	r2, r3, #1
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
       ||
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d047      	beq.n	8004ba6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	73fb      	strb	r3, [r7, #15]
 8004b1a:	e044      	b.n	8004ba6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2b03      	cmp	r3, #3
 8004b22:	d018      	beq.n	8004b56 <RCCEx_PLLSAI1_Config+0x86>
 8004b24:	2b03      	cmp	r3, #3
 8004b26:	d825      	bhi.n	8004b74 <RCCEx_PLLSAI1_Config+0xa4>
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d002      	beq.n	8004b32 <RCCEx_PLLSAI1_Config+0x62>
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d009      	beq.n	8004b44 <RCCEx_PLLSAI1_Config+0x74>
 8004b30:	e020      	b.n	8004b74 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b32:	4b60      	ldr	r3, [pc, #384]	@ (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0302 	and.w	r3, r3, #2
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d11d      	bne.n	8004b7a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b42:	e01a      	b.n	8004b7a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b44:	4b5b      	ldr	r3, [pc, #364]	@ (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d116      	bne.n	8004b7e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b54:	e013      	b.n	8004b7e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b56:	4b57      	ldr	r3, [pc, #348]	@ (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d10f      	bne.n	8004b82 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b62:	4b54      	ldr	r3, [pc, #336]	@ (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d109      	bne.n	8004b82 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b72:	e006      	b.n	8004b82 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	73fb      	strb	r3, [r7, #15]
      break;
 8004b78:	e004      	b.n	8004b84 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b7a:	bf00      	nop
 8004b7c:	e002      	b.n	8004b84 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b7e:	bf00      	nop
 8004b80:	e000      	b.n	8004b84 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b82:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b84:	7bfb      	ldrb	r3, [r7, #15]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d10d      	bne.n	8004ba6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004b8a:	4b4a      	ldr	r3, [pc, #296]	@ (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6819      	ldr	r1, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	011b      	lsls	r3, r3, #4
 8004b9e:	430b      	orrs	r3, r1
 8004ba0:	4944      	ldr	r1, [pc, #272]	@ (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004ba6:	7bfb      	ldrb	r3, [r7, #15]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d17d      	bne.n	8004ca8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004bac:	4b41      	ldr	r3, [pc, #260]	@ (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a40      	ldr	r2, [pc, #256]	@ (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bb2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004bb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bb8:	f7fd fbaa 	bl	8002310 <HAL_GetTick>
 8004bbc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004bbe:	e009      	b.n	8004bd4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004bc0:	f7fd fba6 	bl	8002310 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d902      	bls.n	8004bd4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	73fb      	strb	r3, [r7, #15]
        break;
 8004bd2:	e005      	b.n	8004be0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004bd4:	4b37      	ldr	r3, [pc, #220]	@ (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1ef      	bne.n	8004bc0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004be0:	7bfb      	ldrb	r3, [r7, #15]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d160      	bne.n	8004ca8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d111      	bne.n	8004c10 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004bec:	4b31      	ldr	r3, [pc, #196]	@ (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004bf4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	6892      	ldr	r2, [r2, #8]
 8004bfc:	0211      	lsls	r1, r2, #8
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	68d2      	ldr	r2, [r2, #12]
 8004c02:	0912      	lsrs	r2, r2, #4
 8004c04:	0452      	lsls	r2, r2, #17
 8004c06:	430a      	orrs	r2, r1
 8004c08:	492a      	ldr	r1, [pc, #168]	@ (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	610b      	str	r3, [r1, #16]
 8004c0e:	e027      	b.n	8004c60 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d112      	bne.n	8004c3c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c16:	4b27      	ldr	r3, [pc, #156]	@ (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004c1e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	6892      	ldr	r2, [r2, #8]
 8004c26:	0211      	lsls	r1, r2, #8
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	6912      	ldr	r2, [r2, #16]
 8004c2c:	0852      	lsrs	r2, r2, #1
 8004c2e:	3a01      	subs	r2, #1
 8004c30:	0552      	lsls	r2, r2, #21
 8004c32:	430a      	orrs	r2, r1
 8004c34:	491f      	ldr	r1, [pc, #124]	@ (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	610b      	str	r3, [r1, #16]
 8004c3a:	e011      	b.n	8004c60 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c3c:	4b1d      	ldr	r3, [pc, #116]	@ (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004c44:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	6892      	ldr	r2, [r2, #8]
 8004c4c:	0211      	lsls	r1, r2, #8
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	6952      	ldr	r2, [r2, #20]
 8004c52:	0852      	lsrs	r2, r2, #1
 8004c54:	3a01      	subs	r2, #1
 8004c56:	0652      	lsls	r2, r2, #25
 8004c58:	430a      	orrs	r2, r1
 8004c5a:	4916      	ldr	r1, [pc, #88]	@ (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004c60:	4b14      	ldr	r3, [pc, #80]	@ (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a13      	ldr	r2, [pc, #76]	@ (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c66:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004c6a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c6c:	f7fd fb50 	bl	8002310 <HAL_GetTick>
 8004c70:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c72:	e009      	b.n	8004c88 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c74:	f7fd fb4c 	bl	8002310 <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d902      	bls.n	8004c88 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	73fb      	strb	r3, [r7, #15]
          break;
 8004c86:	e005      	b.n	8004c94 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c88:	4b0a      	ldr	r3, [pc, #40]	@ (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d0ef      	beq.n	8004c74 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004c94:	7bfb      	ldrb	r3, [r7, #15]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d106      	bne.n	8004ca8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004c9a:	4b06      	ldr	r3, [pc, #24]	@ (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c9c:	691a      	ldr	r2, [r3, #16]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	4904      	ldr	r1, [pc, #16]	@ (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	40021000 	.word	0x40021000

08004cb8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004cc6:	4b6a      	ldr	r3, [pc, #424]	@ (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	f003 0303 	and.w	r3, r3, #3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d018      	beq.n	8004d04 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004cd2:	4b67      	ldr	r3, [pc, #412]	@ (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	f003 0203 	and.w	r2, r3, #3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d10d      	bne.n	8004cfe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
       ||
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d009      	beq.n	8004cfe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004cea:	4b61      	ldr	r3, [pc, #388]	@ (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	091b      	lsrs	r3, r3, #4
 8004cf0:	f003 0307 	and.w	r3, r3, #7
 8004cf4:	1c5a      	adds	r2, r3, #1
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
       ||
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d047      	beq.n	8004d8e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	73fb      	strb	r3, [r7, #15]
 8004d02:	e044      	b.n	8004d8e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2b03      	cmp	r3, #3
 8004d0a:	d018      	beq.n	8004d3e <RCCEx_PLLSAI2_Config+0x86>
 8004d0c:	2b03      	cmp	r3, #3
 8004d0e:	d825      	bhi.n	8004d5c <RCCEx_PLLSAI2_Config+0xa4>
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d002      	beq.n	8004d1a <RCCEx_PLLSAI2_Config+0x62>
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d009      	beq.n	8004d2c <RCCEx_PLLSAI2_Config+0x74>
 8004d18:	e020      	b.n	8004d5c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d1a:	4b55      	ldr	r3, [pc, #340]	@ (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0302 	and.w	r3, r3, #2
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d11d      	bne.n	8004d62 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d2a:	e01a      	b.n	8004d62 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d2c:	4b50      	ldr	r3, [pc, #320]	@ (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d116      	bne.n	8004d66 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d3c:	e013      	b.n	8004d66 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d3e:	4b4c      	ldr	r3, [pc, #304]	@ (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d10f      	bne.n	8004d6a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d4a:	4b49      	ldr	r3, [pc, #292]	@ (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d109      	bne.n	8004d6a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d5a:	e006      	b.n	8004d6a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	73fb      	strb	r3, [r7, #15]
      break;
 8004d60:	e004      	b.n	8004d6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d62:	bf00      	nop
 8004d64:	e002      	b.n	8004d6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d66:	bf00      	nop
 8004d68:	e000      	b.n	8004d6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d6a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d6c:	7bfb      	ldrb	r3, [r7, #15]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d10d      	bne.n	8004d8e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d72:	4b3f      	ldr	r3, [pc, #252]	@ (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6819      	ldr	r1, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	3b01      	subs	r3, #1
 8004d84:	011b      	lsls	r3, r3, #4
 8004d86:	430b      	orrs	r3, r1
 8004d88:	4939      	ldr	r1, [pc, #228]	@ (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004d8e:	7bfb      	ldrb	r3, [r7, #15]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d167      	bne.n	8004e64 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004d94:	4b36      	ldr	r3, [pc, #216]	@ (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a35      	ldr	r2, [pc, #212]	@ (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004da0:	f7fd fab6 	bl	8002310 <HAL_GetTick>
 8004da4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004da6:	e009      	b.n	8004dbc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004da8:	f7fd fab2 	bl	8002310 <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d902      	bls.n	8004dbc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	73fb      	strb	r3, [r7, #15]
        break;
 8004dba:	e005      	b.n	8004dc8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004dbc:	4b2c      	ldr	r3, [pc, #176]	@ (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d1ef      	bne.n	8004da8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004dc8:	7bfb      	ldrb	r3, [r7, #15]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d14a      	bne.n	8004e64 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d111      	bne.n	8004df8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004dd4:	4b26      	ldr	r3, [pc, #152]	@ (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dd6:	695b      	ldr	r3, [r3, #20]
 8004dd8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004ddc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	6892      	ldr	r2, [r2, #8]
 8004de4:	0211      	lsls	r1, r2, #8
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	68d2      	ldr	r2, [r2, #12]
 8004dea:	0912      	lsrs	r2, r2, #4
 8004dec:	0452      	lsls	r2, r2, #17
 8004dee:	430a      	orrs	r2, r1
 8004df0:	491f      	ldr	r1, [pc, #124]	@ (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	614b      	str	r3, [r1, #20]
 8004df6:	e011      	b.n	8004e1c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004df8:	4b1d      	ldr	r3, [pc, #116]	@ (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dfa:	695b      	ldr	r3, [r3, #20]
 8004dfc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004e00:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	6892      	ldr	r2, [r2, #8]
 8004e08:	0211      	lsls	r1, r2, #8
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	6912      	ldr	r2, [r2, #16]
 8004e0e:	0852      	lsrs	r2, r2, #1
 8004e10:	3a01      	subs	r2, #1
 8004e12:	0652      	lsls	r2, r2, #25
 8004e14:	430a      	orrs	r2, r1
 8004e16:	4916      	ldr	r1, [pc, #88]	@ (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004e1c:	4b14      	ldr	r3, [pc, #80]	@ (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a13      	ldr	r2, [pc, #76]	@ (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e26:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e28:	f7fd fa72 	bl	8002310 <HAL_GetTick>
 8004e2c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e2e:	e009      	b.n	8004e44 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e30:	f7fd fa6e 	bl	8002310 <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d902      	bls.n	8004e44 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	73fb      	strb	r3, [r7, #15]
          break;
 8004e42:	e005      	b.n	8004e50 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e44:	4b0a      	ldr	r3, [pc, #40]	@ (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d0ef      	beq.n	8004e30 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004e50:	7bfb      	ldrb	r3, [r7, #15]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d106      	bne.n	8004e64 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004e56:	4b06      	ldr	r3, [pc, #24]	@ (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e58:	695a      	ldr	r2, [r3, #20]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	4904      	ldr	r1, [pc, #16]	@ (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3710      	adds	r7, #16
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	40021000 	.word	0x40021000

08004e74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d101      	bne.n	8004e86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e049      	b.n	8004f1a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d106      	bne.n	8004ea0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f7fd f8ac 	bl	8001ff8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2202      	movs	r2, #2
 8004ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	3304      	adds	r3, #4
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	4610      	mov	r0, r2
 8004eb4:	f000 fd7c 	bl	80059b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3708      	adds	r7, #8
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
	...

08004f24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d001      	beq.n	8004f3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e04f      	b.n	8004fdc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2202      	movs	r2, #2
 8004f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	68da      	ldr	r2, [r3, #12]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f042 0201 	orr.w	r2, r2, #1
 8004f52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a23      	ldr	r2, [pc, #140]	@ (8004fe8 <HAL_TIM_Base_Start_IT+0xc4>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d01d      	beq.n	8004f9a <HAL_TIM_Base_Start_IT+0x76>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f66:	d018      	beq.n	8004f9a <HAL_TIM_Base_Start_IT+0x76>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a1f      	ldr	r2, [pc, #124]	@ (8004fec <HAL_TIM_Base_Start_IT+0xc8>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d013      	beq.n	8004f9a <HAL_TIM_Base_Start_IT+0x76>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a1e      	ldr	r2, [pc, #120]	@ (8004ff0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d00e      	beq.n	8004f9a <HAL_TIM_Base_Start_IT+0x76>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a1c      	ldr	r2, [pc, #112]	@ (8004ff4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d009      	beq.n	8004f9a <HAL_TIM_Base_Start_IT+0x76>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a1b      	ldr	r2, [pc, #108]	@ (8004ff8 <HAL_TIM_Base_Start_IT+0xd4>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d004      	beq.n	8004f9a <HAL_TIM_Base_Start_IT+0x76>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a19      	ldr	r2, [pc, #100]	@ (8004ffc <HAL_TIM_Base_Start_IT+0xd8>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d115      	bne.n	8004fc6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	689a      	ldr	r2, [r3, #8]
 8004fa0:	4b17      	ldr	r3, [pc, #92]	@ (8005000 <HAL_TIM_Base_Start_IT+0xdc>)
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2b06      	cmp	r3, #6
 8004faa:	d015      	beq.n	8004fd8 <HAL_TIM_Base_Start_IT+0xb4>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fb2:	d011      	beq.n	8004fd8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f042 0201 	orr.w	r2, r2, #1
 8004fc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fc4:	e008      	b.n	8004fd8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f042 0201 	orr.w	r2, r2, #1
 8004fd4:	601a      	str	r2, [r3, #0]
 8004fd6:	e000      	b.n	8004fda <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fd8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3714      	adds	r7, #20
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr
 8004fe8:	40012c00 	.word	0x40012c00
 8004fec:	40000400 	.word	0x40000400
 8004ff0:	40000800 	.word	0x40000800
 8004ff4:	40000c00 	.word	0x40000c00
 8004ff8:	40013400 	.word	0x40013400
 8004ffc:	40014000 	.word	0x40014000
 8005000:	00010007 	.word	0x00010007

08005004 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d101      	bne.n	8005016 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e049      	b.n	80050aa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800501c:	b2db      	uxtb	r3, r3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d106      	bne.n	8005030 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f7fc ff52 	bl	8001ed4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2202      	movs	r2, #2
 8005034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	3304      	adds	r3, #4
 8005040:	4619      	mov	r1, r3
 8005042:	4610      	mov	r0, r2
 8005044:	f000 fcb4 	bl	80059b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3708      	adds	r7, #8
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
	...

080050b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d109      	bne.n	80050d8 <HAL_TIM_PWM_Start+0x24>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	bf14      	ite	ne
 80050d0:	2301      	movne	r3, #1
 80050d2:	2300      	moveq	r3, #0
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	e03c      	b.n	8005152 <HAL_TIM_PWM_Start+0x9e>
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	2b04      	cmp	r3, #4
 80050dc:	d109      	bne.n	80050f2 <HAL_TIM_PWM_Start+0x3e>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	bf14      	ite	ne
 80050ea:	2301      	movne	r3, #1
 80050ec:	2300      	moveq	r3, #0
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	e02f      	b.n	8005152 <HAL_TIM_PWM_Start+0x9e>
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	2b08      	cmp	r3, #8
 80050f6:	d109      	bne.n	800510c <HAL_TIM_PWM_Start+0x58>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	2b01      	cmp	r3, #1
 8005102:	bf14      	ite	ne
 8005104:	2301      	movne	r3, #1
 8005106:	2300      	moveq	r3, #0
 8005108:	b2db      	uxtb	r3, r3
 800510a:	e022      	b.n	8005152 <HAL_TIM_PWM_Start+0x9e>
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	2b0c      	cmp	r3, #12
 8005110:	d109      	bne.n	8005126 <HAL_TIM_PWM_Start+0x72>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005118:	b2db      	uxtb	r3, r3
 800511a:	2b01      	cmp	r3, #1
 800511c:	bf14      	ite	ne
 800511e:	2301      	movne	r3, #1
 8005120:	2300      	moveq	r3, #0
 8005122:	b2db      	uxtb	r3, r3
 8005124:	e015      	b.n	8005152 <HAL_TIM_PWM_Start+0x9e>
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	2b10      	cmp	r3, #16
 800512a:	d109      	bne.n	8005140 <HAL_TIM_PWM_Start+0x8c>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005132:	b2db      	uxtb	r3, r3
 8005134:	2b01      	cmp	r3, #1
 8005136:	bf14      	ite	ne
 8005138:	2301      	movne	r3, #1
 800513a:	2300      	moveq	r3, #0
 800513c:	b2db      	uxtb	r3, r3
 800513e:	e008      	b.n	8005152 <HAL_TIM_PWM_Start+0x9e>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005146:	b2db      	uxtb	r3, r3
 8005148:	2b01      	cmp	r3, #1
 800514a:	bf14      	ite	ne
 800514c:	2301      	movne	r3, #1
 800514e:	2300      	moveq	r3, #0
 8005150:	b2db      	uxtb	r3, r3
 8005152:	2b00      	cmp	r3, #0
 8005154:	d001      	beq.n	800515a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e09c      	b.n	8005294 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d104      	bne.n	800516a <HAL_TIM_PWM_Start+0xb6>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2202      	movs	r2, #2
 8005164:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005168:	e023      	b.n	80051b2 <HAL_TIM_PWM_Start+0xfe>
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	2b04      	cmp	r3, #4
 800516e:	d104      	bne.n	800517a <HAL_TIM_PWM_Start+0xc6>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2202      	movs	r2, #2
 8005174:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005178:	e01b      	b.n	80051b2 <HAL_TIM_PWM_Start+0xfe>
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	2b08      	cmp	r3, #8
 800517e:	d104      	bne.n	800518a <HAL_TIM_PWM_Start+0xd6>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2202      	movs	r2, #2
 8005184:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005188:	e013      	b.n	80051b2 <HAL_TIM_PWM_Start+0xfe>
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	2b0c      	cmp	r3, #12
 800518e:	d104      	bne.n	800519a <HAL_TIM_PWM_Start+0xe6>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2202      	movs	r2, #2
 8005194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005198:	e00b      	b.n	80051b2 <HAL_TIM_PWM_Start+0xfe>
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	2b10      	cmp	r3, #16
 800519e:	d104      	bne.n	80051aa <HAL_TIM_PWM_Start+0xf6>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2202      	movs	r2, #2
 80051a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051a8:	e003      	b.n	80051b2 <HAL_TIM_PWM_Start+0xfe>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2202      	movs	r2, #2
 80051ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2201      	movs	r2, #1
 80051b8:	6839      	ldr	r1, [r7, #0]
 80051ba:	4618      	mov	r0, r3
 80051bc:	f000 ff74 	bl	80060a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a35      	ldr	r2, [pc, #212]	@ (800529c <HAL_TIM_PWM_Start+0x1e8>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d013      	beq.n	80051f2 <HAL_TIM_PWM_Start+0x13e>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a34      	ldr	r2, [pc, #208]	@ (80052a0 <HAL_TIM_PWM_Start+0x1ec>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d00e      	beq.n	80051f2 <HAL_TIM_PWM_Start+0x13e>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a32      	ldr	r2, [pc, #200]	@ (80052a4 <HAL_TIM_PWM_Start+0x1f0>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d009      	beq.n	80051f2 <HAL_TIM_PWM_Start+0x13e>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a31      	ldr	r2, [pc, #196]	@ (80052a8 <HAL_TIM_PWM_Start+0x1f4>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d004      	beq.n	80051f2 <HAL_TIM_PWM_Start+0x13e>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a2f      	ldr	r2, [pc, #188]	@ (80052ac <HAL_TIM_PWM_Start+0x1f8>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d101      	bne.n	80051f6 <HAL_TIM_PWM_Start+0x142>
 80051f2:	2301      	movs	r3, #1
 80051f4:	e000      	b.n	80051f8 <HAL_TIM_PWM_Start+0x144>
 80051f6:	2300      	movs	r3, #0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d007      	beq.n	800520c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800520a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a22      	ldr	r2, [pc, #136]	@ (800529c <HAL_TIM_PWM_Start+0x1e8>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d01d      	beq.n	8005252 <HAL_TIM_PWM_Start+0x19e>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800521e:	d018      	beq.n	8005252 <HAL_TIM_PWM_Start+0x19e>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a22      	ldr	r2, [pc, #136]	@ (80052b0 <HAL_TIM_PWM_Start+0x1fc>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d013      	beq.n	8005252 <HAL_TIM_PWM_Start+0x19e>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a21      	ldr	r2, [pc, #132]	@ (80052b4 <HAL_TIM_PWM_Start+0x200>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d00e      	beq.n	8005252 <HAL_TIM_PWM_Start+0x19e>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a1f      	ldr	r2, [pc, #124]	@ (80052b8 <HAL_TIM_PWM_Start+0x204>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d009      	beq.n	8005252 <HAL_TIM_PWM_Start+0x19e>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a17      	ldr	r2, [pc, #92]	@ (80052a0 <HAL_TIM_PWM_Start+0x1ec>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d004      	beq.n	8005252 <HAL_TIM_PWM_Start+0x19e>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a15      	ldr	r2, [pc, #84]	@ (80052a4 <HAL_TIM_PWM_Start+0x1f0>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d115      	bne.n	800527e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	689a      	ldr	r2, [r3, #8]
 8005258:	4b18      	ldr	r3, [pc, #96]	@ (80052bc <HAL_TIM_PWM_Start+0x208>)
 800525a:	4013      	ands	r3, r2
 800525c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2b06      	cmp	r3, #6
 8005262:	d015      	beq.n	8005290 <HAL_TIM_PWM_Start+0x1dc>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800526a:	d011      	beq.n	8005290 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f042 0201 	orr.w	r2, r2, #1
 800527a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800527c:	e008      	b.n	8005290 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f042 0201 	orr.w	r2, r2, #1
 800528c:	601a      	str	r2, [r3, #0]
 800528e:	e000      	b.n	8005292 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005290:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005292:	2300      	movs	r3, #0
}
 8005294:	4618      	mov	r0, r3
 8005296:	3710      	adds	r7, #16
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}
 800529c:	40012c00 	.word	0x40012c00
 80052a0:	40013400 	.word	0x40013400
 80052a4:	40014000 	.word	0x40014000
 80052a8:	40014400 	.word	0x40014400
 80052ac:	40014800 	.word	0x40014800
 80052b0:	40000400 	.word	0x40000400
 80052b4:	40000800 	.word	0x40000800
 80052b8:	40000c00 	.word	0x40000c00
 80052bc:	00010007 	.word	0x00010007

080052c0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b086      	sub	sp, #24
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d101      	bne.n	80052d4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e097      	b.n	8005404 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d106      	bne.n	80052ee <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f7fc fe13 	bl	8001f14 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2202      	movs	r2, #2
 80052f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	6812      	ldr	r2, [r2, #0]
 8005300:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8005304:	f023 0307 	bic.w	r3, r3, #7
 8005308:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	3304      	adds	r3, #4
 8005312:	4619      	mov	r1, r3
 8005314:	4610      	mov	r0, r2
 8005316:	f000 fb4b 	bl	80059b0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	6a1b      	ldr	r3, [r3, #32]
 8005330:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	4313      	orrs	r3, r2
 800533a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005342:	f023 0303 	bic.w	r3, r3, #3
 8005346:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	689a      	ldr	r2, [r3, #8]
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	021b      	lsls	r3, r3, #8
 8005352:	4313      	orrs	r3, r2
 8005354:	693a      	ldr	r2, [r7, #16]
 8005356:	4313      	orrs	r3, r2
 8005358:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005360:	f023 030c 	bic.w	r3, r3, #12
 8005364:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800536c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005370:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	68da      	ldr	r2, [r3, #12]
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	69db      	ldr	r3, [r3, #28]
 800537a:	021b      	lsls	r3, r3, #8
 800537c:	4313      	orrs	r3, r2
 800537e:	693a      	ldr	r2, [r7, #16]
 8005380:	4313      	orrs	r3, r2
 8005382:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	011a      	lsls	r2, r3, #4
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	6a1b      	ldr	r3, [r3, #32]
 800538e:	031b      	lsls	r3, r3, #12
 8005390:	4313      	orrs	r3, r2
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	4313      	orrs	r3, r2
 8005396:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800539e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80053a6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	685a      	ldr	r2, [r3, #4]
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	695b      	ldr	r3, [r3, #20]
 80053b0:	011b      	lsls	r3, r3, #4
 80053b2:	4313      	orrs	r3, r2
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	697a      	ldr	r2, [r7, #20]
 80053c0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2201      	movs	r2, #1
 80053ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	3718      	adds	r7, #24
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800541c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005424:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800542c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005434:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d110      	bne.n	800545e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800543c:	7bfb      	ldrb	r3, [r7, #15]
 800543e:	2b01      	cmp	r3, #1
 8005440:	d102      	bne.n	8005448 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005442:	7b7b      	ldrb	r3, [r7, #13]
 8005444:	2b01      	cmp	r3, #1
 8005446:	d001      	beq.n	800544c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e069      	b.n	8005520 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2202      	movs	r2, #2
 8005450:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2202      	movs	r2, #2
 8005458:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800545c:	e031      	b.n	80054c2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	2b04      	cmp	r3, #4
 8005462:	d110      	bne.n	8005486 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005464:	7bbb      	ldrb	r3, [r7, #14]
 8005466:	2b01      	cmp	r3, #1
 8005468:	d102      	bne.n	8005470 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800546a:	7b3b      	ldrb	r3, [r7, #12]
 800546c:	2b01      	cmp	r3, #1
 800546e:	d001      	beq.n	8005474 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e055      	b.n	8005520 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2202      	movs	r2, #2
 8005478:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2202      	movs	r2, #2
 8005480:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005484:	e01d      	b.n	80054c2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005486:	7bfb      	ldrb	r3, [r7, #15]
 8005488:	2b01      	cmp	r3, #1
 800548a:	d108      	bne.n	800549e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800548c:	7bbb      	ldrb	r3, [r7, #14]
 800548e:	2b01      	cmp	r3, #1
 8005490:	d105      	bne.n	800549e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005492:	7b7b      	ldrb	r3, [r7, #13]
 8005494:	2b01      	cmp	r3, #1
 8005496:	d102      	bne.n	800549e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005498:	7b3b      	ldrb	r3, [r7, #12]
 800549a:	2b01      	cmp	r3, #1
 800549c:	d001      	beq.n	80054a2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e03e      	b.n	8005520 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2202      	movs	r2, #2
 80054a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2202      	movs	r2, #2
 80054ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2202      	movs	r2, #2
 80054b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2202      	movs	r2, #2
 80054be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d003      	beq.n	80054d0 <HAL_TIM_Encoder_Start+0xc4>
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	2b04      	cmp	r3, #4
 80054cc:	d008      	beq.n	80054e0 <HAL_TIM_Encoder_Start+0xd4>
 80054ce:	e00f      	b.n	80054f0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2201      	movs	r2, #1
 80054d6:	2100      	movs	r1, #0
 80054d8:	4618      	mov	r0, r3
 80054da:	f000 fde5 	bl	80060a8 <TIM_CCxChannelCmd>
      break;
 80054de:	e016      	b.n	800550e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2201      	movs	r2, #1
 80054e6:	2104      	movs	r1, #4
 80054e8:	4618      	mov	r0, r3
 80054ea:	f000 fddd 	bl	80060a8 <TIM_CCxChannelCmd>
      break;
 80054ee:	e00e      	b.n	800550e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2201      	movs	r2, #1
 80054f6:	2100      	movs	r1, #0
 80054f8:	4618      	mov	r0, r3
 80054fa:	f000 fdd5 	bl	80060a8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2201      	movs	r2, #1
 8005504:	2104      	movs	r1, #4
 8005506:	4618      	mov	r0, r3
 8005508:	f000 fdce 	bl	80060a8 <TIM_CCxChannelCmd>
      break;
 800550c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f042 0201 	orr.w	r2, r2, #1
 800551c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3710      	adds	r7, #16
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	f003 0302 	and.w	r3, r3, #2
 8005546:	2b00      	cmp	r3, #0
 8005548:	d020      	beq.n	800558c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f003 0302 	and.w	r3, r3, #2
 8005550:	2b00      	cmp	r3, #0
 8005552:	d01b      	beq.n	800558c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f06f 0202 	mvn.w	r2, #2
 800555c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2201      	movs	r2, #1
 8005562:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	f003 0303 	and.w	r3, r3, #3
 800556e:	2b00      	cmp	r3, #0
 8005570:	d003      	beq.n	800557a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 f9fe 	bl	8005974 <HAL_TIM_IC_CaptureCallback>
 8005578:	e005      	b.n	8005586 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 f9f0 	bl	8005960 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f000 fa01 	bl	8005988 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	f003 0304 	and.w	r3, r3, #4
 8005592:	2b00      	cmp	r3, #0
 8005594:	d020      	beq.n	80055d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f003 0304 	and.w	r3, r3, #4
 800559c:	2b00      	cmp	r3, #0
 800559e:	d01b      	beq.n	80055d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f06f 0204 	mvn.w	r2, #4
 80055a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2202      	movs	r2, #2
 80055ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	699b      	ldr	r3, [r3, #24]
 80055b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d003      	beq.n	80055c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 f9d8 	bl	8005974 <HAL_TIM_IC_CaptureCallback>
 80055c4:	e005      	b.n	80055d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 f9ca 	bl	8005960 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f000 f9db 	bl	8005988 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	f003 0308 	and.w	r3, r3, #8
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d020      	beq.n	8005624 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f003 0308 	and.w	r3, r3, #8
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d01b      	beq.n	8005624 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f06f 0208 	mvn.w	r2, #8
 80055f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2204      	movs	r2, #4
 80055fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	69db      	ldr	r3, [r3, #28]
 8005602:	f003 0303 	and.w	r3, r3, #3
 8005606:	2b00      	cmp	r3, #0
 8005608:	d003      	beq.n	8005612 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f9b2 	bl	8005974 <HAL_TIM_IC_CaptureCallback>
 8005610:	e005      	b.n	800561e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 f9a4 	bl	8005960 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 f9b5 	bl	8005988 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	f003 0310 	and.w	r3, r3, #16
 800562a:	2b00      	cmp	r3, #0
 800562c:	d020      	beq.n	8005670 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f003 0310 	and.w	r3, r3, #16
 8005634:	2b00      	cmp	r3, #0
 8005636:	d01b      	beq.n	8005670 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f06f 0210 	mvn.w	r2, #16
 8005640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2208      	movs	r2, #8
 8005646:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	69db      	ldr	r3, [r3, #28]
 800564e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005652:	2b00      	cmp	r3, #0
 8005654:	d003      	beq.n	800565e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 f98c 	bl	8005974 <HAL_TIM_IC_CaptureCallback>
 800565c:	e005      	b.n	800566a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 f97e 	bl	8005960 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 f98f 	bl	8005988 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	f003 0301 	and.w	r3, r3, #1
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00c      	beq.n	8005694 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f003 0301 	and.w	r3, r3, #1
 8005680:	2b00      	cmp	r3, #0
 8005682:	d007      	beq.n	8005694 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f06f 0201 	mvn.w	r2, #1
 800568c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f7fb fd40 	bl	8001114 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800569a:	2b00      	cmp	r3, #0
 800569c:	d104      	bne.n	80056a8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d00c      	beq.n	80056c2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d007      	beq.n	80056c2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80056ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 fe29 	bl	8006314 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00c      	beq.n	80056e6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d007      	beq.n	80056e6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80056de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 fe21 	bl	8006328 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d00c      	beq.n	800570a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d007      	beq.n	800570a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005702:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f000 f949 	bl	800599c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	f003 0320 	and.w	r3, r3, #32
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00c      	beq.n	800572e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f003 0320 	and.w	r3, r3, #32
 800571a:	2b00      	cmp	r3, #0
 800571c:	d007      	beq.n	800572e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f06f 0220 	mvn.w	r2, #32
 8005726:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 fde9 	bl	8006300 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800572e:	bf00      	nop
 8005730:	3710      	adds	r7, #16
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
	...

08005738 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b086      	sub	sp, #24
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005744:	2300      	movs	r3, #0
 8005746:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800574e:	2b01      	cmp	r3, #1
 8005750:	d101      	bne.n	8005756 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005752:	2302      	movs	r3, #2
 8005754:	e0ff      	b.n	8005956 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2201      	movs	r2, #1
 800575a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2b14      	cmp	r3, #20
 8005762:	f200 80f0 	bhi.w	8005946 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005766:	a201      	add	r2, pc, #4	@ (adr r2, 800576c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800576c:	080057c1 	.word	0x080057c1
 8005770:	08005947 	.word	0x08005947
 8005774:	08005947 	.word	0x08005947
 8005778:	08005947 	.word	0x08005947
 800577c:	08005801 	.word	0x08005801
 8005780:	08005947 	.word	0x08005947
 8005784:	08005947 	.word	0x08005947
 8005788:	08005947 	.word	0x08005947
 800578c:	08005843 	.word	0x08005843
 8005790:	08005947 	.word	0x08005947
 8005794:	08005947 	.word	0x08005947
 8005798:	08005947 	.word	0x08005947
 800579c:	08005883 	.word	0x08005883
 80057a0:	08005947 	.word	0x08005947
 80057a4:	08005947 	.word	0x08005947
 80057a8:	08005947 	.word	0x08005947
 80057ac:	080058c5 	.word	0x080058c5
 80057b0:	08005947 	.word	0x08005947
 80057b4:	08005947 	.word	0x08005947
 80057b8:	08005947 	.word	0x08005947
 80057bc:	08005905 	.word	0x08005905
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68b9      	ldr	r1, [r7, #8]
 80057c6:	4618      	mov	r0, r3
 80057c8:	f000 f998 	bl	8005afc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	699a      	ldr	r2, [r3, #24]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f042 0208 	orr.w	r2, r2, #8
 80057da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	699a      	ldr	r2, [r3, #24]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f022 0204 	bic.w	r2, r2, #4
 80057ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	6999      	ldr	r1, [r3, #24]
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	691a      	ldr	r2, [r3, #16]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	430a      	orrs	r2, r1
 80057fc:	619a      	str	r2, [r3, #24]
      break;
 80057fe:	e0a5      	b.n	800594c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68b9      	ldr	r1, [r7, #8]
 8005806:	4618      	mov	r0, r3
 8005808:	f000 fa08 	bl	8005c1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	699a      	ldr	r2, [r3, #24]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800581a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	699a      	ldr	r2, [r3, #24]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800582a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	6999      	ldr	r1, [r3, #24]
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	021a      	lsls	r2, r3, #8
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	430a      	orrs	r2, r1
 800583e:	619a      	str	r2, [r3, #24]
      break;
 8005840:	e084      	b.n	800594c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	68b9      	ldr	r1, [r7, #8]
 8005848:	4618      	mov	r0, r3
 800584a:	f000 fa71 	bl	8005d30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	69da      	ldr	r2, [r3, #28]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f042 0208 	orr.w	r2, r2, #8
 800585c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	69da      	ldr	r2, [r3, #28]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f022 0204 	bic.w	r2, r2, #4
 800586c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	69d9      	ldr	r1, [r3, #28]
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	691a      	ldr	r2, [r3, #16]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	430a      	orrs	r2, r1
 800587e:	61da      	str	r2, [r3, #28]
      break;
 8005880:	e064      	b.n	800594c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68b9      	ldr	r1, [r7, #8]
 8005888:	4618      	mov	r0, r3
 800588a:	f000 fad9 	bl	8005e40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	69da      	ldr	r2, [r3, #28]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800589c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	69da      	ldr	r2, [r3, #28]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	69d9      	ldr	r1, [r3, #28]
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	021a      	lsls	r2, r3, #8
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	430a      	orrs	r2, r1
 80058c0:	61da      	str	r2, [r3, #28]
      break;
 80058c2:	e043      	b.n	800594c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68b9      	ldr	r1, [r7, #8]
 80058ca:	4618      	mov	r0, r3
 80058cc:	f000 fb22 	bl	8005f14 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f042 0208 	orr.w	r2, r2, #8
 80058de:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f022 0204 	bic.w	r2, r2, #4
 80058ee:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	691a      	ldr	r2, [r3, #16]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	430a      	orrs	r2, r1
 8005900:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005902:	e023      	b.n	800594c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68b9      	ldr	r1, [r7, #8]
 800590a:	4618      	mov	r0, r3
 800590c:	f000 fb66 	bl	8005fdc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800591e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800592e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	021a      	lsls	r2, r3, #8
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	430a      	orrs	r2, r1
 8005942:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005944:	e002      	b.n	800594c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	75fb      	strb	r3, [r7, #23]
      break;
 800594a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005954:	7dfb      	ldrb	r3, [r7, #23]
}
 8005956:	4618      	mov	r0, r3
 8005958:	3718      	adds	r7, #24
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop

08005960 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005968:	bf00      	nop
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800597c:	bf00      	nop
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005990:	bf00      	nop
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b085      	sub	sp, #20
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a46      	ldr	r2, [pc, #280]	@ (8005adc <TIM_Base_SetConfig+0x12c>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d013      	beq.n	80059f0 <TIM_Base_SetConfig+0x40>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059ce:	d00f      	beq.n	80059f0 <TIM_Base_SetConfig+0x40>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a43      	ldr	r2, [pc, #268]	@ (8005ae0 <TIM_Base_SetConfig+0x130>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d00b      	beq.n	80059f0 <TIM_Base_SetConfig+0x40>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a42      	ldr	r2, [pc, #264]	@ (8005ae4 <TIM_Base_SetConfig+0x134>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d007      	beq.n	80059f0 <TIM_Base_SetConfig+0x40>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a41      	ldr	r2, [pc, #260]	@ (8005ae8 <TIM_Base_SetConfig+0x138>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d003      	beq.n	80059f0 <TIM_Base_SetConfig+0x40>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a40      	ldr	r2, [pc, #256]	@ (8005aec <TIM_Base_SetConfig+0x13c>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d108      	bne.n	8005a02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a35      	ldr	r2, [pc, #212]	@ (8005adc <TIM_Base_SetConfig+0x12c>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d01f      	beq.n	8005a4a <TIM_Base_SetConfig+0x9a>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a10:	d01b      	beq.n	8005a4a <TIM_Base_SetConfig+0x9a>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a32      	ldr	r2, [pc, #200]	@ (8005ae0 <TIM_Base_SetConfig+0x130>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d017      	beq.n	8005a4a <TIM_Base_SetConfig+0x9a>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a31      	ldr	r2, [pc, #196]	@ (8005ae4 <TIM_Base_SetConfig+0x134>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d013      	beq.n	8005a4a <TIM_Base_SetConfig+0x9a>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a30      	ldr	r2, [pc, #192]	@ (8005ae8 <TIM_Base_SetConfig+0x138>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d00f      	beq.n	8005a4a <TIM_Base_SetConfig+0x9a>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a2f      	ldr	r2, [pc, #188]	@ (8005aec <TIM_Base_SetConfig+0x13c>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d00b      	beq.n	8005a4a <TIM_Base_SetConfig+0x9a>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a2e      	ldr	r2, [pc, #184]	@ (8005af0 <TIM_Base_SetConfig+0x140>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d007      	beq.n	8005a4a <TIM_Base_SetConfig+0x9a>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a2d      	ldr	r2, [pc, #180]	@ (8005af4 <TIM_Base_SetConfig+0x144>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d003      	beq.n	8005a4a <TIM_Base_SetConfig+0x9a>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a2c      	ldr	r2, [pc, #176]	@ (8005af8 <TIM_Base_SetConfig+0x148>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d108      	bne.n	8005a5c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	689a      	ldr	r2, [r3, #8]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a16      	ldr	r2, [pc, #88]	@ (8005adc <TIM_Base_SetConfig+0x12c>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d00f      	beq.n	8005aa8 <TIM_Base_SetConfig+0xf8>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4a18      	ldr	r2, [pc, #96]	@ (8005aec <TIM_Base_SetConfig+0x13c>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d00b      	beq.n	8005aa8 <TIM_Base_SetConfig+0xf8>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a17      	ldr	r2, [pc, #92]	@ (8005af0 <TIM_Base_SetConfig+0x140>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d007      	beq.n	8005aa8 <TIM_Base_SetConfig+0xf8>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a16      	ldr	r2, [pc, #88]	@ (8005af4 <TIM_Base_SetConfig+0x144>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d003      	beq.n	8005aa8 <TIM_Base_SetConfig+0xf8>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a15      	ldr	r2, [pc, #84]	@ (8005af8 <TIM_Base_SetConfig+0x148>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d103      	bne.n	8005ab0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	691a      	ldr	r2, [r3, #16]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	f003 0301 	and.w	r3, r3, #1
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d105      	bne.n	8005ace <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	f023 0201 	bic.w	r2, r3, #1
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	611a      	str	r2, [r3, #16]
  }
}
 8005ace:	bf00      	nop
 8005ad0:	3714      	adds	r7, #20
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	40012c00 	.word	0x40012c00
 8005ae0:	40000400 	.word	0x40000400
 8005ae4:	40000800 	.word	0x40000800
 8005ae8:	40000c00 	.word	0x40000c00
 8005aec:	40013400 	.word	0x40013400
 8005af0:	40014000 	.word	0x40014000
 8005af4:	40014400 	.word	0x40014400
 8005af8:	40014800 	.word	0x40014800

08005afc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b087      	sub	sp, #28
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a1b      	ldr	r3, [r3, #32]
 8005b0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6a1b      	ldr	r3, [r3, #32]
 8005b10:	f023 0201 	bic.w	r2, r3, #1
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f023 0303 	bic.w	r3, r3, #3
 8005b36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	f023 0302 	bic.w	r3, r3, #2
 8005b48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	697a      	ldr	r2, [r7, #20]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a2c      	ldr	r2, [pc, #176]	@ (8005c08 <TIM_OC1_SetConfig+0x10c>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d00f      	beq.n	8005b7c <TIM_OC1_SetConfig+0x80>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a2b      	ldr	r2, [pc, #172]	@ (8005c0c <TIM_OC1_SetConfig+0x110>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d00b      	beq.n	8005b7c <TIM_OC1_SetConfig+0x80>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a2a      	ldr	r2, [pc, #168]	@ (8005c10 <TIM_OC1_SetConfig+0x114>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d007      	beq.n	8005b7c <TIM_OC1_SetConfig+0x80>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a29      	ldr	r2, [pc, #164]	@ (8005c14 <TIM_OC1_SetConfig+0x118>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d003      	beq.n	8005b7c <TIM_OC1_SetConfig+0x80>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a28      	ldr	r2, [pc, #160]	@ (8005c18 <TIM_OC1_SetConfig+0x11c>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d10c      	bne.n	8005b96 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	f023 0308 	bic.w	r3, r3, #8
 8005b82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	697a      	ldr	r2, [r7, #20]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	f023 0304 	bic.w	r3, r3, #4
 8005b94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a1b      	ldr	r2, [pc, #108]	@ (8005c08 <TIM_OC1_SetConfig+0x10c>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d00f      	beq.n	8005bbe <TIM_OC1_SetConfig+0xc2>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a1a      	ldr	r2, [pc, #104]	@ (8005c0c <TIM_OC1_SetConfig+0x110>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d00b      	beq.n	8005bbe <TIM_OC1_SetConfig+0xc2>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a19      	ldr	r2, [pc, #100]	@ (8005c10 <TIM_OC1_SetConfig+0x114>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d007      	beq.n	8005bbe <TIM_OC1_SetConfig+0xc2>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a18      	ldr	r2, [pc, #96]	@ (8005c14 <TIM_OC1_SetConfig+0x118>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d003      	beq.n	8005bbe <TIM_OC1_SetConfig+0xc2>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a17      	ldr	r2, [pc, #92]	@ (8005c18 <TIM_OC1_SetConfig+0x11c>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d111      	bne.n	8005be2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005bc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005bcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	695b      	ldr	r3, [r3, #20]
 8005bd2:	693a      	ldr	r2, [r7, #16]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	699b      	ldr	r3, [r3, #24]
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	693a      	ldr	r2, [r7, #16]
 8005be6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	685a      	ldr	r2, [r3, #4]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	697a      	ldr	r2, [r7, #20]
 8005bfa:	621a      	str	r2, [r3, #32]
}
 8005bfc:	bf00      	nop
 8005bfe:	371c      	adds	r7, #28
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr
 8005c08:	40012c00 	.word	0x40012c00
 8005c0c:	40013400 	.word	0x40013400
 8005c10:	40014000 	.word	0x40014000
 8005c14:	40014400 	.word	0x40014400
 8005c18:	40014800 	.word	0x40014800

08005c1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b087      	sub	sp, #28
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a1b      	ldr	r3, [r3, #32]
 8005c2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a1b      	ldr	r3, [r3, #32]
 8005c30:	f023 0210 	bic.w	r2, r3, #16
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	699b      	ldr	r3, [r3, #24]
 8005c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	021b      	lsls	r3, r3, #8
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	f023 0320 	bic.w	r3, r3, #32
 8005c6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	011b      	lsls	r3, r3, #4
 8005c72:	697a      	ldr	r2, [r7, #20]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a28      	ldr	r2, [pc, #160]	@ (8005d1c <TIM_OC2_SetConfig+0x100>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d003      	beq.n	8005c88 <TIM_OC2_SetConfig+0x6c>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a27      	ldr	r2, [pc, #156]	@ (8005d20 <TIM_OC2_SetConfig+0x104>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d10d      	bne.n	8005ca4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	011b      	lsls	r3, r3, #4
 8005c96:	697a      	ldr	r2, [r7, #20]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ca2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4a1d      	ldr	r2, [pc, #116]	@ (8005d1c <TIM_OC2_SetConfig+0x100>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d00f      	beq.n	8005ccc <TIM_OC2_SetConfig+0xb0>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a1c      	ldr	r2, [pc, #112]	@ (8005d20 <TIM_OC2_SetConfig+0x104>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d00b      	beq.n	8005ccc <TIM_OC2_SetConfig+0xb0>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a1b      	ldr	r2, [pc, #108]	@ (8005d24 <TIM_OC2_SetConfig+0x108>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d007      	beq.n	8005ccc <TIM_OC2_SetConfig+0xb0>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a1a      	ldr	r2, [pc, #104]	@ (8005d28 <TIM_OC2_SetConfig+0x10c>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d003      	beq.n	8005ccc <TIM_OC2_SetConfig+0xb0>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a19      	ldr	r2, [pc, #100]	@ (8005d2c <TIM_OC2_SetConfig+0x110>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d113      	bne.n	8005cf4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005cd2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005cda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	695b      	ldr	r3, [r3, #20]
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	693a      	ldr	r2, [r7, #16]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	699b      	ldr	r3, [r3, #24]
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	693a      	ldr	r2, [r7, #16]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	685a      	ldr	r2, [r3, #4]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	621a      	str	r2, [r3, #32]
}
 8005d0e:	bf00      	nop
 8005d10:	371c      	adds	r7, #28
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	40012c00 	.word	0x40012c00
 8005d20:	40013400 	.word	0x40013400
 8005d24:	40014000 	.word	0x40014000
 8005d28:	40014400 	.word	0x40014400
 8005d2c:	40014800 	.word	0x40014800

08005d30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b087      	sub	sp, #28
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a1b      	ldr	r3, [r3, #32]
 8005d3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a1b      	ldr	r3, [r3, #32]
 8005d44:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	69db      	ldr	r3, [r3, #28]
 8005d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f023 0303 	bic.w	r3, r3, #3
 8005d6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005d7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	021b      	lsls	r3, r3, #8
 8005d84:	697a      	ldr	r2, [r7, #20]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a27      	ldr	r2, [pc, #156]	@ (8005e2c <TIM_OC3_SetConfig+0xfc>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d003      	beq.n	8005d9a <TIM_OC3_SetConfig+0x6a>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a26      	ldr	r2, [pc, #152]	@ (8005e30 <TIM_OC3_SetConfig+0x100>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d10d      	bne.n	8005db6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005da0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	021b      	lsls	r3, r3, #8
 8005da8:	697a      	ldr	r2, [r7, #20]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005db4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a1c      	ldr	r2, [pc, #112]	@ (8005e2c <TIM_OC3_SetConfig+0xfc>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d00f      	beq.n	8005dde <TIM_OC3_SetConfig+0xae>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a1b      	ldr	r2, [pc, #108]	@ (8005e30 <TIM_OC3_SetConfig+0x100>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d00b      	beq.n	8005dde <TIM_OC3_SetConfig+0xae>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a1a      	ldr	r2, [pc, #104]	@ (8005e34 <TIM_OC3_SetConfig+0x104>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d007      	beq.n	8005dde <TIM_OC3_SetConfig+0xae>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a19      	ldr	r2, [pc, #100]	@ (8005e38 <TIM_OC3_SetConfig+0x108>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d003      	beq.n	8005dde <TIM_OC3_SetConfig+0xae>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a18      	ldr	r2, [pc, #96]	@ (8005e3c <TIM_OC3_SetConfig+0x10c>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d113      	bne.n	8005e06 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005de4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005dec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	011b      	lsls	r3, r3, #4
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	699b      	ldr	r3, [r3, #24]
 8005dfe:	011b      	lsls	r3, r3, #4
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	685a      	ldr	r2, [r3, #4]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	697a      	ldr	r2, [r7, #20]
 8005e1e:	621a      	str	r2, [r3, #32]
}
 8005e20:	bf00      	nop
 8005e22:	371c      	adds	r7, #28
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr
 8005e2c:	40012c00 	.word	0x40012c00
 8005e30:	40013400 	.word	0x40013400
 8005e34:	40014000 	.word	0x40014000
 8005e38:	40014400 	.word	0x40014400
 8005e3c:	40014800 	.word	0x40014800

08005e40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b087      	sub	sp, #28
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a1b      	ldr	r3, [r3, #32]
 8005e4e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a1b      	ldr	r3, [r3, #32]
 8005e54:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	69db      	ldr	r3, [r3, #28]
 8005e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	021b      	lsls	r3, r3, #8
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005e8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	031b      	lsls	r3, r3, #12
 8005e96:	693a      	ldr	r2, [r7, #16]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a18      	ldr	r2, [pc, #96]	@ (8005f00 <TIM_OC4_SetConfig+0xc0>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d00f      	beq.n	8005ec4 <TIM_OC4_SetConfig+0x84>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a17      	ldr	r2, [pc, #92]	@ (8005f04 <TIM_OC4_SetConfig+0xc4>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d00b      	beq.n	8005ec4 <TIM_OC4_SetConfig+0x84>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a16      	ldr	r2, [pc, #88]	@ (8005f08 <TIM_OC4_SetConfig+0xc8>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d007      	beq.n	8005ec4 <TIM_OC4_SetConfig+0x84>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a15      	ldr	r2, [pc, #84]	@ (8005f0c <TIM_OC4_SetConfig+0xcc>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d003      	beq.n	8005ec4 <TIM_OC4_SetConfig+0x84>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a14      	ldr	r2, [pc, #80]	@ (8005f10 <TIM_OC4_SetConfig+0xd0>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d109      	bne.n	8005ed8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005eca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	695b      	ldr	r3, [r3, #20]
 8005ed0:	019b      	lsls	r3, r3, #6
 8005ed2:	697a      	ldr	r2, [r7, #20]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	697a      	ldr	r2, [r7, #20]
 8005edc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	685a      	ldr	r2, [r3, #4]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	693a      	ldr	r2, [r7, #16]
 8005ef0:	621a      	str	r2, [r3, #32]
}
 8005ef2:	bf00      	nop
 8005ef4:	371c      	adds	r7, #28
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop
 8005f00:	40012c00 	.word	0x40012c00
 8005f04:	40013400 	.word	0x40013400
 8005f08:	40014000 	.word	0x40014000
 8005f0c:	40014400 	.word	0x40014400
 8005f10:	40014800 	.word	0x40014800

08005f14 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b087      	sub	sp, #28
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a1b      	ldr	r3, [r3, #32]
 8005f22:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6a1b      	ldr	r3, [r3, #32]
 8005f28:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005f58:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	041b      	lsls	r3, r3, #16
 8005f60:	693a      	ldr	r2, [r7, #16]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a17      	ldr	r2, [pc, #92]	@ (8005fc8 <TIM_OC5_SetConfig+0xb4>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d00f      	beq.n	8005f8e <TIM_OC5_SetConfig+0x7a>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a16      	ldr	r2, [pc, #88]	@ (8005fcc <TIM_OC5_SetConfig+0xb8>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d00b      	beq.n	8005f8e <TIM_OC5_SetConfig+0x7a>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a15      	ldr	r2, [pc, #84]	@ (8005fd0 <TIM_OC5_SetConfig+0xbc>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d007      	beq.n	8005f8e <TIM_OC5_SetConfig+0x7a>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4a14      	ldr	r2, [pc, #80]	@ (8005fd4 <TIM_OC5_SetConfig+0xc0>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d003      	beq.n	8005f8e <TIM_OC5_SetConfig+0x7a>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a13      	ldr	r2, [pc, #76]	@ (8005fd8 <TIM_OC5_SetConfig+0xc4>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d109      	bne.n	8005fa2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f94:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	695b      	ldr	r3, [r3, #20]
 8005f9a:	021b      	lsls	r3, r3, #8
 8005f9c:	697a      	ldr	r2, [r7, #20]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	697a      	ldr	r2, [r7, #20]
 8005fa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	685a      	ldr	r2, [r3, #4]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	693a      	ldr	r2, [r7, #16]
 8005fba:	621a      	str	r2, [r3, #32]
}
 8005fbc:	bf00      	nop
 8005fbe:	371c      	adds	r7, #28
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr
 8005fc8:	40012c00 	.word	0x40012c00
 8005fcc:	40013400 	.word	0x40013400
 8005fd0:	40014000 	.word	0x40014000
 8005fd4:	40014400 	.word	0x40014400
 8005fd8:	40014800 	.word	0x40014800

08005fdc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b087      	sub	sp, #28
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a1b      	ldr	r3, [r3, #32]
 8005fea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6a1b      	ldr	r3, [r3, #32]
 8005ff0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800600a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800600e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	021b      	lsls	r3, r3, #8
 8006016:	68fa      	ldr	r2, [r7, #12]
 8006018:	4313      	orrs	r3, r2
 800601a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006022:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	051b      	lsls	r3, r3, #20
 800602a:	693a      	ldr	r2, [r7, #16]
 800602c:	4313      	orrs	r3, r2
 800602e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	4a18      	ldr	r2, [pc, #96]	@ (8006094 <TIM_OC6_SetConfig+0xb8>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d00f      	beq.n	8006058 <TIM_OC6_SetConfig+0x7c>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	4a17      	ldr	r2, [pc, #92]	@ (8006098 <TIM_OC6_SetConfig+0xbc>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d00b      	beq.n	8006058 <TIM_OC6_SetConfig+0x7c>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4a16      	ldr	r2, [pc, #88]	@ (800609c <TIM_OC6_SetConfig+0xc0>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d007      	beq.n	8006058 <TIM_OC6_SetConfig+0x7c>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4a15      	ldr	r2, [pc, #84]	@ (80060a0 <TIM_OC6_SetConfig+0xc4>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d003      	beq.n	8006058 <TIM_OC6_SetConfig+0x7c>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4a14      	ldr	r2, [pc, #80]	@ (80060a4 <TIM_OC6_SetConfig+0xc8>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d109      	bne.n	800606c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800605e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	695b      	ldr	r3, [r3, #20]
 8006064:	029b      	lsls	r3, r3, #10
 8006066:	697a      	ldr	r2, [r7, #20]
 8006068:	4313      	orrs	r3, r2
 800606a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	697a      	ldr	r2, [r7, #20]
 8006070:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	685a      	ldr	r2, [r3, #4]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	693a      	ldr	r2, [r7, #16]
 8006084:	621a      	str	r2, [r3, #32]
}
 8006086:	bf00      	nop
 8006088:	371c      	adds	r7, #28
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop
 8006094:	40012c00 	.word	0x40012c00
 8006098:	40013400 	.word	0x40013400
 800609c:	40014000 	.word	0x40014000
 80060a0:	40014400 	.word	0x40014400
 80060a4:	40014800 	.word	0x40014800

080060a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b087      	sub	sp, #28
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	f003 031f 	and.w	r3, r3, #31
 80060ba:	2201      	movs	r2, #1
 80060bc:	fa02 f303 	lsl.w	r3, r2, r3
 80060c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6a1a      	ldr	r2, [r3, #32]
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	43db      	mvns	r3, r3
 80060ca:	401a      	ands	r2, r3
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6a1a      	ldr	r2, [r3, #32]
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	f003 031f 	and.w	r3, r3, #31
 80060da:	6879      	ldr	r1, [r7, #4]
 80060dc:	fa01 f303 	lsl.w	r3, r1, r3
 80060e0:	431a      	orrs	r2, r3
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	621a      	str	r2, [r3, #32]
}
 80060e6:	bf00      	nop
 80060e8:	371c      	adds	r7, #28
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr
	...

080060f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b085      	sub	sp, #20
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006104:	2b01      	cmp	r3, #1
 8006106:	d101      	bne.n	800610c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006108:	2302      	movs	r3, #2
 800610a:	e068      	b.n	80061de <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2202      	movs	r2, #2
 8006118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a2e      	ldr	r2, [pc, #184]	@ (80061ec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d004      	beq.n	8006140 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a2d      	ldr	r2, [pc, #180]	@ (80061f0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d108      	bne.n	8006152 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006146:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	4313      	orrs	r3, r2
 8006150:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006158:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	4313      	orrs	r3, r2
 8006162:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a1e      	ldr	r2, [pc, #120]	@ (80061ec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d01d      	beq.n	80061b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800617e:	d018      	beq.n	80061b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a1b      	ldr	r2, [pc, #108]	@ (80061f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d013      	beq.n	80061b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a1a      	ldr	r2, [pc, #104]	@ (80061f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d00e      	beq.n	80061b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a18      	ldr	r2, [pc, #96]	@ (80061fc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d009      	beq.n	80061b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a13      	ldr	r2, [pc, #76]	@ (80061f0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d004      	beq.n	80061b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a14      	ldr	r2, [pc, #80]	@ (8006200 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d10c      	bne.n	80061cc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	68ba      	ldr	r2, [r7, #8]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68ba      	ldr	r2, [r7, #8]
 80061ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3714      	adds	r7, #20
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	40012c00 	.word	0x40012c00
 80061f0:	40013400 	.word	0x40013400
 80061f4:	40000400 	.word	0x40000400
 80061f8:	40000800 	.word	0x40000800
 80061fc:	40000c00 	.word	0x40000c00
 8006200:	40014000 	.word	0x40014000

08006204 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006204:	b480      	push	{r7}
 8006206:	b085      	sub	sp, #20
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800620e:	2300      	movs	r3, #0
 8006210:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006218:	2b01      	cmp	r3, #1
 800621a:	d101      	bne.n	8006220 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800621c:	2302      	movs	r3, #2
 800621e:	e065      	b.n	80062ec <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	4313      	orrs	r3, r2
 8006234:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	4313      	orrs	r3, r2
 8006242:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	4313      	orrs	r3, r2
 8006250:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4313      	orrs	r3, r2
 800625e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	4313      	orrs	r3, r2
 800626c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	695b      	ldr	r3, [r3, #20]
 8006278:	4313      	orrs	r3, r2
 800627a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006286:	4313      	orrs	r3, r2
 8006288:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	699b      	ldr	r3, [r3, #24]
 8006294:	041b      	lsls	r3, r3, #16
 8006296:	4313      	orrs	r3, r2
 8006298:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a16      	ldr	r2, [pc, #88]	@ (80062f8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d004      	beq.n	80062ae <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a14      	ldr	r2, [pc, #80]	@ (80062fc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d115      	bne.n	80062da <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062b8:	051b      	lsls	r3, r3, #20
 80062ba:	4313      	orrs	r3, r2
 80062bc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	69db      	ldr	r3, [r3, #28]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	6a1b      	ldr	r3, [r3, #32]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68fa      	ldr	r2, [r7, #12]
 80062e0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3714      	adds	r7, #20
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr
 80062f8:	40012c00 	.word	0x40012c00
 80062fc:	40013400 	.word	0x40013400

08006300 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006308:	bf00      	nop
 800630a:	370c      	adds	r7, #12
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800631c:	bf00      	nop
 800631e:	370c      	adds	r7, #12
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr

08006328 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006330:	bf00      	nop
 8006332:	370c      	adds	r7, #12
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b082      	sub	sp, #8
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d101      	bne.n	800634e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e040      	b.n	80063d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006352:	2b00      	cmp	r3, #0
 8006354:	d106      	bne.n	8006364 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f7fb fed8 	bl	8002114 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2224      	movs	r2, #36	@ 0x24
 8006368:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f022 0201 	bic.w	r2, r2, #1
 8006378:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800637e:	2b00      	cmp	r3, #0
 8006380:	d002      	beq.n	8006388 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 fedc 	bl	8007140 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 fc21 	bl	8006bd0 <UART_SetConfig>
 800638e:	4603      	mov	r3, r0
 8006390:	2b01      	cmp	r3, #1
 8006392:	d101      	bne.n	8006398 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	e01b      	b.n	80063d0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	685a      	ldr	r2, [r3, #4]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80063a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	689a      	ldr	r2, [r3, #8]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80063b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f042 0201 	orr.w	r2, r2, #1
 80063c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 ff5b 	bl	8007284 <UART_CheckIdleState>
 80063ce:	4603      	mov	r3, r0
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3708      	adds	r7, #8
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b08a      	sub	sp, #40	@ 0x28
 80063dc:	af02      	add	r7, sp, #8
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	603b      	str	r3, [r7, #0]
 80063e4:	4613      	mov	r3, r2
 80063e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80063ec:	2b20      	cmp	r3, #32
 80063ee:	d177      	bne.n	80064e0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d002      	beq.n	80063fc <HAL_UART_Transmit+0x24>
 80063f6:	88fb      	ldrh	r3, [r7, #6]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d101      	bne.n	8006400 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e070      	b.n	80064e2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2200      	movs	r2, #0
 8006404:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2221      	movs	r2, #33	@ 0x21
 800640c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800640e:	f7fb ff7f 	bl	8002310 <HAL_GetTick>
 8006412:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	88fa      	ldrh	r2, [r7, #6]
 8006418:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	88fa      	ldrh	r2, [r7, #6]
 8006420:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800642c:	d108      	bne.n	8006440 <HAL_UART_Transmit+0x68>
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d104      	bne.n	8006440 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006436:	2300      	movs	r3, #0
 8006438:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	61bb      	str	r3, [r7, #24]
 800643e:	e003      	b.n	8006448 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006444:	2300      	movs	r3, #0
 8006446:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006448:	e02f      	b.n	80064aa <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	9300      	str	r3, [sp, #0]
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	2200      	movs	r2, #0
 8006452:	2180      	movs	r1, #128	@ 0x80
 8006454:	68f8      	ldr	r0, [r7, #12]
 8006456:	f000 ffbd 	bl	80073d4 <UART_WaitOnFlagUntilTimeout>
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d004      	beq.n	800646a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2220      	movs	r2, #32
 8006464:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006466:	2303      	movs	r3, #3
 8006468:	e03b      	b.n	80064e2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d10b      	bne.n	8006488 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006470:	69bb      	ldr	r3, [r7, #24]
 8006472:	881a      	ldrh	r2, [r3, #0]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800647c:	b292      	uxth	r2, r2
 800647e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	3302      	adds	r3, #2
 8006484:	61bb      	str	r3, [r7, #24]
 8006486:	e007      	b.n	8006498 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	781a      	ldrb	r2, [r3, #0]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	3301      	adds	r3, #1
 8006496:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800649e:	b29b      	uxth	r3, r3
 80064a0:	3b01      	subs	r3, #1
 80064a2:	b29a      	uxth	r2, r3
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1c9      	bne.n	800644a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	9300      	str	r3, [sp, #0]
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	2200      	movs	r2, #0
 80064be:	2140      	movs	r1, #64	@ 0x40
 80064c0:	68f8      	ldr	r0, [r7, #12]
 80064c2:	f000 ff87 	bl	80073d4 <UART_WaitOnFlagUntilTimeout>
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d004      	beq.n	80064d6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2220      	movs	r2, #32
 80064d0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80064d2:	2303      	movs	r3, #3
 80064d4:	e005      	b.n	80064e2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2220      	movs	r2, #32
 80064da:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80064dc:	2300      	movs	r3, #0
 80064de:	e000      	b.n	80064e2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80064e0:	2302      	movs	r3, #2
  }
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3720      	adds	r7, #32
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
	...

080064ec <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b08a      	sub	sp, #40	@ 0x28
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	4613      	mov	r3, r2
 80064f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006500:	2b20      	cmp	r3, #32
 8006502:	d137      	bne.n	8006574 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d002      	beq.n	8006510 <HAL_UART_Receive_IT+0x24>
 800650a:	88fb      	ldrh	r3, [r7, #6]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d101      	bne.n	8006514 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	e030      	b.n	8006576 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2200      	movs	r2, #0
 8006518:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a18      	ldr	r2, [pc, #96]	@ (8006580 <HAL_UART_Receive_IT+0x94>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d01f      	beq.n	8006564 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800652e:	2b00      	cmp	r3, #0
 8006530:	d018      	beq.n	8006564 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	e853 3f00 	ldrex	r3, [r3]
 800653e:	613b      	str	r3, [r7, #16]
   return(result);
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006546:	627b      	str	r3, [r7, #36]	@ 0x24
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	461a      	mov	r2, r3
 800654e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006550:	623b      	str	r3, [r7, #32]
 8006552:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006554:	69f9      	ldr	r1, [r7, #28]
 8006556:	6a3a      	ldr	r2, [r7, #32]
 8006558:	e841 2300 	strex	r3, r2, [r1]
 800655c:	61bb      	str	r3, [r7, #24]
   return(result);
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d1e6      	bne.n	8006532 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006564:	88fb      	ldrh	r3, [r7, #6]
 8006566:	461a      	mov	r2, r3
 8006568:	68b9      	ldr	r1, [r7, #8]
 800656a:	68f8      	ldr	r0, [r7, #12]
 800656c:	f000 ffa0 	bl	80074b0 <UART_Start_Receive_IT>
 8006570:	4603      	mov	r3, r0
 8006572:	e000      	b.n	8006576 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006574:	2302      	movs	r3, #2
  }
}
 8006576:	4618      	mov	r0, r3
 8006578:	3728      	adds	r7, #40	@ 0x28
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	40008000 	.word	0x40008000

08006584 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b0ba      	sub	sp, #232	@ 0xe8
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	69db      	ldr	r3, [r3, #28]
 8006592:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80065aa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80065ae:	f640 030f 	movw	r3, #2063	@ 0x80f
 80065b2:	4013      	ands	r3, r2
 80065b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80065b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d115      	bne.n	80065ec <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80065c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065c4:	f003 0320 	and.w	r3, r3, #32
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d00f      	beq.n	80065ec <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80065cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065d0:	f003 0320 	and.w	r3, r3, #32
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d009      	beq.n	80065ec <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80065dc:	2b00      	cmp	r3, #0
 80065de:	f000 82ca 	beq.w	8006b76 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	4798      	blx	r3
      }
      return;
 80065ea:	e2c4      	b.n	8006b76 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80065ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	f000 8117 	beq.w	8006824 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80065f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065fa:	f003 0301 	and.w	r3, r3, #1
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d106      	bne.n	8006610 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006602:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006606:	4b85      	ldr	r3, [pc, #532]	@ (800681c <HAL_UART_IRQHandler+0x298>)
 8006608:	4013      	ands	r3, r2
 800660a:	2b00      	cmp	r3, #0
 800660c:	f000 810a 	beq.w	8006824 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006614:	f003 0301 	and.w	r3, r3, #1
 8006618:	2b00      	cmp	r3, #0
 800661a:	d011      	beq.n	8006640 <HAL_UART_IRQHandler+0xbc>
 800661c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006620:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006624:	2b00      	cmp	r3, #0
 8006626:	d00b      	beq.n	8006640 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2201      	movs	r2, #1
 800662e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006636:	f043 0201 	orr.w	r2, r3, #1
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006644:	f003 0302 	and.w	r3, r3, #2
 8006648:	2b00      	cmp	r3, #0
 800664a:	d011      	beq.n	8006670 <HAL_UART_IRQHandler+0xec>
 800664c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006650:	f003 0301 	and.w	r3, r3, #1
 8006654:	2b00      	cmp	r3, #0
 8006656:	d00b      	beq.n	8006670 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	2202      	movs	r2, #2
 800665e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006666:	f043 0204 	orr.w	r2, r3, #4
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006674:	f003 0304 	and.w	r3, r3, #4
 8006678:	2b00      	cmp	r3, #0
 800667a:	d011      	beq.n	80066a0 <HAL_UART_IRQHandler+0x11c>
 800667c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006680:	f003 0301 	and.w	r3, r3, #1
 8006684:	2b00      	cmp	r3, #0
 8006686:	d00b      	beq.n	80066a0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	2204      	movs	r2, #4
 800668e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006696:	f043 0202 	orr.w	r2, r3, #2
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80066a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066a4:	f003 0308 	and.w	r3, r3, #8
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d017      	beq.n	80066dc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80066ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066b0:	f003 0320 	and.w	r3, r3, #32
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d105      	bne.n	80066c4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80066b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066bc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d00b      	beq.n	80066dc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2208      	movs	r2, #8
 80066ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066d2:	f043 0208 	orr.w	r2, r3, #8
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80066dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d012      	beq.n	800670e <HAL_UART_IRQHandler+0x18a>
 80066e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066ec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d00c      	beq.n	800670e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80066fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006704:	f043 0220 	orr.w	r2, r3, #32
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006714:	2b00      	cmp	r3, #0
 8006716:	f000 8230 	beq.w	8006b7a <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800671a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800671e:	f003 0320 	and.w	r3, r3, #32
 8006722:	2b00      	cmp	r3, #0
 8006724:	d00d      	beq.n	8006742 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006726:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800672a:	f003 0320 	and.w	r3, r3, #32
 800672e:	2b00      	cmp	r3, #0
 8006730:	d007      	beq.n	8006742 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006736:	2b00      	cmp	r3, #0
 8006738:	d003      	beq.n	8006742 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006748:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006756:	2b40      	cmp	r3, #64	@ 0x40
 8006758:	d005      	beq.n	8006766 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800675a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800675e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006762:	2b00      	cmp	r3, #0
 8006764:	d04f      	beq.n	8006806 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 ff68 	bl	800763c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006776:	2b40      	cmp	r3, #64	@ 0x40
 8006778:	d141      	bne.n	80067fe <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	3308      	adds	r3, #8
 8006780:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006784:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006788:	e853 3f00 	ldrex	r3, [r3]
 800678c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006790:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006794:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006798:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	3308      	adds	r3, #8
 80067a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80067a6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80067aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80067b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80067b6:	e841 2300 	strex	r3, r2, [r1]
 80067ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80067be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d1d9      	bne.n	800677a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d013      	beq.n	80067f6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067d2:	4a13      	ldr	r2, [pc, #76]	@ (8006820 <HAL_UART_IRQHandler+0x29c>)
 80067d4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067da:	4618      	mov	r0, r3
 80067dc:	f7fb ff17 	bl	800260e <HAL_DMA_Abort_IT>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d017      	beq.n	8006816 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80067f0:	4610      	mov	r0, r2
 80067f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067f4:	e00f      	b.n	8006816 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 f9d4 	bl	8006ba4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067fc:	e00b      	b.n	8006816 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 f9d0 	bl	8006ba4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006804:	e007      	b.n	8006816 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 f9cc 	bl	8006ba4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006814:	e1b1      	b.n	8006b7a <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006816:	bf00      	nop
    return;
 8006818:	e1af      	b.n	8006b7a <HAL_UART_IRQHandler+0x5f6>
 800681a:	bf00      	nop
 800681c:	04000120 	.word	0x04000120
 8006820:	08007705 	.word	0x08007705

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006828:	2b01      	cmp	r3, #1
 800682a:	f040 816a 	bne.w	8006b02 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800682e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006832:	f003 0310 	and.w	r3, r3, #16
 8006836:	2b00      	cmp	r3, #0
 8006838:	f000 8163 	beq.w	8006b02 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800683c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006840:	f003 0310 	and.w	r3, r3, #16
 8006844:	2b00      	cmp	r3, #0
 8006846:	f000 815c 	beq.w	8006b02 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2210      	movs	r2, #16
 8006850:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800685c:	2b40      	cmp	r3, #64	@ 0x40
 800685e:	f040 80d4 	bne.w	8006a0a <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800686e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006872:	2b00      	cmp	r3, #0
 8006874:	f000 80ad 	beq.w	80069d2 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800687e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006882:	429a      	cmp	r2, r3
 8006884:	f080 80a5 	bcs.w	80069d2 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800688e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 0320 	and.w	r3, r3, #32
 800689e:	2b00      	cmp	r3, #0
 80068a0:	f040 8086 	bne.w	80069b0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80068b0:	e853 3f00 	ldrex	r3, [r3]
 80068b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80068b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80068bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	461a      	mov	r2, r3
 80068ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80068ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80068d2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80068da:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80068de:	e841 2300 	strex	r3, r2, [r1]
 80068e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80068e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1da      	bne.n	80068a4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	3308      	adds	r3, #8
 80068f4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80068f8:	e853 3f00 	ldrex	r3, [r3]
 80068fc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80068fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006900:	f023 0301 	bic.w	r3, r3, #1
 8006904:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	3308      	adds	r3, #8
 800690e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006912:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006916:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006918:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800691a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800691e:	e841 2300 	strex	r3, r2, [r1]
 8006922:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006924:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006926:	2b00      	cmp	r3, #0
 8006928:	d1e1      	bne.n	80068ee <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	3308      	adds	r3, #8
 8006930:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006932:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006934:	e853 3f00 	ldrex	r3, [r3]
 8006938:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800693a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800693c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006940:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	3308      	adds	r3, #8
 800694a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800694e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006950:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006952:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006954:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006956:	e841 2300 	strex	r3, r2, [r1]
 800695a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800695c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800695e:	2b00      	cmp	r3, #0
 8006960:	d1e3      	bne.n	800692a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2220      	movs	r2, #32
 8006966:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006976:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006978:	e853 3f00 	ldrex	r3, [r3]
 800697c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800697e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006980:	f023 0310 	bic.w	r3, r3, #16
 8006984:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	461a      	mov	r2, r3
 800698e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006992:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006994:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006996:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006998:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800699a:	e841 2300 	strex	r3, r2, [r1]
 800699e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80069a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d1e4      	bne.n	8006970 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069aa:	4618      	mov	r0, r3
 80069ac:	f7fb fdf1 	bl	8002592 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2202      	movs	r2, #2
 80069b4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	4619      	mov	r1, r3
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 f8f4 	bl	8006bb8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80069d0:	e0d5      	b.n	8006b7e <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80069d8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80069dc:	429a      	cmp	r2, r3
 80069de:	f040 80ce 	bne.w	8006b7e <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 0320 	and.w	r3, r3, #32
 80069ee:	2b20      	cmp	r3, #32
 80069f0:	f040 80c5 	bne.w	8006b7e <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2202      	movs	r2, #2
 80069f8:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006a00:	4619      	mov	r1, r3
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 f8d8 	bl	8006bb8 <HAL_UARTEx_RxEventCallback>
      return;
 8006a08:	e0b9      	b.n	8006b7e <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	1ad3      	subs	r3, r2, r3
 8006a1a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	f000 80ab 	beq.w	8006b82 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8006a2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	f000 80a6 	beq.w	8006b82 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a3e:	e853 3f00 	ldrex	r3, [r3]
 8006a42:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a46:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a4a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	461a      	mov	r2, r3
 8006a54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006a58:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a5a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a60:	e841 2300 	strex	r3, r2, [r1]
 8006a64:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d1e4      	bne.n	8006a36 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	3308      	adds	r3, #8
 8006a72:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a76:	e853 3f00 	ldrex	r3, [r3]
 8006a7a:	623b      	str	r3, [r7, #32]
   return(result);
 8006a7c:	6a3b      	ldr	r3, [r7, #32]
 8006a7e:	f023 0301 	bic.w	r3, r3, #1
 8006a82:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	3308      	adds	r3, #8
 8006a8c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006a90:	633a      	str	r2, [r7, #48]	@ 0x30
 8006a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a94:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a98:	e841 2300 	strex	r3, r2, [r1]
 8006a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d1e3      	bne.n	8006a6c <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2220      	movs	r2, #32
 8006aa8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	e853 3f00 	ldrex	r3, [r3]
 8006ac4:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f023 0310 	bic.w	r3, r3, #16
 8006acc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006ada:	61fb      	str	r3, [r7, #28]
 8006adc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ade:	69b9      	ldr	r1, [r7, #24]
 8006ae0:	69fa      	ldr	r2, [r7, #28]
 8006ae2:	e841 2300 	strex	r3, r2, [r1]
 8006ae6:	617b      	str	r3, [r7, #20]
   return(result);
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1e4      	bne.n	8006ab8 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2202      	movs	r2, #2
 8006af2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006af4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006af8:	4619      	mov	r1, r3
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 f85c 	bl	8006bb8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006b00:	e03f      	b.n	8006b82 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d00e      	beq.n	8006b2c <HAL_UART_IRQHandler+0x5a8>
 8006b0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d008      	beq.n	8006b2c <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006b22:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f000 ffe9 	bl	8007afc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b2a:	e02d      	b.n	8006b88 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006b2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d00e      	beq.n	8006b56 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d008      	beq.n	8006b56 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d01c      	beq.n	8006b86 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	4798      	blx	r3
    }
    return;
 8006b54:	e017      	b.n	8006b86 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d012      	beq.n	8006b88 <HAL_UART_IRQHandler+0x604>
 8006b62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00c      	beq.n	8006b88 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 fdde 	bl	8007730 <UART_EndTransmit_IT>
    return;
 8006b74:	e008      	b.n	8006b88 <HAL_UART_IRQHandler+0x604>
      return;
 8006b76:	bf00      	nop
 8006b78:	e006      	b.n	8006b88 <HAL_UART_IRQHandler+0x604>
    return;
 8006b7a:	bf00      	nop
 8006b7c:	e004      	b.n	8006b88 <HAL_UART_IRQHandler+0x604>
      return;
 8006b7e:	bf00      	nop
 8006b80:	e002      	b.n	8006b88 <HAL_UART_IRQHandler+0x604>
      return;
 8006b82:	bf00      	nop
 8006b84:	e000      	b.n	8006b88 <HAL_UART_IRQHandler+0x604>
    return;
 8006b86:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006b88:	37e8      	adds	r7, #232	@ 0xe8
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	bf00      	nop

08006b90 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006b98:	bf00      	nop
 8006b9a:	370c      	adds	r7, #12
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr

08006ba4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006bac:	bf00      	nop
 8006bae:	370c      	adds	r7, #12
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	460b      	mov	r3, r1
 8006bc2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006bc4:	bf00      	nop
 8006bc6:	370c      	adds	r7, #12
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr

08006bd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bd4:	b08a      	sub	sp, #40	@ 0x28
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	689a      	ldr	r2, [r3, #8]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	691b      	ldr	r3, [r3, #16]
 8006be8:	431a      	orrs	r2, r3
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	695b      	ldr	r3, [r3, #20]
 8006bee:	431a      	orrs	r2, r3
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	69db      	ldr	r3, [r3, #28]
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	4ba4      	ldr	r3, [pc, #656]	@ (8006e90 <UART_SetConfig+0x2c0>)
 8006c00:	4013      	ands	r3, r2
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	6812      	ldr	r2, [r2, #0]
 8006c06:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006c08:	430b      	orrs	r3, r1
 8006c0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	68da      	ldr	r2, [r3, #12]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	430a      	orrs	r2, r1
 8006c20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	699b      	ldr	r3, [r3, #24]
 8006c26:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a99      	ldr	r2, [pc, #612]	@ (8006e94 <UART_SetConfig+0x2c4>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d004      	beq.n	8006c3c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	6a1b      	ldr	r3, [r3, #32]
 8006c36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c4c:	430a      	orrs	r2, r1
 8006c4e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a90      	ldr	r2, [pc, #576]	@ (8006e98 <UART_SetConfig+0x2c8>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d126      	bne.n	8006ca8 <UART_SetConfig+0xd8>
 8006c5a:	4b90      	ldr	r3, [pc, #576]	@ (8006e9c <UART_SetConfig+0x2cc>)
 8006c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c60:	f003 0303 	and.w	r3, r3, #3
 8006c64:	2b03      	cmp	r3, #3
 8006c66:	d81b      	bhi.n	8006ca0 <UART_SetConfig+0xd0>
 8006c68:	a201      	add	r2, pc, #4	@ (adr r2, 8006c70 <UART_SetConfig+0xa0>)
 8006c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c6e:	bf00      	nop
 8006c70:	08006c81 	.word	0x08006c81
 8006c74:	08006c91 	.word	0x08006c91
 8006c78:	08006c89 	.word	0x08006c89
 8006c7c:	08006c99 	.word	0x08006c99
 8006c80:	2301      	movs	r3, #1
 8006c82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c86:	e116      	b.n	8006eb6 <UART_SetConfig+0x2e6>
 8006c88:	2302      	movs	r3, #2
 8006c8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c8e:	e112      	b.n	8006eb6 <UART_SetConfig+0x2e6>
 8006c90:	2304      	movs	r3, #4
 8006c92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c96:	e10e      	b.n	8006eb6 <UART_SetConfig+0x2e6>
 8006c98:	2308      	movs	r3, #8
 8006c9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c9e:	e10a      	b.n	8006eb6 <UART_SetConfig+0x2e6>
 8006ca0:	2310      	movs	r3, #16
 8006ca2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ca6:	e106      	b.n	8006eb6 <UART_SetConfig+0x2e6>
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a7c      	ldr	r2, [pc, #496]	@ (8006ea0 <UART_SetConfig+0x2d0>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d138      	bne.n	8006d24 <UART_SetConfig+0x154>
 8006cb2:	4b7a      	ldr	r3, [pc, #488]	@ (8006e9c <UART_SetConfig+0x2cc>)
 8006cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cb8:	f003 030c 	and.w	r3, r3, #12
 8006cbc:	2b0c      	cmp	r3, #12
 8006cbe:	d82d      	bhi.n	8006d1c <UART_SetConfig+0x14c>
 8006cc0:	a201      	add	r2, pc, #4	@ (adr r2, 8006cc8 <UART_SetConfig+0xf8>)
 8006cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc6:	bf00      	nop
 8006cc8:	08006cfd 	.word	0x08006cfd
 8006ccc:	08006d1d 	.word	0x08006d1d
 8006cd0:	08006d1d 	.word	0x08006d1d
 8006cd4:	08006d1d 	.word	0x08006d1d
 8006cd8:	08006d0d 	.word	0x08006d0d
 8006cdc:	08006d1d 	.word	0x08006d1d
 8006ce0:	08006d1d 	.word	0x08006d1d
 8006ce4:	08006d1d 	.word	0x08006d1d
 8006ce8:	08006d05 	.word	0x08006d05
 8006cec:	08006d1d 	.word	0x08006d1d
 8006cf0:	08006d1d 	.word	0x08006d1d
 8006cf4:	08006d1d 	.word	0x08006d1d
 8006cf8:	08006d15 	.word	0x08006d15
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d02:	e0d8      	b.n	8006eb6 <UART_SetConfig+0x2e6>
 8006d04:	2302      	movs	r3, #2
 8006d06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d0a:	e0d4      	b.n	8006eb6 <UART_SetConfig+0x2e6>
 8006d0c:	2304      	movs	r3, #4
 8006d0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d12:	e0d0      	b.n	8006eb6 <UART_SetConfig+0x2e6>
 8006d14:	2308      	movs	r3, #8
 8006d16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d1a:	e0cc      	b.n	8006eb6 <UART_SetConfig+0x2e6>
 8006d1c:	2310      	movs	r3, #16
 8006d1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d22:	e0c8      	b.n	8006eb6 <UART_SetConfig+0x2e6>
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a5e      	ldr	r2, [pc, #376]	@ (8006ea4 <UART_SetConfig+0x2d4>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d125      	bne.n	8006d7a <UART_SetConfig+0x1aa>
 8006d2e:	4b5b      	ldr	r3, [pc, #364]	@ (8006e9c <UART_SetConfig+0x2cc>)
 8006d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d34:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006d38:	2b30      	cmp	r3, #48	@ 0x30
 8006d3a:	d016      	beq.n	8006d6a <UART_SetConfig+0x19a>
 8006d3c:	2b30      	cmp	r3, #48	@ 0x30
 8006d3e:	d818      	bhi.n	8006d72 <UART_SetConfig+0x1a2>
 8006d40:	2b20      	cmp	r3, #32
 8006d42:	d00a      	beq.n	8006d5a <UART_SetConfig+0x18a>
 8006d44:	2b20      	cmp	r3, #32
 8006d46:	d814      	bhi.n	8006d72 <UART_SetConfig+0x1a2>
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d002      	beq.n	8006d52 <UART_SetConfig+0x182>
 8006d4c:	2b10      	cmp	r3, #16
 8006d4e:	d008      	beq.n	8006d62 <UART_SetConfig+0x192>
 8006d50:	e00f      	b.n	8006d72 <UART_SetConfig+0x1a2>
 8006d52:	2300      	movs	r3, #0
 8006d54:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d58:	e0ad      	b.n	8006eb6 <UART_SetConfig+0x2e6>
 8006d5a:	2302      	movs	r3, #2
 8006d5c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d60:	e0a9      	b.n	8006eb6 <UART_SetConfig+0x2e6>
 8006d62:	2304      	movs	r3, #4
 8006d64:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d68:	e0a5      	b.n	8006eb6 <UART_SetConfig+0x2e6>
 8006d6a:	2308      	movs	r3, #8
 8006d6c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d70:	e0a1      	b.n	8006eb6 <UART_SetConfig+0x2e6>
 8006d72:	2310      	movs	r3, #16
 8006d74:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d78:	e09d      	b.n	8006eb6 <UART_SetConfig+0x2e6>
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a4a      	ldr	r2, [pc, #296]	@ (8006ea8 <UART_SetConfig+0x2d8>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d125      	bne.n	8006dd0 <UART_SetConfig+0x200>
 8006d84:	4b45      	ldr	r3, [pc, #276]	@ (8006e9c <UART_SetConfig+0x2cc>)
 8006d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d8a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006d8e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006d90:	d016      	beq.n	8006dc0 <UART_SetConfig+0x1f0>
 8006d92:	2bc0      	cmp	r3, #192	@ 0xc0
 8006d94:	d818      	bhi.n	8006dc8 <UART_SetConfig+0x1f8>
 8006d96:	2b80      	cmp	r3, #128	@ 0x80
 8006d98:	d00a      	beq.n	8006db0 <UART_SetConfig+0x1e0>
 8006d9a:	2b80      	cmp	r3, #128	@ 0x80
 8006d9c:	d814      	bhi.n	8006dc8 <UART_SetConfig+0x1f8>
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d002      	beq.n	8006da8 <UART_SetConfig+0x1d8>
 8006da2:	2b40      	cmp	r3, #64	@ 0x40
 8006da4:	d008      	beq.n	8006db8 <UART_SetConfig+0x1e8>
 8006da6:	e00f      	b.n	8006dc8 <UART_SetConfig+0x1f8>
 8006da8:	2300      	movs	r3, #0
 8006daa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dae:	e082      	b.n	8006eb6 <UART_SetConfig+0x2e6>
 8006db0:	2302      	movs	r3, #2
 8006db2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006db6:	e07e      	b.n	8006eb6 <UART_SetConfig+0x2e6>
 8006db8:	2304      	movs	r3, #4
 8006dba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dbe:	e07a      	b.n	8006eb6 <UART_SetConfig+0x2e6>
 8006dc0:	2308      	movs	r3, #8
 8006dc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dc6:	e076      	b.n	8006eb6 <UART_SetConfig+0x2e6>
 8006dc8:	2310      	movs	r3, #16
 8006dca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dce:	e072      	b.n	8006eb6 <UART_SetConfig+0x2e6>
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a35      	ldr	r2, [pc, #212]	@ (8006eac <UART_SetConfig+0x2dc>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d12a      	bne.n	8006e30 <UART_SetConfig+0x260>
 8006dda:	4b30      	ldr	r3, [pc, #192]	@ (8006e9c <UART_SetConfig+0x2cc>)
 8006ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006de0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006de4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006de8:	d01a      	beq.n	8006e20 <UART_SetConfig+0x250>
 8006dea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006dee:	d81b      	bhi.n	8006e28 <UART_SetConfig+0x258>
 8006df0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006df4:	d00c      	beq.n	8006e10 <UART_SetConfig+0x240>
 8006df6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006dfa:	d815      	bhi.n	8006e28 <UART_SetConfig+0x258>
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d003      	beq.n	8006e08 <UART_SetConfig+0x238>
 8006e00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e04:	d008      	beq.n	8006e18 <UART_SetConfig+0x248>
 8006e06:	e00f      	b.n	8006e28 <UART_SetConfig+0x258>
 8006e08:	2300      	movs	r3, #0
 8006e0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e0e:	e052      	b.n	8006eb6 <UART_SetConfig+0x2e6>
 8006e10:	2302      	movs	r3, #2
 8006e12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e16:	e04e      	b.n	8006eb6 <UART_SetConfig+0x2e6>
 8006e18:	2304      	movs	r3, #4
 8006e1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e1e:	e04a      	b.n	8006eb6 <UART_SetConfig+0x2e6>
 8006e20:	2308      	movs	r3, #8
 8006e22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e26:	e046      	b.n	8006eb6 <UART_SetConfig+0x2e6>
 8006e28:	2310      	movs	r3, #16
 8006e2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e2e:	e042      	b.n	8006eb6 <UART_SetConfig+0x2e6>
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a17      	ldr	r2, [pc, #92]	@ (8006e94 <UART_SetConfig+0x2c4>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d13a      	bne.n	8006eb0 <UART_SetConfig+0x2e0>
 8006e3a:	4b18      	ldr	r3, [pc, #96]	@ (8006e9c <UART_SetConfig+0x2cc>)
 8006e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e40:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006e44:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e48:	d01a      	beq.n	8006e80 <UART_SetConfig+0x2b0>
 8006e4a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e4e:	d81b      	bhi.n	8006e88 <UART_SetConfig+0x2b8>
 8006e50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e54:	d00c      	beq.n	8006e70 <UART_SetConfig+0x2a0>
 8006e56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e5a:	d815      	bhi.n	8006e88 <UART_SetConfig+0x2b8>
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d003      	beq.n	8006e68 <UART_SetConfig+0x298>
 8006e60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e64:	d008      	beq.n	8006e78 <UART_SetConfig+0x2a8>
 8006e66:	e00f      	b.n	8006e88 <UART_SetConfig+0x2b8>
 8006e68:	2300      	movs	r3, #0
 8006e6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e6e:	e022      	b.n	8006eb6 <UART_SetConfig+0x2e6>
 8006e70:	2302      	movs	r3, #2
 8006e72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e76:	e01e      	b.n	8006eb6 <UART_SetConfig+0x2e6>
 8006e78:	2304      	movs	r3, #4
 8006e7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e7e:	e01a      	b.n	8006eb6 <UART_SetConfig+0x2e6>
 8006e80:	2308      	movs	r3, #8
 8006e82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e86:	e016      	b.n	8006eb6 <UART_SetConfig+0x2e6>
 8006e88:	2310      	movs	r3, #16
 8006e8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e8e:	e012      	b.n	8006eb6 <UART_SetConfig+0x2e6>
 8006e90:	efff69f3 	.word	0xefff69f3
 8006e94:	40008000 	.word	0x40008000
 8006e98:	40013800 	.word	0x40013800
 8006e9c:	40021000 	.word	0x40021000
 8006ea0:	40004400 	.word	0x40004400
 8006ea4:	40004800 	.word	0x40004800
 8006ea8:	40004c00 	.word	0x40004c00
 8006eac:	40005000 	.word	0x40005000
 8006eb0:	2310      	movs	r3, #16
 8006eb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a9f      	ldr	r2, [pc, #636]	@ (8007138 <UART_SetConfig+0x568>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d17a      	bne.n	8006fb6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006ec0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006ec4:	2b08      	cmp	r3, #8
 8006ec6:	d824      	bhi.n	8006f12 <UART_SetConfig+0x342>
 8006ec8:	a201      	add	r2, pc, #4	@ (adr r2, 8006ed0 <UART_SetConfig+0x300>)
 8006eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ece:	bf00      	nop
 8006ed0:	08006ef5 	.word	0x08006ef5
 8006ed4:	08006f13 	.word	0x08006f13
 8006ed8:	08006efd 	.word	0x08006efd
 8006edc:	08006f13 	.word	0x08006f13
 8006ee0:	08006f03 	.word	0x08006f03
 8006ee4:	08006f13 	.word	0x08006f13
 8006ee8:	08006f13 	.word	0x08006f13
 8006eec:	08006f13 	.word	0x08006f13
 8006ef0:	08006f0b 	.word	0x08006f0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ef4:	f7fd fa76 	bl	80043e4 <HAL_RCC_GetPCLK1Freq>
 8006ef8:	61f8      	str	r0, [r7, #28]
        break;
 8006efa:	e010      	b.n	8006f1e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006efc:	4b8f      	ldr	r3, [pc, #572]	@ (800713c <UART_SetConfig+0x56c>)
 8006efe:	61fb      	str	r3, [r7, #28]
        break;
 8006f00:	e00d      	b.n	8006f1e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f02:	f7fd f9d7 	bl	80042b4 <HAL_RCC_GetSysClockFreq>
 8006f06:	61f8      	str	r0, [r7, #28]
        break;
 8006f08:	e009      	b.n	8006f1e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f0e:	61fb      	str	r3, [r7, #28]
        break;
 8006f10:	e005      	b.n	8006f1e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006f12:	2300      	movs	r3, #0
 8006f14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006f1c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	f000 80fb 	beq.w	800711c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	685a      	ldr	r2, [r3, #4]
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	005b      	lsls	r3, r3, #1
 8006f2e:	4413      	add	r3, r2
 8006f30:	69fa      	ldr	r2, [r7, #28]
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d305      	bcc.n	8006f42 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006f3c:	69fa      	ldr	r2, [r7, #28]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d903      	bls.n	8006f4a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006f48:	e0e8      	b.n	800711c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	461c      	mov	r4, r3
 8006f50:	4615      	mov	r5, r2
 8006f52:	f04f 0200 	mov.w	r2, #0
 8006f56:	f04f 0300 	mov.w	r3, #0
 8006f5a:	022b      	lsls	r3, r5, #8
 8006f5c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006f60:	0222      	lsls	r2, r4, #8
 8006f62:	68f9      	ldr	r1, [r7, #12]
 8006f64:	6849      	ldr	r1, [r1, #4]
 8006f66:	0849      	lsrs	r1, r1, #1
 8006f68:	2000      	movs	r0, #0
 8006f6a:	4688      	mov	r8, r1
 8006f6c:	4681      	mov	r9, r0
 8006f6e:	eb12 0a08 	adds.w	sl, r2, r8
 8006f72:	eb43 0b09 	adc.w	fp, r3, r9
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	603b      	str	r3, [r7, #0]
 8006f7e:	607a      	str	r2, [r7, #4]
 8006f80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f84:	4650      	mov	r0, sl
 8006f86:	4659      	mov	r1, fp
 8006f88:	f7f9 fe0e 	bl	8000ba8 <__aeabi_uldivmod>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	460b      	mov	r3, r1
 8006f90:	4613      	mov	r3, r2
 8006f92:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f94:	69bb      	ldr	r3, [r7, #24]
 8006f96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f9a:	d308      	bcc.n	8006fae <UART_SetConfig+0x3de>
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006fa2:	d204      	bcs.n	8006fae <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	69ba      	ldr	r2, [r7, #24]
 8006faa:	60da      	str	r2, [r3, #12]
 8006fac:	e0b6      	b.n	800711c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006fb4:	e0b2      	b.n	800711c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	69db      	ldr	r3, [r3, #28]
 8006fba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006fbe:	d15e      	bne.n	800707e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006fc0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006fc4:	2b08      	cmp	r3, #8
 8006fc6:	d828      	bhi.n	800701a <UART_SetConfig+0x44a>
 8006fc8:	a201      	add	r2, pc, #4	@ (adr r2, 8006fd0 <UART_SetConfig+0x400>)
 8006fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fce:	bf00      	nop
 8006fd0:	08006ff5 	.word	0x08006ff5
 8006fd4:	08006ffd 	.word	0x08006ffd
 8006fd8:	08007005 	.word	0x08007005
 8006fdc:	0800701b 	.word	0x0800701b
 8006fe0:	0800700b 	.word	0x0800700b
 8006fe4:	0800701b 	.word	0x0800701b
 8006fe8:	0800701b 	.word	0x0800701b
 8006fec:	0800701b 	.word	0x0800701b
 8006ff0:	08007013 	.word	0x08007013
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ff4:	f7fd f9f6 	bl	80043e4 <HAL_RCC_GetPCLK1Freq>
 8006ff8:	61f8      	str	r0, [r7, #28]
        break;
 8006ffa:	e014      	b.n	8007026 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ffc:	f7fd fa08 	bl	8004410 <HAL_RCC_GetPCLK2Freq>
 8007000:	61f8      	str	r0, [r7, #28]
        break;
 8007002:	e010      	b.n	8007026 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007004:	4b4d      	ldr	r3, [pc, #308]	@ (800713c <UART_SetConfig+0x56c>)
 8007006:	61fb      	str	r3, [r7, #28]
        break;
 8007008:	e00d      	b.n	8007026 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800700a:	f7fd f953 	bl	80042b4 <HAL_RCC_GetSysClockFreq>
 800700e:	61f8      	str	r0, [r7, #28]
        break;
 8007010:	e009      	b.n	8007026 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007012:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007016:	61fb      	str	r3, [r7, #28]
        break;
 8007018:	e005      	b.n	8007026 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800701a:	2300      	movs	r3, #0
 800701c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007024:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007026:	69fb      	ldr	r3, [r7, #28]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d077      	beq.n	800711c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800702c:	69fb      	ldr	r3, [r7, #28]
 800702e:	005a      	lsls	r2, r3, #1
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	085b      	lsrs	r3, r3, #1
 8007036:	441a      	add	r2, r3
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007040:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007042:	69bb      	ldr	r3, [r7, #24]
 8007044:	2b0f      	cmp	r3, #15
 8007046:	d916      	bls.n	8007076 <UART_SetConfig+0x4a6>
 8007048:	69bb      	ldr	r3, [r7, #24]
 800704a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800704e:	d212      	bcs.n	8007076 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007050:	69bb      	ldr	r3, [r7, #24]
 8007052:	b29b      	uxth	r3, r3
 8007054:	f023 030f 	bic.w	r3, r3, #15
 8007058:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	085b      	lsrs	r3, r3, #1
 800705e:	b29b      	uxth	r3, r3
 8007060:	f003 0307 	and.w	r3, r3, #7
 8007064:	b29a      	uxth	r2, r3
 8007066:	8afb      	ldrh	r3, [r7, #22]
 8007068:	4313      	orrs	r3, r2
 800706a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	8afa      	ldrh	r2, [r7, #22]
 8007072:	60da      	str	r2, [r3, #12]
 8007074:	e052      	b.n	800711c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800707c:	e04e      	b.n	800711c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800707e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007082:	2b08      	cmp	r3, #8
 8007084:	d827      	bhi.n	80070d6 <UART_SetConfig+0x506>
 8007086:	a201      	add	r2, pc, #4	@ (adr r2, 800708c <UART_SetConfig+0x4bc>)
 8007088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800708c:	080070b1 	.word	0x080070b1
 8007090:	080070b9 	.word	0x080070b9
 8007094:	080070c1 	.word	0x080070c1
 8007098:	080070d7 	.word	0x080070d7
 800709c:	080070c7 	.word	0x080070c7
 80070a0:	080070d7 	.word	0x080070d7
 80070a4:	080070d7 	.word	0x080070d7
 80070a8:	080070d7 	.word	0x080070d7
 80070ac:	080070cf 	.word	0x080070cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070b0:	f7fd f998 	bl	80043e4 <HAL_RCC_GetPCLK1Freq>
 80070b4:	61f8      	str	r0, [r7, #28]
        break;
 80070b6:	e014      	b.n	80070e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070b8:	f7fd f9aa 	bl	8004410 <HAL_RCC_GetPCLK2Freq>
 80070bc:	61f8      	str	r0, [r7, #28]
        break;
 80070be:	e010      	b.n	80070e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070c0:	4b1e      	ldr	r3, [pc, #120]	@ (800713c <UART_SetConfig+0x56c>)
 80070c2:	61fb      	str	r3, [r7, #28]
        break;
 80070c4:	e00d      	b.n	80070e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070c6:	f7fd f8f5 	bl	80042b4 <HAL_RCC_GetSysClockFreq>
 80070ca:	61f8      	str	r0, [r7, #28]
        break;
 80070cc:	e009      	b.n	80070e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070d2:	61fb      	str	r3, [r7, #28]
        break;
 80070d4:	e005      	b.n	80070e2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80070d6:	2300      	movs	r3, #0
 80070d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80070da:	2301      	movs	r3, #1
 80070dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80070e0:	bf00      	nop
    }

    if (pclk != 0U)
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d019      	beq.n	800711c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	085a      	lsrs	r2, r3, #1
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	441a      	add	r2, r3
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80070fa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070fc:	69bb      	ldr	r3, [r7, #24]
 80070fe:	2b0f      	cmp	r3, #15
 8007100:	d909      	bls.n	8007116 <UART_SetConfig+0x546>
 8007102:	69bb      	ldr	r3, [r7, #24]
 8007104:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007108:	d205      	bcs.n	8007116 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	b29a      	uxth	r2, r3
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	60da      	str	r2, [r3, #12]
 8007114:	e002      	b.n	800711c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007116:	2301      	movs	r3, #1
 8007118:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2200      	movs	r2, #0
 8007120:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2200      	movs	r2, #0
 8007126:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007128:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800712c:	4618      	mov	r0, r3
 800712e:	3728      	adds	r7, #40	@ 0x28
 8007130:	46bd      	mov	sp, r7
 8007132:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007136:	bf00      	nop
 8007138:	40008000 	.word	0x40008000
 800713c:	00f42400 	.word	0x00f42400

08007140 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800714c:	f003 0308 	and.w	r3, r3, #8
 8007150:	2b00      	cmp	r3, #0
 8007152:	d00a      	beq.n	800716a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	430a      	orrs	r2, r1
 8007168:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800716e:	f003 0301 	and.w	r3, r3, #1
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00a      	beq.n	800718c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	430a      	orrs	r2, r1
 800718a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007190:	f003 0302 	and.w	r3, r3, #2
 8007194:	2b00      	cmp	r3, #0
 8007196:	d00a      	beq.n	80071ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	430a      	orrs	r2, r1
 80071ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071b2:	f003 0304 	and.w	r3, r3, #4
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d00a      	beq.n	80071d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	430a      	orrs	r2, r1
 80071ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071d4:	f003 0310 	and.w	r3, r3, #16
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d00a      	beq.n	80071f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	430a      	orrs	r2, r1
 80071f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071f6:	f003 0320 	and.w	r3, r3, #32
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d00a      	beq.n	8007214 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	430a      	orrs	r2, r1
 8007212:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007218:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800721c:	2b00      	cmp	r3, #0
 800721e:	d01a      	beq.n	8007256 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	430a      	orrs	r2, r1
 8007234:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800723a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800723e:	d10a      	bne.n	8007256 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	430a      	orrs	r2, r1
 8007254:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800725a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800725e:	2b00      	cmp	r3, #0
 8007260:	d00a      	beq.n	8007278 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	430a      	orrs	r2, r1
 8007276:	605a      	str	r2, [r3, #4]
  }
}
 8007278:	bf00      	nop
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b098      	sub	sp, #96	@ 0x60
 8007288:	af02      	add	r7, sp, #8
 800728a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007294:	f7fb f83c 	bl	8002310 <HAL_GetTick>
 8007298:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f003 0308 	and.w	r3, r3, #8
 80072a4:	2b08      	cmp	r3, #8
 80072a6:	d12e      	bne.n	8007306 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80072ac:	9300      	str	r3, [sp, #0]
 80072ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072b0:	2200      	movs	r2, #0
 80072b2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 f88c 	bl	80073d4 <UART_WaitOnFlagUntilTimeout>
 80072bc:	4603      	mov	r3, r0
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d021      	beq.n	8007306 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ca:	e853 3f00 	ldrex	r3, [r3]
 80072ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80072d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	461a      	mov	r2, r3
 80072de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80072e2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80072e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80072e8:	e841 2300 	strex	r3, r2, [r1]
 80072ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80072ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d1e6      	bne.n	80072c2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2220      	movs	r2, #32
 80072f8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007302:	2303      	movs	r3, #3
 8007304:	e062      	b.n	80073cc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f003 0304 	and.w	r3, r3, #4
 8007310:	2b04      	cmp	r3, #4
 8007312:	d149      	bne.n	80073a8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007314:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007318:	9300      	str	r3, [sp, #0]
 800731a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800731c:	2200      	movs	r2, #0
 800731e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 f856 	bl	80073d4 <UART_WaitOnFlagUntilTimeout>
 8007328:	4603      	mov	r3, r0
 800732a:	2b00      	cmp	r3, #0
 800732c:	d03c      	beq.n	80073a8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007336:	e853 3f00 	ldrex	r3, [r3]
 800733a:	623b      	str	r3, [r7, #32]
   return(result);
 800733c:	6a3b      	ldr	r3, [r7, #32]
 800733e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007342:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	461a      	mov	r2, r3
 800734a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800734c:	633b      	str	r3, [r7, #48]	@ 0x30
 800734e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007350:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007352:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007354:	e841 2300 	strex	r3, r2, [r1]
 8007358:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800735a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800735c:	2b00      	cmp	r3, #0
 800735e:	d1e6      	bne.n	800732e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	3308      	adds	r3, #8
 8007366:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	e853 3f00 	ldrex	r3, [r3]
 800736e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f023 0301 	bic.w	r3, r3, #1
 8007376:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	3308      	adds	r3, #8
 800737e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007380:	61fa      	str	r2, [r7, #28]
 8007382:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007384:	69b9      	ldr	r1, [r7, #24]
 8007386:	69fa      	ldr	r2, [r7, #28]
 8007388:	e841 2300 	strex	r3, r2, [r1]
 800738c:	617b      	str	r3, [r7, #20]
   return(result);
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d1e5      	bne.n	8007360 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2220      	movs	r2, #32
 8007398:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073a4:	2303      	movs	r3, #3
 80073a6:	e011      	b.n	80073cc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2220      	movs	r2, #32
 80073ac:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2220      	movs	r2, #32
 80073b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80073ca:	2300      	movs	r3, #0
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3758      	adds	r7, #88	@ 0x58
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b084      	sub	sp, #16
 80073d8:	af00      	add	r7, sp, #0
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	60b9      	str	r1, [r7, #8]
 80073de:	603b      	str	r3, [r7, #0]
 80073e0:	4613      	mov	r3, r2
 80073e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073e4:	e04f      	b.n	8007486 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073e6:	69bb      	ldr	r3, [r7, #24]
 80073e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80073ec:	d04b      	beq.n	8007486 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073ee:	f7fa ff8f 	bl	8002310 <HAL_GetTick>
 80073f2:	4602      	mov	r2, r0
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	1ad3      	subs	r3, r2, r3
 80073f8:	69ba      	ldr	r2, [r7, #24]
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d302      	bcc.n	8007404 <UART_WaitOnFlagUntilTimeout+0x30>
 80073fe:	69bb      	ldr	r3, [r7, #24]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d101      	bne.n	8007408 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007404:	2303      	movs	r3, #3
 8007406:	e04e      	b.n	80074a6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f003 0304 	and.w	r3, r3, #4
 8007412:	2b00      	cmp	r3, #0
 8007414:	d037      	beq.n	8007486 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	2b80      	cmp	r3, #128	@ 0x80
 800741a:	d034      	beq.n	8007486 <UART_WaitOnFlagUntilTimeout+0xb2>
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	2b40      	cmp	r3, #64	@ 0x40
 8007420:	d031      	beq.n	8007486 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	69db      	ldr	r3, [r3, #28]
 8007428:	f003 0308 	and.w	r3, r3, #8
 800742c:	2b08      	cmp	r3, #8
 800742e:	d110      	bne.n	8007452 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	2208      	movs	r2, #8
 8007436:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007438:	68f8      	ldr	r0, [r7, #12]
 800743a:	f000 f8ff 	bl	800763c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2208      	movs	r2, #8
 8007442:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2200      	movs	r2, #0
 800744a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800744e:	2301      	movs	r3, #1
 8007450:	e029      	b.n	80074a6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	69db      	ldr	r3, [r3, #28]
 8007458:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800745c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007460:	d111      	bne.n	8007486 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800746a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800746c:	68f8      	ldr	r0, [r7, #12]
 800746e:	f000 f8e5 	bl	800763c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2220      	movs	r2, #32
 8007476:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2200      	movs	r2, #0
 800747e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007482:	2303      	movs	r3, #3
 8007484:	e00f      	b.n	80074a6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	69da      	ldr	r2, [r3, #28]
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	4013      	ands	r3, r2
 8007490:	68ba      	ldr	r2, [r7, #8]
 8007492:	429a      	cmp	r2, r3
 8007494:	bf0c      	ite	eq
 8007496:	2301      	moveq	r3, #1
 8007498:	2300      	movne	r3, #0
 800749a:	b2db      	uxtb	r3, r3
 800749c:	461a      	mov	r2, r3
 800749e:	79fb      	ldrb	r3, [r7, #7]
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d0a0      	beq.n	80073e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074a4:	2300      	movs	r3, #0
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3710      	adds	r7, #16
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
	...

080074b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b097      	sub	sp, #92	@ 0x5c
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	60b9      	str	r1, [r7, #8]
 80074ba:	4613      	mov	r3, r2
 80074bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	68ba      	ldr	r2, [r7, #8]
 80074c2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	88fa      	ldrh	r2, [r7, #6]
 80074c8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	88fa      	ldrh	r2, [r7, #6]
 80074d0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2200      	movs	r2, #0
 80074d8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074e2:	d10e      	bne.n	8007502 <UART_Start_Receive_IT+0x52>
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	691b      	ldr	r3, [r3, #16]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d105      	bne.n	80074f8 <UART_Start_Receive_IT+0x48>
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80074f2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80074f6:	e02d      	b.n	8007554 <UART_Start_Receive_IT+0xa4>
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	22ff      	movs	r2, #255	@ 0xff
 80074fc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007500:	e028      	b.n	8007554 <UART_Start_Receive_IT+0xa4>
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d10d      	bne.n	8007526 <UART_Start_Receive_IT+0x76>
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	691b      	ldr	r3, [r3, #16]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d104      	bne.n	800751c <UART_Start_Receive_IT+0x6c>
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	22ff      	movs	r2, #255	@ 0xff
 8007516:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800751a:	e01b      	b.n	8007554 <UART_Start_Receive_IT+0xa4>
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	227f      	movs	r2, #127	@ 0x7f
 8007520:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007524:	e016      	b.n	8007554 <UART_Start_Receive_IT+0xa4>
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800752e:	d10d      	bne.n	800754c <UART_Start_Receive_IT+0x9c>
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	691b      	ldr	r3, [r3, #16]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d104      	bne.n	8007542 <UART_Start_Receive_IT+0x92>
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	227f      	movs	r2, #127	@ 0x7f
 800753c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007540:	e008      	b.n	8007554 <UART_Start_Receive_IT+0xa4>
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	223f      	movs	r2, #63	@ 0x3f
 8007546:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800754a:	e003      	b.n	8007554 <UART_Start_Receive_IT+0xa4>
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2200      	movs	r2, #0
 8007550:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2200      	movs	r2, #0
 8007558:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2222      	movs	r2, #34	@ 0x22
 8007560:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	3308      	adds	r3, #8
 800756a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800756c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800756e:	e853 3f00 	ldrex	r3, [r3]
 8007572:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007576:	f043 0301 	orr.w	r3, r3, #1
 800757a:	657b      	str	r3, [r7, #84]	@ 0x54
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	3308      	adds	r3, #8
 8007582:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007584:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007586:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007588:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800758a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800758c:	e841 2300 	strex	r3, r2, [r1]
 8007590:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007592:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007594:	2b00      	cmp	r3, #0
 8007596:	d1e5      	bne.n	8007564 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075a0:	d107      	bne.n	80075b2 <UART_Start_Receive_IT+0x102>
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	691b      	ldr	r3, [r3, #16]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d103      	bne.n	80075b2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	4a21      	ldr	r2, [pc, #132]	@ (8007634 <UART_Start_Receive_IT+0x184>)
 80075ae:	669a      	str	r2, [r3, #104]	@ 0x68
 80075b0:	e002      	b.n	80075b8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	4a20      	ldr	r2, [pc, #128]	@ (8007638 <UART_Start_Receive_IT+0x188>)
 80075b6:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	691b      	ldr	r3, [r3, #16]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d019      	beq.n	80075f4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075c8:	e853 3f00 	ldrex	r3, [r3]
 80075cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80075ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d0:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80075d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	461a      	mov	r2, r3
 80075dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075de:	637b      	str	r3, [r7, #52]	@ 0x34
 80075e0:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80075e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80075e6:	e841 2300 	strex	r3, r2, [r1]
 80075ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80075ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d1e6      	bne.n	80075c0 <UART_Start_Receive_IT+0x110>
 80075f2:	e018      	b.n	8007626 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	e853 3f00 	ldrex	r3, [r3]
 8007600:	613b      	str	r3, [r7, #16]
   return(result);
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	f043 0320 	orr.w	r3, r3, #32
 8007608:	653b      	str	r3, [r7, #80]	@ 0x50
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	461a      	mov	r2, r3
 8007610:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007612:	623b      	str	r3, [r7, #32]
 8007614:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007616:	69f9      	ldr	r1, [r7, #28]
 8007618:	6a3a      	ldr	r2, [r7, #32]
 800761a:	e841 2300 	strex	r3, r2, [r1]
 800761e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007620:	69bb      	ldr	r3, [r7, #24]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d1e6      	bne.n	80075f4 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007626:	2300      	movs	r3, #0
}
 8007628:	4618      	mov	r0, r3
 800762a:	375c      	adds	r7, #92	@ 0x5c
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr
 8007634:	08007941 	.word	0x08007941
 8007638:	08007785 	.word	0x08007785

0800763c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800763c:	b480      	push	{r7}
 800763e:	b095      	sub	sp, #84	@ 0x54
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800764a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800764c:	e853 3f00 	ldrex	r3, [r3]
 8007650:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007654:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007658:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	461a      	mov	r2, r3
 8007660:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007662:	643b      	str	r3, [r7, #64]	@ 0x40
 8007664:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007666:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007668:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800766a:	e841 2300 	strex	r3, r2, [r1]
 800766e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007672:	2b00      	cmp	r3, #0
 8007674:	d1e6      	bne.n	8007644 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	3308      	adds	r3, #8
 800767c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800767e:	6a3b      	ldr	r3, [r7, #32]
 8007680:	e853 3f00 	ldrex	r3, [r3]
 8007684:	61fb      	str	r3, [r7, #28]
   return(result);
 8007686:	69fb      	ldr	r3, [r7, #28]
 8007688:	f023 0301 	bic.w	r3, r3, #1
 800768c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	3308      	adds	r3, #8
 8007694:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007696:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007698:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800769a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800769c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800769e:	e841 2300 	strex	r3, r2, [r1]
 80076a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80076a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d1e5      	bne.n	8007676 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d118      	bne.n	80076e4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	e853 3f00 	ldrex	r3, [r3]
 80076be:	60bb      	str	r3, [r7, #8]
   return(result);
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	f023 0310 	bic.w	r3, r3, #16
 80076c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	461a      	mov	r2, r3
 80076ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076d0:	61bb      	str	r3, [r7, #24]
 80076d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d4:	6979      	ldr	r1, [r7, #20]
 80076d6:	69ba      	ldr	r2, [r7, #24]
 80076d8:	e841 2300 	strex	r3, r2, [r1]
 80076dc:	613b      	str	r3, [r7, #16]
   return(result);
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d1e6      	bne.n	80076b2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2220      	movs	r2, #32
 80076e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80076f8:	bf00      	nop
 80076fa:	3754      	adds	r7, #84	@ 0x54
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr

08007704 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b084      	sub	sp, #16
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007710:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2200      	movs	r2, #0
 8007716:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2200      	movs	r2, #0
 800771e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007722:	68f8      	ldr	r0, [r7, #12]
 8007724:	f7ff fa3e 	bl	8006ba4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007728:	bf00      	nop
 800772a:	3710      	adds	r7, #16
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b088      	sub	sp, #32
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	e853 3f00 	ldrex	r3, [r3]
 8007744:	60bb      	str	r3, [r7, #8]
   return(result);
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800774c:	61fb      	str	r3, [r7, #28]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	461a      	mov	r2, r3
 8007754:	69fb      	ldr	r3, [r7, #28]
 8007756:	61bb      	str	r3, [r7, #24]
 8007758:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800775a:	6979      	ldr	r1, [r7, #20]
 800775c:	69ba      	ldr	r2, [r7, #24]
 800775e:	e841 2300 	strex	r3, r2, [r1]
 8007762:	613b      	str	r3, [r7, #16]
   return(result);
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d1e6      	bne.n	8007738 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2220      	movs	r2, #32
 800776e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f7ff fa0a 	bl	8006b90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800777c:	bf00      	nop
 800777e:	3720      	adds	r7, #32
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b09c      	sub	sp, #112	@ 0x70
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007792:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800779c:	2b22      	cmp	r3, #34	@ 0x22
 800779e:	f040 80be 	bne.w	800791e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80077a8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80077ac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80077b0:	b2d9      	uxtb	r1, r3
 80077b2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80077b6:	b2da      	uxtb	r2, r3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077bc:	400a      	ands	r2, r1
 80077be:	b2d2      	uxtb	r2, r2
 80077c0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077c6:	1c5a      	adds	r2, r3, #1
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	3b01      	subs	r3, #1
 80077d6:	b29a      	uxth	r2, r3
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	f040 80a3 	bne.w	8007932 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077f4:	e853 3f00 	ldrex	r3, [r3]
 80077f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80077fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80077fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007800:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	461a      	mov	r2, r3
 8007808:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800780a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800780c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800780e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007810:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007812:	e841 2300 	strex	r3, r2, [r1]
 8007816:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007818:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800781a:	2b00      	cmp	r3, #0
 800781c:	d1e6      	bne.n	80077ec <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	3308      	adds	r3, #8
 8007824:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007828:	e853 3f00 	ldrex	r3, [r3]
 800782c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800782e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007830:	f023 0301 	bic.w	r3, r3, #1
 8007834:	667b      	str	r3, [r7, #100]	@ 0x64
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	3308      	adds	r3, #8
 800783c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800783e:	647a      	str	r2, [r7, #68]	@ 0x44
 8007840:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007842:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007844:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007846:	e841 2300 	strex	r3, r2, [r1]
 800784a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800784c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800784e:	2b00      	cmp	r3, #0
 8007850:	d1e5      	bne.n	800781e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2220      	movs	r2, #32
 8007856:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2200      	movs	r2, #0
 800785e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2200      	movs	r2, #0
 8007864:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a34      	ldr	r2, [pc, #208]	@ (800793c <UART_RxISR_8BIT+0x1b8>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d01f      	beq.n	80078b0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800787a:	2b00      	cmp	r3, #0
 800787c:	d018      	beq.n	80078b0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007886:	e853 3f00 	ldrex	r3, [r3]
 800788a:	623b      	str	r3, [r7, #32]
   return(result);
 800788c:	6a3b      	ldr	r3, [r7, #32]
 800788e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007892:	663b      	str	r3, [r7, #96]	@ 0x60
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	461a      	mov	r2, r3
 800789a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800789c:	633b      	str	r3, [r7, #48]	@ 0x30
 800789e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80078a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078a4:	e841 2300 	strex	r3, r2, [r1]
 80078a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80078aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d1e6      	bne.n	800787e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d12e      	bne.n	8007916 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	e853 3f00 	ldrex	r3, [r3]
 80078ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f023 0310 	bic.w	r3, r3, #16
 80078d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	461a      	mov	r2, r3
 80078da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80078dc:	61fb      	str	r3, [r7, #28]
 80078de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e0:	69b9      	ldr	r1, [r7, #24]
 80078e2:	69fa      	ldr	r2, [r7, #28]
 80078e4:	e841 2300 	strex	r3, r2, [r1]
 80078e8:	617b      	str	r3, [r7, #20]
   return(result);
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d1e6      	bne.n	80078be <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	69db      	ldr	r3, [r3, #28]
 80078f6:	f003 0310 	and.w	r3, r3, #16
 80078fa:	2b10      	cmp	r3, #16
 80078fc:	d103      	bne.n	8007906 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2210      	movs	r2, #16
 8007904:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800790c:	4619      	mov	r1, r3
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f7ff f952 	bl	8006bb8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007914:	e00d      	b.n	8007932 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f7f9 fc50 	bl	80011bc <HAL_UART_RxCpltCallback>
}
 800791c:	e009      	b.n	8007932 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	8b1b      	ldrh	r3, [r3, #24]
 8007924:	b29a      	uxth	r2, r3
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f042 0208 	orr.w	r2, r2, #8
 800792e:	b292      	uxth	r2, r2
 8007930:	831a      	strh	r2, [r3, #24]
}
 8007932:	bf00      	nop
 8007934:	3770      	adds	r7, #112	@ 0x70
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}
 800793a:	bf00      	nop
 800793c:	40008000 	.word	0x40008000

08007940 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b09c      	sub	sp, #112	@ 0x70
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800794e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007958:	2b22      	cmp	r3, #34	@ 0x22
 800795a:	f040 80be 	bne.w	8007ada <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007964:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800796c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800796e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007972:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007976:	4013      	ands	r3, r2
 8007978:	b29a      	uxth	r2, r3
 800797a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800797c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007982:	1c9a      	adds	r2, r3, #2
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800798e:	b29b      	uxth	r3, r3
 8007990:	3b01      	subs	r3, #1
 8007992:	b29a      	uxth	r2, r3
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	f040 80a3 	bne.w	8007aee <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80079b0:	e853 3f00 	ldrex	r3, [r3]
 80079b4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80079b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80079bc:	667b      	str	r3, [r7, #100]	@ 0x64
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	461a      	mov	r2, r3
 80079c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80079c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80079c8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ca:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80079cc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80079ce:	e841 2300 	strex	r3, r2, [r1]
 80079d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80079d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d1e6      	bne.n	80079a8 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	3308      	adds	r3, #8
 80079e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079e4:	e853 3f00 	ldrex	r3, [r3]
 80079e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80079ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ec:	f023 0301 	bic.w	r3, r3, #1
 80079f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	3308      	adds	r3, #8
 80079f8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80079fa:	643a      	str	r2, [r7, #64]	@ 0x40
 80079fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007a00:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007a02:	e841 2300 	strex	r3, r2, [r1]
 8007a06:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d1e5      	bne.n	80079da <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2220      	movs	r2, #32
 8007a12:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a34      	ldr	r2, [pc, #208]	@ (8007af8 <UART_RxISR_16BIT+0x1b8>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d01f      	beq.n	8007a6c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d018      	beq.n	8007a6c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a40:	6a3b      	ldr	r3, [r7, #32]
 8007a42:	e853 3f00 	ldrex	r3, [r3]
 8007a46:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a48:	69fb      	ldr	r3, [r7, #28]
 8007a4a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007a4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	461a      	mov	r2, r3
 8007a56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a5a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a60:	e841 2300 	strex	r3, r2, [r1]
 8007a64:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d1e6      	bne.n	8007a3a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d12e      	bne.n	8007ad2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	e853 3f00 	ldrex	r3, [r3]
 8007a86:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	f023 0310 	bic.w	r3, r3, #16
 8007a8e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	461a      	mov	r2, r3
 8007a96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a98:	61bb      	str	r3, [r7, #24]
 8007a9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a9c:	6979      	ldr	r1, [r7, #20]
 8007a9e:	69ba      	ldr	r2, [r7, #24]
 8007aa0:	e841 2300 	strex	r3, r2, [r1]
 8007aa4:	613b      	str	r3, [r7, #16]
   return(result);
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d1e6      	bne.n	8007a7a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	69db      	ldr	r3, [r3, #28]
 8007ab2:	f003 0310 	and.w	r3, r3, #16
 8007ab6:	2b10      	cmp	r3, #16
 8007ab8:	d103      	bne.n	8007ac2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	2210      	movs	r2, #16
 8007ac0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007ac8:	4619      	mov	r1, r3
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f7ff f874 	bl	8006bb8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ad0:	e00d      	b.n	8007aee <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f7f9 fb72 	bl	80011bc <HAL_UART_RxCpltCallback>
}
 8007ad8:	e009      	b.n	8007aee <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	8b1b      	ldrh	r3, [r3, #24]
 8007ae0:	b29a      	uxth	r2, r3
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f042 0208 	orr.w	r2, r2, #8
 8007aea:	b292      	uxth	r2, r2
 8007aec:	831a      	strh	r2, [r3, #24]
}
 8007aee:	bf00      	nop
 8007af0:	3770      	adds	r7, #112	@ 0x70
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	bf00      	nop
 8007af8:	40008000 	.word	0x40008000

08007afc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007b04:	bf00      	nop
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr

08007b10 <_vl53l5cx_poll_for_answer>:
		uint8_t					size,
		uint8_t					pos,
		uint16_t				address,
		uint8_t					mask,
		uint8_t					expected_value)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	4608      	mov	r0, r1
 8007b1a:	4611      	mov	r1, r2
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	4603      	mov	r3, r0
 8007b20:	70fb      	strb	r3, [r7, #3]
 8007b22:	460b      	mov	r3, r1
 8007b24:	70bb      	strb	r3, [r7, #2]
 8007b26:	4613      	mov	r3, r2
 8007b28:	803b      	strh	r3, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	73fb      	strb	r3, [r7, #15]
	uint8_t timeout = 0;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	73bb      	strb	r3, [r7, #14]

	do {
		status |= VL53L5CX_RdMulti(&(p_dev->platform), address,
 8007b32:	6878      	ldr	r0, [r7, #4]
				p_dev->temp_buffer, size);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
		status |= VL53L5CX_RdMulti(&(p_dev->platform), address,
 8007b3a:	78fb      	ldrb	r3, [r7, #3]
 8007b3c:	8839      	ldrh	r1, [r7, #0]
 8007b3e:	f7f9 fea3 	bl	8001888 <VL53L5CX_RdMulti>
 8007b42:	4603      	mov	r3, r0
 8007b44:	461a      	mov	r2, r3
 8007b46:	7bfb      	ldrb	r3, [r7, #15]
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	73fb      	strb	r3, [r7, #15]
		status |= VL53L5CX_WaitMs(&(p_dev->platform), 10);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	210a      	movs	r1, #10
 8007b50:	4618      	mov	r0, r3
 8007b52:	f7f9 ff0f 	bl	8001974 <VL53L5CX_WaitMs>
 8007b56:	4603      	mov	r3, r0
 8007b58:	461a      	mov	r2, r3
 8007b5a:	7bfb      	ldrb	r3, [r7, #15]
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	73fb      	strb	r3, [r7, #15]

		if(timeout >= (uint8_t)200)	/* 2s timeout */
 8007b60:	7bbb      	ldrb	r3, [r7, #14]
 8007b62:	2bc7      	cmp	r3, #199	@ 0xc7
 8007b64:	d904      	bls.n	8007b70 <_vl53l5cx_poll_for_answer+0x60>
		{
			status |= (uint8_t)VL53L5CX_STATUS_TIMEOUT_ERROR;
 8007b66:	7bfb      	ldrb	r3, [r7, #15]
 8007b68:	f043 0301 	orr.w	r3, r3, #1
 8007b6c:	73fb      	strb	r3, [r7, #15]
			break;
 8007b6e:	e01a      	b.n	8007ba6 <_vl53l5cx_poll_for_answer+0x96>
		}else if((size >= (uint8_t)4) 
 8007b70:	78fb      	ldrb	r3, [r7, #3]
 8007b72:	2b03      	cmp	r3, #3
 8007b74:	d909      	bls.n	8007b8a <_vl53l5cx_poll_for_answer+0x7a>
                         && (p_dev->temp_buffer[2] >= (uint8_t)0x7f))
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f893 3502 	ldrb.w	r3, [r3, #1282]	@ 0x502
 8007b7c:	2b7e      	cmp	r3, #126	@ 0x7e
 8007b7e:	d904      	bls.n	8007b8a <_vl53l5cx_poll_for_answer+0x7a>
		{
			status |= VL53L5CX_MCU_ERROR;
 8007b80:	7bfb      	ldrb	r3, [r7, #15]
 8007b82:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8007b86:	73fb      	strb	r3, [r7, #15]
			break;
 8007b88:	e00d      	b.n	8007ba6 <_vl53l5cx_poll_for_answer+0x96>
		}
		else
		{
			timeout++;
 8007b8a:	7bbb      	ldrb	r3, [r7, #14]
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	73bb      	strb	r3, [r7, #14]
		}
	}while ((p_dev->temp_buffer[pos] & mask) != expected_value);
 8007b90:	78bb      	ldrb	r3, [r7, #2]
 8007b92:	687a      	ldr	r2, [r7, #4]
 8007b94:	4413      	add	r3, r2
 8007b96:	f893 2500 	ldrb.w	r2, [r3, #1280]	@ 0x500
 8007b9a:	7e3b      	ldrb	r3, [r7, #24]
 8007b9c:	4013      	ands	r3, r2
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	7f3a      	ldrb	r2, [r7, #28]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d1c5      	bne.n	8007b32 <_vl53l5cx_poll_for_answer+0x22>

	return status;
 8007ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3710      	adds	r7, #16
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <_vl53l5cx_poll_for_mcu_boot>:
 * Inner function, not available outside this file. This function is used to
 * wait for the MCU to boot.
 */
static uint8_t _vl53l5cx_poll_for_mcu_boot(
              VL53L5CX_Configuration      *p_dev)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b084      	sub	sp, #16
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
   uint8_t go2_status0, go2_status1, status = VL53L5CX_STATUS_OK;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	73fb      	strb	r3, [r7, #15]
   uint16_t timeout = 0;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	81bb      	strh	r3, [r7, #12]

   do {
		status |= VL53L5CX_RdByte(&(p_dev->platform), 0x06, &go2_status0);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f107 020b 	add.w	r2, r7, #11
 8007bc6:	2106      	movs	r1, #6
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f7f9 fdff 	bl	80017cc <VL53L5CX_RdByte>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	7bfb      	ldrb	r3, [r7, #15]
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	73fb      	strb	r3, [r7, #15]
		if((go2_status0 & (uint8_t)0x80) != (uint8_t)0){
 8007bd8:	7afb      	ldrb	r3, [r7, #11]
 8007bda:	b25b      	sxtb	r3, r3
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	da10      	bge.n	8007c02 <_vl53l5cx_poll_for_mcu_boot+0x52>
			status |= VL53L5CX_RdByte(&(p_dev->platform), 0x07, &go2_status1);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f107 020a 	add.w	r2, r7, #10
 8007be6:	2107      	movs	r1, #7
 8007be8:	4618      	mov	r0, r3
 8007bea:	f7f9 fdef 	bl	80017cc <VL53L5CX_RdByte>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	7bfb      	ldrb	r3, [r7, #15]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	73fb      	strb	r3, [r7, #15]
			status |= go2_status1;
 8007bf8:	7aba      	ldrb	r2, [r7, #10]
 8007bfa:	7bfb      	ldrb	r3, [r7, #15]
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	73fb      	strb	r3, [r7, #15]
			break;
 8007c00:	e012      	b.n	8007c28 <_vl53l5cx_poll_for_mcu_boot+0x78>
		}
		(void)VL53L5CX_WaitMs(&(p_dev->platform), 1);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2101      	movs	r1, #1
 8007c06:	4618      	mov	r0, r3
 8007c08:	f7f9 feb4 	bl	8001974 <VL53L5CX_WaitMs>
		timeout++;
 8007c0c:	89bb      	ldrh	r3, [r7, #12]
 8007c0e:	3301      	adds	r3, #1
 8007c10:	81bb      	strh	r3, [r7, #12]

		if((go2_status0 & (uint8_t)0x1) != (uint8_t)0){
 8007c12:	7afb      	ldrb	r3, [r7, #11]
 8007c14:	f003 0301 	and.w	r3, r3, #1
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d104      	bne.n	8007c26 <_vl53l5cx_poll_for_mcu_boot+0x76>
			break;
		}

	}while (timeout < (uint16_t)500);
 8007c1c:	89bb      	ldrh	r3, [r7, #12]
 8007c1e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8007c22:	d3cd      	bcc.n	8007bc0 <_vl53l5cx_poll_for_mcu_boot+0x10>
 8007c24:	e000      	b.n	8007c28 <_vl53l5cx_poll_for_mcu_boot+0x78>
			break;
 8007c26:	bf00      	nop

   return status;
 8007c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3710      	adds	r7, #16
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
	...

08007c34 <_vl53l5cx_send_offset_data>:
 */

static uint8_t _vl53l5cx_send_offset_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t						resolution)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b0ea      	sub	sp, #424	@ 0x1a8
 8007c38:	af02      	add	r7, sp, #8
 8007c3a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007c3e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007c42:	6018      	str	r0, [r3, #0]
 8007c44:	460a      	mov	r2, r1
 8007c46:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007c4a:	f2a3 139d 	subw	r3, r3, #413	@ 0x19d
 8007c4e:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8007c50:	2300      	movs	r3, #0
 8007c52:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
	uint32_t signal_grid[64];
	int16_t range_grid[64];
	uint8_t dss_4x4[] = {0x0F, 0x04, 0x04, 0x00, 0x08, 0x10, 0x10, 0x07};
 8007c56:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007c5a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8007c5e:	4ad9      	ldr	r2, [pc, #868]	@ (8007fc4 <_vl53l5cx_send_offset_data+0x390>)
 8007c60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007c64:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0F, 0x03, 0x01, 0x01, 0xE4};
 8007c68:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007c6c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8007c70:	4ad5      	ldr	r2, [pc, #852]	@ (8007fc8 <_vl53l5cx_send_offset_data+0x394>)
 8007c72:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007c76:	e883 0003 	stmia.w	r3, {r0, r1}
	int8_t i, j;
	uint16_t k;

	(void)memcpy(p_dev->temp_buffer,
 8007c7a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007c7e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f503 60a0 	add.w	r0, r3, #1280	@ 0x500
               p_dev->offset_data, VL53L5CX_OFFSET_BUFFER_SIZE);
 8007c88:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007c8c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	3310      	adds	r3, #16
	(void)memcpy(p_dev->temp_buffer,
 8007c94:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8007c98:	4619      	mov	r1, r3
 8007c9a:	f002 fbce 	bl	800a43a <memcpy>

	/* Data extrapolation is required for 4X4 offset */
	if(resolution == (uint8_t)VL53L5CX_RESOLUTION_4X4){
 8007c9e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007ca2:	f2a3 139d 	subw	r3, r3, #413	@ 0x19d
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	2b10      	cmp	r3, #16
 8007caa:	f040 8122 	bne.w	8007ef2 <_vl53l5cx_send_offset_data+0x2be>
		(void)memcpy(&(p_dev->temp_buffer[0x10]), dss_4x4, sizeof(dss_4x4));
 8007cae:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007cb2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
 8007cbc:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007cc0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8007cc4:	cb03      	ldmia	r3!, {r0, r1}
 8007cc6:	6010      	str	r0, [r2, #0]
 8007cc8:	6051      	str	r1, [r2, #4]
		VL53L5CX_SwapBuffer(p_dev->temp_buffer, VL53L5CX_OFFSET_BUFFER_SIZE);
 8007cca:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007cce:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cd8:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f7f9 fe13 	bl	8001908 <VL53L5CX_SwapBuffer>
		(void)memcpy(signal_grid,&(p_dev->temp_buffer[0x3C]),
 8007ce2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007ce6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f203 513c 	addw	r1, r3, #1340	@ 0x53c
 8007cf0:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8007cf4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f002 fb9e 	bl	800a43a <memcpy>
			sizeof(signal_grid));
		(void)memcpy(range_grid,&(p_dev->temp_buffer[0x140]),
 8007cfe:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007d02:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f503 61c8 	add.w	r1, r3, #1600	@ 0x640
 8007d0c:	f107 0318 	add.w	r3, r7, #24
 8007d10:	2280      	movs	r2, #128	@ 0x80
 8007d12:	4618      	mov	r0, r3
 8007d14:	f002 fb91 	bl	800a43a <memcpy>
			sizeof(range_grid));

		for (j = 0; j < (int8_t)4; j++)
 8007d18:	2300      	movs	r3, #0
 8007d1a:	f887 319e 	strb.w	r3, [r7, #414]	@ 0x19e
 8007d1e:	e0ac      	b.n	8007e7a <_vl53l5cx_send_offset_data+0x246>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 8007d20:	2300      	movs	r3, #0
 8007d22:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f
 8007d26:	e09c      	b.n	8007e62 <_vl53l5cx_send_offset_data+0x22e>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+ (int8_t)0]
 8007d28:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 8007d2c:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8007d30:	00db      	lsls	r3, r3, #3
 8007d32:	4413      	add	r3, r2
 8007d34:	005a      	lsls	r2, r3, #1
 8007d36:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007d3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d3e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+(int8_t)1]
 8007d42:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8007d46:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8007d4a:	00db      	lsls	r3, r3, #3
 8007d4c:	440b      	add	r3, r1
 8007d4e:	005b      	lsls	r3, r3, #1
 8007d50:	1c59      	adds	r1, r3, #1
 8007d52:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007d56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d5a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007d5e:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)8]
 8007d60:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8007d64:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8007d68:	00db      	lsls	r3, r3, #3
 8007d6a:	440b      	add	r3, r1
 8007d6c:	3304      	adds	r3, #4
 8007d6e:	0059      	lsls	r1, r3, #1
 8007d70:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007d74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d78:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007d7c:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)9])
 8007d7e:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8007d82:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8007d86:	00db      	lsls	r3, r3, #3
 8007d88:	440b      	add	r3, r1
 8007d8a:	005b      	lsls	r3, r3, #1
 8007d8c:	f103 0109 	add.w	r1, r3, #9
 8007d90:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007d94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d98:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007d9c:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 8007d9e:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8007da2:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 8007da6:	0092      	lsls	r2, r2, #2
 8007da8:	440a      	add	r2, r1
                                  /(uint32_t)4;
 8007daa:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 8007dac:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007db0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007db4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				range_grid[i+(4*j)] =
				(range_grid[(2*i)+(16*j)]
 8007db8:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 8007dbc:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8007dc0:	00db      	lsls	r3, r3, #3
 8007dc2:	4413      	add	r3, r2
 8007dc4:	005a      	lsls	r2, r3, #1
 8007dc6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007dca:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8007dce:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8007dd2:	4619      	mov	r1, r3
				+ range_grid[(2*i)+(16*j)+1]
 8007dd4:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 8007dd8:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8007ddc:	00db      	lsls	r3, r3, #3
 8007dde:	4413      	add	r3, r2
 8007de0:	005b      	lsls	r3, r3, #1
 8007de2:	1c5a      	adds	r2, r3, #1
 8007de4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007de8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8007dec:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8007df0:	440b      	add	r3, r1
				+ range_grid[(2*i)+(16*j)+8]
 8007df2:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8007df6:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 8007dfa:	00d2      	lsls	r2, r2, #3
 8007dfc:	440a      	add	r2, r1
 8007dfe:	3204      	adds	r2, #4
 8007e00:	0051      	lsls	r1, r2, #1
 8007e02:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8007e06:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 8007e0a:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8007e0e:	4413      	add	r3, r2
				+ range_grid[(2*i)+(16*j)+9])
 8007e10:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8007e14:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 8007e18:	00d2      	lsls	r2, r2, #3
 8007e1a:	440a      	add	r2, r1
 8007e1c:	0052      	lsls	r2, r2, #1
 8007e1e:	f102 0109 	add.w	r1, r2, #9
 8007e22:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8007e26:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 8007e2a:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8007e2e:	4413      	add	r3, r2
                                  /(int16_t)4;
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	da00      	bge.n	8007e36 <_vl53l5cx_send_offset_data+0x202>
 8007e34:	3303      	adds	r3, #3
 8007e36:	109b      	asrs	r3, r3, #2
 8007e38:	4619      	mov	r1, r3
				range_grid[i+(4*j)] =
 8007e3a:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 8007e3e:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	441a      	add	r2, r3
 8007e46:	b209      	sxth	r1, r1
 8007e48:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007e4c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8007e50:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (i = 0; i < (int8_t)4 ; i++)
 8007e54:	f997 319f 	ldrsb.w	r3, [r7, #415]	@ 0x19f
 8007e58:	b2db      	uxtb	r3, r3
 8007e5a:	3301      	adds	r3, #1
 8007e5c:	b2db      	uxtb	r3, r3
 8007e5e:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f
 8007e62:	f997 319f 	ldrsb.w	r3, [r7, #415]	@ 0x19f
 8007e66:	2b03      	cmp	r3, #3
 8007e68:	f77f af5e 	ble.w	8007d28 <_vl53l5cx_send_offset_data+0xf4>
		for (j = 0; j < (int8_t)4; j++)
 8007e6c:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	3301      	adds	r3, #1
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	f887 319e 	strb.w	r3, [r7, #414]	@ 0x19e
 8007e7a:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8007e7e:	2b03      	cmp	r3, #3
 8007e80:	f77f af4e 	ble.w	8007d20 <_vl53l5cx_send_offset_data+0xec>
			}
		}
	    (void)memset(&range_grid[0x10], 0, (uint16_t)96);
 8007e84:	f107 0318 	add.w	r3, r7, #24
 8007e88:	3320      	adds	r3, #32
 8007e8a:	2260      	movs	r2, #96	@ 0x60
 8007e8c:	2100      	movs	r1, #0
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f002 fa9a 	bl	800a3c8 <memset>
	    (void)memset(&signal_grid[0x10], 0, (uint16_t)192);
 8007e94:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8007e98:	3340      	adds	r3, #64	@ 0x40
 8007e9a:	22c0      	movs	r2, #192	@ 0xc0
 8007e9c:	2100      	movs	r1, #0
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f002 fa92 	bl	800a3c8 <memset>
            (void)memcpy(&(p_dev->temp_buffer[0x3C]),
 8007ea4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007ea8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f203 533c 	addw	r3, r3, #1340	@ 0x53c
 8007eb2:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8007eb6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f002 fabd 	bl	800a43a <memcpy>
		signal_grid, sizeof(signal_grid));
            (void)memcpy(&(p_dev->temp_buffer[0x140]),
 8007ec0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007ec4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f503 63c8 	add.w	r3, r3, #1600	@ 0x640
 8007ece:	f107 0118 	add.w	r1, r7, #24
 8007ed2:	2280      	movs	r2, #128	@ 0x80
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f002 fab0 	bl	800a43a <memcpy>
		range_grid, sizeof(range_grid));
            VL53L5CX_SwapBuffer(p_dev->temp_buffer, VL53L5CX_OFFSET_BUFFER_SIZE);
 8007eda:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007ede:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ee8:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 8007eec:	4618      	mov	r0, r3
 8007eee:	f7f9 fd0b 	bl	8001908 <VL53L5CX_SwapBuffer>
	}

	for(k = 0; k < (VL53L5CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	f8a7 319c 	strh.w	r3, [r7, #412]	@ 0x19c
 8007ef8:	e01b      	b.n	8007f32 <_vl53l5cx_send_offset_data+0x2fe>
	{
		p_dev->temp_buffer[k] = p_dev->temp_buffer[k + (uint16_t)8];
 8007efa:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 8007efe:	f103 0208 	add.w	r2, r3, #8
 8007f02:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 8007f06:	f507 71d0 	add.w	r1, r7, #416	@ 0x1a0
 8007f0a:	f5a1 71ce 	sub.w	r1, r1, #412	@ 0x19c
 8007f0e:	6809      	ldr	r1, [r1, #0]
 8007f10:	440a      	add	r2, r1
 8007f12:	f892 1500 	ldrb.w	r1, [r2, #1280]	@ 0x500
 8007f16:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8007f1a:	f5a2 72ce 	sub.w	r2, r2, #412	@ 0x19c
 8007f1e:	6812      	ldr	r2, [r2, #0]
 8007f20:	4413      	add	r3, r2
 8007f22:	460a      	mov	r2, r1
 8007f24:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
	for(k = 0; k < (VL53L5CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 8007f28:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 8007f2c:	3301      	adds	r3, #1
 8007f2e:	f8a7 319c 	strh.w	r3, [r7, #412]	@ 0x19c
 8007f32:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 8007f36:	f5b3 7ff2 	cmp.w	r3, #484	@ 0x1e4
 8007f3a:	d3de      	bcc.n	8007efa <_vl53l5cx_send_offset_data+0x2c6>
	}

	(void)memcpy(&(p_dev->temp_buffer[0x1E0]), footer, 8);
 8007f3c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007f40:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f503 62dc 	add.w	r2, r3, #1760	@ 0x6e0
 8007f4a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007f4e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8007f52:	cb03      	ldmia	r3!, {r0, r1}
 8007f54:	6010      	str	r0, [r2, #0]
 8007f56:	6051      	str	r1, [r2, #4]
	status |= VL53L5CX_WrMulti(&(p_dev->platform), 0x2e18, p_dev->temp_buffer,
 8007f58:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007f5c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007f60:	6818      	ldr	r0, [r3, #0]
 8007f62:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007f66:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
 8007f70:	f44f 73f4 	mov.w	r3, #488	@ 0x1e8
 8007f74:	f642 6118 	movw	r1, #11800	@ 0x2e18
 8007f78:	f7f9 fc66 	bl	8001848 <VL53L5CX_WrMulti>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	461a      	mov	r2, r3
 8007f80:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 8007f84:	4313      	orrs	r3, r2
 8007f86:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
		VL53L5CX_OFFSET_BUFFER_SIZE);
	status |=_vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8007f8a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007f8e:	f5a3 70ce 	sub.w	r0, r3, #412	@ 0x19c
 8007f92:	2303      	movs	r3, #3
 8007f94:	9301      	str	r3, [sp, #4]
 8007f96:	23ff      	movs	r3, #255	@ 0xff
 8007f98:	9300      	str	r3, [sp, #0]
 8007f9a:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	2104      	movs	r1, #4
 8007fa2:	6800      	ldr	r0, [r0, #0]
 8007fa4:	f7ff fdb4 	bl	8007b10 <_vl53l5cx_poll_for_answer>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	461a      	mov	r2, r3
 8007fac:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
		VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 8007fb6:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f507 77d0 	add.w	r7, r7, #416	@ 0x1a0
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}
 8007fc4:	0800c924 	.word	0x0800c924
 8007fc8:	0800c92c 	.word	0x0800c92c

08007fcc <_vl53l5cx_send_xtalk_data>:
 */

static uint8_t _vl53l5cx_send_xtalk_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				resolution)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b0ca      	sub	sp, #296	@ 0x128
 8007fd0:	af02      	add	r7, sp, #8
 8007fd2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8007fd6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8007fda:	6018      	str	r0, [r3, #0]
 8007fdc:	460a      	mov	r2, r1
 8007fde:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8007fe2:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8007fe6:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
	uint8_t res4x4[] = {0x0F, 0x04, 0x04, 0x17, 0x08, 0x10, 0x10, 0x07};
 8007fee:	4a9a      	ldr	r2, [pc, #616]	@ (8008258 <_vl53l5cx_send_xtalk_data+0x28c>)
 8007ff0:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8007ff4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007ff8:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t dss_4x4[] = {0x00, 0x78, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08};
 8007ffc:	4a97      	ldr	r2, [pc, #604]	@ (800825c <_vl53l5cx_send_xtalk_data+0x290>)
 8007ffe:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8008002:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008006:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t profile_4x4[] = {0xA0, 0xFC, 0x01, 0x00};
 800800a:	4b95      	ldr	r3, [pc, #596]	@ (8008260 <_vl53l5cx_send_xtalk_data+0x294>)
 800800c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
	uint32_t signal_grid[64];
	int8_t i, j;

	(void)memcpy(p_dev->temp_buffer, &(p_dev->xtalk_data[0]),
 8008010:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8008014:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f503 60a0 	add.w	r0, r3, #1280	@ 0x500
 800801e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8008022:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 800802c:	f44f 7242 	mov.w	r2, #776	@ 0x308
 8008030:	4619      	mov	r1, r3
 8008032:	f002 fa02 	bl	800a43a <memcpy>
		VL53L5CX_XTALK_BUFFER_SIZE);

	/* Data extrapolation is required for 4X4 Xtalk */
	if(resolution == (uint8_t)VL53L5CX_RESOLUTION_4X4)
 8008036:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800803a:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	2b10      	cmp	r3, #16
 8008042:	f040 80d2 	bne.w	80081ea <_vl53l5cx_send_xtalk_data+0x21e>
	{
		(void)memcpy(&(p_dev->temp_buffer[0x8]),
 8008046:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800804a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8008054:	461a      	mov	r2, r3
 8008056:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800805a:	cb03      	ldmia	r3!, {r0, r1}
 800805c:	6010      	str	r0, [r2, #0]
 800805e:	6051      	str	r1, [r2, #4]
			res4x4, sizeof(res4x4));
		(void)memcpy(&(p_dev->temp_buffer[0x020]),
 8008060:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8008064:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f503 63a4 	add.w	r3, r3, #1312	@ 0x520
 800806e:	461a      	mov	r2, r3
 8008070:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8008074:	cb03      	ldmia	r3!, {r0, r1}
 8008076:	6010      	str	r0, [r2, #0]
 8008078:	6051      	str	r1, [r2, #4]
			dss_4x4, sizeof(dss_4x4));

		VL53L5CX_SwapBuffer(p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 800807a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800807e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008088:	f44f 7142 	mov.w	r1, #776	@ 0x308
 800808c:	4618      	mov	r0, r3
 800808e:	f7f9 fc3b 	bl	8001908 <VL53L5CX_SwapBuffer>
		(void)memcpy(signal_grid, &(p_dev->temp_buffer[0x34]),
 8008092:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8008096:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f203 5134 	addw	r1, r3, #1332	@ 0x534
 80080a0:	f107 0308 	add.w	r3, r7, #8
 80080a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80080a8:	4618      	mov	r0, r3
 80080aa:	f002 f9c6 	bl	800a43a <memcpy>
			sizeof(signal_grid));

		for (j = 0; j < (int8_t)4; j++)
 80080ae:	2300      	movs	r3, #0
 80080b0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80080b4:	e05d      	b.n	8008172 <_vl53l5cx_send_xtalk_data+0x1a6>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 80080b6:	2300      	movs	r3, #0
 80080b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 80080bc:	e04e      	b.n	800815c <_vl53l5cx_send_xtalk_data+0x190>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+0]
 80080be:	f997 211f 	ldrsb.w	r2, [r7, #287]	@ 0x11f
 80080c2:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 80080c6:	00db      	lsls	r3, r3, #3
 80080c8:	4413      	add	r3, r2
 80080ca:	005a      	lsls	r2, r3, #1
 80080cc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80080d0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80080d4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+1]
 80080d8:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 80080dc:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 80080e0:	00db      	lsls	r3, r3, #3
 80080e2:	440b      	add	r3, r1
 80080e4:	005b      	lsls	r3, r3, #1
 80080e6:	1c59      	adds	r1, r3, #1
 80080e8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80080ec:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80080f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80080f4:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+8]
 80080f6:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 80080fa:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 80080fe:	00db      	lsls	r3, r3, #3
 8008100:	440b      	add	r3, r1
 8008102:	3304      	adds	r3, #4
 8008104:	0059      	lsls	r1, r3, #1
 8008106:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800810a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800810e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008112:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 8008114:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 8008118:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 800811c:	00db      	lsls	r3, r3, #3
 800811e:	440b      	add	r3, r1
 8008120:	005b      	lsls	r3, r3, #1
 8008122:	f103 0109 	add.w	r1, r3, #9
 8008126:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800812a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800812e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008132:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 8008134:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 8008138:	f997 211e 	ldrsb.w	r2, [r7, #286]	@ 0x11e
 800813c:	0092      	lsls	r2, r2, #2
 800813e:	440a      	add	r2, r1
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 8008140:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 8008142:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8008146:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800814a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0; i < (int8_t)4 ; i++)
 800814e:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8008152:	b2db      	uxtb	r3, r3
 8008154:	3301      	adds	r3, #1
 8008156:	b2db      	uxtb	r3, r3
 8008158:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 800815c:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8008160:	2b03      	cmp	r3, #3
 8008162:	ddac      	ble.n	80080be <_vl53l5cx_send_xtalk_data+0xf2>
		for (j = 0; j < (int8_t)4; j++)
 8008164:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8008168:	b2db      	uxtb	r3, r3
 800816a:	3301      	adds	r3, #1
 800816c:	b2db      	uxtb	r3, r3
 800816e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8008172:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8008176:	2b03      	cmp	r3, #3
 8008178:	dd9d      	ble.n	80080b6 <_vl53l5cx_send_xtalk_data+0xea>
			}
		}
	    (void)memset(&signal_grid[0x10], 0, (uint32_t)192);
 800817a:	f107 0308 	add.w	r3, r7, #8
 800817e:	3340      	adds	r3, #64	@ 0x40
 8008180:	22c0      	movs	r2, #192	@ 0xc0
 8008182:	2100      	movs	r1, #0
 8008184:	4618      	mov	r0, r3
 8008186:	f002 f91f 	bl	800a3c8 <memset>
	    (void)memcpy(&(p_dev->temp_buffer[0x34]),
 800818a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800818e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f203 5334 	addw	r3, r3, #1332	@ 0x534
 8008198:	f107 0108 	add.w	r1, r7, #8
 800819c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80081a0:	4618      	mov	r0, r3
 80081a2:	f002 f94a 	bl	800a43a <memcpy>
                  signal_grid, sizeof(signal_grid));
	    VL53L5CX_SwapBuffer(p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 80081a6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80081aa:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081b4:	f44f 7142 	mov.w	r1, #776	@ 0x308
 80081b8:	4618      	mov	r0, r3
 80081ba:	f7f9 fba5 	bl	8001908 <VL53L5CX_SwapBuffer>
	    (void)memcpy(&(p_dev->temp_buffer[0x134]),
 80081be:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80081c2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f203 6334 	addw	r3, r3, #1588	@ 0x634
 80081cc:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 80081d0:	601a      	str	r2, [r3, #0]
	    profile_4x4, sizeof(profile_4x4));
	    (void)memset(&(p_dev->temp_buffer[0x078]),0 ,
 80081d2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80081d6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f503 63af 	add.w	r3, r3, #1400	@ 0x578
 80081e0:	2204      	movs	r2, #4
 80081e2:	2100      	movs	r1, #0
 80081e4:	4618      	mov	r0, r3
 80081e6:	f002 f8ef 	bl	800a3c8 <memset>
                         (uint32_t)4*sizeof(uint8_t));
	}

	status |= VL53L5CX_WrMulti(&(p_dev->platform), 0x2cf8,
 80081ea:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80081ee:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80081f2:	6818      	ldr	r0, [r3, #0]
			p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 80081f4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80081f8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
	status |= VL53L5CX_WrMulti(&(p_dev->platform), 0x2cf8,
 8008202:	f44f 7342 	mov.w	r3, #776	@ 0x308
 8008206:	f642 41f8 	movw	r1, #11512	@ 0x2cf8
 800820a:	f7f9 fb1d 	bl	8001848 <VL53L5CX_WrMulti>
 800820e:	4603      	mov	r3, r0
 8008210:	461a      	mov	r2, r3
 8008212:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8008216:	4313      	orrs	r3, r2
 8008218:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
	status |=_vl53l5cx_poll_for_answer(p_dev, 4, 1,
 800821c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8008220:	f5a3 708e 	sub.w	r0, r3, #284	@ 0x11c
 8008224:	2303      	movs	r3, #3
 8008226:	9301      	str	r3, [sp, #4]
 8008228:	23ff      	movs	r3, #255	@ 0xff
 800822a:	9300      	str	r3, [sp, #0]
 800822c:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8008230:	2201      	movs	r2, #1
 8008232:	2104      	movs	r1, #4
 8008234:	6800      	ldr	r0, [r0, #0]
 8008236:	f7ff fc6b 	bl	8007b10 <_vl53l5cx_poll_for_answer>
 800823a:	4603      	mov	r3, r0
 800823c:	461a      	mov	r2, r3
 800823e:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8008242:	4313      	orrs	r3, r2
 8008244:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
			VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 8008248:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
}
 800824c:	4618      	mov	r0, r3
 800824e:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
 8008256:	bf00      	nop
 8008258:	0800c934 	.word	0x0800c934
 800825c:	0800c93c 	.word	0x0800c93c
 8008260:	0001fca0 	.word	0x0001fca0

08008264 <vl53l5cx_is_alive>:

uint8_t vl53l5cx_is_alive(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*p_is_alive)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b084      	sub	sp, #16
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 800826e:	2300      	movs	r3, #0
 8008270:	73fb      	strb	r3, [r7, #15]
	uint8_t device_id, revision_id;

	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2200      	movs	r2, #0
 8008276:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800827a:	4618      	mov	r0, r3
 800827c:	f7f9 fac4 	bl	8001808 <VL53L5CX_WrByte>
 8008280:	4603      	mov	r3, r0
 8008282:	461a      	mov	r2, r3
 8008284:	7bfb      	ldrb	r3, [r7, #15]
 8008286:	4313      	orrs	r3, r2
 8008288:	73fb      	strb	r3, [r7, #15]
	status |= VL53L5CX_RdByte(&(p_dev->platform), 0, &device_id);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f107 020e 	add.w	r2, r7, #14
 8008290:	2100      	movs	r1, #0
 8008292:	4618      	mov	r0, r3
 8008294:	f7f9 fa9a 	bl	80017cc <VL53L5CX_RdByte>
 8008298:	4603      	mov	r3, r0
 800829a:	461a      	mov	r2, r3
 800829c:	7bfb      	ldrb	r3, [r7, #15]
 800829e:	4313      	orrs	r3, r2
 80082a0:	73fb      	strb	r3, [r7, #15]
	status |= VL53L5CX_RdByte(&(p_dev->platform), 1, &revision_id);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f107 020d 	add.w	r2, r7, #13
 80082a8:	2101      	movs	r1, #1
 80082aa:	4618      	mov	r0, r3
 80082ac:	f7f9 fa8e 	bl	80017cc <VL53L5CX_RdByte>
 80082b0:	4603      	mov	r3, r0
 80082b2:	461a      	mov	r2, r3
 80082b4:	7bfb      	ldrb	r3, [r7, #15]
 80082b6:	4313      	orrs	r3, r2
 80082b8:	73fb      	strb	r3, [r7, #15]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2202      	movs	r2, #2
 80082be:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7f9 faa0 	bl	8001808 <VL53L5CX_WrByte>
 80082c8:	4603      	mov	r3, r0
 80082ca:	461a      	mov	r2, r3
 80082cc:	7bfb      	ldrb	r3, [r7, #15]
 80082ce:	4313      	orrs	r3, r2
 80082d0:	73fb      	strb	r3, [r7, #15]

	if((device_id == (uint8_t)0xF0) && (revision_id == (uint8_t)0x02))
 80082d2:	7bbb      	ldrb	r3, [r7, #14]
 80082d4:	2bf0      	cmp	r3, #240	@ 0xf0
 80082d6:	d106      	bne.n	80082e6 <vl53l5cx_is_alive+0x82>
 80082d8:	7b7b      	ldrb	r3, [r7, #13]
 80082da:	2b02      	cmp	r3, #2
 80082dc:	d103      	bne.n	80082e6 <vl53l5cx_is_alive+0x82>
	{
		*p_is_alive = 1;
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	2201      	movs	r2, #1
 80082e2:	701a      	strb	r2, [r3, #0]
 80082e4:	e002      	b.n	80082ec <vl53l5cx_is_alive+0x88>
	}
	else
	{
		*p_is_alive = 0;
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	2200      	movs	r2, #0
 80082ea:	701a      	strb	r2, [r3, #0]
	}

	return status;
 80082ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3710      	adds	r7, #16
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}
	...

080082f8 <vl53l5cx_init>:

uint8_t vl53l5cx_init(
		VL53L5CX_Configuration		*p_dev)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b08a      	sub	sp, #40	@ 0x28
 80082fc:	af04      	add	r7, sp, #16
 80082fe:	6078      	str	r0, [r7, #4]
	uint8_t tmp, status = VL53L5CX_STATUS_OK;
 8008300:	2300      	movs	r3, #0
 8008302:	75fb      	strb	r3, [r7, #23]
	uint8_t pipe_ctrl[] = {VL53L5CX_NB_TARGET_PER_ZONE, 0x00, 0x01, 0x00};
 8008304:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8008308:	613b      	str	r3, [r7, #16]
	uint32_t single_range = 0x01;
 800830a:	2301      	movs	r3, #1
 800830c:	60fb      	str	r3, [r7, #12]

	p_dev->default_xtalk = (uint8_t*)VL53L5CX_DEFAULT_XTALK;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	4a80      	ldr	r2, [pc, #512]	@ (8008514 <vl53l5cx_init+0x21c>)
 8008312:	60da      	str	r2, [r3, #12]
	p_dev->default_configuration = (uint8_t*)VL53L5CX_DEFAULT_CONFIGURATION;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	4a80      	ldr	r2, [pc, #512]	@ (8008518 <vl53l5cx_init+0x220>)
 8008318:	609a      	str	r2, [r3, #8]
	p_dev->is_auto_stop_enabled = (uint8_t)0x0;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2200      	movs	r2, #0
 800831e:	f883 2aac 	strb.w	r2, [r3, #2732]	@ 0xaac

	/* SW reboot sequence */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2200      	movs	r2, #0
 8008326:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800832a:	4618      	mov	r0, r3
 800832c:	f7f9 fa6c 	bl	8001808 <VL53L5CX_WrByte>
 8008330:	4603      	mov	r3, r0
 8008332:	461a      	mov	r2, r3
 8008334:	7dfb      	ldrb	r3, [r7, #23]
 8008336:	4313      	orrs	r3, r2
 8008338:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0009, 0x04);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2204      	movs	r2, #4
 800833e:	2109      	movs	r1, #9
 8008340:	4618      	mov	r0, r3
 8008342:	f7f9 fa61 	bl	8001808 <VL53L5CX_WrByte>
 8008346:	4603      	mov	r3, r0
 8008348:	461a      	mov	r2, r3
 800834a:	7dfb      	ldrb	r3, [r7, #23]
 800834c:	4313      	orrs	r3, r2
 800834e:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x000F, 0x40);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2240      	movs	r2, #64	@ 0x40
 8008354:	210f      	movs	r1, #15
 8008356:	4618      	mov	r0, r3
 8008358:	f7f9 fa56 	bl	8001808 <VL53L5CX_WrByte>
 800835c:	4603      	mov	r3, r0
 800835e:	461a      	mov	r2, r3
 8008360:	7dfb      	ldrb	r3, [r7, #23]
 8008362:	4313      	orrs	r3, r2
 8008364:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x000A, 0x03);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2203      	movs	r2, #3
 800836a:	210a      	movs	r1, #10
 800836c:	4618      	mov	r0, r3
 800836e:	f7f9 fa4b 	bl	8001808 <VL53L5CX_WrByte>
 8008372:	4603      	mov	r3, r0
 8008374:	461a      	mov	r2, r3
 8008376:	7dfb      	ldrb	r3, [r7, #23]
 8008378:	4313      	orrs	r3, r2
 800837a:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_RdByte(&(p_dev->platform), 0x7FFF, &tmp);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f107 0216 	add.w	r2, r7, #22
 8008382:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8008386:	4618      	mov	r0, r3
 8008388:	f7f9 fa20 	bl	80017cc <VL53L5CX_RdByte>
 800838c:	4603      	mov	r3, r0
 800838e:	461a      	mov	r2, r3
 8008390:	7dfb      	ldrb	r3, [r7, #23]
 8008392:	4313      	orrs	r3, r2
 8008394:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x000C, 0x01);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2201      	movs	r2, #1
 800839a:	210c      	movs	r1, #12
 800839c:	4618      	mov	r0, r3
 800839e:	f7f9 fa33 	bl	8001808 <VL53L5CX_WrByte>
 80083a2:	4603      	mov	r3, r0
 80083a4:	461a      	mov	r2, r3
 80083a6:	7dfb      	ldrb	r3, [r7, #23]
 80083a8:	4313      	orrs	r3, r2
 80083aa:	75fb      	strb	r3, [r7, #23]

	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0101, 0x00);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2200      	movs	r2, #0
 80083b0:	f240 1101 	movw	r1, #257	@ 0x101
 80083b4:	4618      	mov	r0, r3
 80083b6:	f7f9 fa27 	bl	8001808 <VL53L5CX_WrByte>
 80083ba:	4603      	mov	r3, r0
 80083bc:	461a      	mov	r2, r3
 80083be:	7dfb      	ldrb	r3, [r7, #23]
 80083c0:	4313      	orrs	r3, r2
 80083c2:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0102, 0x00);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2200      	movs	r2, #0
 80083c8:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80083cc:	4618      	mov	r0, r3
 80083ce:	f7f9 fa1b 	bl	8001808 <VL53L5CX_WrByte>
 80083d2:	4603      	mov	r3, r0
 80083d4:	461a      	mov	r2, r3
 80083d6:	7dfb      	ldrb	r3, [r7, #23]
 80083d8:	4313      	orrs	r3, r2
 80083da:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x010A, 0x01);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2201      	movs	r2, #1
 80083e0:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 80083e4:	4618      	mov	r0, r3
 80083e6:	f7f9 fa0f 	bl	8001808 <VL53L5CX_WrByte>
 80083ea:	4603      	mov	r3, r0
 80083ec:	461a      	mov	r2, r3
 80083ee:	7dfb      	ldrb	r3, [r7, #23]
 80083f0:	4313      	orrs	r3, r2
 80083f2:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x4002, 0x01);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2201      	movs	r2, #1
 80083f8:	f244 0102 	movw	r1, #16386	@ 0x4002
 80083fc:	4618      	mov	r0, r3
 80083fe:	f7f9 fa03 	bl	8001808 <VL53L5CX_WrByte>
 8008402:	4603      	mov	r3, r0
 8008404:	461a      	mov	r2, r3
 8008406:	7dfb      	ldrb	r3, [r7, #23]
 8008408:	4313      	orrs	r3, r2
 800840a:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x4002, 0x00);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	f244 0102 	movw	r1, #16386	@ 0x4002
 8008414:	4618      	mov	r0, r3
 8008416:	f7f9 f9f7 	bl	8001808 <VL53L5CX_WrByte>
 800841a:	4603      	mov	r3, r0
 800841c:	461a      	mov	r2, r3
 800841e:	7dfb      	ldrb	r3, [r7, #23]
 8008420:	4313      	orrs	r3, r2
 8008422:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x010A, 0x03);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2203      	movs	r2, #3
 8008428:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 800842c:	4618      	mov	r0, r3
 800842e:	f7f9 f9eb 	bl	8001808 <VL53L5CX_WrByte>
 8008432:	4603      	mov	r3, r0
 8008434:	461a      	mov	r2, r3
 8008436:	7dfb      	ldrb	r3, [r7, #23]
 8008438:	4313      	orrs	r3, r2
 800843a:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0103, 0x01);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2201      	movs	r2, #1
 8008440:	f240 1103 	movw	r1, #259	@ 0x103
 8008444:	4618      	mov	r0, r3
 8008446:	f7f9 f9df 	bl	8001808 <VL53L5CX_WrByte>
 800844a:	4603      	mov	r3, r0
 800844c:	461a      	mov	r2, r3
 800844e:	7dfb      	ldrb	r3, [r7, #23]
 8008450:	4313      	orrs	r3, r2
 8008452:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x000C, 0x00);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2200      	movs	r2, #0
 8008458:	210c      	movs	r1, #12
 800845a:	4618      	mov	r0, r3
 800845c:	f7f9 f9d4 	bl	8001808 <VL53L5CX_WrByte>
 8008460:	4603      	mov	r3, r0
 8008462:	461a      	mov	r2, r3
 8008464:	7dfb      	ldrb	r3, [r7, #23]
 8008466:	4313      	orrs	r3, r2
 8008468:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x000F, 0x43);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2243      	movs	r2, #67	@ 0x43
 800846e:	210f      	movs	r1, #15
 8008470:	4618      	mov	r0, r3
 8008472:	f7f9 f9c9 	bl	8001808 <VL53L5CX_WrByte>
 8008476:	4603      	mov	r3, r0
 8008478:	461a      	mov	r2, r3
 800847a:	7dfb      	ldrb	r3, [r7, #23]
 800847c:	4313      	orrs	r3, r2
 800847e:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WaitMs(&(p_dev->platform), 1);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2101      	movs	r1, #1
 8008484:	4618      	mov	r0, r3
 8008486:	f7f9 fa75 	bl	8001974 <VL53L5CX_WaitMs>
 800848a:	4603      	mov	r3, r0
 800848c:	461a      	mov	r2, r3
 800848e:	7dfb      	ldrb	r3, [r7, #23]
 8008490:	4313      	orrs	r3, r2
 8008492:	75fb      	strb	r3, [r7, #23]

	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x000F, 0x40);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2240      	movs	r2, #64	@ 0x40
 8008498:	210f      	movs	r1, #15
 800849a:	4618      	mov	r0, r3
 800849c:	f7f9 f9b4 	bl	8001808 <VL53L5CX_WrByte>
 80084a0:	4603      	mov	r3, r0
 80084a2:	461a      	mov	r2, r3
 80084a4:	7dfb      	ldrb	r3, [r7, #23]
 80084a6:	4313      	orrs	r3, r2
 80084a8:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x000A, 0x01);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2201      	movs	r2, #1
 80084ae:	210a      	movs	r1, #10
 80084b0:	4618      	mov	r0, r3
 80084b2:	f7f9 f9a9 	bl	8001808 <VL53L5CX_WrByte>
 80084b6:	4603      	mov	r3, r0
 80084b8:	461a      	mov	r2, r3
 80084ba:	7dfb      	ldrb	r3, [r7, #23]
 80084bc:	4313      	orrs	r3, r2
 80084be:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WaitMs(&(p_dev->platform), 100);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2164      	movs	r1, #100	@ 0x64
 80084c4:	4618      	mov	r0, r3
 80084c6:	f7f9 fa55 	bl	8001974 <VL53L5CX_WaitMs>
 80084ca:	4603      	mov	r3, r0
 80084cc:	461a      	mov	r2, r3
 80084ce:	7dfb      	ldrb	r3, [r7, #23]
 80084d0:	4313      	orrs	r3, r2
 80084d2:	75fb      	strb	r3, [r7, #23]

	/* Wait for sensor booted (several ms required to get sensor ready ) */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2200      	movs	r2, #0
 80084d8:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80084dc:	4618      	mov	r0, r3
 80084de:	f7f9 f993 	bl	8001808 <VL53L5CX_WrByte>
 80084e2:	4603      	mov	r3, r0
 80084e4:	461a      	mov	r2, r3
 80084e6:	7dfb      	ldrb	r3, [r7, #23]
 80084e8:	4313      	orrs	r3, r2
 80084ea:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x06, 0xff, 1);
 80084ec:	2301      	movs	r3, #1
 80084ee:	9301      	str	r3, [sp, #4]
 80084f0:	23ff      	movs	r3, #255	@ 0xff
 80084f2:	9300      	str	r3, [sp, #0]
 80084f4:	2306      	movs	r3, #6
 80084f6:	2200      	movs	r2, #0
 80084f8:	2101      	movs	r1, #1
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f7ff fb08 	bl	8007b10 <_vl53l5cx_poll_for_answer>
 8008500:	4603      	mov	r3, r0
 8008502:	461a      	mov	r2, r3
 8008504:	7dfb      	ldrb	r3, [r7, #23]
 8008506:	4313      	orrs	r3, r2
 8008508:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 800850a:	7dfb      	ldrb	r3, [r7, #23]
 800850c:	2b00      	cmp	r3, #0
 800850e:	f040 8354 	bne.w	8008bba <vl53l5cx_init+0x8c2>
 8008512:	e003      	b.n	800851c <vl53l5cx_init+0x224>
 8008514:	08021da4 	.word	0x08021da4
 8008518:	080219d8 	.word	0x080219d8
		goto exit;
	}

	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x000E, 0x01);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2201      	movs	r2, #1
 8008520:	210e      	movs	r1, #14
 8008522:	4618      	mov	r0, r3
 8008524:	f7f9 f970 	bl	8001808 <VL53L5CX_WrByte>
 8008528:	4603      	mov	r3, r0
 800852a:	461a      	mov	r2, r3
 800852c:	7dfb      	ldrb	r3, [r7, #23]
 800852e:	4313      	orrs	r3, r2
 8008530:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2202      	movs	r2, #2
 8008536:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800853a:	4618      	mov	r0, r3
 800853c:	f7f9 f964 	bl	8001808 <VL53L5CX_WrByte>
 8008540:	4603      	mov	r3, r0
 8008542:	461a      	mov	r2, r3
 8008544:	7dfb      	ldrb	r3, [r7, #23]
 8008546:	4313      	orrs	r3, r2
 8008548:	75fb      	strb	r3, [r7, #23]

	/* Enable FW access */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x03, 0x0D);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	220d      	movs	r2, #13
 800854e:	2103      	movs	r1, #3
 8008550:	4618      	mov	r0, r3
 8008552:	f7f9 f959 	bl	8001808 <VL53L5CX_WrByte>
 8008556:	4603      	mov	r3, r0
 8008558:	461a      	mov	r2, r3
 800855a:	7dfb      	ldrb	r3, [r7, #23]
 800855c:	4313      	orrs	r3, r2
 800855e:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2201      	movs	r2, #1
 8008564:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8008568:	4618      	mov	r0, r3
 800856a:	f7f9 f94d 	bl	8001808 <VL53L5CX_WrByte>
 800856e:	4603      	mov	r3, r0
 8008570:	461a      	mov	r2, r3
 8008572:	7dfb      	ldrb	r3, [r7, #23]
 8008574:	4313      	orrs	r3, r2
 8008576:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 8008578:	2310      	movs	r3, #16
 800857a:	9301      	str	r3, [sp, #4]
 800857c:	2310      	movs	r3, #16
 800857e:	9300      	str	r3, [sp, #0]
 8008580:	2321      	movs	r3, #33	@ 0x21
 8008582:	2200      	movs	r2, #0
 8008584:	2101      	movs	r1, #1
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f7ff fac2 	bl	8007b10 <_vl53l5cx_poll_for_answer>
 800858c:	4603      	mov	r3, r0
 800858e:	461a      	mov	r2, r3
 8008590:	7dfb      	ldrb	r3, [r7, #23]
 8008592:	4313      	orrs	r3, r2
 8008594:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2200      	movs	r2, #0
 800859a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800859e:	4618      	mov	r0, r3
 80085a0:	f7f9 f932 	bl	8001808 <VL53L5CX_WrByte>
 80085a4:	4603      	mov	r3, r0
 80085a6:	461a      	mov	r2, r3
 80085a8:	7dfb      	ldrb	r3, [r7, #23]
 80085aa:	4313      	orrs	r3, r2
 80085ac:	75fb      	strb	r3, [r7, #23]

	/* Enable host access to GO1 */
	status |= VL53L5CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f107 0216 	add.w	r2, r7, #22
 80085b4:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80085b8:	4618      	mov	r0, r3
 80085ba:	f7f9 f907 	bl	80017cc <VL53L5CX_RdByte>
 80085be:	4603      	mov	r3, r0
 80085c0:	461a      	mov	r2, r3
 80085c2:	7dfb      	ldrb	r3, [r7, #23]
 80085c4:	4313      	orrs	r3, r2
 80085c6:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0C, 0x01);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2201      	movs	r2, #1
 80085cc:	210c      	movs	r1, #12
 80085ce:	4618      	mov	r0, r3
 80085d0:	f7f9 f91a 	bl	8001808 <VL53L5CX_WrByte>
 80085d4:	4603      	mov	r3, r0
 80085d6:	461a      	mov	r2, r3
 80085d8:	7dfb      	ldrb	r3, [r7, #23]
 80085da:	4313      	orrs	r3, r2
 80085dc:	75fb      	strb	r3, [r7, #23]

	/* Power ON status */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2200      	movs	r2, #0
 80085e2:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80085e6:	4618      	mov	r0, r3
 80085e8:	f7f9 f90e 	bl	8001808 <VL53L5CX_WrByte>
 80085ec:	4603      	mov	r3, r0
 80085ee:	461a      	mov	r2, r3
 80085f0:	7dfb      	ldrb	r3, [r7, #23]
 80085f2:	4313      	orrs	r3, r2
 80085f4:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x101, 0x00);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2200      	movs	r2, #0
 80085fa:	f240 1101 	movw	r1, #257	@ 0x101
 80085fe:	4618      	mov	r0, r3
 8008600:	f7f9 f902 	bl	8001808 <VL53L5CX_WrByte>
 8008604:	4603      	mov	r3, r0
 8008606:	461a      	mov	r2, r3
 8008608:	7dfb      	ldrb	r3, [r7, #23]
 800860a:	4313      	orrs	r3, r2
 800860c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x102, 0x00);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2200      	movs	r2, #0
 8008612:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8008616:	4618      	mov	r0, r3
 8008618:	f7f9 f8f6 	bl	8001808 <VL53L5CX_WrByte>
 800861c:	4603      	mov	r3, r0
 800861e:	461a      	mov	r2, r3
 8008620:	7dfb      	ldrb	r3, [r7, #23]
 8008622:	4313      	orrs	r3, r2
 8008624:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x010A, 0x01);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2201      	movs	r2, #1
 800862a:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 800862e:	4618      	mov	r0, r3
 8008630:	f7f9 f8ea 	bl	8001808 <VL53L5CX_WrByte>
 8008634:	4603      	mov	r3, r0
 8008636:	461a      	mov	r2, r3
 8008638:	7dfb      	ldrb	r3, [r7, #23]
 800863a:	4313      	orrs	r3, r2
 800863c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x4002, 0x01);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2201      	movs	r2, #1
 8008642:	f244 0102 	movw	r1, #16386	@ 0x4002
 8008646:	4618      	mov	r0, r3
 8008648:	f7f9 f8de 	bl	8001808 <VL53L5CX_WrByte>
 800864c:	4603      	mov	r3, r0
 800864e:	461a      	mov	r2, r3
 8008650:	7dfb      	ldrb	r3, [r7, #23]
 8008652:	4313      	orrs	r3, r2
 8008654:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x4002, 0x00);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2200      	movs	r2, #0
 800865a:	f244 0102 	movw	r1, #16386	@ 0x4002
 800865e:	4618      	mov	r0, r3
 8008660:	f7f9 f8d2 	bl	8001808 <VL53L5CX_WrByte>
 8008664:	4603      	mov	r3, r0
 8008666:	461a      	mov	r2, r3
 8008668:	7dfb      	ldrb	r3, [r7, #23]
 800866a:	4313      	orrs	r3, r2
 800866c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x010A, 0x03);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2203      	movs	r2, #3
 8008672:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8008676:	4618      	mov	r0, r3
 8008678:	f7f9 f8c6 	bl	8001808 <VL53L5CX_WrByte>
 800867c:	4603      	mov	r3, r0
 800867e:	461a      	mov	r2, r3
 8008680:	7dfb      	ldrb	r3, [r7, #23]
 8008682:	4313      	orrs	r3, r2
 8008684:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x103, 0x01);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2201      	movs	r2, #1
 800868a:	f240 1103 	movw	r1, #259	@ 0x103
 800868e:	4618      	mov	r0, r3
 8008690:	f7f9 f8ba 	bl	8001808 <VL53L5CX_WrByte>
 8008694:	4603      	mov	r3, r0
 8008696:	461a      	mov	r2, r3
 8008698:	7dfb      	ldrb	r3, [r7, #23]
 800869a:	4313      	orrs	r3, r2
 800869c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x400F, 0x00);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	f244 010f 	movw	r1, #16399	@ 0x400f
 80086a6:	4618      	mov	r0, r3
 80086a8:	f7f9 f8ae 	bl	8001808 <VL53L5CX_WrByte>
 80086ac:	4603      	mov	r3, r0
 80086ae:	461a      	mov	r2, r3
 80086b0:	7dfb      	ldrb	r3, [r7, #23]
 80086b2:	4313      	orrs	r3, r2
 80086b4:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x21A, 0x43);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2243      	movs	r2, #67	@ 0x43
 80086ba:	f240 211a 	movw	r1, #538	@ 0x21a
 80086be:	4618      	mov	r0, r3
 80086c0:	f7f9 f8a2 	bl	8001808 <VL53L5CX_WrByte>
 80086c4:	4603      	mov	r3, r0
 80086c6:	461a      	mov	r2, r3
 80086c8:	7dfb      	ldrb	r3, [r7, #23]
 80086ca:	4313      	orrs	r3, r2
 80086cc:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x21A, 0x03);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2203      	movs	r2, #3
 80086d2:	f240 211a 	movw	r1, #538	@ 0x21a
 80086d6:	4618      	mov	r0, r3
 80086d8:	f7f9 f896 	bl	8001808 <VL53L5CX_WrByte>
 80086dc:	4603      	mov	r3, r0
 80086de:	461a      	mov	r2, r3
 80086e0:	7dfb      	ldrb	r3, [r7, #23]
 80086e2:	4313      	orrs	r3, r2
 80086e4:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x21A, 0x01);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2201      	movs	r2, #1
 80086ea:	f240 211a 	movw	r1, #538	@ 0x21a
 80086ee:	4618      	mov	r0, r3
 80086f0:	f7f9 f88a 	bl	8001808 <VL53L5CX_WrByte>
 80086f4:	4603      	mov	r3, r0
 80086f6:	461a      	mov	r2, r3
 80086f8:	7dfb      	ldrb	r3, [r7, #23]
 80086fa:	4313      	orrs	r3, r2
 80086fc:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x21A, 0x00);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2200      	movs	r2, #0
 8008702:	f240 211a 	movw	r1, #538	@ 0x21a
 8008706:	4618      	mov	r0, r3
 8008708:	f7f9 f87e 	bl	8001808 <VL53L5CX_WrByte>
 800870c:	4603      	mov	r3, r0
 800870e:	461a      	mov	r2, r3
 8008710:	7dfb      	ldrb	r3, [r7, #23]
 8008712:	4313      	orrs	r3, r2
 8008714:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x219, 0x00);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2200      	movs	r2, #0
 800871a:	f240 2119 	movw	r1, #537	@ 0x219
 800871e:	4618      	mov	r0, r3
 8008720:	f7f9 f872 	bl	8001808 <VL53L5CX_WrByte>
 8008724:	4603      	mov	r3, r0
 8008726:	461a      	mov	r2, r3
 8008728:	7dfb      	ldrb	r3, [r7, #23]
 800872a:	4313      	orrs	r3, r2
 800872c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x21B, 0x00);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2200      	movs	r2, #0
 8008732:	f240 211b 	movw	r1, #539	@ 0x21b
 8008736:	4618      	mov	r0, r3
 8008738:	f7f9 f866 	bl	8001808 <VL53L5CX_WrByte>
 800873c:	4603      	mov	r3, r0
 800873e:	461a      	mov	r2, r3
 8008740:	7dfb      	ldrb	r3, [r7, #23]
 8008742:	4313      	orrs	r3, r2
 8008744:	75fb      	strb	r3, [r7, #23]

	/* Wake up MCU */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2200      	movs	r2, #0
 800874a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800874e:	4618      	mov	r0, r3
 8008750:	f7f9 f85a 	bl	8001808 <VL53L5CX_WrByte>
 8008754:	4603      	mov	r3, r0
 8008756:	461a      	mov	r2, r3
 8008758:	7dfb      	ldrb	r3, [r7, #23]
 800875a:	4313      	orrs	r3, r2
 800875c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f107 0216 	add.w	r2, r7, #22
 8008764:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8008768:	4618      	mov	r0, r3
 800876a:	f7f9 f82f 	bl	80017cc <VL53L5CX_RdByte>
 800876e:	4603      	mov	r3, r0
 8008770:	461a      	mov	r2, r3
 8008772:	7dfb      	ldrb	r3, [r7, #23]
 8008774:	4313      	orrs	r3, r2
 8008776:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0C, 0x00);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2200      	movs	r2, #0
 800877c:	210c      	movs	r1, #12
 800877e:	4618      	mov	r0, r3
 8008780:	f7f9 f842 	bl	8001808 <VL53L5CX_WrByte>
 8008784:	4603      	mov	r3, r0
 8008786:	461a      	mov	r2, r3
 8008788:	7dfb      	ldrb	r3, [r7, #23]
 800878a:	4313      	orrs	r3, r2
 800878c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2201      	movs	r2, #1
 8008792:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8008796:	4618      	mov	r0, r3
 8008798:	f7f9 f836 	bl	8001808 <VL53L5CX_WrByte>
 800879c:	4603      	mov	r3, r0
 800879e:	461a      	mov	r2, r3
 80087a0:	7dfb      	ldrb	r3, [r7, #23]
 80087a2:	4313      	orrs	r3, r2
 80087a4:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x20, 0x07);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2207      	movs	r2, #7
 80087aa:	2120      	movs	r1, #32
 80087ac:	4618      	mov	r0, r3
 80087ae:	f7f9 f82b 	bl	8001808 <VL53L5CX_WrByte>
 80087b2:	4603      	mov	r3, r0
 80087b4:	461a      	mov	r2, r3
 80087b6:	7dfb      	ldrb	r3, [r7, #23]
 80087b8:	4313      	orrs	r3, r2
 80087ba:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x20, 0x06);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2206      	movs	r2, #6
 80087c0:	2120      	movs	r1, #32
 80087c2:	4618      	mov	r0, r3
 80087c4:	f7f9 f820 	bl	8001808 <VL53L5CX_WrByte>
 80087c8:	4603      	mov	r3, r0
 80087ca:	461a      	mov	r2, r3
 80087cc:	7dfb      	ldrb	r3, [r7, #23]
 80087ce:	4313      	orrs	r3, r2
 80087d0:	75fb      	strb	r3, [r7, #23]

	/* Download FW into VL53L5 */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x09);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2209      	movs	r2, #9
 80087d6:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80087da:	4618      	mov	r0, r3
 80087dc:	f7f9 f814 	bl	8001808 <VL53L5CX_WrByte>
 80087e0:	4603      	mov	r3, r0
 80087e2:	461a      	mov	r2, r3
 80087e4:	7dfb      	ldrb	r3, [r7, #23]
 80087e6:	4313      	orrs	r3, r2
 80087e8:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrMulti(&(p_dev->platform),0,
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80087f0:	4ae1      	ldr	r2, [pc, #900]	@ (8008b78 <vl53l5cx_init+0x880>)
 80087f2:	2100      	movs	r1, #0
 80087f4:	f7f9 f828 	bl	8001848 <VL53L5CX_WrMulti>
 80087f8:	4603      	mov	r3, r0
 80087fa:	461a      	mov	r2, r3
 80087fc:	7dfb      	ldrb	r3, [r7, #23]
 80087fe:	4313      	orrs	r3, r2
 8008800:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L5CX_FIRMWARE[0],0x8000);
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x0a);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	220a      	movs	r2, #10
 8008806:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800880a:	4618      	mov	r0, r3
 800880c:	f7f8 fffc 	bl	8001808 <VL53L5CX_WrByte>
 8008810:	4603      	mov	r3, r0
 8008812:	461a      	mov	r2, r3
 8008814:	7dfb      	ldrb	r3, [r7, #23]
 8008816:	4313      	orrs	r3, r2
 8008818:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrMulti(&(p_dev->platform),0,
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008820:	4ad6      	ldr	r2, [pc, #856]	@ (8008b7c <vl53l5cx_init+0x884>)
 8008822:	2100      	movs	r1, #0
 8008824:	f7f9 f810 	bl	8001848 <VL53L5CX_WrMulti>
 8008828:	4603      	mov	r3, r0
 800882a:	461a      	mov	r2, r3
 800882c:	7dfb      	ldrb	r3, [r7, #23]
 800882e:	4313      	orrs	r3, r2
 8008830:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L5CX_FIRMWARE[0x8000],0x8000);
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x0b);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	220b      	movs	r2, #11
 8008836:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800883a:	4618      	mov	r0, r3
 800883c:	f7f8 ffe4 	bl	8001808 <VL53L5CX_WrByte>
 8008840:	4603      	mov	r3, r0
 8008842:	461a      	mov	r2, r3
 8008844:	7dfb      	ldrb	r3, [r7, #23]
 8008846:	4313      	orrs	r3, r2
 8008848:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrMulti(&(p_dev->platform),0,
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8008850:	4acb      	ldr	r2, [pc, #812]	@ (8008b80 <vl53l5cx_init+0x888>)
 8008852:	2100      	movs	r1, #0
 8008854:	f7f8 fff8 	bl	8001848 <VL53L5CX_WrMulti>
 8008858:	4603      	mov	r3, r0
 800885a:	461a      	mov	r2, r3
 800885c:	7dfb      	ldrb	r3, [r7, #23]
 800885e:	4313      	orrs	r3, r2
 8008860:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L5CX_FIRMWARE[0x10000],0x5000);
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2201      	movs	r2, #1
 8008866:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800886a:	4618      	mov	r0, r3
 800886c:	f7f8 ffcc 	bl	8001808 <VL53L5CX_WrByte>
 8008870:	4603      	mov	r3, r0
 8008872:	461a      	mov	r2, r3
 8008874:	7dfb      	ldrb	r3, [r7, #23]
 8008876:	4313      	orrs	r3, r2
 8008878:	75fb      	strb	r3, [r7, #23]

	/* Check if FW correctly downloaded */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2202      	movs	r2, #2
 800887e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8008882:	4618      	mov	r0, r3
 8008884:	f7f8 ffc0 	bl	8001808 <VL53L5CX_WrByte>
 8008888:	4603      	mov	r3, r0
 800888a:	461a      	mov	r2, r3
 800888c:	7dfb      	ldrb	r3, [r7, #23]
 800888e:	4313      	orrs	r3, r2
 8008890:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x03, 0x0D);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	220d      	movs	r2, #13
 8008896:	2103      	movs	r1, #3
 8008898:	4618      	mov	r0, r3
 800889a:	f7f8 ffb5 	bl	8001808 <VL53L5CX_WrByte>
 800889e:	4603      	mov	r3, r0
 80088a0:	461a      	mov	r2, r3
 80088a2:	7dfb      	ldrb	r3, [r7, #23]
 80088a4:	4313      	orrs	r3, r2
 80088a6:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2201      	movs	r2, #1
 80088ac:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80088b0:	4618      	mov	r0, r3
 80088b2:	f7f8 ffa9 	bl	8001808 <VL53L5CX_WrByte>
 80088b6:	4603      	mov	r3, r0
 80088b8:	461a      	mov	r2, r3
 80088ba:	7dfb      	ldrb	r3, [r7, #23]
 80088bc:	4313      	orrs	r3, r2
 80088be:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 80088c0:	2310      	movs	r3, #16
 80088c2:	9301      	str	r3, [sp, #4]
 80088c4:	2310      	movs	r3, #16
 80088c6:	9300      	str	r3, [sp, #0]
 80088c8:	2321      	movs	r3, #33	@ 0x21
 80088ca:	2200      	movs	r2, #0
 80088cc:	2101      	movs	r1, #1
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f7ff f91e 	bl	8007b10 <_vl53l5cx_poll_for_answer>
 80088d4:	4603      	mov	r3, r0
 80088d6:	461a      	mov	r2, r3
 80088d8:	7dfb      	ldrb	r3, [r7, #23]
 80088da:	4313      	orrs	r3, r2
 80088dc:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 80088de:	7dfb      	ldrb	r3, [r7, #23]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	f040 816c 	bne.w	8008bbe <vl53l5cx_init+0x8c6>
		goto exit;
	}

	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2200      	movs	r2, #0
 80088ea:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80088ee:	4618      	mov	r0, r3
 80088f0:	f7f8 ff8a 	bl	8001808 <VL53L5CX_WrByte>
 80088f4:	4603      	mov	r3, r0
 80088f6:	461a      	mov	r2, r3
 80088f8:	7dfb      	ldrb	r3, [r7, #23]
 80088fa:	4313      	orrs	r3, r2
 80088fc:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f107 0216 	add.w	r2, r7, #22
 8008904:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8008908:	4618      	mov	r0, r3
 800890a:	f7f8 ff5f 	bl	80017cc <VL53L5CX_RdByte>
 800890e:	4603      	mov	r3, r0
 8008910:	461a      	mov	r2, r3
 8008912:	7dfb      	ldrb	r3, [r7, #23]
 8008914:	4313      	orrs	r3, r2
 8008916:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0C, 0x01);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2201      	movs	r2, #1
 800891c:	210c      	movs	r1, #12
 800891e:	4618      	mov	r0, r3
 8008920:	f7f8 ff72 	bl	8001808 <VL53L5CX_WrByte>
 8008924:	4603      	mov	r3, r0
 8008926:	461a      	mov	r2, r3
 8008928:	7dfb      	ldrb	r3, [r7, #23]
 800892a:	4313      	orrs	r3, r2
 800892c:	75fb      	strb	r3, [r7, #23]

	/* Reset MCU and wait boot */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2200      	movs	r2, #0
 8008932:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8008936:	4618      	mov	r0, r3
 8008938:	f7f8 ff66 	bl	8001808 <VL53L5CX_WrByte>
 800893c:	4603      	mov	r3, r0
 800893e:	461a      	mov	r2, r3
 8008940:	7dfb      	ldrb	r3, [r7, #23]
 8008942:	4313      	orrs	r3, r2
 8008944:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x114, 0x00);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2200      	movs	r2, #0
 800894a:	f44f 718a 	mov.w	r1, #276	@ 0x114
 800894e:	4618      	mov	r0, r3
 8008950:	f7f8 ff5a 	bl	8001808 <VL53L5CX_WrByte>
 8008954:	4603      	mov	r3, r0
 8008956:	461a      	mov	r2, r3
 8008958:	7dfb      	ldrb	r3, [r7, #23]
 800895a:	4313      	orrs	r3, r2
 800895c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x115, 0x00);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2200      	movs	r2, #0
 8008962:	f240 1115 	movw	r1, #277	@ 0x115
 8008966:	4618      	mov	r0, r3
 8008968:	f7f8 ff4e 	bl	8001808 <VL53L5CX_WrByte>
 800896c:	4603      	mov	r3, r0
 800896e:	461a      	mov	r2, r3
 8008970:	7dfb      	ldrb	r3, [r7, #23]
 8008972:	4313      	orrs	r3, r2
 8008974:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x116, 0x42);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2242      	movs	r2, #66	@ 0x42
 800897a:	f44f 718b 	mov.w	r1, #278	@ 0x116
 800897e:	4618      	mov	r0, r3
 8008980:	f7f8 ff42 	bl	8001808 <VL53L5CX_WrByte>
 8008984:	4603      	mov	r3, r0
 8008986:	461a      	mov	r2, r3
 8008988:	7dfb      	ldrb	r3, [r7, #23]
 800898a:	4313      	orrs	r3, r2
 800898c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x117, 0x00);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2200      	movs	r2, #0
 8008992:	f240 1117 	movw	r1, #279	@ 0x117
 8008996:	4618      	mov	r0, r3
 8008998:	f7f8 ff36 	bl	8001808 <VL53L5CX_WrByte>
 800899c:	4603      	mov	r3, r0
 800899e:	461a      	mov	r2, r3
 80089a0:	7dfb      	ldrb	r3, [r7, #23]
 80089a2:	4313      	orrs	r3, r2
 80089a4:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0B, 0x00);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2200      	movs	r2, #0
 80089aa:	210b      	movs	r1, #11
 80089ac:	4618      	mov	r0, r3
 80089ae:	f7f8 ff2b 	bl	8001808 <VL53L5CX_WrByte>
 80089b2:	4603      	mov	r3, r0
 80089b4:	461a      	mov	r2, r3
 80089b6:	7dfb      	ldrb	r3, [r7, #23]
 80089b8:	4313      	orrs	r3, r2
 80089ba:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f107 0216 	add.w	r2, r7, #22
 80089c2:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80089c6:	4618      	mov	r0, r3
 80089c8:	f7f8 ff00 	bl	80017cc <VL53L5CX_RdByte>
 80089cc:	4603      	mov	r3, r0
 80089ce:	461a      	mov	r2, r3
 80089d0:	7dfb      	ldrb	r3, [r7, #23]
 80089d2:	4313      	orrs	r3, r2
 80089d4:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0C, 0x00);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2200      	movs	r2, #0
 80089da:	210c      	movs	r1, #12
 80089dc:	4618      	mov	r0, r3
 80089de:	f7f8 ff13 	bl	8001808 <VL53L5CX_WrByte>
 80089e2:	4603      	mov	r3, r0
 80089e4:	461a      	mov	r2, r3
 80089e6:	7dfb      	ldrb	r3, [r7, #23]
 80089e8:	4313      	orrs	r3, r2
 80089ea:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0B, 0x01);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2201      	movs	r2, #1
 80089f0:	210b      	movs	r1, #11
 80089f2:	4618      	mov	r0, r3
 80089f4:	f7f8 ff08 	bl	8001808 <VL53L5CX_WrByte>
 80089f8:	4603      	mov	r3, r0
 80089fa:	461a      	mov	r2, r3
 80089fc:	7dfb      	ldrb	r3, [r7, #23]
 80089fe:	4313      	orrs	r3, r2
 8008a00:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_mcu_boot(p_dev);
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f7ff f8d4 	bl	8007bb0 <_vl53l5cx_poll_for_mcu_boot>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	7dfb      	ldrb	r3, [r7, #23]
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 8008a12:	7dfb      	ldrb	r3, [r7, #23]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	f040 80d4 	bne.w	8008bc2 <vl53l5cx_init+0x8ca>
		goto exit;
	}

	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2202      	movs	r2, #2
 8008a1e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8008a22:	4618      	mov	r0, r3
 8008a24:	f7f8 fef0 	bl	8001808 <VL53L5CX_WrByte>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	7dfb      	ldrb	r3, [r7, #23]
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	75fb      	strb	r3, [r7, #23]

	/* Get offset NVM data and store them into the offset buffer */
	status |= VL53L5CX_WrMulti(&(p_dev->platform), 0x2fd8,
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	2328      	movs	r3, #40	@ 0x28
 8008a36:	4a53      	ldr	r2, [pc, #332]	@ (8008b84 <vl53l5cx_init+0x88c>)
 8008a38:	f642 71d8 	movw	r1, #12248	@ 0x2fd8
 8008a3c:	f7f8 ff04 	bl	8001848 <VL53L5CX_WrMulti>
 8008a40:	4603      	mov	r3, r0
 8008a42:	461a      	mov	r2, r3
 8008a44:	7dfb      	ldrb	r3, [r7, #23]
 8008a46:	4313      	orrs	r3, r2
 8008a48:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)VL53L5CX_GET_NVM_CMD, sizeof(VL53L5CX_GET_NVM_CMD));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 0,
 8008a4a:	2302      	movs	r3, #2
 8008a4c:	9301      	str	r3, [sp, #4]
 8008a4e:	23ff      	movs	r3, #255	@ 0xff
 8008a50:	9300      	str	r3, [sp, #0]
 8008a52:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8008a56:	2200      	movs	r2, #0
 8008a58:	2104      	movs	r1, #4
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f7ff f858 	bl	8007b10 <_vl53l5cx_poll_for_answer>
 8008a60:	4603      	mov	r3, r0
 8008a62:	461a      	mov	r2, r3
 8008a64:	7dfb      	ldrb	r3, [r7, #23]
 8008a66:	4313      	orrs	r3, r2
 8008a68:	75fb      	strb	r3, [r7, #23]
		VL53L5CX_UI_CMD_STATUS, 0xff, 2);
	status |= VL53L5CX_RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8008a6a:	6878      	ldr	r0, [r7, #4]
		p_dev->temp_buffer, VL53L5CX_NVM_DATA_SIZE);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
	status |= VL53L5CX_RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8008a72:	f44f 73f6 	mov.w	r3, #492	@ 0x1ec
 8008a76:	f642 4104 	movw	r1, #11268	@ 0x2c04
 8008a7a:	f7f8 ff05 	bl	8001888 <VL53L5CX_RdMulti>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	461a      	mov	r2, r3
 8008a82:	7dfb      	ldrb	r3, [r7, #23]
 8008a84:	4313      	orrs	r3, r2
 8008a86:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(p_dev->offset_data, p_dev->temp_buffer,
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f103 0010 	add.w	r0, r3, #16
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a94:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8008a98:	4619      	mov	r1, r3
 8008a9a:	f001 fcce 	bl	800a43a <memcpy>
		VL53L5CX_OFFSET_BUFFER_SIZE);
	status |= _vl53l5cx_send_offset_data(p_dev, VL53L5CX_RESOLUTION_4X4);
 8008a9e:	2110      	movs	r1, #16
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f7ff f8c7 	bl	8007c34 <_vl53l5cx_send_offset_data>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	7dfb      	ldrb	r3, [r7, #23]
 8008aac:	4313      	orrs	r3, r2
 8008aae:	75fb      	strb	r3, [r7, #23]

	/* Set default Xtalk shape. Send Xtalk to sensor */
	(void)memcpy(p_dev->xtalk_data, (uint8_t*)VL53L5CX_DEFAULT_XTALK,
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8008ab6:	4a34      	ldr	r2, [pc, #208]	@ (8008b88 <vl53l5cx_init+0x890>)
 8008ab8:	4618      	mov	r0, r3
 8008aba:	4611      	mov	r1, r2
 8008abc:	f44f 7342 	mov.w	r3, #776	@ 0x308
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	f001 fcba 	bl	800a43a <memcpy>
		VL53L5CX_XTALK_BUFFER_SIZE);
	status |= _vl53l5cx_send_xtalk_data(p_dev, VL53L5CX_RESOLUTION_4X4);
 8008ac6:	2110      	movs	r1, #16
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f7ff fa7f 	bl	8007fcc <_vl53l5cx_send_xtalk_data>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	7dfb      	ldrb	r3, [r7, #23]
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	75fb      	strb	r3, [r7, #23]

	/* Send default configuration to VL53L5CX firmware */
	status |= VL53L5CX_WrMulti(&(p_dev->platform), 0x2c34,
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	689a      	ldr	r2, [r3, #8]
 8008ade:	f44f 7373 	mov.w	r3, #972	@ 0x3cc
 8008ae2:	f642 4134 	movw	r1, #11316	@ 0x2c34
 8008ae6:	f7f8 feaf 	bl	8001848 <VL53L5CX_WrMulti>
 8008aea:	4603      	mov	r3, r0
 8008aec:	461a      	mov	r2, r3
 8008aee:	7dfb      	ldrb	r3, [r7, #23]
 8008af0:	4313      	orrs	r3, r2
 8008af2:	75fb      	strb	r3, [r7, #23]
		p_dev->default_configuration,
		sizeof(VL53L5CX_DEFAULT_CONFIGURATION));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8008af4:	2303      	movs	r3, #3
 8008af6:	9301      	str	r3, [sp, #4]
 8008af8:	23ff      	movs	r3, #255	@ 0xff
 8008afa:	9300      	str	r3, [sp, #0]
 8008afc:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8008b00:	2201      	movs	r2, #1
 8008b02:	2104      	movs	r1, #4
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f7ff f803 	bl	8007b10 <_vl53l5cx_poll_for_answer>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	7dfb      	ldrb	r3, [r7, #23]
 8008b10:	4313      	orrs	r3, r2
 8008b12:	75fb      	strb	r3, [r7, #23]
		VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)&pipe_ctrl,
 8008b14:	f107 0110 	add.w	r1, r7, #16
 8008b18:	2304      	movs	r3, #4
 8008b1a:	f64d 3280 	movw	r2, #56192	@ 0xdb80
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 fdde 	bl	80096e0 <vl53l5cx_dci_write_data>
 8008b24:	4603      	mov	r3, r0
 8008b26:	461a      	mov	r2, r3
 8008b28:	7dfb      	ldrb	r3, [r7, #23]
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	75fb      	strb	r3, [r7, #23]
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
		VL53L5CX_DCI_FW_NB_TARGET, 16,
	(uint8_t*)&tmp, 1, 0x0C);
#endif

	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 8008b2e:	f107 010c 	add.w	r1, r7, #12
 8008b32:	2304      	movs	r3, #4
 8008b34:	f64d 1264 	movw	r2, #55652	@ 0xd964
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f000 fdd1 	bl	80096e0 <vl53l5cx_dci_write_data>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	461a      	mov	r2, r3
 8008b42:	7dfb      	ldrb	r3, [r7, #23]
 8008b44:	4313      	orrs	r3, r2
 8008b46:	75fb      	strb	r3, [r7, #23]
			VL53L5CX_DCI_SINGLE_RANGE,
			(uint16_t)sizeof(single_range));

	tmp = (uint8_t)1;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	75bb      	strb	r3, [r7, #22]
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
 8008b52:	2326      	movs	r3, #38	@ 0x26
 8008b54:	9302      	str	r3, [sp, #8]
 8008b56:	2301      	movs	r3, #1
 8008b58:	9301      	str	r3, [sp, #4]
 8008b5a:	f107 0316 	add.w	r3, r7, #22
 8008b5e:	9300      	str	r3, [sp, #0]
 8008b60:	2328      	movs	r3, #40	@ 0x28
 8008b62:	f24e 1208 	movw	r2, #57608	@ 0xe108
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f000 fe58 	bl	800981c <vl53l5cx_dci_replace_data>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	461a      	mov	r2, r3
 8008b70:	7dfb      	ldrb	r3, [r7, #23]
 8008b72:	4313      	orrs	r3, r2
 8008b74:	e00a      	b.n	8008b8c <vl53l5cx_init+0x894>
 8008b76:	bf00      	nop
 8008b78:	0800c9d8 	.word	0x0800c9d8
 8008b7c:	080149d8 	.word	0x080149d8
 8008b80:	0801c9d8 	.word	0x0801c9d8
 8008b84:	080220ac 	.word	0x080220ac
 8008b88:	08021da4 	.word	0x08021da4
 8008b8c:	75fb      	strb	r3, [r7, #23]
			VL53L5CX_GLARE_FILTER, 40, (uint8_t*)&tmp, 1, 0x26);
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
 8008b94:	2325      	movs	r3, #37	@ 0x25
 8008b96:	9302      	str	r3, [sp, #8]
 8008b98:	2301      	movs	r3, #1
 8008b9a:	9301      	str	r3, [sp, #4]
 8008b9c:	f107 0316 	add.w	r3, r7, #22
 8008ba0:	9300      	str	r3, [sp, #0]
 8008ba2:	2328      	movs	r3, #40	@ 0x28
 8008ba4:	f24e 1208 	movw	r2, #57608	@ 0xe108
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 fe37 	bl	800981c <vl53l5cx_dci_replace_data>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	7dfb      	ldrb	r3, [r7, #23]
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	75fb      	strb	r3, [r7, #23]
 8008bb8:	e004      	b.n	8008bc4 <vl53l5cx_init+0x8cc>
		goto exit;
 8008bba:	bf00      	nop
 8008bbc:	e002      	b.n	8008bc4 <vl53l5cx_init+0x8cc>
		goto exit;
 8008bbe:	bf00      	nop
 8008bc0:	e000      	b.n	8008bc4 <vl53l5cx_init+0x8cc>
		goto exit;
 8008bc2:	bf00      	nop
			VL53L5CX_GLARE_FILTER, 40, (uint8_t*)&tmp, 1, 0x25);

exit:
	return status;
 8008bc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3718      	adds	r7, #24
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
 8008bce:	bf00      	nop

08008bd0 <vl53l5cx_start_ranging>:
	return status;
}

uint8_t vl53l5cx_start_ranging(
		VL53L5CX_Configuration		*p_dev)
{
 8008bd0:	b5b0      	push	{r4, r5, r7, lr}
 8008bd2:	b09c      	sub	sp, #112	@ 0x70
 8008bd4:	af02      	add	r7, sp, #8
 8008bd6:	6078      	str	r0, [r7, #4]
	uint8_t resolution, status = VL53L5CX_STATUS_OK;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	uint16_t tmp;
	uint32_t i;
	uint32_t header_config[2] = {0, 0};
 8008bde:	2300      	movs	r3, #0
 8008be0:	653b      	str	r3, [r7, #80]	@ 0x50
 8008be2:	2300      	movs	r3, #0
 8008be4:	657b      	str	r3, [r7, #84]	@ 0x54

	union Block_header *bh_ptr;
	uint8_t cmd[] = {0x00, 0x03, 0x00, 0x00};
 8008be6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8008bea:	64fb      	str	r3, [r7, #76]	@ 0x4c

	status |= vl53l5cx_get_resolution(p_dev, &resolution);
 8008bec:	f107 035b 	add.w	r3, r7, #91	@ 0x5b
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f000 fbd0 	bl	8009398 <vl53l5cx_get_resolution>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008c00:	4313      	orrs	r3, r2
 8008c02:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	p_dev->data_read_size = 0;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	605a      	str	r2, [r3, #4]
	p_dev->streamcount = 255;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	22ff      	movs	r2, #255	@ 0xff
 8008c10:	709a      	strb	r2, [r3, #2]

	/* Enable mandatory output (meta and common data) */
	uint32_t output_bh_enable[] = {
 8008c12:	4baa      	ldr	r3, [pc, #680]	@ (8008ebc <vl53l5cx_start_ranging+0x2ec>)
 8008c14:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8008c18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008c1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00000000U,
		0x00000000U,
		0xC0000000U};

	/* Send addresses of possible output */
	uint32_t output[] ={VL53L5CX_START_BH,
 8008c1e:	4ba8      	ldr	r3, [pc, #672]	@ (8008ec0 <vl53l5cx_start_ranging+0x2f0>)
 8008c20:	f107 040c 	add.w	r4, r7, #12
 8008c24:	461d      	mov	r5, r3
 8008c26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008c28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008c2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c2e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008c32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		VL53L5CX_TARGET_STATUS_BH,
		VL53L5CX_MOTION_DETECT_BH};

	/* Enable selected outputs in the 'platform.h' file */
#ifndef VL53L5CX_DISABLE_AMBIENT_PER_SPAD
	output_bh_enable[0] += (uint32_t)8;
 8008c36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c38:	3308      	adds	r3, #8
 8008c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_NB_SPADS_ENABLED
	output_bh_enable[0] += (uint32_t)16;
 8008c3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c3e:	3310      	adds	r3, #16
 8008c40:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_NB_TARGET_DETECTED
	output_bh_enable[0] += (uint32_t)32;
 8008c42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c44:	3320      	adds	r3, #32
 8008c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_SIGNAL_PER_SPAD
	output_bh_enable[0] += (uint32_t)64;
 8008c48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c4a:	3340      	adds	r3, #64	@ 0x40
 8008c4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_RANGE_SIGMA_MM
	output_bh_enable[0] += (uint32_t)128;
 8008c4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c50:	3380      	adds	r3, #128	@ 0x80
 8008c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_DISTANCE_MM
	output_bh_enable[0] += (uint32_t)256;
 8008c54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c56:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8008c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_REFLECTANCE_PERCENT
	output_bh_enable[0] += (uint32_t)512;
 8008c5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c5e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8008c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_TARGET_STATUS
	output_bh_enable[0] += (uint32_t)1024;
 8008c64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c66:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_MOTION_INDICATOR
	output_bh_enable[0] += (uint32_t)2048;
 8008c6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif

	/* Update data size */
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 8008c74:	2300      	movs	r3, #0
 8008c76:	663b      	str	r3, [r7, #96]	@ 0x60
 8008c78:	e073      	b.n	8008d62 <vl53l5cx_start_ranging+0x192>
	{
		if ((output[i] == (uint8_t)0) 
 8008c7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008c7c:	009b      	lsls	r3, r3, #2
 8008c7e:	3368      	adds	r3, #104	@ 0x68
 8008c80:	443b      	add	r3, r7
 8008c82:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d067      	beq.n	8008d5a <vl53l5cx_start_ranging+0x18a>
                    || ((output_bh_enable[i/(uint32_t)32]
 8008c8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008c8c:	095b      	lsrs	r3, r3, #5
 8008c8e:	009b      	lsls	r3, r3, #2
 8008c90:	3368      	adds	r3, #104	@ 0x68
 8008c92:	443b      	add	r3, r7
 8008c94:	f853 2c2c 	ldr.w	r2, [r3, #-44]
                         &((uint32_t)1 << (i%(uint32_t)32))) == (uint32_t)0))
 8008c98:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008c9a:	f003 031f 	and.w	r3, r3, #31
 8008c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8008ca2:	f003 0301 	and.w	r3, r3, #1
                    || ((output_bh_enable[i/(uint32_t)32]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d057      	beq.n	8008d5a <vl53l5cx_start_ranging+0x18a>
		{
			continue;
		}

		bh_ptr = (union Block_header *)&(output[i]);
 8008caa:	f107 020c 	add.w	r2, r7, #12
 8008cae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008cb0:	009b      	lsls	r3, r3, #2
 8008cb2:	4413      	add	r3, r2
 8008cb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
		if (((uint8_t)bh_ptr->type >= (uint8_t)0x1) 
 8008cb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008cb8:	781b      	ldrb	r3, [r3, #0]
 8008cba:	f003 030f 	and.w	r3, r3, #15
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d03a      	beq.n	8008d3a <vl53l5cx_start_ranging+0x16a>
                    && ((uint8_t)bh_ptr->type < (uint8_t)0x0d))
 8008cc4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008ccc:	b2db      	uxtb	r3, r3
 8008cce:	2b0c      	cmp	r3, #12
 8008cd0:	d833      	bhi.n	8008d3a <vl53l5cx_start_ranging+0x16a>
		{
			if ((bh_ptr->idx >= (uint16_t)0x54d0) 
 8008cd2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008cd4:	885b      	ldrh	r3, [r3, #2]
 8008cd6:	f245 42cf 	movw	r2, #21711	@ 0x54cf
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d910      	bls.n	8008d00 <vl53l5cx_start_ranging+0x130>
                            && (bh_ptr->idx < (uint16_t)(0x54d0 + 960)))
 8008cde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008ce0:	885b      	ldrh	r3, [r3, #2]
 8008ce2:	f645 028f 	movw	r2, #22671	@ 0x588f
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d80a      	bhi.n	8008d00 <vl53l5cx_start_ranging+0x130>
			{
				bh_ptr->size = resolution;
 8008cea:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8008cee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008cf2:	b299      	uxth	r1, r3
 8008cf4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008cf6:	8813      	ldrh	r3, [r2, #0]
 8008cf8:	f361 130f 	bfi	r3, r1, #4, #12
 8008cfc:	8013      	strh	r3, [r2, #0]
 8008cfe:	e009      	b.n	8008d14 <vl53l5cx_start_ranging+0x144>
			}
			else
			{
				bh_ptr->size = (uint16_t)((uint16_t)resolution
 8008d00:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8008d04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d08:	b299      	uxth	r1, r3
 8008d0a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008d0c:	8813      	ldrh	r3, [r2, #0]
 8008d0e:	f361 130f 	bfi	r3, r1, #4, #12
 8008d12:	8013      	strh	r3, [r2, #0]
                                  * (uint16_t)VL53L5CX_NB_TARGET_PER_ZONE);
			}
			p_dev->data_read_size += bh_ptr->type * bh_ptr->size;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008d1a:	7812      	ldrb	r2, [r2, #0]
 8008d1c:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8008d20:	b2d2      	uxtb	r2, r2
 8008d22:	4611      	mov	r1, r2
 8008d24:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008d26:	8812      	ldrh	r2, [r2, #0]
 8008d28:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8008d2c:	b292      	uxth	r2, r2
 8008d2e:	fb01 f202 	mul.w	r2, r1, r2
 8008d32:	441a      	add	r2, r3
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	605a      	str	r2, [r3, #4]
 8008d38:	e009      	b.n	8008d4e <vl53l5cx_start_ranging+0x17e>
		}
		else
		{
			p_dev->data_read_size += bh_ptr->size;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008d40:	8812      	ldrh	r2, [r2, #0]
 8008d42:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8008d46:	b292      	uxth	r2, r2
 8008d48:	441a      	add	r2, r3
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	605a      	str	r2, [r3, #4]
		}
		p_dev->data_read_size += (uint32_t)4;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	1d1a      	adds	r2, r3, #4
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	605a      	str	r2, [r3, #4]
 8008d58:	e000      	b.n	8008d5c <vl53l5cx_start_ranging+0x18c>
			continue;
 8008d5a:	bf00      	nop
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 8008d5c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008d5e:	3301      	adds	r3, #1
 8008d60:	663b      	str	r3, [r7, #96]	@ 0x60
 8008d62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008d64:	2b0b      	cmp	r3, #11
 8008d66:	d988      	bls.n	8008c7a <vl53l5cx_start_ranging+0xaa>
	}
	p_dev->data_read_size += (uint32_t)24;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	f103 0218 	add.w	r2, r3, #24
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	605a      	str	r2, [r3, #4]

	status |= vl53l5cx_dci_write_data(p_dev,
 8008d74:	f107 010c 	add.w	r1, r7, #12
 8008d78:	2330      	movs	r3, #48	@ 0x30
 8008d7a:	f64d 1280 	movw	r2, #55680	@ 0xd980
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 fcae 	bl	80096e0 <vl53l5cx_dci_write_data>
 8008d84:	4603      	mov	r3, r0
 8008d86:	461a      	mov	r2, r3
 8008d88:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008d8c:	4313      	orrs	r3, r2
 8008d8e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint8_t*)&(output), VL53L5CX_DCI_OUTPUT_LIST,
			(uint16_t)sizeof(output));

	header_config[0] = p_dev->data_read_size;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	653b      	str	r3, [r7, #80]	@ 0x50
	header_config[1] = i + (uint32_t)1;
 8008d98:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	657b      	str	r3, [r7, #84]	@ 0x54

	status |= vl53l5cx_dci_write_data(p_dev,
 8008d9e:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8008da2:	2308      	movs	r3, #8
 8008da4:	f64d 1268 	movw	r2, #55656	@ 0xd968
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f000 fc99 	bl	80096e0 <vl53l5cx_dci_write_data>
 8008dae:	4603      	mov	r3, r0
 8008db0:	461a      	mov	r2, r3
 8008db2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008db6:	4313      	orrs	r3, r2
 8008db8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint8_t*)&(header_config), VL53L5CX_DCI_OUTPUT_CONFIG,
			(uint16_t)sizeof(header_config));

	status |= vl53l5cx_dci_write_data(p_dev,
 8008dbc:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8008dc0:	2310      	movs	r3, #16
 8008dc2:	f64d 1270 	movw	r2, #55664	@ 0xd970
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 fc8a 	bl	80096e0 <vl53l5cx_dci_write_data>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	461a      	mov	r2, r3
 8008dd0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint8_t*)&(output_bh_enable), VL53L5CX_DCI_OUTPUT_ENABLES,
			(uint16_t)sizeof(output_bh_enable));

	/* Start xshut bypass (interrupt mode) */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8008de2:	4618      	mov	r0, r3
 8008de4:	f7f8 fd10 	bl	8001808 <VL53L5CX_WrByte>
 8008de8:	4603      	mov	r3, r0
 8008dea:	461a      	mov	r2, r3
 8008dec:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008df0:	4313      	orrs	r3, r2
 8008df2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x09, 0x05);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2205      	movs	r2, #5
 8008dfa:	2109      	movs	r1, #9
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f7f8 fd03 	bl	8001808 <VL53L5CX_WrByte>
 8008e02:	4603      	mov	r3, r0
 8008e04:	461a      	mov	r2, r3
 8008e06:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2202      	movs	r2, #2
 8008e14:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f7f8 fcf5 	bl	8001808 <VL53L5CX_WrByte>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	461a      	mov	r2, r3
 8008e22:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008e26:	4313      	orrs	r3, r2
 8008e28:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

	/* Start ranging session */
	status |= VL53L5CX_WrMulti(&(p_dev->platform), VL53L5CX_UI_CMD_END -
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8008e32:	2304      	movs	r3, #4
 8008e34:	f642 71fc 	movw	r1, #12284	@ 0x2ffc
 8008e38:	f7f8 fd06 	bl	8001848 <VL53L5CX_WrMulti>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	461a      	mov	r2, r3
 8008e40:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008e44:	4313      	orrs	r3, r2
 8008e46:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint16_t)(4 - 1), (uint8_t*)cmd, sizeof(cmd));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8008e4a:	2303      	movs	r3, #3
 8008e4c:	9301      	str	r3, [sp, #4]
 8008e4e:	23ff      	movs	r3, #255	@ 0xff
 8008e50:	9300      	str	r3, [sp, #0]
 8008e52:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8008e56:	2201      	movs	r2, #1
 8008e58:	2104      	movs	r1, #4
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f7fe fe58 	bl	8007b10 <_vl53l5cx_poll_for_answer>
 8008e60:	4603      	mov	r3, r0
 8008e62:	461a      	mov	r2, r3
 8008e64:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	/* Read ui range data content and compare if data size is the correct one */
	status |= vl53l5cx_dci_read_data(p_dev,
			(uint8_t*)p_dev->temp_buffer, 0x5440, 12);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
	status |= vl53l5cx_dci_read_data(p_dev,
 8008e74:	230c      	movs	r3, #12
 8008e76:	f245 4240 	movw	r2, #21568	@ 0x5440
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f000 fba6 	bl	80095cc <vl53l5cx_dci_read_data>
 8008e80:	4603      	mov	r3, r0
 8008e82:	461a      	mov	r2, r3
 8008e84:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	(void)memcpy(&tmp, &(p_dev->temp_buffer[0x8]), sizeof(tmp));
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8008e94:	881b      	ldrh	r3, [r3, #0]
 8008e96:	b29b      	uxth	r3, r3
 8008e98:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
	if(tmp != p_dev->data_read_size)
 8008e9c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	685b      	ldr	r3, [r3, #4]
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	d002      	beq.n	8008eb0 <vl53l5cx_start_ranging+0x2e0>
	{
		status |= VL53L5CX_STATUS_ERROR;
 8008eaa:	23ff      	movs	r3, #255	@ 0xff
 8008eac:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	}

	return status;
 8008eb0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3768      	adds	r7, #104	@ 0x68
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bdb0      	pop	{r4, r5, r7, pc}
 8008ebc:	0800c944 	.word	0x0800c944
 8008ec0:	0800c954 	.word	0x0800c954

08008ec4 <vl53l5cx_check_data_ready>:
}

uint8_t vl53l5cx_check_data_ready(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*p_isReady)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b084      	sub	sp, #16
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	73fb      	strb	r3, [r7, #15]

	status |= VL53L5CX_RdMulti(&(p_dev->platform), 0x0, p_dev->temp_buffer, 4);
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
 8008eda:	2304      	movs	r3, #4
 8008edc:	2100      	movs	r1, #0
 8008ede:	f7f8 fcd3 	bl	8001888 <VL53L5CX_RdMulti>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	7bfb      	ldrb	r3, [r7, #15]
 8008ee8:	4313      	orrs	r3, r2
 8008eea:	73fb      	strb	r3, [r7, #15]

	if((p_dev->temp_buffer[0] != p_dev->streamcount)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f893 2500 	ldrb.w	r2, [r3, #1280]	@ 0x500
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	789b      	ldrb	r3, [r3, #2]
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	d020      	beq.n	8008f3c <vl53l5cx_check_data_ready+0x78>
			&& (p_dev->temp_buffer[0] != (uint8_t)255)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
 8008f00:	2bff      	cmp	r3, #255	@ 0xff
 8008f02:	d01b      	beq.n	8008f3c <vl53l5cx_check_data_ready+0x78>
			&& (p_dev->temp_buffer[1] == (uint8_t)0x5)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f893 3501 	ldrb.w	r3, [r3, #1281]	@ 0x501
 8008f0a:	2b05      	cmp	r3, #5
 8008f0c:	d116      	bne.n	8008f3c <vl53l5cx_check_data_ready+0x78>
			&& ((p_dev->temp_buffer[2] & (uint8_t)0x5) == (uint8_t)0x5)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f893 3502 	ldrb.w	r3, [r3, #1282]	@ 0x502
 8008f14:	f003 0305 	and.w	r3, r3, #5
 8008f18:	2b05      	cmp	r3, #5
 8008f1a:	d10f      	bne.n	8008f3c <vl53l5cx_check_data_ready+0x78>
			&& ((p_dev->temp_buffer[3] & (uint8_t)0x10) ==(uint8_t)0x10)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f893 3503 	ldrb.w	r3, [r3, #1283]	@ 0x503
 8008f22:	f003 0310 	and.w	r3, r3, #16
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d008      	beq.n	8008f3c <vl53l5cx_check_data_ready+0x78>
			)
	{
		*p_isReady = (uint8_t)1;
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	2201      	movs	r2, #1
 8008f2e:	701a      	strb	r2, [r3, #0]
		 p_dev->streamcount = p_dev->temp_buffer[0];
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f893 2500 	ldrb.w	r2, [r3, #1280]	@ 0x500
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	709a      	strb	r2, [r3, #2]
 8008f3a:	e00e      	b.n	8008f5a <vl53l5cx_check_data_ready+0x96>
	}
	else
	{
        if ((p_dev->temp_buffer[3] & (uint8_t)0x80) != (uint8_t)0)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f893 3503 	ldrb.w	r3, [r3, #1283]	@ 0x503
 8008f42:	b25b      	sxtb	r3, r3
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	da05      	bge.n	8008f54 <vl53l5cx_check_data_ready+0x90>
        {
        	status |= p_dev->temp_buffer[2];	/* Return GO2 error status */
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f893 2502 	ldrb.w	r2, [r3, #1282]	@ 0x502
 8008f4e:	7bfb      	ldrb	r3, [r7, #15]
 8008f50:	4313      	orrs	r3, r2
 8008f52:	73fb      	strb	r3, [r7, #15]
        }

		*p_isReady = 0;
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	2200      	movs	r2, #0
 8008f58:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8008f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3710      	adds	r7, #16
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <vl53l5cx_get_ranging_data>:

uint8_t vl53l5cx_get_ranging_data(
		VL53L5CX_Configuration		*p_dev,
		VL53L5CX_ResultsData		*p_results)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b088      	sub	sp, #32
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	77fb      	strb	r3, [r7, #31]
	union Block_header *bh_ptr;
	uint16_t header_id, footer_id;
	uint32_t i, j, msize;

	status |= VL53L5CX_RdMulti(&(p_dev->platform), 0x0,
 8008f72:	6878      	ldr	r0, [r7, #4]
			p_dev->temp_buffer, p_dev->data_read_size);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
	status |= VL53L5CX_RdMulti(&(p_dev->platform), 0x0,
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	2100      	movs	r1, #0
 8008f80:	f7f8 fc82 	bl	8001888 <VL53L5CX_RdMulti>
 8008f84:	4603      	mov	r3, r0
 8008f86:	461a      	mov	r2, r3
 8008f88:	7ffb      	ldrb	r3, [r7, #31]
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	77fb      	strb	r3, [r7, #31]
	p_dev->streamcount = p_dev->temp_buffer[0];
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f893 2500 	ldrb.w	r2, [r3, #1280]	@ 0x500
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	709a      	strb	r2, [r3, #2]
	VL53L5CX_SwapBuffer(p_dev->temp_buffer, (uint16_t)p_dev->data_read_size);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	b29b      	uxth	r3, r3
 8008fa4:	4619      	mov	r1, r3
 8008fa6:	4610      	mov	r0, r2
 8008fa8:	f7f8 fcae 	bl	8001908 <VL53L5CX_SwapBuffer>

	/* Start conversion at position 16 to avoid headers */
	for (i = (uint32_t)16; i 
 8008fac:	2310      	movs	r3, #16
 8008fae:	61bb      	str	r3, [r7, #24]
 8008fb0:	e10e      	b.n	80091d0 <vl53l5cx_get_ranging_data+0x26c>
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
	{
		bh_ptr = (union Block_header *)&(p_dev->temp_buffer[i]);
 8008fb2:	69bb      	ldr	r3, [r7, #24]
 8008fb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008fb8:	687a      	ldr	r2, [r7, #4]
 8008fba:	4413      	add	r3, r2
 8008fbc:	60bb      	str	r3, [r7, #8]
		if ((bh_ptr->type > (uint32_t)0x1) 
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008fc6:	b2db      	uxtb	r3, r3
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	d915      	bls.n	8008ff8 <vl53l5cx_get_ranging_data+0x94>
                    && (bh_ptr->type < (uint32_t)0xd))
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008fd4:	b2db      	uxtb	r3, r3
 8008fd6:	2b0c      	cmp	r3, #12
 8008fd8:	d80e      	bhi.n	8008ff8 <vl53l5cx_get_ranging_data+0x94>
		{
			msize = bh_ptr->type * bh_ptr->size;
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	781b      	ldrb	r3, [r3, #0]
 8008fde:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008fe2:	b2db      	uxtb	r3, r3
 8008fe4:	461a      	mov	r2, r3
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	881b      	ldrh	r3, [r3, #0]
 8008fea:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8008fee:	b29b      	uxth	r3, r3
 8008ff0:	fb02 f303 	mul.w	r3, r2, r3
 8008ff4:	613b      	str	r3, [r7, #16]
 8008ff6:	e005      	b.n	8009004 <vl53l5cx_get_ranging_data+0xa0>
		}
		else
		{
			msize = bh_ptr->size;
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	881b      	ldrh	r3, [r3, #0]
 8008ffc:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8009000:	b29b      	uxth	r3, r3
 8009002:	613b      	str	r3, [r7, #16]
		}

		switch(bh_ptr->idx){
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	885b      	ldrh	r3, [r3, #2]
 8009008:	f24e 0284 	movw	r2, #57476	@ 0xe084
 800900c:	4293      	cmp	r3, r2
 800900e:	f000 80bb 	beq.w	8009188 <vl53l5cx_get_ranging_data+0x224>
 8009012:	f24e 0284 	movw	r2, #57476	@ 0xe084
 8009016:	4293      	cmp	r3, r2
 8009018:	f300 80d2 	bgt.w	80091c0 <vl53l5cx_get_ranging_data+0x25c>
 800901c:	f24e 0244 	movw	r2, #57412	@ 0xe044
 8009020:	4293      	cmp	r3, r2
 8009022:	f000 80a3 	beq.w	800916c <vl53l5cx_get_ranging_data+0x208>
 8009026:	f24e 0244 	movw	r2, #57412	@ 0xe044
 800902a:	4293      	cmp	r3, r2
 800902c:	f300 80c8 	bgt.w	80091c0 <vl53l5cx_get_ranging_data+0x25c>
 8009030:	f64d 7244 	movw	r2, #57156	@ 0xdf44
 8009034:	4293      	cmp	r3, r2
 8009036:	f000 808b 	beq.w	8009150 <vl53l5cx_get_ranging_data+0x1ec>
 800903a:	f64d 7244 	movw	r2, #57156	@ 0xdf44
 800903e:	4293      	cmp	r3, r2
 8009040:	f300 80be 	bgt.w	80091c0 <vl53l5cx_get_ranging_data+0x25c>
 8009044:	f64d 62c4 	movw	r2, #57028	@ 0xdec4
 8009048:	4293      	cmp	r3, r2
 800904a:	d073      	beq.n	8009134 <vl53l5cx_get_ranging_data+0x1d0>
 800904c:	f64d 62c4 	movw	r2, #57028	@ 0xdec4
 8009050:	4293      	cmp	r3, r2
 8009052:	f300 80b5 	bgt.w	80091c0 <vl53l5cx_get_ranging_data+0x25c>
 8009056:	f64d 32c4 	movw	r2, #56260	@ 0xdbc4
 800905a:	4293      	cmp	r3, r2
 800905c:	d05c      	beq.n	8009118 <vl53l5cx_get_ranging_data+0x1b4>
 800905e:	f64d 32c4 	movw	r2, #56260	@ 0xdbc4
 8009062:	4293      	cmp	r3, r2
 8009064:	f300 80ac 	bgt.w	80091c0 <vl53l5cx_get_ranging_data+0x25c>
 8009068:	f64d 3284 	movw	r2, #56196	@ 0xdb84
 800906c:	4293      	cmp	r3, r2
 800906e:	d045      	beq.n	80090fc <vl53l5cx_get_ranging_data+0x198>
 8009070:	f64d 3284 	movw	r2, #56196	@ 0xdb84
 8009074:	4293      	cmp	r3, r2
 8009076:	f300 80a3 	bgt.w	80091c0 <vl53l5cx_get_ranging_data+0x25c>
 800907a:	f64d 0258 	movw	r2, #55384	@ 0xd858
 800907e:	4293      	cmp	r3, r2
 8009080:	f000 8090 	beq.w	80091a4 <vl53l5cx_get_ranging_data+0x240>
 8009084:	f64d 0258 	movw	r2, #55384	@ 0xd858
 8009088:	4293      	cmp	r3, r2
 800908a:	f300 8099 	bgt.w	80091c0 <vl53l5cx_get_ranging_data+0x25c>
 800908e:	f245 52d0 	movw	r2, #21968	@ 0x55d0
 8009092:	4293      	cmp	r3, r2
 8009094:	d024      	beq.n	80090e0 <vl53l5cx_get_ranging_data+0x17c>
 8009096:	f245 52d0 	movw	r2, #21968	@ 0x55d0
 800909a:	4293      	cmp	r3, r2
 800909c:	f300 8090 	bgt.w	80091c0 <vl53l5cx_get_ranging_data+0x25c>
 80090a0:	f245 42b4 	movw	r2, #21684	@ 0x54b4
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d004      	beq.n	80090b2 <vl53l5cx_get_ranging_data+0x14e>
 80090a8:	f245 42d0 	movw	r2, #21712	@ 0x54d0
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d00a      	beq.n	80090c6 <vl53l5cx_get_ranging_data+0x162>
				(void)memcpy(&p_results->motion_indicator,
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
				break;
#endif
			default:
				break;
 80090b0:	e086      	b.n	80091c0 <vl53l5cx_get_ranging_data+0x25c>
						(int8_t)p_dev->temp_buffer[i + (uint32_t)12];
 80090b2:	69bb      	ldr	r3, [r7, #24]
 80090b4:	330c      	adds	r3, #12
 80090b6:	687a      	ldr	r2, [r7, #4]
 80090b8:	4413      	add	r3, r2
 80090ba:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
 80090be:	b25a      	sxtb	r2, r3
				p_results->silicon_temp_degc =
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	701a      	strb	r2, [r3, #0]
				break;
 80090c4:	e07d      	b.n	80091c2 <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->ambient_per_spad,
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	1d18      	adds	r0, r3, #4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80090ca:	69bb      	ldr	r3, [r7, #24]
 80090cc:	3304      	adds	r3, #4
 80090ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090d2:	687a      	ldr	r2, [r7, #4]
 80090d4:	4413      	add	r3, r2
				(void)memcpy(p_results->ambient_per_spad,
 80090d6:	693a      	ldr	r2, [r7, #16]
 80090d8:	4619      	mov	r1, r3
 80090da:	f001 f9ae 	bl	800a43a <memcpy>
				break;
 80090de:	e070      	b.n	80091c2 <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->nb_spads_enabled,
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80090e6:	69bb      	ldr	r3, [r7, #24]
 80090e8:	3304      	adds	r3, #4
 80090ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090ee:	687a      	ldr	r2, [r7, #4]
 80090f0:	4413      	add	r3, r2
				(void)memcpy(p_results->nb_spads_enabled,
 80090f2:	693a      	ldr	r2, [r7, #16]
 80090f4:	4619      	mov	r1, r3
 80090f6:	f001 f9a0 	bl	800a43a <memcpy>
				break;
 80090fa:	e062      	b.n	80091c2 <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->nb_target_detected,
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	f503 7082 	add.w	r0, r3, #260	@ 0x104
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8009102:	69bb      	ldr	r3, [r7, #24]
 8009104:	3304      	adds	r3, #4
 8009106:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800910a:	687a      	ldr	r2, [r7, #4]
 800910c:	4413      	add	r3, r2
				(void)memcpy(p_results->nb_target_detected,
 800910e:	693a      	ldr	r2, [r7, #16]
 8009110:	4619      	mov	r1, r3
 8009112:	f001 f992 	bl	800a43a <memcpy>
				break;
 8009116:	e054      	b.n	80091c2 <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->signal_per_spad,
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	f503 7011 	add.w	r0, r3, #580	@ 0x244
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800911e:	69bb      	ldr	r3, [r7, #24]
 8009120:	3304      	adds	r3, #4
 8009122:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009126:	687a      	ldr	r2, [r7, #4]
 8009128:	4413      	add	r3, r2
				(void)memcpy(p_results->signal_per_spad,
 800912a:	693a      	ldr	r2, [r7, #16]
 800912c:	4619      	mov	r1, r3
 800912e:	f001 f984 	bl	800a43a <memcpy>
				break;
 8009132:	e046      	b.n	80091c2 <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->range_sigma_mm,
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	f503 7051 	add.w	r0, r3, #836	@ 0x344
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800913a:	69bb      	ldr	r3, [r7, #24]
 800913c:	3304      	adds	r3, #4
 800913e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009142:	687a      	ldr	r2, [r7, #4]
 8009144:	4413      	add	r3, r2
				(void)memcpy(p_results->range_sigma_mm,
 8009146:	693a      	ldr	r2, [r7, #16]
 8009148:	4619      	mov	r1, r3
 800914a:	f001 f976 	bl	800a43a <memcpy>
				break;
 800914e:	e038      	b.n	80091c2 <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->distance_mm,
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	f503 7071 	add.w	r0, r3, #964	@ 0x3c4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8009156:	69bb      	ldr	r3, [r7, #24]
 8009158:	3304      	adds	r3, #4
 800915a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800915e:	687a      	ldr	r2, [r7, #4]
 8009160:	4413      	add	r3, r2
				(void)memcpy(p_results->distance_mm,
 8009162:	693a      	ldr	r2, [r7, #16]
 8009164:	4619      	mov	r1, r3
 8009166:	f001 f968 	bl	800a43a <memcpy>
				break;
 800916a:	e02a      	b.n	80091c2 <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->reflectance,
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	f203 4044 	addw	r0, r3, #1092	@ 0x444
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8009172:	69bb      	ldr	r3, [r7, #24]
 8009174:	3304      	adds	r3, #4
 8009176:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800917a:	687a      	ldr	r2, [r7, #4]
 800917c:	4413      	add	r3, r2
				(void)memcpy(p_results->reflectance,
 800917e:	693a      	ldr	r2, [r7, #16]
 8009180:	4619      	mov	r1, r3
 8009182:	f001 f95a 	bl	800a43a <memcpy>
				break;
 8009186:	e01c      	b.n	80091c2 <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->target_status,
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	f203 4084 	addw	r0, r3, #1156	@ 0x484
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800918e:	69bb      	ldr	r3, [r7, #24]
 8009190:	3304      	adds	r3, #4
 8009192:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009196:	687a      	ldr	r2, [r7, #4]
 8009198:	4413      	add	r3, r2
				(void)memcpy(p_results->target_status,
 800919a:	693a      	ldr	r2, [r7, #16]
 800919c:	4619      	mov	r1, r3
 800919e:	f001 f94c 	bl	800a43a <memcpy>
				break;
 80091a2:	e00e      	b.n	80091c2 <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(&p_results->motion_indicator,
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	f203 40c4 	addw	r0, r3, #1220	@ 0x4c4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80091aa:	69bb      	ldr	r3, [r7, #24]
 80091ac:	3304      	adds	r3, #4
 80091ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091b2:	687a      	ldr	r2, [r7, #4]
 80091b4:	4413      	add	r3, r2
				(void)memcpy(&p_results->motion_indicator,
 80091b6:	693a      	ldr	r2, [r7, #16]
 80091b8:	4619      	mov	r1, r3
 80091ba:	f001 f93e 	bl	800a43a <memcpy>
				break;
 80091be:	e000      	b.n	80091c2 <vl53l5cx_get_ranging_data+0x25e>
				break;
 80091c0:	bf00      	nop
		}
		i += msize;
 80091c2:	69ba      	ldr	r2, [r7, #24]
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	4413      	add	r3, r2
 80091c8:	61bb      	str	r3, [r7, #24]
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
 80091ca:	69bb      	ldr	r3, [r7, #24]
 80091cc:	3304      	adds	r3, #4
 80091ce:	61bb      	str	r3, [r7, #24]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	685b      	ldr	r3, [r3, #4]
 80091d4:	69ba      	ldr	r2, [r7, #24]
 80091d6:	429a      	cmp	r2, r3
 80091d8:	f4ff aeeb 	bcc.w	8008fb2 <vl53l5cx_get_ranging_data+0x4e>

#ifndef VL53L5CX_USE_RAW_FORMAT

	/* Convert data into their real format */
#ifndef VL53L5CX_DISABLE_AMBIENT_PER_SPAD
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 80091dc:	2300      	movs	r3, #0
 80091de:	61bb      	str	r3, [r7, #24]
 80091e0:	e00d      	b.n	80091fe <vl53l5cx_get_ranging_data+0x29a>
	{
		p_results->ambient_per_spad[i] /= (uint32_t)2048;
 80091e2:	683a      	ldr	r2, [r7, #0]
 80091e4:	69bb      	ldr	r3, [r7, #24]
 80091e6:	009b      	lsls	r3, r3, #2
 80091e8:	4413      	add	r3, r2
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	0ada      	lsrs	r2, r3, #11
 80091ee:	6839      	ldr	r1, [r7, #0]
 80091f0:	69bb      	ldr	r3, [r7, #24]
 80091f2:	009b      	lsls	r3, r3, #2
 80091f4:	440b      	add	r3, r1
 80091f6:	605a      	str	r2, [r3, #4]
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 80091f8:	69bb      	ldr	r3, [r7, #24]
 80091fa:	3301      	adds	r3, #1
 80091fc:	61bb      	str	r3, [r7, #24]
 80091fe:	69bb      	ldr	r3, [r7, #24]
 8009200:	2b3f      	cmp	r3, #63	@ 0x3f
 8009202:	d9ee      	bls.n	80091e2 <vl53l5cx_get_ranging_data+0x27e>
	}
#endif

	for(i = 0; i < (uint32_t)(VL53L5CX_RESOLUTION_8X8
 8009204:	2300      	movs	r3, #0
 8009206:	61bb      	str	r3, [r7, #24]
 8009208:	e056      	b.n	80092b8 <vl53l5cx_get_ranging_data+0x354>
			*VL53L5CX_NB_TARGET_PER_ZONE); i++)
	{
#ifndef VL53L5CX_DISABLE_DISTANCE_MM
		p_results->distance_mm[i] /= 4;
 800920a:	683a      	ldr	r2, [r7, #0]
 800920c:	69bb      	ldr	r3, [r7, #24]
 800920e:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8009212:	005b      	lsls	r3, r3, #1
 8009214:	4413      	add	r3, r2
 8009216:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800921a:	2b00      	cmp	r3, #0
 800921c:	da00      	bge.n	8009220 <vl53l5cx_get_ranging_data+0x2bc>
 800921e:	3303      	adds	r3, #3
 8009220:	109b      	asrs	r3, r3, #2
 8009222:	b219      	sxth	r1, r3
 8009224:	683a      	ldr	r2, [r7, #0]
 8009226:	69bb      	ldr	r3, [r7, #24]
 8009228:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 800922c:	005b      	lsls	r3, r3, #1
 800922e:	4413      	add	r3, r2
 8009230:	460a      	mov	r2, r1
 8009232:	809a      	strh	r2, [r3, #4]
		if(p_results->distance_mm[i] < 0)
 8009234:	683a      	ldr	r2, [r7, #0]
 8009236:	69bb      	ldr	r3, [r7, #24]
 8009238:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 800923c:	005b      	lsls	r3, r3, #1
 800923e:	4413      	add	r3, r2
 8009240:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009244:	2b00      	cmp	r3, #0
 8009246:	da07      	bge.n	8009258 <vl53l5cx_get_ranging_data+0x2f4>
		{
			p_results->distance_mm[i] = 0;
 8009248:	683a      	ldr	r2, [r7, #0]
 800924a:	69bb      	ldr	r3, [r7, #24]
 800924c:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8009250:	005b      	lsls	r3, r3, #1
 8009252:	4413      	add	r3, r2
 8009254:	2200      	movs	r2, #0
 8009256:	809a      	strh	r2, [r3, #4]
		}
#endif
#ifndef VL53L5CX_DISABLE_REFLECTANCE_PERCENT
		p_results->reflectance[i] /= (uint8_t)2;
 8009258:	683a      	ldr	r2, [r7, #0]
 800925a:	69bb      	ldr	r3, [r7, #24]
 800925c:	4413      	add	r3, r2
 800925e:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	085b      	lsrs	r3, r3, #1
 8009266:	b2d9      	uxtb	r1, r3
 8009268:	683a      	ldr	r2, [r7, #0]
 800926a:	69bb      	ldr	r3, [r7, #24]
 800926c:	4413      	add	r3, r2
 800926e:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 8009272:	460a      	mov	r2, r1
 8009274:	701a      	strb	r2, [r3, #0]
#endif
#ifndef VL53L5CX_DISABLE_RANGE_SIGMA_MM
		p_results->range_sigma_mm[i] /= (uint16_t)128;
 8009276:	683a      	ldr	r2, [r7, #0]
 8009278:	69bb      	ldr	r3, [r7, #24]
 800927a:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800927e:	005b      	lsls	r3, r3, #1
 8009280:	4413      	add	r3, r2
 8009282:	889b      	ldrh	r3, [r3, #4]
 8009284:	09db      	lsrs	r3, r3, #7
 8009286:	b299      	uxth	r1, r3
 8009288:	683a      	ldr	r2, [r7, #0]
 800928a:	69bb      	ldr	r3, [r7, #24]
 800928c:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8009290:	005b      	lsls	r3, r3, #1
 8009292:	4413      	add	r3, r2
 8009294:	460a      	mov	r2, r1
 8009296:	809a      	strh	r2, [r3, #4]
#endif
#ifndef VL53L5CX_DISABLE_SIGNAL_PER_SPAD
		p_results->signal_per_spad[i] /= (uint32_t)2048;
 8009298:	683a      	ldr	r2, [r7, #0]
 800929a:	69bb      	ldr	r3, [r7, #24]
 800929c:	3390      	adds	r3, #144	@ 0x90
 800929e:	009b      	lsls	r3, r3, #2
 80092a0:	4413      	add	r3, r2
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	0ada      	lsrs	r2, r3, #11
 80092a6:	6839      	ldr	r1, [r7, #0]
 80092a8:	69bb      	ldr	r3, [r7, #24]
 80092aa:	3390      	adds	r3, #144	@ 0x90
 80092ac:	009b      	lsls	r3, r3, #2
 80092ae:	440b      	add	r3, r1
 80092b0:	605a      	str	r2, [r3, #4]
			*VL53L5CX_NB_TARGET_PER_ZONE); i++)
 80092b2:	69bb      	ldr	r3, [r7, #24]
 80092b4:	3301      	adds	r3, #1
 80092b6:	61bb      	str	r3, [r7, #24]
	for(i = 0; i < (uint32_t)(VL53L5CX_RESOLUTION_8X8
 80092b8:	69bb      	ldr	r3, [r7, #24]
 80092ba:	2b3f      	cmp	r3, #63	@ 0x3f
 80092bc:	d9a5      	bls.n	800920a <vl53l5cx_get_ranging_data+0x2a6>
#endif
	}

	/* Set target status to 255 if no target is detected for this zone */
#ifndef VL53L5CX_DISABLE_NB_TARGET_DETECTED
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 80092be:	2300      	movs	r3, #0
 80092c0:	61bb      	str	r3, [r7, #24]
 80092c2:	e01b      	b.n	80092fc <vl53l5cx_get_ranging_data+0x398>
	{
		if(p_results->nb_target_detected[i] == (uint8_t)0){
 80092c4:	683a      	ldr	r2, [r7, #0]
 80092c6:	69bb      	ldr	r3, [r7, #24]
 80092c8:	4413      	add	r3, r2
 80092ca:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 80092ce:	781b      	ldrb	r3, [r3, #0]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d110      	bne.n	80092f6 <vl53l5cx_get_ranging_data+0x392>
			for(j = 0; j < (uint32_t)
 80092d4:	2300      	movs	r3, #0
 80092d6:	617b      	str	r3, [r7, #20]
 80092d8:	e00a      	b.n	80092f0 <vl53l5cx_get_ranging_data+0x38c>
				VL53L5CX_NB_TARGET_PER_ZONE; j++)
			{
#ifndef VL53L5CX_DISABLE_TARGET_STATUS
				p_results->target_status
				[((uint32_t)VL53L5CX_NB_TARGET_PER_ZONE
					*(uint32_t)i) + j]=(uint8_t)255;
 80092da:	69ba      	ldr	r2, [r7, #24]
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	4413      	add	r3, r2
 80092e0:	683a      	ldr	r2, [r7, #0]
 80092e2:	4413      	add	r3, r2
 80092e4:	22ff      	movs	r2, #255	@ 0xff
 80092e6:	f883 2484 	strb.w	r2, [r3, #1156]	@ 0x484
				VL53L5CX_NB_TARGET_PER_ZONE; j++)
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	3301      	adds	r3, #1
 80092ee:	617b      	str	r3, [r7, #20]
			for(j = 0; j < (uint32_t)
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d0f1      	beq.n	80092da <vl53l5cx_get_ranging_data+0x376>
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 80092f6:	69bb      	ldr	r3, [r7, #24]
 80092f8:	3301      	adds	r3, #1
 80092fa:	61bb      	str	r3, [r7, #24]
 80092fc:	69bb      	ldr	r3, [r7, #24]
 80092fe:	2b3f      	cmp	r3, #63	@ 0x3f
 8009300:	d9e0      	bls.n	80092c4 <vl53l5cx_get_ranging_data+0x360>
		}
	}
#endif

#ifndef VL53L5CX_DISABLE_MOTION_INDICATOR
	for(i = 0; i < (uint32_t)32; i++)
 8009302:	2300      	movs	r3, #0
 8009304:	61bb      	str	r3, [r7, #24]
 8009306:	e014      	b.n	8009332 <vl53l5cx_get_ranging_data+0x3ce>
	{
		p_results->motion_indicator.motion[i] /= (uint32_t)65535;
 8009308:	683a      	ldr	r2, [r7, #0]
 800930a:	69bb      	ldr	r3, [r7, #24]
 800930c:	f503 7399 	add.w	r3, r3, #306	@ 0x132
 8009310:	009b      	lsls	r3, r3, #2
 8009312:	4413      	add	r3, r2
 8009314:	689b      	ldr	r3, [r3, #8]
 8009316:	4a1f      	ldr	r2, [pc, #124]	@ (8009394 <vl53l5cx_get_ranging_data+0x430>)
 8009318:	fba2 2303 	umull	r2, r3, r2, r3
 800931c:	0bda      	lsrs	r2, r3, #15
 800931e:	6839      	ldr	r1, [r7, #0]
 8009320:	69bb      	ldr	r3, [r7, #24]
 8009322:	f503 7399 	add.w	r3, r3, #306	@ 0x132
 8009326:	009b      	lsls	r3, r3, #2
 8009328:	440b      	add	r3, r1
 800932a:	609a      	str	r2, [r3, #8]
	for(i = 0; i < (uint32_t)32; i++)
 800932c:	69bb      	ldr	r3, [r7, #24]
 800932e:	3301      	adds	r3, #1
 8009330:	61bb      	str	r3, [r7, #24]
 8009332:	69bb      	ldr	r3, [r7, #24]
 8009334:	2b1f      	cmp	r3, #31
 8009336:	d9e7      	bls.n	8009308 <vl53l5cx_get_ranging_data+0x3a4>

#endif

	/* Check if footer id and header id are matching. This allows to detect
	 * corrupted frames */
	header_id = ((uint16_t)(p_dev->temp_buffer[0x8])<<8) & 0xFF00U;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f893 3508 	ldrb.w	r3, [r3, #1288]	@ 0x508
 800933e:	021b      	lsls	r3, r3, #8
 8009340:	81fb      	strh	r3, [r7, #14]
	header_id |= ((uint16_t)(p_dev->temp_buffer[0x9])) & 0x00FFU;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f893 3509 	ldrb.w	r3, [r3, #1289]	@ 0x509
 8009348:	461a      	mov	r2, r3
 800934a:	89fb      	ldrh	r3, [r7, #14]
 800934c:	4313      	orrs	r3, r2
 800934e:	81fb      	strh	r3, [r7, #14]

	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	685b      	ldr	r3, [r3, #4]
		- (uint32_t)4]) << 8) & 0xFF00U;
 8009354:	3b04      	subs	r3, #4
	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8009356:	687a      	ldr	r2, [r7, #4]
 8009358:	4413      	add	r3, r2
 800935a:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
 800935e:	021b      	lsls	r3, r3, #8
 8009360:	81bb      	strh	r3, [r7, #12]
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	685b      	ldr	r3, [r3, #4]
		- (uint32_t)3])) & 0xFFU;
 8009366:	3b03      	subs	r3, #3
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8009368:	687a      	ldr	r2, [r7, #4]
 800936a:	4413      	add	r3, r2
 800936c:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
 8009370:	461a      	mov	r2, r3
 8009372:	89bb      	ldrh	r3, [r7, #12]
 8009374:	4313      	orrs	r3, r2
 8009376:	81bb      	strh	r3, [r7, #12]

	if(header_id != footer_id)
 8009378:	89fa      	ldrh	r2, [r7, #14]
 800937a:	89bb      	ldrh	r3, [r7, #12]
 800937c:	429a      	cmp	r2, r3
 800937e:	d003      	beq.n	8009388 <vl53l5cx_get_ranging_data+0x424>
	{
		status |= VL53L5CX_STATUS_CORRUPTED_FRAME;
 8009380:	7ffb      	ldrb	r3, [r7, #31]
 8009382:	f043 0302 	orr.w	r3, r3, #2
 8009386:	77fb      	strb	r3, [r7, #31]
	}

	return status;
 8009388:	7ffb      	ldrb	r3, [r7, #31]
}
 800938a:	4618      	mov	r0, r3
 800938c:	3720      	adds	r7, #32
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}
 8009392:	bf00      	nop
 8009394:	80008001 	.word	0x80008001

08009398 <vl53l5cx_get_resolution>:

uint8_t vl53l5cx_get_resolution(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*p_resolution)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b084      	sub	sp, #16
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 80093a2:	2300      	movs	r3, #0
 80093a4:	73fb      	strb	r3, [r7, #15]

	status |= vl53l5cx_dci_read_data(p_dev, p_dev->temp_buffer,
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
 80093ac:	2308      	movs	r3, #8
 80093ae:	f245 4250 	movw	r2, #21584	@ 0x5450
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f000 f90a 	bl	80095cc <vl53l5cx_dci_read_data>
 80093b8:	4603      	mov	r3, r0
 80093ba:	461a      	mov	r2, r3
 80093bc:	7bfb      	ldrb	r3, [r7, #15]
 80093be:	4313      	orrs	r3, r2
 80093c0:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_ZONE_CONFIG, 8);
	*p_resolution = p_dev->temp_buffer[0x00]*p_dev->temp_buffer[0x01];
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f893 2500 	ldrb.w	r2, [r3, #1280]	@ 0x500
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f893 3501 	ldrb.w	r3, [r3, #1281]	@ 0x501
 80093ce:	fb12 f303 	smulbb	r3, r2, r3
 80093d2:	b2da      	uxtb	r2, r3
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	701a      	strb	r2, [r3, #0]

	return status;
 80093d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3710      	adds	r7, #16
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}

080093e2 <vl53l5cx_set_resolution>:


uint8_t vl53l5cx_set_resolution(
		VL53L5CX_Configuration 		 *p_dev,
		uint8_t				resolution)
{
 80093e2:	b580      	push	{r7, lr}
 80093e4:	b084      	sub	sp, #16
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	6078      	str	r0, [r7, #4]
 80093ea:	460b      	mov	r3, r1
 80093ec:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L5CX_STATUS_OK;
 80093ee:	2300      	movs	r3, #0
 80093f0:	73fb      	strb	r3, [r7, #15]

	switch(resolution){
 80093f2:	78fb      	ldrb	r3, [r7, #3]
 80093f4:	2b10      	cmp	r3, #16
 80093f6:	d002      	beq.n	80093fe <vl53l5cx_set_resolution+0x1c>
 80093f8:	2b40      	cmp	r3, #64	@ 0x40
 80093fa:	d055      	beq.n	80094a8 <vl53l5cx_set_resolution+0xc6>
 80093fc:	e0a9      	b.n	8009552 <vl53l5cx_set_resolution+0x170>
		case VL53L5CX_RESOLUTION_4X4:
			status |= vl53l5cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
			status |= vl53l5cx_dci_read_data(p_dev,
 8009404:	2310      	movs	r3, #16
 8009406:	f64a 5238 	movw	r2, #44344	@ 0xad38
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f000 f8de 	bl	80095cc <vl53l5cx_dci_read_data>
 8009410:	4603      	mov	r3, r0
 8009412:	461a      	mov	r2, r3
 8009414:	7bfb      	ldrb	r3, [r7, #15]
 8009416:	4313      	orrs	r3, r2
 8009418:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 64;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2240      	movs	r2, #64	@ 0x40
 800941e:	f883 2504 	strb.w	r2, [r3, #1284]	@ 0x504
			p_dev->temp_buffer[0x06] = 64;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2240      	movs	r2, #64	@ 0x40
 8009426:	f883 2506 	strb.w	r2, [r3, #1286]	@ 0x506
			p_dev->temp_buffer[0x09] = 4;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2204      	movs	r2, #4
 800942e:	f883 2509 	strb.w	r2, [r3, #1289]	@ 0x509
			status |= vl53l5cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
			status |= vl53l5cx_dci_write_data(p_dev,
 8009438:	2310      	movs	r3, #16
 800943a:	f64a 5238 	movw	r2, #44344	@ 0xad38
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f000 f94e 	bl	80096e0 <vl53l5cx_dci_write_data>
 8009444:	4603      	mov	r3, r0
 8009446:	461a      	mov	r2, r3
 8009448:	7bfb      	ldrb	r3, [r7, #15]
 800944a:	4313      	orrs	r3, r2
 800944c:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_DSS_CONFIG, 16);

			status |= vl53l5cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
			status |= vl53l5cx_dci_read_data(p_dev,
 8009454:	2308      	movs	r3, #8
 8009456:	f245 4250 	movw	r2, #21584	@ 0x5450
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f000 f8b6 	bl	80095cc <vl53l5cx_dci_read_data>
 8009460:	4603      	mov	r3, r0
 8009462:	461a      	mov	r2, r3
 8009464:	7bfb      	ldrb	r3, [r7, #15]
 8009466:	4313      	orrs	r3, r2
 8009468:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 4;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2204      	movs	r2, #4
 800946e:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
			p_dev->temp_buffer[0x01] = 4;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2204      	movs	r2, #4
 8009476:	f883 2501 	strb.w	r2, [r3, #1281]	@ 0x501
			p_dev->temp_buffer[0x04] = 8;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2208      	movs	r2, #8
 800947e:	f883 2504 	strb.w	r2, [r3, #1284]	@ 0x504
			p_dev->temp_buffer[0x05] = 8;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2208      	movs	r2, #8
 8009486:	f883 2505 	strb.w	r2, [r3, #1285]	@ 0x505
			status |= vl53l5cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
			status |= vl53l5cx_dci_write_data(p_dev,
 8009490:	2308      	movs	r3, #8
 8009492:	f245 4250 	movw	r2, #21584	@ 0x5450
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f000 f922 	bl	80096e0 <vl53l5cx_dci_write_data>
 800949c:	4603      	mov	r3, r0
 800949e:	461a      	mov	r2, r3
 80094a0:	7bfb      	ldrb	r3, [r7, #15]
 80094a2:	4313      	orrs	r3, r2
 80094a4:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_ZONE_CONFIG, 8);
			break;
 80094a6:	e057      	b.n	8009558 <vl53l5cx_set_resolution+0x176>

		case VL53L5CX_RESOLUTION_8X8:
			status |= vl53l5cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
			status |= vl53l5cx_dci_read_data(p_dev,
 80094ae:	2310      	movs	r3, #16
 80094b0:	f64a 5238 	movw	r2, #44344	@ 0xad38
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f000 f889 	bl	80095cc <vl53l5cx_dci_read_data>
 80094ba:	4603      	mov	r3, r0
 80094bc:	461a      	mov	r2, r3
 80094be:	7bfb      	ldrb	r3, [r7, #15]
 80094c0:	4313      	orrs	r3, r2
 80094c2:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 16;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2210      	movs	r2, #16
 80094c8:	f883 2504 	strb.w	r2, [r3, #1284]	@ 0x504
			p_dev->temp_buffer[0x06] = 16;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2210      	movs	r2, #16
 80094d0:	f883 2506 	strb.w	r2, [r3, #1286]	@ 0x506
			p_dev->temp_buffer[0x09] = 1;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2201      	movs	r2, #1
 80094d8:	f883 2509 	strb.w	r2, [r3, #1289]	@ 0x509
			status |= vl53l5cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
			status |= vl53l5cx_dci_write_data(p_dev,
 80094e2:	2310      	movs	r3, #16
 80094e4:	f64a 5238 	movw	r2, #44344	@ 0xad38
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f000 f8f9 	bl	80096e0 <vl53l5cx_dci_write_data>
 80094ee:	4603      	mov	r3, r0
 80094f0:	461a      	mov	r2, r3
 80094f2:	7bfb      	ldrb	r3, [r7, #15]
 80094f4:	4313      	orrs	r3, r2
 80094f6:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_DSS_CONFIG, 16);

			status |= vl53l5cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
			status |= vl53l5cx_dci_read_data(p_dev,
 80094fe:	2308      	movs	r3, #8
 8009500:	f245 4250 	movw	r2, #21584	@ 0x5450
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f000 f861 	bl	80095cc <vl53l5cx_dci_read_data>
 800950a:	4603      	mov	r3, r0
 800950c:	461a      	mov	r2, r3
 800950e:	7bfb      	ldrb	r3, [r7, #15]
 8009510:	4313      	orrs	r3, r2
 8009512:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 8;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2208      	movs	r2, #8
 8009518:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
			p_dev->temp_buffer[0x01] = 8;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2208      	movs	r2, #8
 8009520:	f883 2501 	strb.w	r2, [r3, #1281]	@ 0x501
			p_dev->temp_buffer[0x04] = 4;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2204      	movs	r2, #4
 8009528:	f883 2504 	strb.w	r2, [r3, #1284]	@ 0x504
			p_dev->temp_buffer[0x05] = 4;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2204      	movs	r2, #4
 8009530:	f883 2505 	strb.w	r2, [r3, #1285]	@ 0x505
			status |= vl53l5cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
			status |= vl53l5cx_dci_write_data(p_dev,
 800953a:	2308      	movs	r3, #8
 800953c:	f245 4250 	movw	r2, #21584	@ 0x5450
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f000 f8cd 	bl	80096e0 <vl53l5cx_dci_write_data>
 8009546:	4603      	mov	r3, r0
 8009548:	461a      	mov	r2, r3
 800954a:	7bfb      	ldrb	r3, [r7, #15]
 800954c:	4313      	orrs	r3, r2
 800954e:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_ZONE_CONFIG, 8);

			break;
 8009550:	e002      	b.n	8009558 <vl53l5cx_set_resolution+0x176>

		default:
			status = VL53L5CX_STATUS_INVALID_PARAM;
 8009552:	237f      	movs	r3, #127	@ 0x7f
 8009554:	73fb      	strb	r3, [r7, #15]
			break;
 8009556:	bf00      	nop
		}

	status |= _vl53l5cx_send_offset_data(p_dev, resolution);
 8009558:	78fb      	ldrb	r3, [r7, #3]
 800955a:	4619      	mov	r1, r3
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	f7fe fb69 	bl	8007c34 <_vl53l5cx_send_offset_data>
 8009562:	4603      	mov	r3, r0
 8009564:	461a      	mov	r2, r3
 8009566:	7bfb      	ldrb	r3, [r7, #15]
 8009568:	4313      	orrs	r3, r2
 800956a:	73fb      	strb	r3, [r7, #15]
	status |= _vl53l5cx_send_xtalk_data(p_dev, resolution);
 800956c:	78fb      	ldrb	r3, [r7, #3]
 800956e:	4619      	mov	r1, r3
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f7fe fd2b 	bl	8007fcc <_vl53l5cx_send_xtalk_data>
 8009576:	4603      	mov	r3, r0
 8009578:	461a      	mov	r2, r3
 800957a:	7bfb      	ldrb	r3, [r7, #15]
 800957c:	4313      	orrs	r3, r2
 800957e:	73fb      	strb	r3, [r7, #15]

	return status;
 8009580:	7bfb      	ldrb	r3, [r7, #15]
}
 8009582:	4618      	mov	r0, r3
 8009584:	3710      	adds	r7, #16
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}

0800958a <vl53l5cx_set_ranging_frequency_hz>:
}

uint8_t vl53l5cx_set_ranging_frequency_hz(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				frequency_hz)
{
 800958a:	b580      	push	{r7, lr}
 800958c:	b088      	sub	sp, #32
 800958e:	af04      	add	r7, sp, #16
 8009590:	6078      	str	r0, [r7, #4]
 8009592:	460b      	mov	r3, r1
 8009594:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L5CX_STATUS_OK;
 8009596:	2300      	movs	r3, #0
 8009598:	73fb      	strb	r3, [r7, #15]

	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
 80095a0:	2301      	movs	r3, #1
 80095a2:	9302      	str	r3, [sp, #8]
 80095a4:	2301      	movs	r3, #1
 80095a6:	9301      	str	r3, [sp, #4]
 80095a8:	1cfb      	adds	r3, r7, #3
 80095aa:	9300      	str	r3, [sp, #0]
 80095ac:	2304      	movs	r3, #4
 80095ae:	f245 4258 	movw	r2, #21592	@ 0x5458
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f000 f932 	bl	800981c <vl53l5cx_dci_replace_data>
 80095b8:	4603      	mov	r3, r0
 80095ba:	461a      	mov	r2, r3
 80095bc:	7bfb      	ldrb	r3, [r7, #15]
 80095be:	4313      	orrs	r3, r2
 80095c0:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_FREQ_HZ, 4,
					(uint8_t*)&frequency_hz, 1, 0x01);

	return status;
 80095c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3710      	adds	r7, #16
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}

080095cc <vl53l5cx_dci_read_data>:
uint8_t vl53l5cx_dci_read_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b08c      	sub	sp, #48	@ 0x30
 80095d0:	af02      	add	r7, sp, #8
 80095d2:	60f8      	str	r0, [r7, #12]
 80095d4:	60b9      	str	r1, [r7, #8]
 80095d6:	607a      	str	r2, [r7, #4]
 80095d8:	807b      	strh	r3, [r7, #2]
	int16_t i;
	uint8_t status = VL53L5CX_STATUS_OK;
 80095da:	2300      	movs	r3, #0
 80095dc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        uint32_t rd_size = (uint32_t) data_size + (uint32_t)12;
 80095e0:	887b      	ldrh	r3, [r7, #2]
 80095e2:	330c      	adds	r3, #12
 80095e4:	623b      	str	r3, [r7, #32]
	uint8_t cmd[] = {0x00, 0x00, 0x00, 0x00,
 80095e6:	4a3d      	ldr	r2, [pc, #244]	@ (80096dc <vl53l5cx_dci_read_data+0x110>)
 80095e8:	f107 0314 	add.w	r3, r7, #20
 80095ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80095ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x00, 0x00, 0x00, 0x0f,
			0x00, 0x02, 0x00, 0x08};

	/* Check if tmp buffer is large enough */
	if((data_size + (uint16_t)12)>(uint16_t)VL53L5CX_TEMPORARY_BUFFER_SIZE)
 80095f2:	887b      	ldrh	r3, [r7, #2]
 80095f4:	f5b3 6fb4 	cmp.w	r3, #1440	@ 0x5a0
 80095f8:	d903      	bls.n	8009602 <vl53l5cx_dci_read_data+0x36>
	{
		status |= VL53L5CX_STATUS_ERROR;
 80095fa:	23ff      	movs	r3, #255	@ 0xff
 80095fc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8009600:	e065      	b.n	80096ce <vl53l5cx_dci_read_data+0x102>
	}
	else
	{
		cmd[0] = (uint8_t)(index >> 8);	
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	0a1b      	lsrs	r3, r3, #8
 8009606:	b2db      	uxtb	r3, r3
 8009608:	753b      	strb	r3, [r7, #20]
		cmd[1] = (uint8_t)(index & (uint32_t)0xff);			
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	b2db      	uxtb	r3, r3
 800960e:	757b      	strb	r3, [r7, #21]
		cmd[2] = (uint8_t)((data_size & (uint16_t)0xff0) >> 4);
 8009610:	887b      	ldrh	r3, [r7, #2]
 8009612:	111b      	asrs	r3, r3, #4
 8009614:	b2db      	uxtb	r3, r3
 8009616:	75bb      	strb	r3, [r7, #22]
		cmd[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 8009618:	887b      	ldrh	r3, [r7, #2]
 800961a:	b2db      	uxtb	r3, r3
 800961c:	011b      	lsls	r3, r3, #4
 800961e:	b2db      	uxtb	r3, r3
 8009620:	75fb      	strb	r3, [r7, #23]

	/* Request data reading from FW */
		status |= VL53L5CX_WrMulti(&(p_dev->platform),
 8009622:	68f8      	ldr	r0, [r7, #12]
 8009624:	f107 0214 	add.w	r2, r7, #20
 8009628:	230c      	movs	r3, #12
 800962a:	f642 71f4 	movw	r1, #12276	@ 0x2ff4
 800962e:	f7f8 f90b 	bl	8001848 <VL53L5CX_WrMulti>
 8009632:	4603      	mov	r3, r0
 8009634:	461a      	mov	r2, r3
 8009636:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800963a:	4313      	orrs	r3, r2
 800963c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			(VL53L5CX_UI_CMD_END-(uint16_t)11),cmd, sizeof(cmd));
		status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8009640:	2303      	movs	r3, #3
 8009642:	9301      	str	r3, [sp, #4]
 8009644:	23ff      	movs	r3, #255	@ 0xff
 8009646:	9300      	str	r3, [sp, #0]
 8009648:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 800964c:	2201      	movs	r2, #1
 800964e:	2104      	movs	r1, #4
 8009650:	68f8      	ldr	r0, [r7, #12]
 8009652:	f7fe fa5d 	bl	8007b10 <_vl53l5cx_poll_for_answer>
 8009656:	4603      	mov	r3, r0
 8009658:	461a      	mov	r2, r3
 800965a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800965e:	4313      	orrs	r3, r2
 8009660:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			VL53L5CX_UI_CMD_STATUS,
			0xff, 0x03);

	/* Read new data sent (4 bytes header + data_size + 8 bytes footer) */
		status |= VL53L5CX_RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8009664:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer, rd_size);
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
		status |= VL53L5CX_RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 800966c:	6a3b      	ldr	r3, [r7, #32]
 800966e:	f642 4104 	movw	r1, #11268	@ 0x2c04
 8009672:	f7f8 f909 	bl	8001888 <VL53L5CX_RdMulti>
 8009676:	4603      	mov	r3, r0
 8009678:	461a      	mov	r2, r3
 800967a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800967e:	4313      	orrs	r3, r2
 8009680:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		VL53L5CX_SwapBuffer(p_dev->temp_buffer, data_size + (uint16_t)12);
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
 800968a:	887b      	ldrh	r3, [r7, #2]
 800968c:	330c      	adds	r3, #12
 800968e:	b29b      	uxth	r3, r3
 8009690:	4619      	mov	r1, r3
 8009692:	4610      	mov	r0, r2
 8009694:	f7f8 f938 	bl	8001908 <VL53L5CX_SwapBuffer>

	/* Copy data from FW into input structure (-4 bytes to remove header) */
		for(i = 0 ; i < (int16_t)data_size;i++){
 8009698:	2300      	movs	r3, #0
 800969a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800969c:	e011      	b.n	80096c2 <vl53l5cx_dci_read_data+0xf6>
			data[i] = p_dev->temp_buffer[i + 4];
 800969e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80096a2:	1d1a      	adds	r2, r3, #4
 80096a4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80096a8:	68b9      	ldr	r1, [r7, #8]
 80096aa:	440b      	add	r3, r1
 80096ac:	68f9      	ldr	r1, [r7, #12]
 80096ae:	440a      	add	r2, r1
 80096b0:	f892 2500 	ldrb.w	r2, [r2, #1280]	@ 0x500
 80096b4:	701a      	strb	r2, [r3, #0]
		for(i = 0 ; i < (int16_t)data_size;i++){
 80096b6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80096ba:	b29b      	uxth	r3, r3
 80096bc:	3301      	adds	r3, #1
 80096be:	b29b      	uxth	r3, r3
 80096c0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80096c2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80096c6:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 80096ca:	429a      	cmp	r2, r3
 80096cc:	dbe7      	blt.n	800969e <vl53l5cx_dci_read_data+0xd2>
		}
	}

	return status;
 80096ce:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3728      	adds	r7, #40	@ 0x28
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
 80096da:	bf00      	nop
 80096dc:	0800c984 	.word	0x0800c984

080096e0 <vl53l5cx_dci_write_data>:
uint8_t vl53l5cx_dci_write_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b08c      	sub	sp, #48	@ 0x30
 80096e4:	af02      	add	r7, sp, #8
 80096e6:	60f8      	str	r0, [r7, #12]
 80096e8:	60b9      	str	r1, [r7, #8]
 80096ea:	607a      	str	r2, [r7, #4]
 80096ec:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L5CX_STATUS_OK;
 80096ee:	2300      	movs	r3, #0
 80096f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	int16_t i;

	uint8_t headers[] = {0x00, 0x00, 0x00, 0x00};
 80096f4:	2300      	movs	r3, #0
 80096f6:	61fb      	str	r3, [r7, #28]
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 80096f8:	2300      	movs	r3, #0
 80096fa:	753b      	strb	r3, [r7, #20]
 80096fc:	2300      	movs	r3, #0
 80096fe:	757b      	strb	r3, [r7, #21]
 8009700:	2300      	movs	r3, #0
 8009702:	75bb      	strb	r3, [r7, #22]
 8009704:	230f      	movs	r3, #15
 8009706:	75fb      	strb	r3, [r7, #23]
 8009708:	2305      	movs	r3, #5
 800970a:	763b      	strb	r3, [r7, #24]
 800970c:	2301      	movs	r3, #1
 800970e:	767b      	strb	r3, [r7, #25]
			(uint8_t)((data_size + (uint16_t)8) >> 8), 
 8009710:	887b      	ldrh	r3, [r7, #2]
 8009712:	3308      	adds	r3, #8
 8009714:	121b      	asrs	r3, r3, #8
 8009716:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8009718:	76bb      	strb	r3, [r7, #26]
			(uint8_t)((data_size + (uint16_t)8) & (uint8_t)0xFF)};
 800971a:	887b      	ldrh	r3, [r7, #2]
 800971c:	b2db      	uxtb	r3, r3
 800971e:	3308      	adds	r3, #8
 8009720:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8009722:	76fb      	strb	r3, [r7, #27]

	uint16_t address = (uint16_t)VL53L5CX_UI_CMD_END - 
 8009724:	887b      	ldrh	r3, [r7, #2]
 8009726:	f5c3 533f 	rsb	r3, r3, #12224	@ 0x2fc0
 800972a:	3334      	adds	r3, #52	@ 0x34
 800972c:	847b      	strh	r3, [r7, #34]	@ 0x22
		(data_size + (uint16_t)12) + (uint16_t)1;

	/* Check if cmd buffer is large enough */
	if((data_size + (uint16_t)12) 
 800972e:	887b      	ldrh	r3, [r7, #2]
 8009730:	f5b3 6fb4 	cmp.w	r3, #1440	@ 0x5a0
 8009734:	d903      	bls.n	800973e <vl53l5cx_dci_write_data+0x5e>
           > (uint16_t)VL53L5CX_TEMPORARY_BUFFER_SIZE)
	{
		status |= VL53L5CX_STATUS_ERROR;
 8009736:	23ff      	movs	r3, #255	@ 0xff
 8009738:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800973c:	e068      	b.n	8009810 <vl53l5cx_dci_write_data+0x130>
	}
	else
	{
		headers[0] = (uint8_t)(index >> 8);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	0a1b      	lsrs	r3, r3, #8
 8009742:	b2db      	uxtb	r3, r3
 8009744:	773b      	strb	r3, [r7, #28]
		headers[1] = (uint8_t)(index & (uint32_t)0xff);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	b2db      	uxtb	r3, r3
 800974a:	777b      	strb	r3, [r7, #29]
		headers[2] = (uint8_t)(((data_size & (uint16_t)0xff0) >> 4));
 800974c:	887b      	ldrh	r3, [r7, #2]
 800974e:	111b      	asrs	r3, r3, #4
 8009750:	b2db      	uxtb	r3, r3
 8009752:	77bb      	strb	r3, [r7, #30]
		headers[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 8009754:	887b      	ldrh	r3, [r7, #2]
 8009756:	b2db      	uxtb	r3, r3
 8009758:	011b      	lsls	r3, r3, #4
 800975a:	b2db      	uxtb	r3, r3
 800975c:	77fb      	strb	r3, [r7, #31]

	/* Copy data from structure to FW format (+4 bytes to add header) */
		VL53L5CX_SwapBuffer(data, data_size);
 800975e:	887b      	ldrh	r3, [r7, #2]
 8009760:	4619      	mov	r1, r3
 8009762:	68b8      	ldr	r0, [r7, #8]
 8009764:	f7f8 f8d0 	bl	8001908 <VL53L5CX_SwapBuffer>
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 8009768:	887b      	ldrh	r3, [r7, #2]
 800976a:	3b01      	subs	r3, #1
 800976c:	b29b      	uxth	r3, r3
 800976e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009770:	e012      	b.n	8009798 <vl53l5cx_dci_write_data+0xb8>
		{
			p_dev->temp_buffer[i + 4] = data[i];
 8009772:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8009776:	68ba      	ldr	r2, [r7, #8]
 8009778:	441a      	add	r2, r3
 800977a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800977e:	3304      	adds	r3, #4
 8009780:	7811      	ldrb	r1, [r2, #0]
 8009782:	68fa      	ldr	r2, [r7, #12]
 8009784:	4413      	add	r3, r2
 8009786:	460a      	mov	r2, r1
 8009788:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 800978c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8009790:	b29b      	uxth	r3, r3
 8009792:	3b01      	subs	r3, #1
 8009794:	b29b      	uxth	r3, r3
 8009796:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009798:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800979c:	2b00      	cmp	r3, #0
 800979e:	dae8      	bge.n	8009772 <vl53l5cx_dci_write_data+0x92>
		}

	/* Add headers and footer */
		(void)memcpy(&p_dev->temp_buffer[0], headers, sizeof(headers));
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097a6:	69fa      	ldr	r2, [r7, #28]
 80097a8:	601a      	str	r2, [r3, #0]
		(void)memcpy(&p_dev->temp_buffer[data_size + (uint16_t)4],
 80097aa:	887b      	ldrh	r3, [r7, #2]
 80097ac:	3304      	adds	r3, #4
 80097ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097b2:	68fa      	ldr	r2, [r7, #12]
 80097b4:	4413      	add	r3, r2
 80097b6:	461a      	mov	r2, r3
 80097b8:	f107 0314 	add.w	r3, r7, #20
 80097bc:	cb03      	ldmia	r3!, {r0, r1}
 80097be:	6010      	str	r0, [r2, #0]
 80097c0:	6051      	str	r1, [r2, #4]
			footer, sizeof(footer));

	/* Send data to FW */
		status |= VL53L5CX_WrMulti(&(p_dev->platform),address,
 80097c2:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer,
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
			(uint32_t)((uint32_t)data_size + (uint32_t)12));
 80097ca:	887b      	ldrh	r3, [r7, #2]
		status |= VL53L5CX_WrMulti(&(p_dev->platform),address,
 80097cc:	330c      	adds	r3, #12
 80097ce:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 80097d0:	f7f8 f83a 	bl	8001848 <VL53L5CX_WrMulti>
 80097d4:	4603      	mov	r3, r0
 80097d6:	461a      	mov	r2, r3
 80097d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80097dc:	4313      	orrs	r3, r2
 80097de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 80097e2:	2303      	movs	r3, #3
 80097e4:	9301      	str	r3, [sp, #4]
 80097e6:	23ff      	movs	r3, #255	@ 0xff
 80097e8:	9300      	str	r3, [sp, #0]
 80097ea:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 80097ee:	2201      	movs	r2, #1
 80097f0:	2104      	movs	r1, #4
 80097f2:	68f8      	ldr	r0, [r7, #12]
 80097f4:	f7fe f98c 	bl	8007b10 <_vl53l5cx_poll_for_answer>
 80097f8:	4603      	mov	r3, r0
 80097fa:	461a      	mov	r2, r3
 80097fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009800:	4313      	orrs	r3, r2
 8009802:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

		VL53L5CX_SwapBuffer(data, data_size);
 8009806:	887b      	ldrh	r3, [r7, #2]
 8009808:	4619      	mov	r1, r3
 800980a:	68b8      	ldr	r0, [r7, #8]
 800980c:	f7f8 f87c 	bl	8001908 <VL53L5CX_SwapBuffer>
	}

	return status;
 8009810:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009814:	4618      	mov	r0, r3
 8009816:	3728      	adds	r7, #40	@ 0x28
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}

0800981c <vl53l5cx_dci_replace_data>:
		uint32_t			index,
		uint16_t			data_size,
		uint8_t				*new_data,
		uint16_t			new_data_size,
		uint16_t			new_data_pos)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b086      	sub	sp, #24
 8009820:	af00      	add	r7, sp, #0
 8009822:	60f8      	str	r0, [r7, #12]
 8009824:	60b9      	str	r1, [r7, #8]
 8009826:	607a      	str	r2, [r7, #4]
 8009828:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L5CX_STATUS_OK;
 800982a:	2300      	movs	r3, #0
 800982c:	75fb      	strb	r3, [r7, #23]

	status |= vl53l5cx_dci_read_data(p_dev, data, index, data_size);
 800982e:	887b      	ldrh	r3, [r7, #2]
 8009830:	687a      	ldr	r2, [r7, #4]
 8009832:	68b9      	ldr	r1, [r7, #8]
 8009834:	68f8      	ldr	r0, [r7, #12]
 8009836:	f7ff fec9 	bl	80095cc <vl53l5cx_dci_read_data>
 800983a:	4603      	mov	r3, r0
 800983c:	461a      	mov	r2, r3
 800983e:	7dfb      	ldrb	r3, [r7, #23]
 8009840:	4313      	orrs	r3, r2
 8009842:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(&(data[new_data_pos]), new_data, new_data_size);
 8009844:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009846:	68ba      	ldr	r2, [r7, #8]
 8009848:	4413      	add	r3, r2
 800984a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800984c:	6a39      	ldr	r1, [r7, #32]
 800984e:	4618      	mov	r0, r3
 8009850:	f000 fdf3 	bl	800a43a <memcpy>
	status |= vl53l5cx_dci_write_data(p_dev, data, index, data_size);
 8009854:	887b      	ldrh	r3, [r7, #2]
 8009856:	687a      	ldr	r2, [r7, #4]
 8009858:	68b9      	ldr	r1, [r7, #8]
 800985a:	68f8      	ldr	r0, [r7, #12]
 800985c:	f7ff ff40 	bl	80096e0 <vl53l5cx_dci_write_data>
 8009860:	4603      	mov	r3, r0
 8009862:	461a      	mov	r2, r3
 8009864:	7dfb      	ldrb	r3, [r7, #23]
 8009866:	4313      	orrs	r3, r2
 8009868:	75fb      	strb	r3, [r7, #23]

	return status;
 800986a:	7dfb      	ldrb	r3, [r7, #23]
}
 800986c:	4618      	mov	r0, r3
 800986e:	3718      	adds	r7, #24
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}

08009874 <__cvt>:
 8009874:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009878:	ec57 6b10 	vmov	r6, r7, d0
 800987c:	2f00      	cmp	r7, #0
 800987e:	460c      	mov	r4, r1
 8009880:	4619      	mov	r1, r3
 8009882:	463b      	mov	r3, r7
 8009884:	bfbb      	ittet	lt
 8009886:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800988a:	461f      	movlt	r7, r3
 800988c:	2300      	movge	r3, #0
 800988e:	232d      	movlt	r3, #45	@ 0x2d
 8009890:	700b      	strb	r3, [r1, #0]
 8009892:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009894:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009898:	4691      	mov	r9, r2
 800989a:	f023 0820 	bic.w	r8, r3, #32
 800989e:	bfbc      	itt	lt
 80098a0:	4632      	movlt	r2, r6
 80098a2:	4616      	movlt	r6, r2
 80098a4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80098a8:	d005      	beq.n	80098b6 <__cvt+0x42>
 80098aa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80098ae:	d100      	bne.n	80098b2 <__cvt+0x3e>
 80098b0:	3401      	adds	r4, #1
 80098b2:	2102      	movs	r1, #2
 80098b4:	e000      	b.n	80098b8 <__cvt+0x44>
 80098b6:	2103      	movs	r1, #3
 80098b8:	ab03      	add	r3, sp, #12
 80098ba:	9301      	str	r3, [sp, #4]
 80098bc:	ab02      	add	r3, sp, #8
 80098be:	9300      	str	r3, [sp, #0]
 80098c0:	ec47 6b10 	vmov	d0, r6, r7
 80098c4:	4653      	mov	r3, sl
 80098c6:	4622      	mov	r2, r4
 80098c8:	f000 fe4e 	bl	800a568 <_dtoa_r>
 80098cc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80098d0:	4605      	mov	r5, r0
 80098d2:	d119      	bne.n	8009908 <__cvt+0x94>
 80098d4:	f019 0f01 	tst.w	r9, #1
 80098d8:	d00e      	beq.n	80098f8 <__cvt+0x84>
 80098da:	eb00 0904 	add.w	r9, r0, r4
 80098de:	2200      	movs	r2, #0
 80098e0:	2300      	movs	r3, #0
 80098e2:	4630      	mov	r0, r6
 80098e4:	4639      	mov	r1, r7
 80098e6:	f7f7 f8ef 	bl	8000ac8 <__aeabi_dcmpeq>
 80098ea:	b108      	cbz	r0, 80098f0 <__cvt+0x7c>
 80098ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80098f0:	2230      	movs	r2, #48	@ 0x30
 80098f2:	9b03      	ldr	r3, [sp, #12]
 80098f4:	454b      	cmp	r3, r9
 80098f6:	d31e      	bcc.n	8009936 <__cvt+0xc2>
 80098f8:	9b03      	ldr	r3, [sp, #12]
 80098fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80098fc:	1b5b      	subs	r3, r3, r5
 80098fe:	4628      	mov	r0, r5
 8009900:	6013      	str	r3, [r2, #0]
 8009902:	b004      	add	sp, #16
 8009904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009908:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800990c:	eb00 0904 	add.w	r9, r0, r4
 8009910:	d1e5      	bne.n	80098de <__cvt+0x6a>
 8009912:	7803      	ldrb	r3, [r0, #0]
 8009914:	2b30      	cmp	r3, #48	@ 0x30
 8009916:	d10a      	bne.n	800992e <__cvt+0xba>
 8009918:	2200      	movs	r2, #0
 800991a:	2300      	movs	r3, #0
 800991c:	4630      	mov	r0, r6
 800991e:	4639      	mov	r1, r7
 8009920:	f7f7 f8d2 	bl	8000ac8 <__aeabi_dcmpeq>
 8009924:	b918      	cbnz	r0, 800992e <__cvt+0xba>
 8009926:	f1c4 0401 	rsb	r4, r4, #1
 800992a:	f8ca 4000 	str.w	r4, [sl]
 800992e:	f8da 3000 	ldr.w	r3, [sl]
 8009932:	4499      	add	r9, r3
 8009934:	e7d3      	b.n	80098de <__cvt+0x6a>
 8009936:	1c59      	adds	r1, r3, #1
 8009938:	9103      	str	r1, [sp, #12]
 800993a:	701a      	strb	r2, [r3, #0]
 800993c:	e7d9      	b.n	80098f2 <__cvt+0x7e>

0800993e <__exponent>:
 800993e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009940:	2900      	cmp	r1, #0
 8009942:	bfba      	itte	lt
 8009944:	4249      	neglt	r1, r1
 8009946:	232d      	movlt	r3, #45	@ 0x2d
 8009948:	232b      	movge	r3, #43	@ 0x2b
 800994a:	2909      	cmp	r1, #9
 800994c:	7002      	strb	r2, [r0, #0]
 800994e:	7043      	strb	r3, [r0, #1]
 8009950:	dd29      	ble.n	80099a6 <__exponent+0x68>
 8009952:	f10d 0307 	add.w	r3, sp, #7
 8009956:	461d      	mov	r5, r3
 8009958:	270a      	movs	r7, #10
 800995a:	461a      	mov	r2, r3
 800995c:	fbb1 f6f7 	udiv	r6, r1, r7
 8009960:	fb07 1416 	mls	r4, r7, r6, r1
 8009964:	3430      	adds	r4, #48	@ 0x30
 8009966:	f802 4c01 	strb.w	r4, [r2, #-1]
 800996a:	460c      	mov	r4, r1
 800996c:	2c63      	cmp	r4, #99	@ 0x63
 800996e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8009972:	4631      	mov	r1, r6
 8009974:	dcf1      	bgt.n	800995a <__exponent+0x1c>
 8009976:	3130      	adds	r1, #48	@ 0x30
 8009978:	1e94      	subs	r4, r2, #2
 800997a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800997e:	1c41      	adds	r1, r0, #1
 8009980:	4623      	mov	r3, r4
 8009982:	42ab      	cmp	r3, r5
 8009984:	d30a      	bcc.n	800999c <__exponent+0x5e>
 8009986:	f10d 0309 	add.w	r3, sp, #9
 800998a:	1a9b      	subs	r3, r3, r2
 800998c:	42ac      	cmp	r4, r5
 800998e:	bf88      	it	hi
 8009990:	2300      	movhi	r3, #0
 8009992:	3302      	adds	r3, #2
 8009994:	4403      	add	r3, r0
 8009996:	1a18      	subs	r0, r3, r0
 8009998:	b003      	add	sp, #12
 800999a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800999c:	f813 6b01 	ldrb.w	r6, [r3], #1
 80099a0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80099a4:	e7ed      	b.n	8009982 <__exponent+0x44>
 80099a6:	2330      	movs	r3, #48	@ 0x30
 80099a8:	3130      	adds	r1, #48	@ 0x30
 80099aa:	7083      	strb	r3, [r0, #2]
 80099ac:	70c1      	strb	r1, [r0, #3]
 80099ae:	1d03      	adds	r3, r0, #4
 80099b0:	e7f1      	b.n	8009996 <__exponent+0x58>
	...

080099b4 <_printf_float>:
 80099b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099b8:	b08d      	sub	sp, #52	@ 0x34
 80099ba:	460c      	mov	r4, r1
 80099bc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80099c0:	4616      	mov	r6, r2
 80099c2:	461f      	mov	r7, r3
 80099c4:	4605      	mov	r5, r0
 80099c6:	f000 fd07 	bl	800a3d8 <_localeconv_r>
 80099ca:	6803      	ldr	r3, [r0, #0]
 80099cc:	9304      	str	r3, [sp, #16]
 80099ce:	4618      	mov	r0, r3
 80099d0:	f7f6 fc4e 	bl	8000270 <strlen>
 80099d4:	2300      	movs	r3, #0
 80099d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80099d8:	f8d8 3000 	ldr.w	r3, [r8]
 80099dc:	9005      	str	r0, [sp, #20]
 80099de:	3307      	adds	r3, #7
 80099e0:	f023 0307 	bic.w	r3, r3, #7
 80099e4:	f103 0208 	add.w	r2, r3, #8
 80099e8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80099ec:	f8d4 b000 	ldr.w	fp, [r4]
 80099f0:	f8c8 2000 	str.w	r2, [r8]
 80099f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80099f8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80099fc:	9307      	str	r3, [sp, #28]
 80099fe:	f8cd 8018 	str.w	r8, [sp, #24]
 8009a02:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009a06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a0a:	4b9c      	ldr	r3, [pc, #624]	@ (8009c7c <_printf_float+0x2c8>)
 8009a0c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009a10:	f7f7 f88c 	bl	8000b2c <__aeabi_dcmpun>
 8009a14:	bb70      	cbnz	r0, 8009a74 <_printf_float+0xc0>
 8009a16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a1a:	4b98      	ldr	r3, [pc, #608]	@ (8009c7c <_printf_float+0x2c8>)
 8009a1c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009a20:	f7f7 f866 	bl	8000af0 <__aeabi_dcmple>
 8009a24:	bb30      	cbnz	r0, 8009a74 <_printf_float+0xc0>
 8009a26:	2200      	movs	r2, #0
 8009a28:	2300      	movs	r3, #0
 8009a2a:	4640      	mov	r0, r8
 8009a2c:	4649      	mov	r1, r9
 8009a2e:	f7f7 f855 	bl	8000adc <__aeabi_dcmplt>
 8009a32:	b110      	cbz	r0, 8009a3a <_printf_float+0x86>
 8009a34:	232d      	movs	r3, #45	@ 0x2d
 8009a36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a3a:	4a91      	ldr	r2, [pc, #580]	@ (8009c80 <_printf_float+0x2cc>)
 8009a3c:	4b91      	ldr	r3, [pc, #580]	@ (8009c84 <_printf_float+0x2d0>)
 8009a3e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009a42:	bf94      	ite	ls
 8009a44:	4690      	movls	r8, r2
 8009a46:	4698      	movhi	r8, r3
 8009a48:	2303      	movs	r3, #3
 8009a4a:	6123      	str	r3, [r4, #16]
 8009a4c:	f02b 0304 	bic.w	r3, fp, #4
 8009a50:	6023      	str	r3, [r4, #0]
 8009a52:	f04f 0900 	mov.w	r9, #0
 8009a56:	9700      	str	r7, [sp, #0]
 8009a58:	4633      	mov	r3, r6
 8009a5a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009a5c:	4621      	mov	r1, r4
 8009a5e:	4628      	mov	r0, r5
 8009a60:	f000 f9d2 	bl	8009e08 <_printf_common>
 8009a64:	3001      	adds	r0, #1
 8009a66:	f040 808d 	bne.w	8009b84 <_printf_float+0x1d0>
 8009a6a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009a6e:	b00d      	add	sp, #52	@ 0x34
 8009a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a74:	4642      	mov	r2, r8
 8009a76:	464b      	mov	r3, r9
 8009a78:	4640      	mov	r0, r8
 8009a7a:	4649      	mov	r1, r9
 8009a7c:	f7f7 f856 	bl	8000b2c <__aeabi_dcmpun>
 8009a80:	b140      	cbz	r0, 8009a94 <_printf_float+0xe0>
 8009a82:	464b      	mov	r3, r9
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	bfbc      	itt	lt
 8009a88:	232d      	movlt	r3, #45	@ 0x2d
 8009a8a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009a8e:	4a7e      	ldr	r2, [pc, #504]	@ (8009c88 <_printf_float+0x2d4>)
 8009a90:	4b7e      	ldr	r3, [pc, #504]	@ (8009c8c <_printf_float+0x2d8>)
 8009a92:	e7d4      	b.n	8009a3e <_printf_float+0x8a>
 8009a94:	6863      	ldr	r3, [r4, #4]
 8009a96:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009a9a:	9206      	str	r2, [sp, #24]
 8009a9c:	1c5a      	adds	r2, r3, #1
 8009a9e:	d13b      	bne.n	8009b18 <_printf_float+0x164>
 8009aa0:	2306      	movs	r3, #6
 8009aa2:	6063      	str	r3, [r4, #4]
 8009aa4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	6022      	str	r2, [r4, #0]
 8009aac:	9303      	str	r3, [sp, #12]
 8009aae:	ab0a      	add	r3, sp, #40	@ 0x28
 8009ab0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009ab4:	ab09      	add	r3, sp, #36	@ 0x24
 8009ab6:	9300      	str	r3, [sp, #0]
 8009ab8:	6861      	ldr	r1, [r4, #4]
 8009aba:	ec49 8b10 	vmov	d0, r8, r9
 8009abe:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009ac2:	4628      	mov	r0, r5
 8009ac4:	f7ff fed6 	bl	8009874 <__cvt>
 8009ac8:	9b06      	ldr	r3, [sp, #24]
 8009aca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009acc:	2b47      	cmp	r3, #71	@ 0x47
 8009ace:	4680      	mov	r8, r0
 8009ad0:	d129      	bne.n	8009b26 <_printf_float+0x172>
 8009ad2:	1cc8      	adds	r0, r1, #3
 8009ad4:	db02      	blt.n	8009adc <_printf_float+0x128>
 8009ad6:	6863      	ldr	r3, [r4, #4]
 8009ad8:	4299      	cmp	r1, r3
 8009ada:	dd41      	ble.n	8009b60 <_printf_float+0x1ac>
 8009adc:	f1aa 0a02 	sub.w	sl, sl, #2
 8009ae0:	fa5f fa8a 	uxtb.w	sl, sl
 8009ae4:	3901      	subs	r1, #1
 8009ae6:	4652      	mov	r2, sl
 8009ae8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009aec:	9109      	str	r1, [sp, #36]	@ 0x24
 8009aee:	f7ff ff26 	bl	800993e <__exponent>
 8009af2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009af4:	1813      	adds	r3, r2, r0
 8009af6:	2a01      	cmp	r2, #1
 8009af8:	4681      	mov	r9, r0
 8009afa:	6123      	str	r3, [r4, #16]
 8009afc:	dc02      	bgt.n	8009b04 <_printf_float+0x150>
 8009afe:	6822      	ldr	r2, [r4, #0]
 8009b00:	07d2      	lsls	r2, r2, #31
 8009b02:	d501      	bpl.n	8009b08 <_printf_float+0x154>
 8009b04:	3301      	adds	r3, #1
 8009b06:	6123      	str	r3, [r4, #16]
 8009b08:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d0a2      	beq.n	8009a56 <_printf_float+0xa2>
 8009b10:	232d      	movs	r3, #45	@ 0x2d
 8009b12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b16:	e79e      	b.n	8009a56 <_printf_float+0xa2>
 8009b18:	9a06      	ldr	r2, [sp, #24]
 8009b1a:	2a47      	cmp	r2, #71	@ 0x47
 8009b1c:	d1c2      	bne.n	8009aa4 <_printf_float+0xf0>
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d1c0      	bne.n	8009aa4 <_printf_float+0xf0>
 8009b22:	2301      	movs	r3, #1
 8009b24:	e7bd      	b.n	8009aa2 <_printf_float+0xee>
 8009b26:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009b2a:	d9db      	bls.n	8009ae4 <_printf_float+0x130>
 8009b2c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009b30:	d118      	bne.n	8009b64 <_printf_float+0x1b0>
 8009b32:	2900      	cmp	r1, #0
 8009b34:	6863      	ldr	r3, [r4, #4]
 8009b36:	dd0b      	ble.n	8009b50 <_printf_float+0x19c>
 8009b38:	6121      	str	r1, [r4, #16]
 8009b3a:	b913      	cbnz	r3, 8009b42 <_printf_float+0x18e>
 8009b3c:	6822      	ldr	r2, [r4, #0]
 8009b3e:	07d0      	lsls	r0, r2, #31
 8009b40:	d502      	bpl.n	8009b48 <_printf_float+0x194>
 8009b42:	3301      	adds	r3, #1
 8009b44:	440b      	add	r3, r1
 8009b46:	6123      	str	r3, [r4, #16]
 8009b48:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009b4a:	f04f 0900 	mov.w	r9, #0
 8009b4e:	e7db      	b.n	8009b08 <_printf_float+0x154>
 8009b50:	b913      	cbnz	r3, 8009b58 <_printf_float+0x1a4>
 8009b52:	6822      	ldr	r2, [r4, #0]
 8009b54:	07d2      	lsls	r2, r2, #31
 8009b56:	d501      	bpl.n	8009b5c <_printf_float+0x1a8>
 8009b58:	3302      	adds	r3, #2
 8009b5a:	e7f4      	b.n	8009b46 <_printf_float+0x192>
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	e7f2      	b.n	8009b46 <_printf_float+0x192>
 8009b60:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009b64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b66:	4299      	cmp	r1, r3
 8009b68:	db05      	blt.n	8009b76 <_printf_float+0x1c2>
 8009b6a:	6823      	ldr	r3, [r4, #0]
 8009b6c:	6121      	str	r1, [r4, #16]
 8009b6e:	07d8      	lsls	r0, r3, #31
 8009b70:	d5ea      	bpl.n	8009b48 <_printf_float+0x194>
 8009b72:	1c4b      	adds	r3, r1, #1
 8009b74:	e7e7      	b.n	8009b46 <_printf_float+0x192>
 8009b76:	2900      	cmp	r1, #0
 8009b78:	bfd4      	ite	le
 8009b7a:	f1c1 0202 	rsble	r2, r1, #2
 8009b7e:	2201      	movgt	r2, #1
 8009b80:	4413      	add	r3, r2
 8009b82:	e7e0      	b.n	8009b46 <_printf_float+0x192>
 8009b84:	6823      	ldr	r3, [r4, #0]
 8009b86:	055a      	lsls	r2, r3, #21
 8009b88:	d407      	bmi.n	8009b9a <_printf_float+0x1e6>
 8009b8a:	6923      	ldr	r3, [r4, #16]
 8009b8c:	4642      	mov	r2, r8
 8009b8e:	4631      	mov	r1, r6
 8009b90:	4628      	mov	r0, r5
 8009b92:	47b8      	blx	r7
 8009b94:	3001      	adds	r0, #1
 8009b96:	d12b      	bne.n	8009bf0 <_printf_float+0x23c>
 8009b98:	e767      	b.n	8009a6a <_printf_float+0xb6>
 8009b9a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009b9e:	f240 80dd 	bls.w	8009d5c <_printf_float+0x3a8>
 8009ba2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	2300      	movs	r3, #0
 8009baa:	f7f6 ff8d 	bl	8000ac8 <__aeabi_dcmpeq>
 8009bae:	2800      	cmp	r0, #0
 8009bb0:	d033      	beq.n	8009c1a <_printf_float+0x266>
 8009bb2:	4a37      	ldr	r2, [pc, #220]	@ (8009c90 <_printf_float+0x2dc>)
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	4631      	mov	r1, r6
 8009bb8:	4628      	mov	r0, r5
 8009bba:	47b8      	blx	r7
 8009bbc:	3001      	adds	r0, #1
 8009bbe:	f43f af54 	beq.w	8009a6a <_printf_float+0xb6>
 8009bc2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009bc6:	4543      	cmp	r3, r8
 8009bc8:	db02      	blt.n	8009bd0 <_printf_float+0x21c>
 8009bca:	6823      	ldr	r3, [r4, #0]
 8009bcc:	07d8      	lsls	r0, r3, #31
 8009bce:	d50f      	bpl.n	8009bf0 <_printf_float+0x23c>
 8009bd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009bd4:	4631      	mov	r1, r6
 8009bd6:	4628      	mov	r0, r5
 8009bd8:	47b8      	blx	r7
 8009bda:	3001      	adds	r0, #1
 8009bdc:	f43f af45 	beq.w	8009a6a <_printf_float+0xb6>
 8009be0:	f04f 0900 	mov.w	r9, #0
 8009be4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8009be8:	f104 0a1a 	add.w	sl, r4, #26
 8009bec:	45c8      	cmp	r8, r9
 8009bee:	dc09      	bgt.n	8009c04 <_printf_float+0x250>
 8009bf0:	6823      	ldr	r3, [r4, #0]
 8009bf2:	079b      	lsls	r3, r3, #30
 8009bf4:	f100 8103 	bmi.w	8009dfe <_printf_float+0x44a>
 8009bf8:	68e0      	ldr	r0, [r4, #12]
 8009bfa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009bfc:	4298      	cmp	r0, r3
 8009bfe:	bfb8      	it	lt
 8009c00:	4618      	movlt	r0, r3
 8009c02:	e734      	b.n	8009a6e <_printf_float+0xba>
 8009c04:	2301      	movs	r3, #1
 8009c06:	4652      	mov	r2, sl
 8009c08:	4631      	mov	r1, r6
 8009c0a:	4628      	mov	r0, r5
 8009c0c:	47b8      	blx	r7
 8009c0e:	3001      	adds	r0, #1
 8009c10:	f43f af2b 	beq.w	8009a6a <_printf_float+0xb6>
 8009c14:	f109 0901 	add.w	r9, r9, #1
 8009c18:	e7e8      	b.n	8009bec <_printf_float+0x238>
 8009c1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	dc39      	bgt.n	8009c94 <_printf_float+0x2e0>
 8009c20:	4a1b      	ldr	r2, [pc, #108]	@ (8009c90 <_printf_float+0x2dc>)
 8009c22:	2301      	movs	r3, #1
 8009c24:	4631      	mov	r1, r6
 8009c26:	4628      	mov	r0, r5
 8009c28:	47b8      	blx	r7
 8009c2a:	3001      	adds	r0, #1
 8009c2c:	f43f af1d 	beq.w	8009a6a <_printf_float+0xb6>
 8009c30:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009c34:	ea59 0303 	orrs.w	r3, r9, r3
 8009c38:	d102      	bne.n	8009c40 <_printf_float+0x28c>
 8009c3a:	6823      	ldr	r3, [r4, #0]
 8009c3c:	07d9      	lsls	r1, r3, #31
 8009c3e:	d5d7      	bpl.n	8009bf0 <_printf_float+0x23c>
 8009c40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c44:	4631      	mov	r1, r6
 8009c46:	4628      	mov	r0, r5
 8009c48:	47b8      	blx	r7
 8009c4a:	3001      	adds	r0, #1
 8009c4c:	f43f af0d 	beq.w	8009a6a <_printf_float+0xb6>
 8009c50:	f04f 0a00 	mov.w	sl, #0
 8009c54:	f104 0b1a 	add.w	fp, r4, #26
 8009c58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c5a:	425b      	negs	r3, r3
 8009c5c:	4553      	cmp	r3, sl
 8009c5e:	dc01      	bgt.n	8009c64 <_printf_float+0x2b0>
 8009c60:	464b      	mov	r3, r9
 8009c62:	e793      	b.n	8009b8c <_printf_float+0x1d8>
 8009c64:	2301      	movs	r3, #1
 8009c66:	465a      	mov	r2, fp
 8009c68:	4631      	mov	r1, r6
 8009c6a:	4628      	mov	r0, r5
 8009c6c:	47b8      	blx	r7
 8009c6e:	3001      	adds	r0, #1
 8009c70:	f43f aefb 	beq.w	8009a6a <_printf_float+0xb6>
 8009c74:	f10a 0a01 	add.w	sl, sl, #1
 8009c78:	e7ee      	b.n	8009c58 <_printf_float+0x2a4>
 8009c7a:	bf00      	nop
 8009c7c:	7fefffff 	.word	0x7fefffff
 8009c80:	080220d4 	.word	0x080220d4
 8009c84:	080220d8 	.word	0x080220d8
 8009c88:	080220dc 	.word	0x080220dc
 8009c8c:	080220e0 	.word	0x080220e0
 8009c90:	080220e4 	.word	0x080220e4
 8009c94:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009c96:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009c9a:	4553      	cmp	r3, sl
 8009c9c:	bfa8      	it	ge
 8009c9e:	4653      	movge	r3, sl
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	4699      	mov	r9, r3
 8009ca4:	dc36      	bgt.n	8009d14 <_printf_float+0x360>
 8009ca6:	f04f 0b00 	mov.w	fp, #0
 8009caa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009cae:	f104 021a 	add.w	r2, r4, #26
 8009cb2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009cb4:	9306      	str	r3, [sp, #24]
 8009cb6:	eba3 0309 	sub.w	r3, r3, r9
 8009cba:	455b      	cmp	r3, fp
 8009cbc:	dc31      	bgt.n	8009d22 <_printf_float+0x36e>
 8009cbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cc0:	459a      	cmp	sl, r3
 8009cc2:	dc3a      	bgt.n	8009d3a <_printf_float+0x386>
 8009cc4:	6823      	ldr	r3, [r4, #0]
 8009cc6:	07da      	lsls	r2, r3, #31
 8009cc8:	d437      	bmi.n	8009d3a <_printf_float+0x386>
 8009cca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ccc:	ebaa 0903 	sub.w	r9, sl, r3
 8009cd0:	9b06      	ldr	r3, [sp, #24]
 8009cd2:	ebaa 0303 	sub.w	r3, sl, r3
 8009cd6:	4599      	cmp	r9, r3
 8009cd8:	bfa8      	it	ge
 8009cda:	4699      	movge	r9, r3
 8009cdc:	f1b9 0f00 	cmp.w	r9, #0
 8009ce0:	dc33      	bgt.n	8009d4a <_printf_float+0x396>
 8009ce2:	f04f 0800 	mov.w	r8, #0
 8009ce6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009cea:	f104 0b1a 	add.w	fp, r4, #26
 8009cee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cf0:	ebaa 0303 	sub.w	r3, sl, r3
 8009cf4:	eba3 0309 	sub.w	r3, r3, r9
 8009cf8:	4543      	cmp	r3, r8
 8009cfa:	f77f af79 	ble.w	8009bf0 <_printf_float+0x23c>
 8009cfe:	2301      	movs	r3, #1
 8009d00:	465a      	mov	r2, fp
 8009d02:	4631      	mov	r1, r6
 8009d04:	4628      	mov	r0, r5
 8009d06:	47b8      	blx	r7
 8009d08:	3001      	adds	r0, #1
 8009d0a:	f43f aeae 	beq.w	8009a6a <_printf_float+0xb6>
 8009d0e:	f108 0801 	add.w	r8, r8, #1
 8009d12:	e7ec      	b.n	8009cee <_printf_float+0x33a>
 8009d14:	4642      	mov	r2, r8
 8009d16:	4631      	mov	r1, r6
 8009d18:	4628      	mov	r0, r5
 8009d1a:	47b8      	blx	r7
 8009d1c:	3001      	adds	r0, #1
 8009d1e:	d1c2      	bne.n	8009ca6 <_printf_float+0x2f2>
 8009d20:	e6a3      	b.n	8009a6a <_printf_float+0xb6>
 8009d22:	2301      	movs	r3, #1
 8009d24:	4631      	mov	r1, r6
 8009d26:	4628      	mov	r0, r5
 8009d28:	9206      	str	r2, [sp, #24]
 8009d2a:	47b8      	blx	r7
 8009d2c:	3001      	adds	r0, #1
 8009d2e:	f43f ae9c 	beq.w	8009a6a <_printf_float+0xb6>
 8009d32:	9a06      	ldr	r2, [sp, #24]
 8009d34:	f10b 0b01 	add.w	fp, fp, #1
 8009d38:	e7bb      	b.n	8009cb2 <_printf_float+0x2fe>
 8009d3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d3e:	4631      	mov	r1, r6
 8009d40:	4628      	mov	r0, r5
 8009d42:	47b8      	blx	r7
 8009d44:	3001      	adds	r0, #1
 8009d46:	d1c0      	bne.n	8009cca <_printf_float+0x316>
 8009d48:	e68f      	b.n	8009a6a <_printf_float+0xb6>
 8009d4a:	9a06      	ldr	r2, [sp, #24]
 8009d4c:	464b      	mov	r3, r9
 8009d4e:	4442      	add	r2, r8
 8009d50:	4631      	mov	r1, r6
 8009d52:	4628      	mov	r0, r5
 8009d54:	47b8      	blx	r7
 8009d56:	3001      	adds	r0, #1
 8009d58:	d1c3      	bne.n	8009ce2 <_printf_float+0x32e>
 8009d5a:	e686      	b.n	8009a6a <_printf_float+0xb6>
 8009d5c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009d60:	f1ba 0f01 	cmp.w	sl, #1
 8009d64:	dc01      	bgt.n	8009d6a <_printf_float+0x3b6>
 8009d66:	07db      	lsls	r3, r3, #31
 8009d68:	d536      	bpl.n	8009dd8 <_printf_float+0x424>
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	4642      	mov	r2, r8
 8009d6e:	4631      	mov	r1, r6
 8009d70:	4628      	mov	r0, r5
 8009d72:	47b8      	blx	r7
 8009d74:	3001      	adds	r0, #1
 8009d76:	f43f ae78 	beq.w	8009a6a <_printf_float+0xb6>
 8009d7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d7e:	4631      	mov	r1, r6
 8009d80:	4628      	mov	r0, r5
 8009d82:	47b8      	blx	r7
 8009d84:	3001      	adds	r0, #1
 8009d86:	f43f ae70 	beq.w	8009a6a <_printf_float+0xb6>
 8009d8a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009d8e:	2200      	movs	r2, #0
 8009d90:	2300      	movs	r3, #0
 8009d92:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8009d96:	f7f6 fe97 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d9a:	b9c0      	cbnz	r0, 8009dce <_printf_float+0x41a>
 8009d9c:	4653      	mov	r3, sl
 8009d9e:	f108 0201 	add.w	r2, r8, #1
 8009da2:	4631      	mov	r1, r6
 8009da4:	4628      	mov	r0, r5
 8009da6:	47b8      	blx	r7
 8009da8:	3001      	adds	r0, #1
 8009daa:	d10c      	bne.n	8009dc6 <_printf_float+0x412>
 8009dac:	e65d      	b.n	8009a6a <_printf_float+0xb6>
 8009dae:	2301      	movs	r3, #1
 8009db0:	465a      	mov	r2, fp
 8009db2:	4631      	mov	r1, r6
 8009db4:	4628      	mov	r0, r5
 8009db6:	47b8      	blx	r7
 8009db8:	3001      	adds	r0, #1
 8009dba:	f43f ae56 	beq.w	8009a6a <_printf_float+0xb6>
 8009dbe:	f108 0801 	add.w	r8, r8, #1
 8009dc2:	45d0      	cmp	r8, sl
 8009dc4:	dbf3      	blt.n	8009dae <_printf_float+0x3fa>
 8009dc6:	464b      	mov	r3, r9
 8009dc8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009dcc:	e6df      	b.n	8009b8e <_printf_float+0x1da>
 8009dce:	f04f 0800 	mov.w	r8, #0
 8009dd2:	f104 0b1a 	add.w	fp, r4, #26
 8009dd6:	e7f4      	b.n	8009dc2 <_printf_float+0x40e>
 8009dd8:	2301      	movs	r3, #1
 8009dda:	4642      	mov	r2, r8
 8009ddc:	e7e1      	b.n	8009da2 <_printf_float+0x3ee>
 8009dde:	2301      	movs	r3, #1
 8009de0:	464a      	mov	r2, r9
 8009de2:	4631      	mov	r1, r6
 8009de4:	4628      	mov	r0, r5
 8009de6:	47b8      	blx	r7
 8009de8:	3001      	adds	r0, #1
 8009dea:	f43f ae3e 	beq.w	8009a6a <_printf_float+0xb6>
 8009dee:	f108 0801 	add.w	r8, r8, #1
 8009df2:	68e3      	ldr	r3, [r4, #12]
 8009df4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009df6:	1a5b      	subs	r3, r3, r1
 8009df8:	4543      	cmp	r3, r8
 8009dfa:	dcf0      	bgt.n	8009dde <_printf_float+0x42a>
 8009dfc:	e6fc      	b.n	8009bf8 <_printf_float+0x244>
 8009dfe:	f04f 0800 	mov.w	r8, #0
 8009e02:	f104 0919 	add.w	r9, r4, #25
 8009e06:	e7f4      	b.n	8009df2 <_printf_float+0x43e>

08009e08 <_printf_common>:
 8009e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e0c:	4616      	mov	r6, r2
 8009e0e:	4698      	mov	r8, r3
 8009e10:	688a      	ldr	r2, [r1, #8]
 8009e12:	690b      	ldr	r3, [r1, #16]
 8009e14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	bfb8      	it	lt
 8009e1c:	4613      	movlt	r3, r2
 8009e1e:	6033      	str	r3, [r6, #0]
 8009e20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009e24:	4607      	mov	r7, r0
 8009e26:	460c      	mov	r4, r1
 8009e28:	b10a      	cbz	r2, 8009e2e <_printf_common+0x26>
 8009e2a:	3301      	adds	r3, #1
 8009e2c:	6033      	str	r3, [r6, #0]
 8009e2e:	6823      	ldr	r3, [r4, #0]
 8009e30:	0699      	lsls	r1, r3, #26
 8009e32:	bf42      	ittt	mi
 8009e34:	6833      	ldrmi	r3, [r6, #0]
 8009e36:	3302      	addmi	r3, #2
 8009e38:	6033      	strmi	r3, [r6, #0]
 8009e3a:	6825      	ldr	r5, [r4, #0]
 8009e3c:	f015 0506 	ands.w	r5, r5, #6
 8009e40:	d106      	bne.n	8009e50 <_printf_common+0x48>
 8009e42:	f104 0a19 	add.w	sl, r4, #25
 8009e46:	68e3      	ldr	r3, [r4, #12]
 8009e48:	6832      	ldr	r2, [r6, #0]
 8009e4a:	1a9b      	subs	r3, r3, r2
 8009e4c:	42ab      	cmp	r3, r5
 8009e4e:	dc26      	bgt.n	8009e9e <_printf_common+0x96>
 8009e50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009e54:	6822      	ldr	r2, [r4, #0]
 8009e56:	3b00      	subs	r3, #0
 8009e58:	bf18      	it	ne
 8009e5a:	2301      	movne	r3, #1
 8009e5c:	0692      	lsls	r2, r2, #26
 8009e5e:	d42b      	bmi.n	8009eb8 <_printf_common+0xb0>
 8009e60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009e64:	4641      	mov	r1, r8
 8009e66:	4638      	mov	r0, r7
 8009e68:	47c8      	blx	r9
 8009e6a:	3001      	adds	r0, #1
 8009e6c:	d01e      	beq.n	8009eac <_printf_common+0xa4>
 8009e6e:	6823      	ldr	r3, [r4, #0]
 8009e70:	6922      	ldr	r2, [r4, #16]
 8009e72:	f003 0306 	and.w	r3, r3, #6
 8009e76:	2b04      	cmp	r3, #4
 8009e78:	bf02      	ittt	eq
 8009e7a:	68e5      	ldreq	r5, [r4, #12]
 8009e7c:	6833      	ldreq	r3, [r6, #0]
 8009e7e:	1aed      	subeq	r5, r5, r3
 8009e80:	68a3      	ldr	r3, [r4, #8]
 8009e82:	bf0c      	ite	eq
 8009e84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e88:	2500      	movne	r5, #0
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	bfc4      	itt	gt
 8009e8e:	1a9b      	subgt	r3, r3, r2
 8009e90:	18ed      	addgt	r5, r5, r3
 8009e92:	2600      	movs	r6, #0
 8009e94:	341a      	adds	r4, #26
 8009e96:	42b5      	cmp	r5, r6
 8009e98:	d11a      	bne.n	8009ed0 <_printf_common+0xc8>
 8009e9a:	2000      	movs	r0, #0
 8009e9c:	e008      	b.n	8009eb0 <_printf_common+0xa8>
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	4652      	mov	r2, sl
 8009ea2:	4641      	mov	r1, r8
 8009ea4:	4638      	mov	r0, r7
 8009ea6:	47c8      	blx	r9
 8009ea8:	3001      	adds	r0, #1
 8009eaa:	d103      	bne.n	8009eb4 <_printf_common+0xac>
 8009eac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eb4:	3501      	adds	r5, #1
 8009eb6:	e7c6      	b.n	8009e46 <_printf_common+0x3e>
 8009eb8:	18e1      	adds	r1, r4, r3
 8009eba:	1c5a      	adds	r2, r3, #1
 8009ebc:	2030      	movs	r0, #48	@ 0x30
 8009ebe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009ec2:	4422      	add	r2, r4
 8009ec4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009ec8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009ecc:	3302      	adds	r3, #2
 8009ece:	e7c7      	b.n	8009e60 <_printf_common+0x58>
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	4622      	mov	r2, r4
 8009ed4:	4641      	mov	r1, r8
 8009ed6:	4638      	mov	r0, r7
 8009ed8:	47c8      	blx	r9
 8009eda:	3001      	adds	r0, #1
 8009edc:	d0e6      	beq.n	8009eac <_printf_common+0xa4>
 8009ede:	3601      	adds	r6, #1
 8009ee0:	e7d9      	b.n	8009e96 <_printf_common+0x8e>
	...

08009ee4 <_printf_i>:
 8009ee4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ee8:	7e0f      	ldrb	r7, [r1, #24]
 8009eea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009eec:	2f78      	cmp	r7, #120	@ 0x78
 8009eee:	4691      	mov	r9, r2
 8009ef0:	4680      	mov	r8, r0
 8009ef2:	460c      	mov	r4, r1
 8009ef4:	469a      	mov	sl, r3
 8009ef6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009efa:	d807      	bhi.n	8009f0c <_printf_i+0x28>
 8009efc:	2f62      	cmp	r7, #98	@ 0x62
 8009efe:	d80a      	bhi.n	8009f16 <_printf_i+0x32>
 8009f00:	2f00      	cmp	r7, #0
 8009f02:	f000 80d2 	beq.w	800a0aa <_printf_i+0x1c6>
 8009f06:	2f58      	cmp	r7, #88	@ 0x58
 8009f08:	f000 80b9 	beq.w	800a07e <_printf_i+0x19a>
 8009f0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009f10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009f14:	e03a      	b.n	8009f8c <_printf_i+0xa8>
 8009f16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009f1a:	2b15      	cmp	r3, #21
 8009f1c:	d8f6      	bhi.n	8009f0c <_printf_i+0x28>
 8009f1e:	a101      	add	r1, pc, #4	@ (adr r1, 8009f24 <_printf_i+0x40>)
 8009f20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009f24:	08009f7d 	.word	0x08009f7d
 8009f28:	08009f91 	.word	0x08009f91
 8009f2c:	08009f0d 	.word	0x08009f0d
 8009f30:	08009f0d 	.word	0x08009f0d
 8009f34:	08009f0d 	.word	0x08009f0d
 8009f38:	08009f0d 	.word	0x08009f0d
 8009f3c:	08009f91 	.word	0x08009f91
 8009f40:	08009f0d 	.word	0x08009f0d
 8009f44:	08009f0d 	.word	0x08009f0d
 8009f48:	08009f0d 	.word	0x08009f0d
 8009f4c:	08009f0d 	.word	0x08009f0d
 8009f50:	0800a091 	.word	0x0800a091
 8009f54:	08009fbb 	.word	0x08009fbb
 8009f58:	0800a04b 	.word	0x0800a04b
 8009f5c:	08009f0d 	.word	0x08009f0d
 8009f60:	08009f0d 	.word	0x08009f0d
 8009f64:	0800a0b3 	.word	0x0800a0b3
 8009f68:	08009f0d 	.word	0x08009f0d
 8009f6c:	08009fbb 	.word	0x08009fbb
 8009f70:	08009f0d 	.word	0x08009f0d
 8009f74:	08009f0d 	.word	0x08009f0d
 8009f78:	0800a053 	.word	0x0800a053
 8009f7c:	6833      	ldr	r3, [r6, #0]
 8009f7e:	1d1a      	adds	r2, r3, #4
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	6032      	str	r2, [r6, #0]
 8009f84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009f88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	e09d      	b.n	800a0cc <_printf_i+0x1e8>
 8009f90:	6833      	ldr	r3, [r6, #0]
 8009f92:	6820      	ldr	r0, [r4, #0]
 8009f94:	1d19      	adds	r1, r3, #4
 8009f96:	6031      	str	r1, [r6, #0]
 8009f98:	0606      	lsls	r6, r0, #24
 8009f9a:	d501      	bpl.n	8009fa0 <_printf_i+0xbc>
 8009f9c:	681d      	ldr	r5, [r3, #0]
 8009f9e:	e003      	b.n	8009fa8 <_printf_i+0xc4>
 8009fa0:	0645      	lsls	r5, r0, #25
 8009fa2:	d5fb      	bpl.n	8009f9c <_printf_i+0xb8>
 8009fa4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009fa8:	2d00      	cmp	r5, #0
 8009faa:	da03      	bge.n	8009fb4 <_printf_i+0xd0>
 8009fac:	232d      	movs	r3, #45	@ 0x2d
 8009fae:	426d      	negs	r5, r5
 8009fb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009fb4:	4859      	ldr	r0, [pc, #356]	@ (800a11c <_printf_i+0x238>)
 8009fb6:	230a      	movs	r3, #10
 8009fb8:	e011      	b.n	8009fde <_printf_i+0xfa>
 8009fba:	6821      	ldr	r1, [r4, #0]
 8009fbc:	6833      	ldr	r3, [r6, #0]
 8009fbe:	0608      	lsls	r0, r1, #24
 8009fc0:	f853 5b04 	ldr.w	r5, [r3], #4
 8009fc4:	d402      	bmi.n	8009fcc <_printf_i+0xe8>
 8009fc6:	0649      	lsls	r1, r1, #25
 8009fc8:	bf48      	it	mi
 8009fca:	b2ad      	uxthmi	r5, r5
 8009fcc:	2f6f      	cmp	r7, #111	@ 0x6f
 8009fce:	4853      	ldr	r0, [pc, #332]	@ (800a11c <_printf_i+0x238>)
 8009fd0:	6033      	str	r3, [r6, #0]
 8009fd2:	bf14      	ite	ne
 8009fd4:	230a      	movne	r3, #10
 8009fd6:	2308      	moveq	r3, #8
 8009fd8:	2100      	movs	r1, #0
 8009fda:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009fde:	6866      	ldr	r6, [r4, #4]
 8009fe0:	60a6      	str	r6, [r4, #8]
 8009fe2:	2e00      	cmp	r6, #0
 8009fe4:	bfa2      	ittt	ge
 8009fe6:	6821      	ldrge	r1, [r4, #0]
 8009fe8:	f021 0104 	bicge.w	r1, r1, #4
 8009fec:	6021      	strge	r1, [r4, #0]
 8009fee:	b90d      	cbnz	r5, 8009ff4 <_printf_i+0x110>
 8009ff0:	2e00      	cmp	r6, #0
 8009ff2:	d04b      	beq.n	800a08c <_printf_i+0x1a8>
 8009ff4:	4616      	mov	r6, r2
 8009ff6:	fbb5 f1f3 	udiv	r1, r5, r3
 8009ffa:	fb03 5711 	mls	r7, r3, r1, r5
 8009ffe:	5dc7      	ldrb	r7, [r0, r7]
 800a000:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a004:	462f      	mov	r7, r5
 800a006:	42bb      	cmp	r3, r7
 800a008:	460d      	mov	r5, r1
 800a00a:	d9f4      	bls.n	8009ff6 <_printf_i+0x112>
 800a00c:	2b08      	cmp	r3, #8
 800a00e:	d10b      	bne.n	800a028 <_printf_i+0x144>
 800a010:	6823      	ldr	r3, [r4, #0]
 800a012:	07df      	lsls	r7, r3, #31
 800a014:	d508      	bpl.n	800a028 <_printf_i+0x144>
 800a016:	6923      	ldr	r3, [r4, #16]
 800a018:	6861      	ldr	r1, [r4, #4]
 800a01a:	4299      	cmp	r1, r3
 800a01c:	bfde      	ittt	le
 800a01e:	2330      	movle	r3, #48	@ 0x30
 800a020:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a024:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800a028:	1b92      	subs	r2, r2, r6
 800a02a:	6122      	str	r2, [r4, #16]
 800a02c:	f8cd a000 	str.w	sl, [sp]
 800a030:	464b      	mov	r3, r9
 800a032:	aa03      	add	r2, sp, #12
 800a034:	4621      	mov	r1, r4
 800a036:	4640      	mov	r0, r8
 800a038:	f7ff fee6 	bl	8009e08 <_printf_common>
 800a03c:	3001      	adds	r0, #1
 800a03e:	d14a      	bne.n	800a0d6 <_printf_i+0x1f2>
 800a040:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a044:	b004      	add	sp, #16
 800a046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a04a:	6823      	ldr	r3, [r4, #0]
 800a04c:	f043 0320 	orr.w	r3, r3, #32
 800a050:	6023      	str	r3, [r4, #0]
 800a052:	4833      	ldr	r0, [pc, #204]	@ (800a120 <_printf_i+0x23c>)
 800a054:	2778      	movs	r7, #120	@ 0x78
 800a056:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a05a:	6823      	ldr	r3, [r4, #0]
 800a05c:	6831      	ldr	r1, [r6, #0]
 800a05e:	061f      	lsls	r7, r3, #24
 800a060:	f851 5b04 	ldr.w	r5, [r1], #4
 800a064:	d402      	bmi.n	800a06c <_printf_i+0x188>
 800a066:	065f      	lsls	r7, r3, #25
 800a068:	bf48      	it	mi
 800a06a:	b2ad      	uxthmi	r5, r5
 800a06c:	6031      	str	r1, [r6, #0]
 800a06e:	07d9      	lsls	r1, r3, #31
 800a070:	bf44      	itt	mi
 800a072:	f043 0320 	orrmi.w	r3, r3, #32
 800a076:	6023      	strmi	r3, [r4, #0]
 800a078:	b11d      	cbz	r5, 800a082 <_printf_i+0x19e>
 800a07a:	2310      	movs	r3, #16
 800a07c:	e7ac      	b.n	8009fd8 <_printf_i+0xf4>
 800a07e:	4827      	ldr	r0, [pc, #156]	@ (800a11c <_printf_i+0x238>)
 800a080:	e7e9      	b.n	800a056 <_printf_i+0x172>
 800a082:	6823      	ldr	r3, [r4, #0]
 800a084:	f023 0320 	bic.w	r3, r3, #32
 800a088:	6023      	str	r3, [r4, #0]
 800a08a:	e7f6      	b.n	800a07a <_printf_i+0x196>
 800a08c:	4616      	mov	r6, r2
 800a08e:	e7bd      	b.n	800a00c <_printf_i+0x128>
 800a090:	6833      	ldr	r3, [r6, #0]
 800a092:	6825      	ldr	r5, [r4, #0]
 800a094:	6961      	ldr	r1, [r4, #20]
 800a096:	1d18      	adds	r0, r3, #4
 800a098:	6030      	str	r0, [r6, #0]
 800a09a:	062e      	lsls	r6, r5, #24
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	d501      	bpl.n	800a0a4 <_printf_i+0x1c0>
 800a0a0:	6019      	str	r1, [r3, #0]
 800a0a2:	e002      	b.n	800a0aa <_printf_i+0x1c6>
 800a0a4:	0668      	lsls	r0, r5, #25
 800a0a6:	d5fb      	bpl.n	800a0a0 <_printf_i+0x1bc>
 800a0a8:	8019      	strh	r1, [r3, #0]
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	6123      	str	r3, [r4, #16]
 800a0ae:	4616      	mov	r6, r2
 800a0b0:	e7bc      	b.n	800a02c <_printf_i+0x148>
 800a0b2:	6833      	ldr	r3, [r6, #0]
 800a0b4:	1d1a      	adds	r2, r3, #4
 800a0b6:	6032      	str	r2, [r6, #0]
 800a0b8:	681e      	ldr	r6, [r3, #0]
 800a0ba:	6862      	ldr	r2, [r4, #4]
 800a0bc:	2100      	movs	r1, #0
 800a0be:	4630      	mov	r0, r6
 800a0c0:	f7f6 f886 	bl	80001d0 <memchr>
 800a0c4:	b108      	cbz	r0, 800a0ca <_printf_i+0x1e6>
 800a0c6:	1b80      	subs	r0, r0, r6
 800a0c8:	6060      	str	r0, [r4, #4]
 800a0ca:	6863      	ldr	r3, [r4, #4]
 800a0cc:	6123      	str	r3, [r4, #16]
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a0d4:	e7aa      	b.n	800a02c <_printf_i+0x148>
 800a0d6:	6923      	ldr	r3, [r4, #16]
 800a0d8:	4632      	mov	r2, r6
 800a0da:	4649      	mov	r1, r9
 800a0dc:	4640      	mov	r0, r8
 800a0de:	47d0      	blx	sl
 800a0e0:	3001      	adds	r0, #1
 800a0e2:	d0ad      	beq.n	800a040 <_printf_i+0x15c>
 800a0e4:	6823      	ldr	r3, [r4, #0]
 800a0e6:	079b      	lsls	r3, r3, #30
 800a0e8:	d413      	bmi.n	800a112 <_printf_i+0x22e>
 800a0ea:	68e0      	ldr	r0, [r4, #12]
 800a0ec:	9b03      	ldr	r3, [sp, #12]
 800a0ee:	4298      	cmp	r0, r3
 800a0f0:	bfb8      	it	lt
 800a0f2:	4618      	movlt	r0, r3
 800a0f4:	e7a6      	b.n	800a044 <_printf_i+0x160>
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	4632      	mov	r2, r6
 800a0fa:	4649      	mov	r1, r9
 800a0fc:	4640      	mov	r0, r8
 800a0fe:	47d0      	blx	sl
 800a100:	3001      	adds	r0, #1
 800a102:	d09d      	beq.n	800a040 <_printf_i+0x15c>
 800a104:	3501      	adds	r5, #1
 800a106:	68e3      	ldr	r3, [r4, #12]
 800a108:	9903      	ldr	r1, [sp, #12]
 800a10a:	1a5b      	subs	r3, r3, r1
 800a10c:	42ab      	cmp	r3, r5
 800a10e:	dcf2      	bgt.n	800a0f6 <_printf_i+0x212>
 800a110:	e7eb      	b.n	800a0ea <_printf_i+0x206>
 800a112:	2500      	movs	r5, #0
 800a114:	f104 0619 	add.w	r6, r4, #25
 800a118:	e7f5      	b.n	800a106 <_printf_i+0x222>
 800a11a:	bf00      	nop
 800a11c:	080220e6 	.word	0x080220e6
 800a120:	080220f7 	.word	0x080220f7

0800a124 <siprintf>:
 800a124:	b40e      	push	{r1, r2, r3}
 800a126:	b500      	push	{lr}
 800a128:	b09c      	sub	sp, #112	@ 0x70
 800a12a:	ab1d      	add	r3, sp, #116	@ 0x74
 800a12c:	9002      	str	r0, [sp, #8]
 800a12e:	9006      	str	r0, [sp, #24]
 800a130:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a134:	4809      	ldr	r0, [pc, #36]	@ (800a15c <siprintf+0x38>)
 800a136:	9107      	str	r1, [sp, #28]
 800a138:	9104      	str	r1, [sp, #16]
 800a13a:	4909      	ldr	r1, [pc, #36]	@ (800a160 <siprintf+0x3c>)
 800a13c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a140:	9105      	str	r1, [sp, #20]
 800a142:	6800      	ldr	r0, [r0, #0]
 800a144:	9301      	str	r3, [sp, #4]
 800a146:	a902      	add	r1, sp, #8
 800a148:	f001 f82e 	bl	800b1a8 <_svfiprintf_r>
 800a14c:	9b02      	ldr	r3, [sp, #8]
 800a14e:	2200      	movs	r2, #0
 800a150:	701a      	strb	r2, [r3, #0]
 800a152:	b01c      	add	sp, #112	@ 0x70
 800a154:	f85d eb04 	ldr.w	lr, [sp], #4
 800a158:	b003      	add	sp, #12
 800a15a:	4770      	bx	lr
 800a15c:	2000001c 	.word	0x2000001c
 800a160:	ffff0208 	.word	0xffff0208

0800a164 <std>:
 800a164:	2300      	movs	r3, #0
 800a166:	b510      	push	{r4, lr}
 800a168:	4604      	mov	r4, r0
 800a16a:	e9c0 3300 	strd	r3, r3, [r0]
 800a16e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a172:	6083      	str	r3, [r0, #8]
 800a174:	8181      	strh	r1, [r0, #12]
 800a176:	6643      	str	r3, [r0, #100]	@ 0x64
 800a178:	81c2      	strh	r2, [r0, #14]
 800a17a:	6183      	str	r3, [r0, #24]
 800a17c:	4619      	mov	r1, r3
 800a17e:	2208      	movs	r2, #8
 800a180:	305c      	adds	r0, #92	@ 0x5c
 800a182:	f000 f921 	bl	800a3c8 <memset>
 800a186:	4b0d      	ldr	r3, [pc, #52]	@ (800a1bc <std+0x58>)
 800a188:	6263      	str	r3, [r4, #36]	@ 0x24
 800a18a:	4b0d      	ldr	r3, [pc, #52]	@ (800a1c0 <std+0x5c>)
 800a18c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a18e:	4b0d      	ldr	r3, [pc, #52]	@ (800a1c4 <std+0x60>)
 800a190:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a192:	4b0d      	ldr	r3, [pc, #52]	@ (800a1c8 <std+0x64>)
 800a194:	6323      	str	r3, [r4, #48]	@ 0x30
 800a196:	4b0d      	ldr	r3, [pc, #52]	@ (800a1cc <std+0x68>)
 800a198:	6224      	str	r4, [r4, #32]
 800a19a:	429c      	cmp	r4, r3
 800a19c:	d006      	beq.n	800a1ac <std+0x48>
 800a19e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a1a2:	4294      	cmp	r4, r2
 800a1a4:	d002      	beq.n	800a1ac <std+0x48>
 800a1a6:	33d0      	adds	r3, #208	@ 0xd0
 800a1a8:	429c      	cmp	r4, r3
 800a1aa:	d105      	bne.n	800a1b8 <std+0x54>
 800a1ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a1b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1b4:	f000 b93e 	b.w	800a434 <__retarget_lock_init_recursive>
 800a1b8:	bd10      	pop	{r4, pc}
 800a1ba:	bf00      	nop
 800a1bc:	0800bfed 	.word	0x0800bfed
 800a1c0:	0800c00f 	.word	0x0800c00f
 800a1c4:	0800c047 	.word	0x0800c047
 800a1c8:	0800c06b 	.word	0x0800c06b
 800a1cc:	200014b0 	.word	0x200014b0

0800a1d0 <stdio_exit_handler>:
 800a1d0:	4a02      	ldr	r2, [pc, #8]	@ (800a1dc <stdio_exit_handler+0xc>)
 800a1d2:	4903      	ldr	r1, [pc, #12]	@ (800a1e0 <stdio_exit_handler+0x10>)
 800a1d4:	4803      	ldr	r0, [pc, #12]	@ (800a1e4 <stdio_exit_handler+0x14>)
 800a1d6:	f000 b869 	b.w	800a2ac <_fwalk_sglue>
 800a1da:	bf00      	nop
 800a1dc:	20000010 	.word	0x20000010
 800a1e0:	0800b881 	.word	0x0800b881
 800a1e4:	20000020 	.word	0x20000020

0800a1e8 <cleanup_stdio>:
 800a1e8:	6841      	ldr	r1, [r0, #4]
 800a1ea:	4b0c      	ldr	r3, [pc, #48]	@ (800a21c <cleanup_stdio+0x34>)
 800a1ec:	4299      	cmp	r1, r3
 800a1ee:	b510      	push	{r4, lr}
 800a1f0:	4604      	mov	r4, r0
 800a1f2:	d001      	beq.n	800a1f8 <cleanup_stdio+0x10>
 800a1f4:	f001 fb44 	bl	800b880 <_fflush_r>
 800a1f8:	68a1      	ldr	r1, [r4, #8]
 800a1fa:	4b09      	ldr	r3, [pc, #36]	@ (800a220 <cleanup_stdio+0x38>)
 800a1fc:	4299      	cmp	r1, r3
 800a1fe:	d002      	beq.n	800a206 <cleanup_stdio+0x1e>
 800a200:	4620      	mov	r0, r4
 800a202:	f001 fb3d 	bl	800b880 <_fflush_r>
 800a206:	68e1      	ldr	r1, [r4, #12]
 800a208:	4b06      	ldr	r3, [pc, #24]	@ (800a224 <cleanup_stdio+0x3c>)
 800a20a:	4299      	cmp	r1, r3
 800a20c:	d004      	beq.n	800a218 <cleanup_stdio+0x30>
 800a20e:	4620      	mov	r0, r4
 800a210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a214:	f001 bb34 	b.w	800b880 <_fflush_r>
 800a218:	bd10      	pop	{r4, pc}
 800a21a:	bf00      	nop
 800a21c:	200014b0 	.word	0x200014b0
 800a220:	20001518 	.word	0x20001518
 800a224:	20001580 	.word	0x20001580

0800a228 <global_stdio_init.part.0>:
 800a228:	b510      	push	{r4, lr}
 800a22a:	4b0b      	ldr	r3, [pc, #44]	@ (800a258 <global_stdio_init.part.0+0x30>)
 800a22c:	4c0b      	ldr	r4, [pc, #44]	@ (800a25c <global_stdio_init.part.0+0x34>)
 800a22e:	4a0c      	ldr	r2, [pc, #48]	@ (800a260 <global_stdio_init.part.0+0x38>)
 800a230:	601a      	str	r2, [r3, #0]
 800a232:	4620      	mov	r0, r4
 800a234:	2200      	movs	r2, #0
 800a236:	2104      	movs	r1, #4
 800a238:	f7ff ff94 	bl	800a164 <std>
 800a23c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a240:	2201      	movs	r2, #1
 800a242:	2109      	movs	r1, #9
 800a244:	f7ff ff8e 	bl	800a164 <std>
 800a248:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a24c:	2202      	movs	r2, #2
 800a24e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a252:	2112      	movs	r1, #18
 800a254:	f7ff bf86 	b.w	800a164 <std>
 800a258:	200015e8 	.word	0x200015e8
 800a25c:	200014b0 	.word	0x200014b0
 800a260:	0800a1d1 	.word	0x0800a1d1

0800a264 <__sfp_lock_acquire>:
 800a264:	4801      	ldr	r0, [pc, #4]	@ (800a26c <__sfp_lock_acquire+0x8>)
 800a266:	f000 b8e6 	b.w	800a436 <__retarget_lock_acquire_recursive>
 800a26a:	bf00      	nop
 800a26c:	200015ed 	.word	0x200015ed

0800a270 <__sfp_lock_release>:
 800a270:	4801      	ldr	r0, [pc, #4]	@ (800a278 <__sfp_lock_release+0x8>)
 800a272:	f000 b8e1 	b.w	800a438 <__retarget_lock_release_recursive>
 800a276:	bf00      	nop
 800a278:	200015ed 	.word	0x200015ed

0800a27c <__sinit>:
 800a27c:	b510      	push	{r4, lr}
 800a27e:	4604      	mov	r4, r0
 800a280:	f7ff fff0 	bl	800a264 <__sfp_lock_acquire>
 800a284:	6a23      	ldr	r3, [r4, #32]
 800a286:	b11b      	cbz	r3, 800a290 <__sinit+0x14>
 800a288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a28c:	f7ff bff0 	b.w	800a270 <__sfp_lock_release>
 800a290:	4b04      	ldr	r3, [pc, #16]	@ (800a2a4 <__sinit+0x28>)
 800a292:	6223      	str	r3, [r4, #32]
 800a294:	4b04      	ldr	r3, [pc, #16]	@ (800a2a8 <__sinit+0x2c>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d1f5      	bne.n	800a288 <__sinit+0xc>
 800a29c:	f7ff ffc4 	bl	800a228 <global_stdio_init.part.0>
 800a2a0:	e7f2      	b.n	800a288 <__sinit+0xc>
 800a2a2:	bf00      	nop
 800a2a4:	0800a1e9 	.word	0x0800a1e9
 800a2a8:	200015e8 	.word	0x200015e8

0800a2ac <_fwalk_sglue>:
 800a2ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2b0:	4607      	mov	r7, r0
 800a2b2:	4688      	mov	r8, r1
 800a2b4:	4614      	mov	r4, r2
 800a2b6:	2600      	movs	r6, #0
 800a2b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a2bc:	f1b9 0901 	subs.w	r9, r9, #1
 800a2c0:	d505      	bpl.n	800a2ce <_fwalk_sglue+0x22>
 800a2c2:	6824      	ldr	r4, [r4, #0]
 800a2c4:	2c00      	cmp	r4, #0
 800a2c6:	d1f7      	bne.n	800a2b8 <_fwalk_sglue+0xc>
 800a2c8:	4630      	mov	r0, r6
 800a2ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2ce:	89ab      	ldrh	r3, [r5, #12]
 800a2d0:	2b01      	cmp	r3, #1
 800a2d2:	d907      	bls.n	800a2e4 <_fwalk_sglue+0x38>
 800a2d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a2d8:	3301      	adds	r3, #1
 800a2da:	d003      	beq.n	800a2e4 <_fwalk_sglue+0x38>
 800a2dc:	4629      	mov	r1, r5
 800a2de:	4638      	mov	r0, r7
 800a2e0:	47c0      	blx	r8
 800a2e2:	4306      	orrs	r6, r0
 800a2e4:	3568      	adds	r5, #104	@ 0x68
 800a2e6:	e7e9      	b.n	800a2bc <_fwalk_sglue+0x10>

0800a2e8 <iprintf>:
 800a2e8:	b40f      	push	{r0, r1, r2, r3}
 800a2ea:	b507      	push	{r0, r1, r2, lr}
 800a2ec:	4906      	ldr	r1, [pc, #24]	@ (800a308 <iprintf+0x20>)
 800a2ee:	ab04      	add	r3, sp, #16
 800a2f0:	6808      	ldr	r0, [r1, #0]
 800a2f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2f6:	6881      	ldr	r1, [r0, #8]
 800a2f8:	9301      	str	r3, [sp, #4]
 800a2fa:	f001 f87b 	bl	800b3f4 <_vfiprintf_r>
 800a2fe:	b003      	add	sp, #12
 800a300:	f85d eb04 	ldr.w	lr, [sp], #4
 800a304:	b004      	add	sp, #16
 800a306:	4770      	bx	lr
 800a308:	2000001c 	.word	0x2000001c

0800a30c <_puts_r>:
 800a30c:	6a03      	ldr	r3, [r0, #32]
 800a30e:	b570      	push	{r4, r5, r6, lr}
 800a310:	6884      	ldr	r4, [r0, #8]
 800a312:	4605      	mov	r5, r0
 800a314:	460e      	mov	r6, r1
 800a316:	b90b      	cbnz	r3, 800a31c <_puts_r+0x10>
 800a318:	f7ff ffb0 	bl	800a27c <__sinit>
 800a31c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a31e:	07db      	lsls	r3, r3, #31
 800a320:	d405      	bmi.n	800a32e <_puts_r+0x22>
 800a322:	89a3      	ldrh	r3, [r4, #12]
 800a324:	0598      	lsls	r0, r3, #22
 800a326:	d402      	bmi.n	800a32e <_puts_r+0x22>
 800a328:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a32a:	f000 f884 	bl	800a436 <__retarget_lock_acquire_recursive>
 800a32e:	89a3      	ldrh	r3, [r4, #12]
 800a330:	0719      	lsls	r1, r3, #28
 800a332:	d502      	bpl.n	800a33a <_puts_r+0x2e>
 800a334:	6923      	ldr	r3, [r4, #16]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d135      	bne.n	800a3a6 <_puts_r+0x9a>
 800a33a:	4621      	mov	r1, r4
 800a33c:	4628      	mov	r0, r5
 800a33e:	f001 ff05 	bl	800c14c <__swsetup_r>
 800a342:	b380      	cbz	r0, 800a3a6 <_puts_r+0x9a>
 800a344:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800a348:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a34a:	07da      	lsls	r2, r3, #31
 800a34c:	d405      	bmi.n	800a35a <_puts_r+0x4e>
 800a34e:	89a3      	ldrh	r3, [r4, #12]
 800a350:	059b      	lsls	r3, r3, #22
 800a352:	d402      	bmi.n	800a35a <_puts_r+0x4e>
 800a354:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a356:	f000 f86f 	bl	800a438 <__retarget_lock_release_recursive>
 800a35a:	4628      	mov	r0, r5
 800a35c:	bd70      	pop	{r4, r5, r6, pc}
 800a35e:	2b00      	cmp	r3, #0
 800a360:	da04      	bge.n	800a36c <_puts_r+0x60>
 800a362:	69a2      	ldr	r2, [r4, #24]
 800a364:	429a      	cmp	r2, r3
 800a366:	dc17      	bgt.n	800a398 <_puts_r+0x8c>
 800a368:	290a      	cmp	r1, #10
 800a36a:	d015      	beq.n	800a398 <_puts_r+0x8c>
 800a36c:	6823      	ldr	r3, [r4, #0]
 800a36e:	1c5a      	adds	r2, r3, #1
 800a370:	6022      	str	r2, [r4, #0]
 800a372:	7019      	strb	r1, [r3, #0]
 800a374:	68a3      	ldr	r3, [r4, #8]
 800a376:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a37a:	3b01      	subs	r3, #1
 800a37c:	60a3      	str	r3, [r4, #8]
 800a37e:	2900      	cmp	r1, #0
 800a380:	d1ed      	bne.n	800a35e <_puts_r+0x52>
 800a382:	2b00      	cmp	r3, #0
 800a384:	da11      	bge.n	800a3aa <_puts_r+0x9e>
 800a386:	4622      	mov	r2, r4
 800a388:	210a      	movs	r1, #10
 800a38a:	4628      	mov	r0, r5
 800a38c:	f001 fe9f 	bl	800c0ce <__swbuf_r>
 800a390:	3001      	adds	r0, #1
 800a392:	d0d7      	beq.n	800a344 <_puts_r+0x38>
 800a394:	250a      	movs	r5, #10
 800a396:	e7d7      	b.n	800a348 <_puts_r+0x3c>
 800a398:	4622      	mov	r2, r4
 800a39a:	4628      	mov	r0, r5
 800a39c:	f001 fe97 	bl	800c0ce <__swbuf_r>
 800a3a0:	3001      	adds	r0, #1
 800a3a2:	d1e7      	bne.n	800a374 <_puts_r+0x68>
 800a3a4:	e7ce      	b.n	800a344 <_puts_r+0x38>
 800a3a6:	3e01      	subs	r6, #1
 800a3a8:	e7e4      	b.n	800a374 <_puts_r+0x68>
 800a3aa:	6823      	ldr	r3, [r4, #0]
 800a3ac:	1c5a      	adds	r2, r3, #1
 800a3ae:	6022      	str	r2, [r4, #0]
 800a3b0:	220a      	movs	r2, #10
 800a3b2:	701a      	strb	r2, [r3, #0]
 800a3b4:	e7ee      	b.n	800a394 <_puts_r+0x88>
	...

0800a3b8 <puts>:
 800a3b8:	4b02      	ldr	r3, [pc, #8]	@ (800a3c4 <puts+0xc>)
 800a3ba:	4601      	mov	r1, r0
 800a3bc:	6818      	ldr	r0, [r3, #0]
 800a3be:	f7ff bfa5 	b.w	800a30c <_puts_r>
 800a3c2:	bf00      	nop
 800a3c4:	2000001c 	.word	0x2000001c

0800a3c8 <memset>:
 800a3c8:	4402      	add	r2, r0
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d100      	bne.n	800a3d2 <memset+0xa>
 800a3d0:	4770      	bx	lr
 800a3d2:	f803 1b01 	strb.w	r1, [r3], #1
 800a3d6:	e7f9      	b.n	800a3cc <memset+0x4>

0800a3d8 <_localeconv_r>:
 800a3d8:	4800      	ldr	r0, [pc, #0]	@ (800a3dc <_localeconv_r+0x4>)
 800a3da:	4770      	bx	lr
 800a3dc:	2000015c 	.word	0x2000015c

0800a3e0 <__errno>:
 800a3e0:	4b01      	ldr	r3, [pc, #4]	@ (800a3e8 <__errno+0x8>)
 800a3e2:	6818      	ldr	r0, [r3, #0]
 800a3e4:	4770      	bx	lr
 800a3e6:	bf00      	nop
 800a3e8:	2000001c 	.word	0x2000001c

0800a3ec <__libc_init_array>:
 800a3ec:	b570      	push	{r4, r5, r6, lr}
 800a3ee:	4d0d      	ldr	r5, [pc, #52]	@ (800a424 <__libc_init_array+0x38>)
 800a3f0:	4c0d      	ldr	r4, [pc, #52]	@ (800a428 <__libc_init_array+0x3c>)
 800a3f2:	1b64      	subs	r4, r4, r5
 800a3f4:	10a4      	asrs	r4, r4, #2
 800a3f6:	2600      	movs	r6, #0
 800a3f8:	42a6      	cmp	r6, r4
 800a3fa:	d109      	bne.n	800a410 <__libc_init_array+0x24>
 800a3fc:	4d0b      	ldr	r5, [pc, #44]	@ (800a42c <__libc_init_array+0x40>)
 800a3fe:	4c0c      	ldr	r4, [pc, #48]	@ (800a430 <__libc_init_array+0x44>)
 800a400:	f002 f8ee 	bl	800c5e0 <_init>
 800a404:	1b64      	subs	r4, r4, r5
 800a406:	10a4      	asrs	r4, r4, #2
 800a408:	2600      	movs	r6, #0
 800a40a:	42a6      	cmp	r6, r4
 800a40c:	d105      	bne.n	800a41a <__libc_init_array+0x2e>
 800a40e:	bd70      	pop	{r4, r5, r6, pc}
 800a410:	f855 3b04 	ldr.w	r3, [r5], #4
 800a414:	4798      	blx	r3
 800a416:	3601      	adds	r6, #1
 800a418:	e7ee      	b.n	800a3f8 <__libc_init_array+0xc>
 800a41a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a41e:	4798      	blx	r3
 800a420:	3601      	adds	r6, #1
 800a422:	e7f2      	b.n	800a40a <__libc_init_array+0x1e>
 800a424:	08022450 	.word	0x08022450
 800a428:	08022450 	.word	0x08022450
 800a42c:	08022450 	.word	0x08022450
 800a430:	08022454 	.word	0x08022454

0800a434 <__retarget_lock_init_recursive>:
 800a434:	4770      	bx	lr

0800a436 <__retarget_lock_acquire_recursive>:
 800a436:	4770      	bx	lr

0800a438 <__retarget_lock_release_recursive>:
 800a438:	4770      	bx	lr

0800a43a <memcpy>:
 800a43a:	440a      	add	r2, r1
 800a43c:	4291      	cmp	r1, r2
 800a43e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800a442:	d100      	bne.n	800a446 <memcpy+0xc>
 800a444:	4770      	bx	lr
 800a446:	b510      	push	{r4, lr}
 800a448:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a44c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a450:	4291      	cmp	r1, r2
 800a452:	d1f9      	bne.n	800a448 <memcpy+0xe>
 800a454:	bd10      	pop	{r4, pc}

0800a456 <quorem>:
 800a456:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a45a:	6903      	ldr	r3, [r0, #16]
 800a45c:	690c      	ldr	r4, [r1, #16]
 800a45e:	42a3      	cmp	r3, r4
 800a460:	4607      	mov	r7, r0
 800a462:	db7e      	blt.n	800a562 <quorem+0x10c>
 800a464:	3c01      	subs	r4, #1
 800a466:	f101 0814 	add.w	r8, r1, #20
 800a46a:	00a3      	lsls	r3, r4, #2
 800a46c:	f100 0514 	add.w	r5, r0, #20
 800a470:	9300      	str	r3, [sp, #0]
 800a472:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a476:	9301      	str	r3, [sp, #4]
 800a478:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a47c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a480:	3301      	adds	r3, #1
 800a482:	429a      	cmp	r2, r3
 800a484:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a488:	fbb2 f6f3 	udiv	r6, r2, r3
 800a48c:	d32e      	bcc.n	800a4ec <quorem+0x96>
 800a48e:	f04f 0a00 	mov.w	sl, #0
 800a492:	46c4      	mov	ip, r8
 800a494:	46ae      	mov	lr, r5
 800a496:	46d3      	mov	fp, sl
 800a498:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a49c:	b298      	uxth	r0, r3
 800a49e:	fb06 a000 	mla	r0, r6, r0, sl
 800a4a2:	0c02      	lsrs	r2, r0, #16
 800a4a4:	0c1b      	lsrs	r3, r3, #16
 800a4a6:	fb06 2303 	mla	r3, r6, r3, r2
 800a4aa:	f8de 2000 	ldr.w	r2, [lr]
 800a4ae:	b280      	uxth	r0, r0
 800a4b0:	b292      	uxth	r2, r2
 800a4b2:	1a12      	subs	r2, r2, r0
 800a4b4:	445a      	add	r2, fp
 800a4b6:	f8de 0000 	ldr.w	r0, [lr]
 800a4ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a4be:	b29b      	uxth	r3, r3
 800a4c0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a4c4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a4c8:	b292      	uxth	r2, r2
 800a4ca:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a4ce:	45e1      	cmp	r9, ip
 800a4d0:	f84e 2b04 	str.w	r2, [lr], #4
 800a4d4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a4d8:	d2de      	bcs.n	800a498 <quorem+0x42>
 800a4da:	9b00      	ldr	r3, [sp, #0]
 800a4dc:	58eb      	ldr	r3, [r5, r3]
 800a4de:	b92b      	cbnz	r3, 800a4ec <quorem+0x96>
 800a4e0:	9b01      	ldr	r3, [sp, #4]
 800a4e2:	3b04      	subs	r3, #4
 800a4e4:	429d      	cmp	r5, r3
 800a4e6:	461a      	mov	r2, r3
 800a4e8:	d32f      	bcc.n	800a54a <quorem+0xf4>
 800a4ea:	613c      	str	r4, [r7, #16]
 800a4ec:	4638      	mov	r0, r7
 800a4ee:	f001 fc75 	bl	800bddc <__mcmp>
 800a4f2:	2800      	cmp	r0, #0
 800a4f4:	db25      	blt.n	800a542 <quorem+0xec>
 800a4f6:	4629      	mov	r1, r5
 800a4f8:	2000      	movs	r0, #0
 800a4fa:	f858 2b04 	ldr.w	r2, [r8], #4
 800a4fe:	f8d1 c000 	ldr.w	ip, [r1]
 800a502:	fa1f fe82 	uxth.w	lr, r2
 800a506:	fa1f f38c 	uxth.w	r3, ip
 800a50a:	eba3 030e 	sub.w	r3, r3, lr
 800a50e:	4403      	add	r3, r0
 800a510:	0c12      	lsrs	r2, r2, #16
 800a512:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a516:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a51a:	b29b      	uxth	r3, r3
 800a51c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a520:	45c1      	cmp	r9, r8
 800a522:	f841 3b04 	str.w	r3, [r1], #4
 800a526:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a52a:	d2e6      	bcs.n	800a4fa <quorem+0xa4>
 800a52c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a530:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a534:	b922      	cbnz	r2, 800a540 <quorem+0xea>
 800a536:	3b04      	subs	r3, #4
 800a538:	429d      	cmp	r5, r3
 800a53a:	461a      	mov	r2, r3
 800a53c:	d30b      	bcc.n	800a556 <quorem+0x100>
 800a53e:	613c      	str	r4, [r7, #16]
 800a540:	3601      	adds	r6, #1
 800a542:	4630      	mov	r0, r6
 800a544:	b003      	add	sp, #12
 800a546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a54a:	6812      	ldr	r2, [r2, #0]
 800a54c:	3b04      	subs	r3, #4
 800a54e:	2a00      	cmp	r2, #0
 800a550:	d1cb      	bne.n	800a4ea <quorem+0x94>
 800a552:	3c01      	subs	r4, #1
 800a554:	e7c6      	b.n	800a4e4 <quorem+0x8e>
 800a556:	6812      	ldr	r2, [r2, #0]
 800a558:	3b04      	subs	r3, #4
 800a55a:	2a00      	cmp	r2, #0
 800a55c:	d1ef      	bne.n	800a53e <quorem+0xe8>
 800a55e:	3c01      	subs	r4, #1
 800a560:	e7ea      	b.n	800a538 <quorem+0xe2>
 800a562:	2000      	movs	r0, #0
 800a564:	e7ee      	b.n	800a544 <quorem+0xee>
	...

0800a568 <_dtoa_r>:
 800a568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a56c:	69c7      	ldr	r7, [r0, #28]
 800a56e:	b099      	sub	sp, #100	@ 0x64
 800a570:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a574:	ec55 4b10 	vmov	r4, r5, d0
 800a578:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a57a:	9109      	str	r1, [sp, #36]	@ 0x24
 800a57c:	4683      	mov	fp, r0
 800a57e:	920e      	str	r2, [sp, #56]	@ 0x38
 800a580:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a582:	b97f      	cbnz	r7, 800a5a4 <_dtoa_r+0x3c>
 800a584:	2010      	movs	r0, #16
 800a586:	f001 f84d 	bl	800b624 <malloc>
 800a58a:	4602      	mov	r2, r0
 800a58c:	f8cb 001c 	str.w	r0, [fp, #28]
 800a590:	b920      	cbnz	r0, 800a59c <_dtoa_r+0x34>
 800a592:	4ba7      	ldr	r3, [pc, #668]	@ (800a830 <_dtoa_r+0x2c8>)
 800a594:	21ef      	movs	r1, #239	@ 0xef
 800a596:	48a7      	ldr	r0, [pc, #668]	@ (800a834 <_dtoa_r+0x2cc>)
 800a598:	f001 ff22 	bl	800c3e0 <__assert_func>
 800a59c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a5a0:	6007      	str	r7, [r0, #0]
 800a5a2:	60c7      	str	r7, [r0, #12]
 800a5a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a5a8:	6819      	ldr	r1, [r3, #0]
 800a5aa:	b159      	cbz	r1, 800a5c4 <_dtoa_r+0x5c>
 800a5ac:	685a      	ldr	r2, [r3, #4]
 800a5ae:	604a      	str	r2, [r1, #4]
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	4093      	lsls	r3, r2
 800a5b4:	608b      	str	r3, [r1, #8]
 800a5b6:	4658      	mov	r0, fp
 800a5b8:	f001 f9d6 	bl	800b968 <_Bfree>
 800a5bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	601a      	str	r2, [r3, #0]
 800a5c4:	1e2b      	subs	r3, r5, #0
 800a5c6:	bfb9      	ittee	lt
 800a5c8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a5cc:	9303      	strlt	r3, [sp, #12]
 800a5ce:	2300      	movge	r3, #0
 800a5d0:	6033      	strge	r3, [r6, #0]
 800a5d2:	9f03      	ldr	r7, [sp, #12]
 800a5d4:	4b98      	ldr	r3, [pc, #608]	@ (800a838 <_dtoa_r+0x2d0>)
 800a5d6:	bfbc      	itt	lt
 800a5d8:	2201      	movlt	r2, #1
 800a5da:	6032      	strlt	r2, [r6, #0]
 800a5dc:	43bb      	bics	r3, r7
 800a5de:	d112      	bne.n	800a606 <_dtoa_r+0x9e>
 800a5e0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a5e2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a5e6:	6013      	str	r3, [r2, #0]
 800a5e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a5ec:	4323      	orrs	r3, r4
 800a5ee:	f000 854d 	beq.w	800b08c <_dtoa_r+0xb24>
 800a5f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a5f4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a84c <_dtoa_r+0x2e4>
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	f000 854f 	beq.w	800b09c <_dtoa_r+0xb34>
 800a5fe:	f10a 0303 	add.w	r3, sl, #3
 800a602:	f000 bd49 	b.w	800b098 <_dtoa_r+0xb30>
 800a606:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a60a:	2200      	movs	r2, #0
 800a60c:	ec51 0b17 	vmov	r0, r1, d7
 800a610:	2300      	movs	r3, #0
 800a612:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a616:	f7f6 fa57 	bl	8000ac8 <__aeabi_dcmpeq>
 800a61a:	4680      	mov	r8, r0
 800a61c:	b158      	cbz	r0, 800a636 <_dtoa_r+0xce>
 800a61e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a620:	2301      	movs	r3, #1
 800a622:	6013      	str	r3, [r2, #0]
 800a624:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a626:	b113      	cbz	r3, 800a62e <_dtoa_r+0xc6>
 800a628:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a62a:	4b84      	ldr	r3, [pc, #528]	@ (800a83c <_dtoa_r+0x2d4>)
 800a62c:	6013      	str	r3, [r2, #0]
 800a62e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a850 <_dtoa_r+0x2e8>
 800a632:	f000 bd33 	b.w	800b09c <_dtoa_r+0xb34>
 800a636:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a63a:	aa16      	add	r2, sp, #88	@ 0x58
 800a63c:	a917      	add	r1, sp, #92	@ 0x5c
 800a63e:	4658      	mov	r0, fp
 800a640:	f001 fc7c 	bl	800bf3c <__d2b>
 800a644:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a648:	4681      	mov	r9, r0
 800a64a:	2e00      	cmp	r6, #0
 800a64c:	d077      	beq.n	800a73e <_dtoa_r+0x1d6>
 800a64e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a650:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a654:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a658:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a65c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a660:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a664:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a668:	4619      	mov	r1, r3
 800a66a:	2200      	movs	r2, #0
 800a66c:	4b74      	ldr	r3, [pc, #464]	@ (800a840 <_dtoa_r+0x2d8>)
 800a66e:	f7f5 fe0b 	bl	8000288 <__aeabi_dsub>
 800a672:	a369      	add	r3, pc, #420	@ (adr r3, 800a818 <_dtoa_r+0x2b0>)
 800a674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a678:	f7f5 ffbe 	bl	80005f8 <__aeabi_dmul>
 800a67c:	a368      	add	r3, pc, #416	@ (adr r3, 800a820 <_dtoa_r+0x2b8>)
 800a67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a682:	f7f5 fe03 	bl	800028c <__adddf3>
 800a686:	4604      	mov	r4, r0
 800a688:	4630      	mov	r0, r6
 800a68a:	460d      	mov	r5, r1
 800a68c:	f7f5 ff4a 	bl	8000524 <__aeabi_i2d>
 800a690:	a365      	add	r3, pc, #404	@ (adr r3, 800a828 <_dtoa_r+0x2c0>)
 800a692:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a696:	f7f5 ffaf 	bl	80005f8 <__aeabi_dmul>
 800a69a:	4602      	mov	r2, r0
 800a69c:	460b      	mov	r3, r1
 800a69e:	4620      	mov	r0, r4
 800a6a0:	4629      	mov	r1, r5
 800a6a2:	f7f5 fdf3 	bl	800028c <__adddf3>
 800a6a6:	4604      	mov	r4, r0
 800a6a8:	460d      	mov	r5, r1
 800a6aa:	f7f6 fa55 	bl	8000b58 <__aeabi_d2iz>
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	4607      	mov	r7, r0
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	4620      	mov	r0, r4
 800a6b6:	4629      	mov	r1, r5
 800a6b8:	f7f6 fa10 	bl	8000adc <__aeabi_dcmplt>
 800a6bc:	b140      	cbz	r0, 800a6d0 <_dtoa_r+0x168>
 800a6be:	4638      	mov	r0, r7
 800a6c0:	f7f5 ff30 	bl	8000524 <__aeabi_i2d>
 800a6c4:	4622      	mov	r2, r4
 800a6c6:	462b      	mov	r3, r5
 800a6c8:	f7f6 f9fe 	bl	8000ac8 <__aeabi_dcmpeq>
 800a6cc:	b900      	cbnz	r0, 800a6d0 <_dtoa_r+0x168>
 800a6ce:	3f01      	subs	r7, #1
 800a6d0:	2f16      	cmp	r7, #22
 800a6d2:	d851      	bhi.n	800a778 <_dtoa_r+0x210>
 800a6d4:	4b5b      	ldr	r3, [pc, #364]	@ (800a844 <_dtoa_r+0x2dc>)
 800a6d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a6e2:	f7f6 f9fb 	bl	8000adc <__aeabi_dcmplt>
 800a6e6:	2800      	cmp	r0, #0
 800a6e8:	d048      	beq.n	800a77c <_dtoa_r+0x214>
 800a6ea:	3f01      	subs	r7, #1
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	9312      	str	r3, [sp, #72]	@ 0x48
 800a6f0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a6f2:	1b9b      	subs	r3, r3, r6
 800a6f4:	1e5a      	subs	r2, r3, #1
 800a6f6:	bf44      	itt	mi
 800a6f8:	f1c3 0801 	rsbmi	r8, r3, #1
 800a6fc:	2300      	movmi	r3, #0
 800a6fe:	9208      	str	r2, [sp, #32]
 800a700:	bf54      	ite	pl
 800a702:	f04f 0800 	movpl.w	r8, #0
 800a706:	9308      	strmi	r3, [sp, #32]
 800a708:	2f00      	cmp	r7, #0
 800a70a:	db39      	blt.n	800a780 <_dtoa_r+0x218>
 800a70c:	9b08      	ldr	r3, [sp, #32]
 800a70e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a710:	443b      	add	r3, r7
 800a712:	9308      	str	r3, [sp, #32]
 800a714:	2300      	movs	r3, #0
 800a716:	930a      	str	r3, [sp, #40]	@ 0x28
 800a718:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a71a:	2b09      	cmp	r3, #9
 800a71c:	d864      	bhi.n	800a7e8 <_dtoa_r+0x280>
 800a71e:	2b05      	cmp	r3, #5
 800a720:	bfc4      	itt	gt
 800a722:	3b04      	subgt	r3, #4
 800a724:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a726:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a728:	f1a3 0302 	sub.w	r3, r3, #2
 800a72c:	bfcc      	ite	gt
 800a72e:	2400      	movgt	r4, #0
 800a730:	2401      	movle	r4, #1
 800a732:	2b03      	cmp	r3, #3
 800a734:	d863      	bhi.n	800a7fe <_dtoa_r+0x296>
 800a736:	e8df f003 	tbb	[pc, r3]
 800a73a:	372a      	.short	0x372a
 800a73c:	5535      	.short	0x5535
 800a73e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a742:	441e      	add	r6, r3
 800a744:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a748:	2b20      	cmp	r3, #32
 800a74a:	bfc1      	itttt	gt
 800a74c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a750:	409f      	lslgt	r7, r3
 800a752:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a756:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a75a:	bfd6      	itet	le
 800a75c:	f1c3 0320 	rsble	r3, r3, #32
 800a760:	ea47 0003 	orrgt.w	r0, r7, r3
 800a764:	fa04 f003 	lslle.w	r0, r4, r3
 800a768:	f7f5 fecc 	bl	8000504 <__aeabi_ui2d>
 800a76c:	2201      	movs	r2, #1
 800a76e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a772:	3e01      	subs	r6, #1
 800a774:	9214      	str	r2, [sp, #80]	@ 0x50
 800a776:	e777      	b.n	800a668 <_dtoa_r+0x100>
 800a778:	2301      	movs	r3, #1
 800a77a:	e7b8      	b.n	800a6ee <_dtoa_r+0x186>
 800a77c:	9012      	str	r0, [sp, #72]	@ 0x48
 800a77e:	e7b7      	b.n	800a6f0 <_dtoa_r+0x188>
 800a780:	427b      	negs	r3, r7
 800a782:	930a      	str	r3, [sp, #40]	@ 0x28
 800a784:	2300      	movs	r3, #0
 800a786:	eba8 0807 	sub.w	r8, r8, r7
 800a78a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a78c:	e7c4      	b.n	800a718 <_dtoa_r+0x1b0>
 800a78e:	2300      	movs	r3, #0
 800a790:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a792:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a794:	2b00      	cmp	r3, #0
 800a796:	dc35      	bgt.n	800a804 <_dtoa_r+0x29c>
 800a798:	2301      	movs	r3, #1
 800a79a:	9300      	str	r3, [sp, #0]
 800a79c:	9307      	str	r3, [sp, #28]
 800a79e:	461a      	mov	r2, r3
 800a7a0:	920e      	str	r2, [sp, #56]	@ 0x38
 800a7a2:	e00b      	b.n	800a7bc <_dtoa_r+0x254>
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	e7f3      	b.n	800a790 <_dtoa_r+0x228>
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a7ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a7ae:	18fb      	adds	r3, r7, r3
 800a7b0:	9300      	str	r3, [sp, #0]
 800a7b2:	3301      	adds	r3, #1
 800a7b4:	2b01      	cmp	r3, #1
 800a7b6:	9307      	str	r3, [sp, #28]
 800a7b8:	bfb8      	it	lt
 800a7ba:	2301      	movlt	r3, #1
 800a7bc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a7c0:	2100      	movs	r1, #0
 800a7c2:	2204      	movs	r2, #4
 800a7c4:	f102 0514 	add.w	r5, r2, #20
 800a7c8:	429d      	cmp	r5, r3
 800a7ca:	d91f      	bls.n	800a80c <_dtoa_r+0x2a4>
 800a7cc:	6041      	str	r1, [r0, #4]
 800a7ce:	4658      	mov	r0, fp
 800a7d0:	f001 f88a 	bl	800b8e8 <_Balloc>
 800a7d4:	4682      	mov	sl, r0
 800a7d6:	2800      	cmp	r0, #0
 800a7d8:	d13c      	bne.n	800a854 <_dtoa_r+0x2ec>
 800a7da:	4b1b      	ldr	r3, [pc, #108]	@ (800a848 <_dtoa_r+0x2e0>)
 800a7dc:	4602      	mov	r2, r0
 800a7de:	f240 11af 	movw	r1, #431	@ 0x1af
 800a7e2:	e6d8      	b.n	800a596 <_dtoa_r+0x2e>
 800a7e4:	2301      	movs	r3, #1
 800a7e6:	e7e0      	b.n	800a7aa <_dtoa_r+0x242>
 800a7e8:	2401      	movs	r4, #1
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7ee:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a7f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a7f4:	9300      	str	r3, [sp, #0]
 800a7f6:	9307      	str	r3, [sp, #28]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	2312      	movs	r3, #18
 800a7fc:	e7d0      	b.n	800a7a0 <_dtoa_r+0x238>
 800a7fe:	2301      	movs	r3, #1
 800a800:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a802:	e7f5      	b.n	800a7f0 <_dtoa_r+0x288>
 800a804:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a806:	9300      	str	r3, [sp, #0]
 800a808:	9307      	str	r3, [sp, #28]
 800a80a:	e7d7      	b.n	800a7bc <_dtoa_r+0x254>
 800a80c:	3101      	adds	r1, #1
 800a80e:	0052      	lsls	r2, r2, #1
 800a810:	e7d8      	b.n	800a7c4 <_dtoa_r+0x25c>
 800a812:	bf00      	nop
 800a814:	f3af 8000 	nop.w
 800a818:	636f4361 	.word	0x636f4361
 800a81c:	3fd287a7 	.word	0x3fd287a7
 800a820:	8b60c8b3 	.word	0x8b60c8b3
 800a824:	3fc68a28 	.word	0x3fc68a28
 800a828:	509f79fb 	.word	0x509f79fb
 800a82c:	3fd34413 	.word	0x3fd34413
 800a830:	08022115 	.word	0x08022115
 800a834:	0802212c 	.word	0x0802212c
 800a838:	7ff00000 	.word	0x7ff00000
 800a83c:	080220e5 	.word	0x080220e5
 800a840:	3ff80000 	.word	0x3ff80000
 800a844:	08022238 	.word	0x08022238
 800a848:	08022184 	.word	0x08022184
 800a84c:	08022111 	.word	0x08022111
 800a850:	080220e4 	.word	0x080220e4
 800a854:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a858:	6018      	str	r0, [r3, #0]
 800a85a:	9b07      	ldr	r3, [sp, #28]
 800a85c:	2b0e      	cmp	r3, #14
 800a85e:	f200 80a4 	bhi.w	800a9aa <_dtoa_r+0x442>
 800a862:	2c00      	cmp	r4, #0
 800a864:	f000 80a1 	beq.w	800a9aa <_dtoa_r+0x442>
 800a868:	2f00      	cmp	r7, #0
 800a86a:	dd33      	ble.n	800a8d4 <_dtoa_r+0x36c>
 800a86c:	4bad      	ldr	r3, [pc, #692]	@ (800ab24 <_dtoa_r+0x5bc>)
 800a86e:	f007 020f 	and.w	r2, r7, #15
 800a872:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a876:	ed93 7b00 	vldr	d7, [r3]
 800a87a:	05f8      	lsls	r0, r7, #23
 800a87c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a880:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a884:	d516      	bpl.n	800a8b4 <_dtoa_r+0x34c>
 800a886:	4ba8      	ldr	r3, [pc, #672]	@ (800ab28 <_dtoa_r+0x5c0>)
 800a888:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a88c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a890:	f7f5 ffdc 	bl	800084c <__aeabi_ddiv>
 800a894:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a898:	f004 040f 	and.w	r4, r4, #15
 800a89c:	2603      	movs	r6, #3
 800a89e:	4da2      	ldr	r5, [pc, #648]	@ (800ab28 <_dtoa_r+0x5c0>)
 800a8a0:	b954      	cbnz	r4, 800a8b8 <_dtoa_r+0x350>
 800a8a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a8a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8aa:	f7f5 ffcf 	bl	800084c <__aeabi_ddiv>
 800a8ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a8b2:	e028      	b.n	800a906 <_dtoa_r+0x39e>
 800a8b4:	2602      	movs	r6, #2
 800a8b6:	e7f2      	b.n	800a89e <_dtoa_r+0x336>
 800a8b8:	07e1      	lsls	r1, r4, #31
 800a8ba:	d508      	bpl.n	800a8ce <_dtoa_r+0x366>
 800a8bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a8c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a8c4:	f7f5 fe98 	bl	80005f8 <__aeabi_dmul>
 800a8c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a8cc:	3601      	adds	r6, #1
 800a8ce:	1064      	asrs	r4, r4, #1
 800a8d0:	3508      	adds	r5, #8
 800a8d2:	e7e5      	b.n	800a8a0 <_dtoa_r+0x338>
 800a8d4:	f000 80d2 	beq.w	800aa7c <_dtoa_r+0x514>
 800a8d8:	427c      	negs	r4, r7
 800a8da:	4b92      	ldr	r3, [pc, #584]	@ (800ab24 <_dtoa_r+0x5bc>)
 800a8dc:	4d92      	ldr	r5, [pc, #584]	@ (800ab28 <_dtoa_r+0x5c0>)
 800a8de:	f004 020f 	and.w	r2, r4, #15
 800a8e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a8e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a8ee:	f7f5 fe83 	bl	80005f8 <__aeabi_dmul>
 800a8f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a8f6:	1124      	asrs	r4, r4, #4
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	2602      	movs	r6, #2
 800a8fc:	2c00      	cmp	r4, #0
 800a8fe:	f040 80b2 	bne.w	800aa66 <_dtoa_r+0x4fe>
 800a902:	2b00      	cmp	r3, #0
 800a904:	d1d3      	bne.n	800a8ae <_dtoa_r+0x346>
 800a906:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a908:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	f000 80b7 	beq.w	800aa80 <_dtoa_r+0x518>
 800a912:	4b86      	ldr	r3, [pc, #536]	@ (800ab2c <_dtoa_r+0x5c4>)
 800a914:	2200      	movs	r2, #0
 800a916:	4620      	mov	r0, r4
 800a918:	4629      	mov	r1, r5
 800a91a:	f7f6 f8df 	bl	8000adc <__aeabi_dcmplt>
 800a91e:	2800      	cmp	r0, #0
 800a920:	f000 80ae 	beq.w	800aa80 <_dtoa_r+0x518>
 800a924:	9b07      	ldr	r3, [sp, #28]
 800a926:	2b00      	cmp	r3, #0
 800a928:	f000 80aa 	beq.w	800aa80 <_dtoa_r+0x518>
 800a92c:	9b00      	ldr	r3, [sp, #0]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	dd37      	ble.n	800a9a2 <_dtoa_r+0x43a>
 800a932:	1e7b      	subs	r3, r7, #1
 800a934:	9304      	str	r3, [sp, #16]
 800a936:	4620      	mov	r0, r4
 800a938:	4b7d      	ldr	r3, [pc, #500]	@ (800ab30 <_dtoa_r+0x5c8>)
 800a93a:	2200      	movs	r2, #0
 800a93c:	4629      	mov	r1, r5
 800a93e:	f7f5 fe5b 	bl	80005f8 <__aeabi_dmul>
 800a942:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a946:	9c00      	ldr	r4, [sp, #0]
 800a948:	3601      	adds	r6, #1
 800a94a:	4630      	mov	r0, r6
 800a94c:	f7f5 fdea 	bl	8000524 <__aeabi_i2d>
 800a950:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a954:	f7f5 fe50 	bl	80005f8 <__aeabi_dmul>
 800a958:	4b76      	ldr	r3, [pc, #472]	@ (800ab34 <_dtoa_r+0x5cc>)
 800a95a:	2200      	movs	r2, #0
 800a95c:	f7f5 fc96 	bl	800028c <__adddf3>
 800a960:	4605      	mov	r5, r0
 800a962:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a966:	2c00      	cmp	r4, #0
 800a968:	f040 808d 	bne.w	800aa86 <_dtoa_r+0x51e>
 800a96c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a970:	4b71      	ldr	r3, [pc, #452]	@ (800ab38 <_dtoa_r+0x5d0>)
 800a972:	2200      	movs	r2, #0
 800a974:	f7f5 fc88 	bl	8000288 <__aeabi_dsub>
 800a978:	4602      	mov	r2, r0
 800a97a:	460b      	mov	r3, r1
 800a97c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a980:	462a      	mov	r2, r5
 800a982:	4633      	mov	r3, r6
 800a984:	f7f6 f8c8 	bl	8000b18 <__aeabi_dcmpgt>
 800a988:	2800      	cmp	r0, #0
 800a98a:	f040 828b 	bne.w	800aea4 <_dtoa_r+0x93c>
 800a98e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a992:	462a      	mov	r2, r5
 800a994:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a998:	f7f6 f8a0 	bl	8000adc <__aeabi_dcmplt>
 800a99c:	2800      	cmp	r0, #0
 800a99e:	f040 8128 	bne.w	800abf2 <_dtoa_r+0x68a>
 800a9a2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a9a6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a9aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	f2c0 815a 	blt.w	800ac66 <_dtoa_r+0x6fe>
 800a9b2:	2f0e      	cmp	r7, #14
 800a9b4:	f300 8157 	bgt.w	800ac66 <_dtoa_r+0x6fe>
 800a9b8:	4b5a      	ldr	r3, [pc, #360]	@ (800ab24 <_dtoa_r+0x5bc>)
 800a9ba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a9be:	ed93 7b00 	vldr	d7, [r3]
 800a9c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	ed8d 7b00 	vstr	d7, [sp]
 800a9ca:	da03      	bge.n	800a9d4 <_dtoa_r+0x46c>
 800a9cc:	9b07      	ldr	r3, [sp, #28]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	f340 8101 	ble.w	800abd6 <_dtoa_r+0x66e>
 800a9d4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a9d8:	4656      	mov	r6, sl
 800a9da:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a9de:	4620      	mov	r0, r4
 800a9e0:	4629      	mov	r1, r5
 800a9e2:	f7f5 ff33 	bl	800084c <__aeabi_ddiv>
 800a9e6:	f7f6 f8b7 	bl	8000b58 <__aeabi_d2iz>
 800a9ea:	4680      	mov	r8, r0
 800a9ec:	f7f5 fd9a 	bl	8000524 <__aeabi_i2d>
 800a9f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a9f4:	f7f5 fe00 	bl	80005f8 <__aeabi_dmul>
 800a9f8:	4602      	mov	r2, r0
 800a9fa:	460b      	mov	r3, r1
 800a9fc:	4620      	mov	r0, r4
 800a9fe:	4629      	mov	r1, r5
 800aa00:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800aa04:	f7f5 fc40 	bl	8000288 <__aeabi_dsub>
 800aa08:	f806 4b01 	strb.w	r4, [r6], #1
 800aa0c:	9d07      	ldr	r5, [sp, #28]
 800aa0e:	eba6 040a 	sub.w	r4, r6, sl
 800aa12:	42a5      	cmp	r5, r4
 800aa14:	4602      	mov	r2, r0
 800aa16:	460b      	mov	r3, r1
 800aa18:	f040 8117 	bne.w	800ac4a <_dtoa_r+0x6e2>
 800aa1c:	f7f5 fc36 	bl	800028c <__adddf3>
 800aa20:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa24:	4604      	mov	r4, r0
 800aa26:	460d      	mov	r5, r1
 800aa28:	f7f6 f876 	bl	8000b18 <__aeabi_dcmpgt>
 800aa2c:	2800      	cmp	r0, #0
 800aa2e:	f040 80f9 	bne.w	800ac24 <_dtoa_r+0x6bc>
 800aa32:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa36:	4620      	mov	r0, r4
 800aa38:	4629      	mov	r1, r5
 800aa3a:	f7f6 f845 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa3e:	b118      	cbz	r0, 800aa48 <_dtoa_r+0x4e0>
 800aa40:	f018 0f01 	tst.w	r8, #1
 800aa44:	f040 80ee 	bne.w	800ac24 <_dtoa_r+0x6bc>
 800aa48:	4649      	mov	r1, r9
 800aa4a:	4658      	mov	r0, fp
 800aa4c:	f000 ff8c 	bl	800b968 <_Bfree>
 800aa50:	2300      	movs	r3, #0
 800aa52:	7033      	strb	r3, [r6, #0]
 800aa54:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800aa56:	3701      	adds	r7, #1
 800aa58:	601f      	str	r7, [r3, #0]
 800aa5a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	f000 831d 	beq.w	800b09c <_dtoa_r+0xb34>
 800aa62:	601e      	str	r6, [r3, #0]
 800aa64:	e31a      	b.n	800b09c <_dtoa_r+0xb34>
 800aa66:	07e2      	lsls	r2, r4, #31
 800aa68:	d505      	bpl.n	800aa76 <_dtoa_r+0x50e>
 800aa6a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aa6e:	f7f5 fdc3 	bl	80005f8 <__aeabi_dmul>
 800aa72:	3601      	adds	r6, #1
 800aa74:	2301      	movs	r3, #1
 800aa76:	1064      	asrs	r4, r4, #1
 800aa78:	3508      	adds	r5, #8
 800aa7a:	e73f      	b.n	800a8fc <_dtoa_r+0x394>
 800aa7c:	2602      	movs	r6, #2
 800aa7e:	e742      	b.n	800a906 <_dtoa_r+0x39e>
 800aa80:	9c07      	ldr	r4, [sp, #28]
 800aa82:	9704      	str	r7, [sp, #16]
 800aa84:	e761      	b.n	800a94a <_dtoa_r+0x3e2>
 800aa86:	4b27      	ldr	r3, [pc, #156]	@ (800ab24 <_dtoa_r+0x5bc>)
 800aa88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800aa8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aa8e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aa92:	4454      	add	r4, sl
 800aa94:	2900      	cmp	r1, #0
 800aa96:	d053      	beq.n	800ab40 <_dtoa_r+0x5d8>
 800aa98:	4928      	ldr	r1, [pc, #160]	@ (800ab3c <_dtoa_r+0x5d4>)
 800aa9a:	2000      	movs	r0, #0
 800aa9c:	f7f5 fed6 	bl	800084c <__aeabi_ddiv>
 800aaa0:	4633      	mov	r3, r6
 800aaa2:	462a      	mov	r2, r5
 800aaa4:	f7f5 fbf0 	bl	8000288 <__aeabi_dsub>
 800aaa8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800aaac:	4656      	mov	r6, sl
 800aaae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aab2:	f7f6 f851 	bl	8000b58 <__aeabi_d2iz>
 800aab6:	4605      	mov	r5, r0
 800aab8:	f7f5 fd34 	bl	8000524 <__aeabi_i2d>
 800aabc:	4602      	mov	r2, r0
 800aabe:	460b      	mov	r3, r1
 800aac0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aac4:	f7f5 fbe0 	bl	8000288 <__aeabi_dsub>
 800aac8:	3530      	adds	r5, #48	@ 0x30
 800aaca:	4602      	mov	r2, r0
 800aacc:	460b      	mov	r3, r1
 800aace:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aad2:	f806 5b01 	strb.w	r5, [r6], #1
 800aad6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800aada:	f7f5 ffff 	bl	8000adc <__aeabi_dcmplt>
 800aade:	2800      	cmp	r0, #0
 800aae0:	d171      	bne.n	800abc6 <_dtoa_r+0x65e>
 800aae2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aae6:	4911      	ldr	r1, [pc, #68]	@ (800ab2c <_dtoa_r+0x5c4>)
 800aae8:	2000      	movs	r0, #0
 800aaea:	f7f5 fbcd 	bl	8000288 <__aeabi_dsub>
 800aaee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800aaf2:	f7f5 fff3 	bl	8000adc <__aeabi_dcmplt>
 800aaf6:	2800      	cmp	r0, #0
 800aaf8:	f040 8095 	bne.w	800ac26 <_dtoa_r+0x6be>
 800aafc:	42a6      	cmp	r6, r4
 800aafe:	f43f af50 	beq.w	800a9a2 <_dtoa_r+0x43a>
 800ab02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ab06:	4b0a      	ldr	r3, [pc, #40]	@ (800ab30 <_dtoa_r+0x5c8>)
 800ab08:	2200      	movs	r2, #0
 800ab0a:	f7f5 fd75 	bl	80005f8 <__aeabi_dmul>
 800ab0e:	4b08      	ldr	r3, [pc, #32]	@ (800ab30 <_dtoa_r+0x5c8>)
 800ab10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ab14:	2200      	movs	r2, #0
 800ab16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab1a:	f7f5 fd6d 	bl	80005f8 <__aeabi_dmul>
 800ab1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab22:	e7c4      	b.n	800aaae <_dtoa_r+0x546>
 800ab24:	08022238 	.word	0x08022238
 800ab28:	08022210 	.word	0x08022210
 800ab2c:	3ff00000 	.word	0x3ff00000
 800ab30:	40240000 	.word	0x40240000
 800ab34:	401c0000 	.word	0x401c0000
 800ab38:	40140000 	.word	0x40140000
 800ab3c:	3fe00000 	.word	0x3fe00000
 800ab40:	4631      	mov	r1, r6
 800ab42:	4628      	mov	r0, r5
 800ab44:	f7f5 fd58 	bl	80005f8 <__aeabi_dmul>
 800ab48:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ab4c:	9415      	str	r4, [sp, #84]	@ 0x54
 800ab4e:	4656      	mov	r6, sl
 800ab50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab54:	f7f6 f800 	bl	8000b58 <__aeabi_d2iz>
 800ab58:	4605      	mov	r5, r0
 800ab5a:	f7f5 fce3 	bl	8000524 <__aeabi_i2d>
 800ab5e:	4602      	mov	r2, r0
 800ab60:	460b      	mov	r3, r1
 800ab62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab66:	f7f5 fb8f 	bl	8000288 <__aeabi_dsub>
 800ab6a:	3530      	adds	r5, #48	@ 0x30
 800ab6c:	f806 5b01 	strb.w	r5, [r6], #1
 800ab70:	4602      	mov	r2, r0
 800ab72:	460b      	mov	r3, r1
 800ab74:	42a6      	cmp	r6, r4
 800ab76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ab7a:	f04f 0200 	mov.w	r2, #0
 800ab7e:	d124      	bne.n	800abca <_dtoa_r+0x662>
 800ab80:	4bac      	ldr	r3, [pc, #688]	@ (800ae34 <_dtoa_r+0x8cc>)
 800ab82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ab86:	f7f5 fb81 	bl	800028c <__adddf3>
 800ab8a:	4602      	mov	r2, r0
 800ab8c:	460b      	mov	r3, r1
 800ab8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab92:	f7f5 ffc1 	bl	8000b18 <__aeabi_dcmpgt>
 800ab96:	2800      	cmp	r0, #0
 800ab98:	d145      	bne.n	800ac26 <_dtoa_r+0x6be>
 800ab9a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ab9e:	49a5      	ldr	r1, [pc, #660]	@ (800ae34 <_dtoa_r+0x8cc>)
 800aba0:	2000      	movs	r0, #0
 800aba2:	f7f5 fb71 	bl	8000288 <__aeabi_dsub>
 800aba6:	4602      	mov	r2, r0
 800aba8:	460b      	mov	r3, r1
 800abaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abae:	f7f5 ff95 	bl	8000adc <__aeabi_dcmplt>
 800abb2:	2800      	cmp	r0, #0
 800abb4:	f43f aef5 	beq.w	800a9a2 <_dtoa_r+0x43a>
 800abb8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800abba:	1e73      	subs	r3, r6, #1
 800abbc:	9315      	str	r3, [sp, #84]	@ 0x54
 800abbe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800abc2:	2b30      	cmp	r3, #48	@ 0x30
 800abc4:	d0f8      	beq.n	800abb8 <_dtoa_r+0x650>
 800abc6:	9f04      	ldr	r7, [sp, #16]
 800abc8:	e73e      	b.n	800aa48 <_dtoa_r+0x4e0>
 800abca:	4b9b      	ldr	r3, [pc, #620]	@ (800ae38 <_dtoa_r+0x8d0>)
 800abcc:	f7f5 fd14 	bl	80005f8 <__aeabi_dmul>
 800abd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800abd4:	e7bc      	b.n	800ab50 <_dtoa_r+0x5e8>
 800abd6:	d10c      	bne.n	800abf2 <_dtoa_r+0x68a>
 800abd8:	4b98      	ldr	r3, [pc, #608]	@ (800ae3c <_dtoa_r+0x8d4>)
 800abda:	2200      	movs	r2, #0
 800abdc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800abe0:	f7f5 fd0a 	bl	80005f8 <__aeabi_dmul>
 800abe4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800abe8:	f7f5 ff8c 	bl	8000b04 <__aeabi_dcmpge>
 800abec:	2800      	cmp	r0, #0
 800abee:	f000 8157 	beq.w	800aea0 <_dtoa_r+0x938>
 800abf2:	2400      	movs	r4, #0
 800abf4:	4625      	mov	r5, r4
 800abf6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800abf8:	43db      	mvns	r3, r3
 800abfa:	9304      	str	r3, [sp, #16]
 800abfc:	4656      	mov	r6, sl
 800abfe:	2700      	movs	r7, #0
 800ac00:	4621      	mov	r1, r4
 800ac02:	4658      	mov	r0, fp
 800ac04:	f000 feb0 	bl	800b968 <_Bfree>
 800ac08:	2d00      	cmp	r5, #0
 800ac0a:	d0dc      	beq.n	800abc6 <_dtoa_r+0x65e>
 800ac0c:	b12f      	cbz	r7, 800ac1a <_dtoa_r+0x6b2>
 800ac0e:	42af      	cmp	r7, r5
 800ac10:	d003      	beq.n	800ac1a <_dtoa_r+0x6b2>
 800ac12:	4639      	mov	r1, r7
 800ac14:	4658      	mov	r0, fp
 800ac16:	f000 fea7 	bl	800b968 <_Bfree>
 800ac1a:	4629      	mov	r1, r5
 800ac1c:	4658      	mov	r0, fp
 800ac1e:	f000 fea3 	bl	800b968 <_Bfree>
 800ac22:	e7d0      	b.n	800abc6 <_dtoa_r+0x65e>
 800ac24:	9704      	str	r7, [sp, #16]
 800ac26:	4633      	mov	r3, r6
 800ac28:	461e      	mov	r6, r3
 800ac2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac2e:	2a39      	cmp	r2, #57	@ 0x39
 800ac30:	d107      	bne.n	800ac42 <_dtoa_r+0x6da>
 800ac32:	459a      	cmp	sl, r3
 800ac34:	d1f8      	bne.n	800ac28 <_dtoa_r+0x6c0>
 800ac36:	9a04      	ldr	r2, [sp, #16]
 800ac38:	3201      	adds	r2, #1
 800ac3a:	9204      	str	r2, [sp, #16]
 800ac3c:	2230      	movs	r2, #48	@ 0x30
 800ac3e:	f88a 2000 	strb.w	r2, [sl]
 800ac42:	781a      	ldrb	r2, [r3, #0]
 800ac44:	3201      	adds	r2, #1
 800ac46:	701a      	strb	r2, [r3, #0]
 800ac48:	e7bd      	b.n	800abc6 <_dtoa_r+0x65e>
 800ac4a:	4b7b      	ldr	r3, [pc, #492]	@ (800ae38 <_dtoa_r+0x8d0>)
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	f7f5 fcd3 	bl	80005f8 <__aeabi_dmul>
 800ac52:	2200      	movs	r2, #0
 800ac54:	2300      	movs	r3, #0
 800ac56:	4604      	mov	r4, r0
 800ac58:	460d      	mov	r5, r1
 800ac5a:	f7f5 ff35 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac5e:	2800      	cmp	r0, #0
 800ac60:	f43f aebb 	beq.w	800a9da <_dtoa_r+0x472>
 800ac64:	e6f0      	b.n	800aa48 <_dtoa_r+0x4e0>
 800ac66:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ac68:	2a00      	cmp	r2, #0
 800ac6a:	f000 80db 	beq.w	800ae24 <_dtoa_r+0x8bc>
 800ac6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac70:	2a01      	cmp	r2, #1
 800ac72:	f300 80bf 	bgt.w	800adf4 <_dtoa_r+0x88c>
 800ac76:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ac78:	2a00      	cmp	r2, #0
 800ac7a:	f000 80b7 	beq.w	800adec <_dtoa_r+0x884>
 800ac7e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ac82:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ac84:	4646      	mov	r6, r8
 800ac86:	9a08      	ldr	r2, [sp, #32]
 800ac88:	2101      	movs	r1, #1
 800ac8a:	441a      	add	r2, r3
 800ac8c:	4658      	mov	r0, fp
 800ac8e:	4498      	add	r8, r3
 800ac90:	9208      	str	r2, [sp, #32]
 800ac92:	f000 ff1d 	bl	800bad0 <__i2b>
 800ac96:	4605      	mov	r5, r0
 800ac98:	b15e      	cbz	r6, 800acb2 <_dtoa_r+0x74a>
 800ac9a:	9b08      	ldr	r3, [sp, #32]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	dd08      	ble.n	800acb2 <_dtoa_r+0x74a>
 800aca0:	42b3      	cmp	r3, r6
 800aca2:	9a08      	ldr	r2, [sp, #32]
 800aca4:	bfa8      	it	ge
 800aca6:	4633      	movge	r3, r6
 800aca8:	eba8 0803 	sub.w	r8, r8, r3
 800acac:	1af6      	subs	r6, r6, r3
 800acae:	1ad3      	subs	r3, r2, r3
 800acb0:	9308      	str	r3, [sp, #32]
 800acb2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800acb4:	b1f3      	cbz	r3, 800acf4 <_dtoa_r+0x78c>
 800acb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800acb8:	2b00      	cmp	r3, #0
 800acba:	f000 80b7 	beq.w	800ae2c <_dtoa_r+0x8c4>
 800acbe:	b18c      	cbz	r4, 800ace4 <_dtoa_r+0x77c>
 800acc0:	4629      	mov	r1, r5
 800acc2:	4622      	mov	r2, r4
 800acc4:	4658      	mov	r0, fp
 800acc6:	f000 ffc3 	bl	800bc50 <__pow5mult>
 800acca:	464a      	mov	r2, r9
 800accc:	4601      	mov	r1, r0
 800acce:	4605      	mov	r5, r0
 800acd0:	4658      	mov	r0, fp
 800acd2:	f000 ff13 	bl	800bafc <__multiply>
 800acd6:	4649      	mov	r1, r9
 800acd8:	9004      	str	r0, [sp, #16]
 800acda:	4658      	mov	r0, fp
 800acdc:	f000 fe44 	bl	800b968 <_Bfree>
 800ace0:	9b04      	ldr	r3, [sp, #16]
 800ace2:	4699      	mov	r9, r3
 800ace4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ace6:	1b1a      	subs	r2, r3, r4
 800ace8:	d004      	beq.n	800acf4 <_dtoa_r+0x78c>
 800acea:	4649      	mov	r1, r9
 800acec:	4658      	mov	r0, fp
 800acee:	f000 ffaf 	bl	800bc50 <__pow5mult>
 800acf2:	4681      	mov	r9, r0
 800acf4:	2101      	movs	r1, #1
 800acf6:	4658      	mov	r0, fp
 800acf8:	f000 feea 	bl	800bad0 <__i2b>
 800acfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800acfe:	4604      	mov	r4, r0
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	f000 81cf 	beq.w	800b0a4 <_dtoa_r+0xb3c>
 800ad06:	461a      	mov	r2, r3
 800ad08:	4601      	mov	r1, r0
 800ad0a:	4658      	mov	r0, fp
 800ad0c:	f000 ffa0 	bl	800bc50 <__pow5mult>
 800ad10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad12:	2b01      	cmp	r3, #1
 800ad14:	4604      	mov	r4, r0
 800ad16:	f300 8095 	bgt.w	800ae44 <_dtoa_r+0x8dc>
 800ad1a:	9b02      	ldr	r3, [sp, #8]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	f040 8087 	bne.w	800ae30 <_dtoa_r+0x8c8>
 800ad22:	9b03      	ldr	r3, [sp, #12]
 800ad24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	f040 8089 	bne.w	800ae40 <_dtoa_r+0x8d8>
 800ad2e:	9b03      	ldr	r3, [sp, #12]
 800ad30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ad34:	0d1b      	lsrs	r3, r3, #20
 800ad36:	051b      	lsls	r3, r3, #20
 800ad38:	b12b      	cbz	r3, 800ad46 <_dtoa_r+0x7de>
 800ad3a:	9b08      	ldr	r3, [sp, #32]
 800ad3c:	3301      	adds	r3, #1
 800ad3e:	9308      	str	r3, [sp, #32]
 800ad40:	f108 0801 	add.w	r8, r8, #1
 800ad44:	2301      	movs	r3, #1
 800ad46:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	f000 81b0 	beq.w	800b0b0 <_dtoa_r+0xb48>
 800ad50:	6923      	ldr	r3, [r4, #16]
 800ad52:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ad56:	6918      	ldr	r0, [r3, #16]
 800ad58:	f000 fe6e 	bl	800ba38 <__hi0bits>
 800ad5c:	f1c0 0020 	rsb	r0, r0, #32
 800ad60:	9b08      	ldr	r3, [sp, #32]
 800ad62:	4418      	add	r0, r3
 800ad64:	f010 001f 	ands.w	r0, r0, #31
 800ad68:	d077      	beq.n	800ae5a <_dtoa_r+0x8f2>
 800ad6a:	f1c0 0320 	rsb	r3, r0, #32
 800ad6e:	2b04      	cmp	r3, #4
 800ad70:	dd6b      	ble.n	800ae4a <_dtoa_r+0x8e2>
 800ad72:	9b08      	ldr	r3, [sp, #32]
 800ad74:	f1c0 001c 	rsb	r0, r0, #28
 800ad78:	4403      	add	r3, r0
 800ad7a:	4480      	add	r8, r0
 800ad7c:	4406      	add	r6, r0
 800ad7e:	9308      	str	r3, [sp, #32]
 800ad80:	f1b8 0f00 	cmp.w	r8, #0
 800ad84:	dd05      	ble.n	800ad92 <_dtoa_r+0x82a>
 800ad86:	4649      	mov	r1, r9
 800ad88:	4642      	mov	r2, r8
 800ad8a:	4658      	mov	r0, fp
 800ad8c:	f000 ffba 	bl	800bd04 <__lshift>
 800ad90:	4681      	mov	r9, r0
 800ad92:	9b08      	ldr	r3, [sp, #32]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	dd05      	ble.n	800ada4 <_dtoa_r+0x83c>
 800ad98:	4621      	mov	r1, r4
 800ad9a:	461a      	mov	r2, r3
 800ad9c:	4658      	mov	r0, fp
 800ad9e:	f000 ffb1 	bl	800bd04 <__lshift>
 800ada2:	4604      	mov	r4, r0
 800ada4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d059      	beq.n	800ae5e <_dtoa_r+0x8f6>
 800adaa:	4621      	mov	r1, r4
 800adac:	4648      	mov	r0, r9
 800adae:	f001 f815 	bl	800bddc <__mcmp>
 800adb2:	2800      	cmp	r0, #0
 800adb4:	da53      	bge.n	800ae5e <_dtoa_r+0x8f6>
 800adb6:	1e7b      	subs	r3, r7, #1
 800adb8:	9304      	str	r3, [sp, #16]
 800adba:	4649      	mov	r1, r9
 800adbc:	2300      	movs	r3, #0
 800adbe:	220a      	movs	r2, #10
 800adc0:	4658      	mov	r0, fp
 800adc2:	f000 fdf3 	bl	800b9ac <__multadd>
 800adc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800adc8:	4681      	mov	r9, r0
 800adca:	2b00      	cmp	r3, #0
 800adcc:	f000 8172 	beq.w	800b0b4 <_dtoa_r+0xb4c>
 800add0:	2300      	movs	r3, #0
 800add2:	4629      	mov	r1, r5
 800add4:	220a      	movs	r2, #10
 800add6:	4658      	mov	r0, fp
 800add8:	f000 fde8 	bl	800b9ac <__multadd>
 800addc:	9b00      	ldr	r3, [sp, #0]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	4605      	mov	r5, r0
 800ade2:	dc67      	bgt.n	800aeb4 <_dtoa_r+0x94c>
 800ade4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ade6:	2b02      	cmp	r3, #2
 800ade8:	dc41      	bgt.n	800ae6e <_dtoa_r+0x906>
 800adea:	e063      	b.n	800aeb4 <_dtoa_r+0x94c>
 800adec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800adee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800adf2:	e746      	b.n	800ac82 <_dtoa_r+0x71a>
 800adf4:	9b07      	ldr	r3, [sp, #28]
 800adf6:	1e5c      	subs	r4, r3, #1
 800adf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800adfa:	42a3      	cmp	r3, r4
 800adfc:	bfbf      	itttt	lt
 800adfe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ae00:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ae02:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ae04:	1ae3      	sublt	r3, r4, r3
 800ae06:	bfb4      	ite	lt
 800ae08:	18d2      	addlt	r2, r2, r3
 800ae0a:	1b1c      	subge	r4, r3, r4
 800ae0c:	9b07      	ldr	r3, [sp, #28]
 800ae0e:	bfbc      	itt	lt
 800ae10:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ae12:	2400      	movlt	r4, #0
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	bfb5      	itete	lt
 800ae18:	eba8 0603 	sublt.w	r6, r8, r3
 800ae1c:	9b07      	ldrge	r3, [sp, #28]
 800ae1e:	2300      	movlt	r3, #0
 800ae20:	4646      	movge	r6, r8
 800ae22:	e730      	b.n	800ac86 <_dtoa_r+0x71e>
 800ae24:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ae26:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ae28:	4646      	mov	r6, r8
 800ae2a:	e735      	b.n	800ac98 <_dtoa_r+0x730>
 800ae2c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ae2e:	e75c      	b.n	800acea <_dtoa_r+0x782>
 800ae30:	2300      	movs	r3, #0
 800ae32:	e788      	b.n	800ad46 <_dtoa_r+0x7de>
 800ae34:	3fe00000 	.word	0x3fe00000
 800ae38:	40240000 	.word	0x40240000
 800ae3c:	40140000 	.word	0x40140000
 800ae40:	9b02      	ldr	r3, [sp, #8]
 800ae42:	e780      	b.n	800ad46 <_dtoa_r+0x7de>
 800ae44:	2300      	movs	r3, #0
 800ae46:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae48:	e782      	b.n	800ad50 <_dtoa_r+0x7e8>
 800ae4a:	d099      	beq.n	800ad80 <_dtoa_r+0x818>
 800ae4c:	9a08      	ldr	r2, [sp, #32]
 800ae4e:	331c      	adds	r3, #28
 800ae50:	441a      	add	r2, r3
 800ae52:	4498      	add	r8, r3
 800ae54:	441e      	add	r6, r3
 800ae56:	9208      	str	r2, [sp, #32]
 800ae58:	e792      	b.n	800ad80 <_dtoa_r+0x818>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	e7f6      	b.n	800ae4c <_dtoa_r+0x8e4>
 800ae5e:	9b07      	ldr	r3, [sp, #28]
 800ae60:	9704      	str	r7, [sp, #16]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	dc20      	bgt.n	800aea8 <_dtoa_r+0x940>
 800ae66:	9300      	str	r3, [sp, #0]
 800ae68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae6a:	2b02      	cmp	r3, #2
 800ae6c:	dd1e      	ble.n	800aeac <_dtoa_r+0x944>
 800ae6e:	9b00      	ldr	r3, [sp, #0]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	f47f aec0 	bne.w	800abf6 <_dtoa_r+0x68e>
 800ae76:	4621      	mov	r1, r4
 800ae78:	2205      	movs	r2, #5
 800ae7a:	4658      	mov	r0, fp
 800ae7c:	f000 fd96 	bl	800b9ac <__multadd>
 800ae80:	4601      	mov	r1, r0
 800ae82:	4604      	mov	r4, r0
 800ae84:	4648      	mov	r0, r9
 800ae86:	f000 ffa9 	bl	800bddc <__mcmp>
 800ae8a:	2800      	cmp	r0, #0
 800ae8c:	f77f aeb3 	ble.w	800abf6 <_dtoa_r+0x68e>
 800ae90:	4656      	mov	r6, sl
 800ae92:	2331      	movs	r3, #49	@ 0x31
 800ae94:	f806 3b01 	strb.w	r3, [r6], #1
 800ae98:	9b04      	ldr	r3, [sp, #16]
 800ae9a:	3301      	adds	r3, #1
 800ae9c:	9304      	str	r3, [sp, #16]
 800ae9e:	e6ae      	b.n	800abfe <_dtoa_r+0x696>
 800aea0:	9c07      	ldr	r4, [sp, #28]
 800aea2:	9704      	str	r7, [sp, #16]
 800aea4:	4625      	mov	r5, r4
 800aea6:	e7f3      	b.n	800ae90 <_dtoa_r+0x928>
 800aea8:	9b07      	ldr	r3, [sp, #28]
 800aeaa:	9300      	str	r3, [sp, #0]
 800aeac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	f000 8104 	beq.w	800b0bc <_dtoa_r+0xb54>
 800aeb4:	2e00      	cmp	r6, #0
 800aeb6:	dd05      	ble.n	800aec4 <_dtoa_r+0x95c>
 800aeb8:	4629      	mov	r1, r5
 800aeba:	4632      	mov	r2, r6
 800aebc:	4658      	mov	r0, fp
 800aebe:	f000 ff21 	bl	800bd04 <__lshift>
 800aec2:	4605      	mov	r5, r0
 800aec4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d05a      	beq.n	800af80 <_dtoa_r+0xa18>
 800aeca:	6869      	ldr	r1, [r5, #4]
 800aecc:	4658      	mov	r0, fp
 800aece:	f000 fd0b 	bl	800b8e8 <_Balloc>
 800aed2:	4606      	mov	r6, r0
 800aed4:	b928      	cbnz	r0, 800aee2 <_dtoa_r+0x97a>
 800aed6:	4b84      	ldr	r3, [pc, #528]	@ (800b0e8 <_dtoa_r+0xb80>)
 800aed8:	4602      	mov	r2, r0
 800aeda:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800aede:	f7ff bb5a 	b.w	800a596 <_dtoa_r+0x2e>
 800aee2:	692a      	ldr	r2, [r5, #16]
 800aee4:	3202      	adds	r2, #2
 800aee6:	0092      	lsls	r2, r2, #2
 800aee8:	f105 010c 	add.w	r1, r5, #12
 800aeec:	300c      	adds	r0, #12
 800aeee:	f7ff faa4 	bl	800a43a <memcpy>
 800aef2:	2201      	movs	r2, #1
 800aef4:	4631      	mov	r1, r6
 800aef6:	4658      	mov	r0, fp
 800aef8:	f000 ff04 	bl	800bd04 <__lshift>
 800aefc:	f10a 0301 	add.w	r3, sl, #1
 800af00:	9307      	str	r3, [sp, #28]
 800af02:	9b00      	ldr	r3, [sp, #0]
 800af04:	4453      	add	r3, sl
 800af06:	930b      	str	r3, [sp, #44]	@ 0x2c
 800af08:	9b02      	ldr	r3, [sp, #8]
 800af0a:	f003 0301 	and.w	r3, r3, #1
 800af0e:	462f      	mov	r7, r5
 800af10:	930a      	str	r3, [sp, #40]	@ 0x28
 800af12:	4605      	mov	r5, r0
 800af14:	9b07      	ldr	r3, [sp, #28]
 800af16:	4621      	mov	r1, r4
 800af18:	3b01      	subs	r3, #1
 800af1a:	4648      	mov	r0, r9
 800af1c:	9300      	str	r3, [sp, #0]
 800af1e:	f7ff fa9a 	bl	800a456 <quorem>
 800af22:	4639      	mov	r1, r7
 800af24:	9002      	str	r0, [sp, #8]
 800af26:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800af2a:	4648      	mov	r0, r9
 800af2c:	f000 ff56 	bl	800bddc <__mcmp>
 800af30:	462a      	mov	r2, r5
 800af32:	9008      	str	r0, [sp, #32]
 800af34:	4621      	mov	r1, r4
 800af36:	4658      	mov	r0, fp
 800af38:	f000 ff6c 	bl	800be14 <__mdiff>
 800af3c:	68c2      	ldr	r2, [r0, #12]
 800af3e:	4606      	mov	r6, r0
 800af40:	bb02      	cbnz	r2, 800af84 <_dtoa_r+0xa1c>
 800af42:	4601      	mov	r1, r0
 800af44:	4648      	mov	r0, r9
 800af46:	f000 ff49 	bl	800bddc <__mcmp>
 800af4a:	4602      	mov	r2, r0
 800af4c:	4631      	mov	r1, r6
 800af4e:	4658      	mov	r0, fp
 800af50:	920e      	str	r2, [sp, #56]	@ 0x38
 800af52:	f000 fd09 	bl	800b968 <_Bfree>
 800af56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af58:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800af5a:	9e07      	ldr	r6, [sp, #28]
 800af5c:	ea43 0102 	orr.w	r1, r3, r2
 800af60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af62:	4319      	orrs	r1, r3
 800af64:	d110      	bne.n	800af88 <_dtoa_r+0xa20>
 800af66:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800af6a:	d029      	beq.n	800afc0 <_dtoa_r+0xa58>
 800af6c:	9b08      	ldr	r3, [sp, #32]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	dd02      	ble.n	800af78 <_dtoa_r+0xa10>
 800af72:	9b02      	ldr	r3, [sp, #8]
 800af74:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800af78:	9b00      	ldr	r3, [sp, #0]
 800af7a:	f883 8000 	strb.w	r8, [r3]
 800af7e:	e63f      	b.n	800ac00 <_dtoa_r+0x698>
 800af80:	4628      	mov	r0, r5
 800af82:	e7bb      	b.n	800aefc <_dtoa_r+0x994>
 800af84:	2201      	movs	r2, #1
 800af86:	e7e1      	b.n	800af4c <_dtoa_r+0x9e4>
 800af88:	9b08      	ldr	r3, [sp, #32]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	db04      	blt.n	800af98 <_dtoa_r+0xa30>
 800af8e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800af90:	430b      	orrs	r3, r1
 800af92:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800af94:	430b      	orrs	r3, r1
 800af96:	d120      	bne.n	800afda <_dtoa_r+0xa72>
 800af98:	2a00      	cmp	r2, #0
 800af9a:	dded      	ble.n	800af78 <_dtoa_r+0xa10>
 800af9c:	4649      	mov	r1, r9
 800af9e:	2201      	movs	r2, #1
 800afa0:	4658      	mov	r0, fp
 800afa2:	f000 feaf 	bl	800bd04 <__lshift>
 800afa6:	4621      	mov	r1, r4
 800afa8:	4681      	mov	r9, r0
 800afaa:	f000 ff17 	bl	800bddc <__mcmp>
 800afae:	2800      	cmp	r0, #0
 800afb0:	dc03      	bgt.n	800afba <_dtoa_r+0xa52>
 800afb2:	d1e1      	bne.n	800af78 <_dtoa_r+0xa10>
 800afb4:	f018 0f01 	tst.w	r8, #1
 800afb8:	d0de      	beq.n	800af78 <_dtoa_r+0xa10>
 800afba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800afbe:	d1d8      	bne.n	800af72 <_dtoa_r+0xa0a>
 800afc0:	9a00      	ldr	r2, [sp, #0]
 800afc2:	2339      	movs	r3, #57	@ 0x39
 800afc4:	7013      	strb	r3, [r2, #0]
 800afc6:	4633      	mov	r3, r6
 800afc8:	461e      	mov	r6, r3
 800afca:	3b01      	subs	r3, #1
 800afcc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800afd0:	2a39      	cmp	r2, #57	@ 0x39
 800afd2:	d052      	beq.n	800b07a <_dtoa_r+0xb12>
 800afd4:	3201      	adds	r2, #1
 800afd6:	701a      	strb	r2, [r3, #0]
 800afd8:	e612      	b.n	800ac00 <_dtoa_r+0x698>
 800afda:	2a00      	cmp	r2, #0
 800afdc:	dd07      	ble.n	800afee <_dtoa_r+0xa86>
 800afde:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800afe2:	d0ed      	beq.n	800afc0 <_dtoa_r+0xa58>
 800afe4:	9a00      	ldr	r2, [sp, #0]
 800afe6:	f108 0301 	add.w	r3, r8, #1
 800afea:	7013      	strb	r3, [r2, #0]
 800afec:	e608      	b.n	800ac00 <_dtoa_r+0x698>
 800afee:	9b07      	ldr	r3, [sp, #28]
 800aff0:	9a07      	ldr	r2, [sp, #28]
 800aff2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800aff6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aff8:	4293      	cmp	r3, r2
 800affa:	d028      	beq.n	800b04e <_dtoa_r+0xae6>
 800affc:	4649      	mov	r1, r9
 800affe:	2300      	movs	r3, #0
 800b000:	220a      	movs	r2, #10
 800b002:	4658      	mov	r0, fp
 800b004:	f000 fcd2 	bl	800b9ac <__multadd>
 800b008:	42af      	cmp	r7, r5
 800b00a:	4681      	mov	r9, r0
 800b00c:	f04f 0300 	mov.w	r3, #0
 800b010:	f04f 020a 	mov.w	r2, #10
 800b014:	4639      	mov	r1, r7
 800b016:	4658      	mov	r0, fp
 800b018:	d107      	bne.n	800b02a <_dtoa_r+0xac2>
 800b01a:	f000 fcc7 	bl	800b9ac <__multadd>
 800b01e:	4607      	mov	r7, r0
 800b020:	4605      	mov	r5, r0
 800b022:	9b07      	ldr	r3, [sp, #28]
 800b024:	3301      	adds	r3, #1
 800b026:	9307      	str	r3, [sp, #28]
 800b028:	e774      	b.n	800af14 <_dtoa_r+0x9ac>
 800b02a:	f000 fcbf 	bl	800b9ac <__multadd>
 800b02e:	4629      	mov	r1, r5
 800b030:	4607      	mov	r7, r0
 800b032:	2300      	movs	r3, #0
 800b034:	220a      	movs	r2, #10
 800b036:	4658      	mov	r0, fp
 800b038:	f000 fcb8 	bl	800b9ac <__multadd>
 800b03c:	4605      	mov	r5, r0
 800b03e:	e7f0      	b.n	800b022 <_dtoa_r+0xaba>
 800b040:	9b00      	ldr	r3, [sp, #0]
 800b042:	2b00      	cmp	r3, #0
 800b044:	bfcc      	ite	gt
 800b046:	461e      	movgt	r6, r3
 800b048:	2601      	movle	r6, #1
 800b04a:	4456      	add	r6, sl
 800b04c:	2700      	movs	r7, #0
 800b04e:	4649      	mov	r1, r9
 800b050:	2201      	movs	r2, #1
 800b052:	4658      	mov	r0, fp
 800b054:	f000 fe56 	bl	800bd04 <__lshift>
 800b058:	4621      	mov	r1, r4
 800b05a:	4681      	mov	r9, r0
 800b05c:	f000 febe 	bl	800bddc <__mcmp>
 800b060:	2800      	cmp	r0, #0
 800b062:	dcb0      	bgt.n	800afc6 <_dtoa_r+0xa5e>
 800b064:	d102      	bne.n	800b06c <_dtoa_r+0xb04>
 800b066:	f018 0f01 	tst.w	r8, #1
 800b06a:	d1ac      	bne.n	800afc6 <_dtoa_r+0xa5e>
 800b06c:	4633      	mov	r3, r6
 800b06e:	461e      	mov	r6, r3
 800b070:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b074:	2a30      	cmp	r2, #48	@ 0x30
 800b076:	d0fa      	beq.n	800b06e <_dtoa_r+0xb06>
 800b078:	e5c2      	b.n	800ac00 <_dtoa_r+0x698>
 800b07a:	459a      	cmp	sl, r3
 800b07c:	d1a4      	bne.n	800afc8 <_dtoa_r+0xa60>
 800b07e:	9b04      	ldr	r3, [sp, #16]
 800b080:	3301      	adds	r3, #1
 800b082:	9304      	str	r3, [sp, #16]
 800b084:	2331      	movs	r3, #49	@ 0x31
 800b086:	f88a 3000 	strb.w	r3, [sl]
 800b08a:	e5b9      	b.n	800ac00 <_dtoa_r+0x698>
 800b08c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b08e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b0ec <_dtoa_r+0xb84>
 800b092:	b11b      	cbz	r3, 800b09c <_dtoa_r+0xb34>
 800b094:	f10a 0308 	add.w	r3, sl, #8
 800b098:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b09a:	6013      	str	r3, [r2, #0]
 800b09c:	4650      	mov	r0, sl
 800b09e:	b019      	add	sp, #100	@ 0x64
 800b0a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0a6:	2b01      	cmp	r3, #1
 800b0a8:	f77f ae37 	ble.w	800ad1a <_dtoa_r+0x7b2>
 800b0ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b0ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800b0b0:	2001      	movs	r0, #1
 800b0b2:	e655      	b.n	800ad60 <_dtoa_r+0x7f8>
 800b0b4:	9b00      	ldr	r3, [sp, #0]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	f77f aed6 	ble.w	800ae68 <_dtoa_r+0x900>
 800b0bc:	4656      	mov	r6, sl
 800b0be:	4621      	mov	r1, r4
 800b0c0:	4648      	mov	r0, r9
 800b0c2:	f7ff f9c8 	bl	800a456 <quorem>
 800b0c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b0ca:	f806 8b01 	strb.w	r8, [r6], #1
 800b0ce:	9b00      	ldr	r3, [sp, #0]
 800b0d0:	eba6 020a 	sub.w	r2, r6, sl
 800b0d4:	4293      	cmp	r3, r2
 800b0d6:	ddb3      	ble.n	800b040 <_dtoa_r+0xad8>
 800b0d8:	4649      	mov	r1, r9
 800b0da:	2300      	movs	r3, #0
 800b0dc:	220a      	movs	r2, #10
 800b0de:	4658      	mov	r0, fp
 800b0e0:	f000 fc64 	bl	800b9ac <__multadd>
 800b0e4:	4681      	mov	r9, r0
 800b0e6:	e7ea      	b.n	800b0be <_dtoa_r+0xb56>
 800b0e8:	08022184 	.word	0x08022184
 800b0ec:	08022108 	.word	0x08022108

0800b0f0 <__ssputs_r>:
 800b0f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0f4:	688e      	ldr	r6, [r1, #8]
 800b0f6:	461f      	mov	r7, r3
 800b0f8:	42be      	cmp	r6, r7
 800b0fa:	680b      	ldr	r3, [r1, #0]
 800b0fc:	4682      	mov	sl, r0
 800b0fe:	460c      	mov	r4, r1
 800b100:	4690      	mov	r8, r2
 800b102:	d82d      	bhi.n	800b160 <__ssputs_r+0x70>
 800b104:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b108:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b10c:	d026      	beq.n	800b15c <__ssputs_r+0x6c>
 800b10e:	6965      	ldr	r5, [r4, #20]
 800b110:	6909      	ldr	r1, [r1, #16]
 800b112:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b116:	eba3 0901 	sub.w	r9, r3, r1
 800b11a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b11e:	1c7b      	adds	r3, r7, #1
 800b120:	444b      	add	r3, r9
 800b122:	106d      	asrs	r5, r5, #1
 800b124:	429d      	cmp	r5, r3
 800b126:	bf38      	it	cc
 800b128:	461d      	movcc	r5, r3
 800b12a:	0553      	lsls	r3, r2, #21
 800b12c:	d527      	bpl.n	800b17e <__ssputs_r+0x8e>
 800b12e:	4629      	mov	r1, r5
 800b130:	f000 faa2 	bl	800b678 <_malloc_r>
 800b134:	4606      	mov	r6, r0
 800b136:	b360      	cbz	r0, 800b192 <__ssputs_r+0xa2>
 800b138:	6921      	ldr	r1, [r4, #16]
 800b13a:	464a      	mov	r2, r9
 800b13c:	f7ff f97d 	bl	800a43a <memcpy>
 800b140:	89a3      	ldrh	r3, [r4, #12]
 800b142:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b146:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b14a:	81a3      	strh	r3, [r4, #12]
 800b14c:	6126      	str	r6, [r4, #16]
 800b14e:	6165      	str	r5, [r4, #20]
 800b150:	444e      	add	r6, r9
 800b152:	eba5 0509 	sub.w	r5, r5, r9
 800b156:	6026      	str	r6, [r4, #0]
 800b158:	60a5      	str	r5, [r4, #8]
 800b15a:	463e      	mov	r6, r7
 800b15c:	42be      	cmp	r6, r7
 800b15e:	d900      	bls.n	800b162 <__ssputs_r+0x72>
 800b160:	463e      	mov	r6, r7
 800b162:	6820      	ldr	r0, [r4, #0]
 800b164:	4632      	mov	r2, r6
 800b166:	4641      	mov	r1, r8
 800b168:	f001 f8a8 	bl	800c2bc <memmove>
 800b16c:	68a3      	ldr	r3, [r4, #8]
 800b16e:	1b9b      	subs	r3, r3, r6
 800b170:	60a3      	str	r3, [r4, #8]
 800b172:	6823      	ldr	r3, [r4, #0]
 800b174:	4433      	add	r3, r6
 800b176:	6023      	str	r3, [r4, #0]
 800b178:	2000      	movs	r0, #0
 800b17a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b17e:	462a      	mov	r2, r5
 800b180:	f000 ff77 	bl	800c072 <_realloc_r>
 800b184:	4606      	mov	r6, r0
 800b186:	2800      	cmp	r0, #0
 800b188:	d1e0      	bne.n	800b14c <__ssputs_r+0x5c>
 800b18a:	6921      	ldr	r1, [r4, #16]
 800b18c:	4650      	mov	r0, sl
 800b18e:	f001 f959 	bl	800c444 <_free_r>
 800b192:	230c      	movs	r3, #12
 800b194:	f8ca 3000 	str.w	r3, [sl]
 800b198:	89a3      	ldrh	r3, [r4, #12]
 800b19a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b19e:	81a3      	strh	r3, [r4, #12]
 800b1a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b1a4:	e7e9      	b.n	800b17a <__ssputs_r+0x8a>
	...

0800b1a8 <_svfiprintf_r>:
 800b1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1ac:	4698      	mov	r8, r3
 800b1ae:	898b      	ldrh	r3, [r1, #12]
 800b1b0:	061b      	lsls	r3, r3, #24
 800b1b2:	b09d      	sub	sp, #116	@ 0x74
 800b1b4:	4607      	mov	r7, r0
 800b1b6:	460d      	mov	r5, r1
 800b1b8:	4614      	mov	r4, r2
 800b1ba:	d510      	bpl.n	800b1de <_svfiprintf_r+0x36>
 800b1bc:	690b      	ldr	r3, [r1, #16]
 800b1be:	b973      	cbnz	r3, 800b1de <_svfiprintf_r+0x36>
 800b1c0:	2140      	movs	r1, #64	@ 0x40
 800b1c2:	f000 fa59 	bl	800b678 <_malloc_r>
 800b1c6:	6028      	str	r0, [r5, #0]
 800b1c8:	6128      	str	r0, [r5, #16]
 800b1ca:	b930      	cbnz	r0, 800b1da <_svfiprintf_r+0x32>
 800b1cc:	230c      	movs	r3, #12
 800b1ce:	603b      	str	r3, [r7, #0]
 800b1d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b1d4:	b01d      	add	sp, #116	@ 0x74
 800b1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1da:	2340      	movs	r3, #64	@ 0x40
 800b1dc:	616b      	str	r3, [r5, #20]
 800b1de:	2300      	movs	r3, #0
 800b1e0:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1e2:	2320      	movs	r3, #32
 800b1e4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b1e8:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1ec:	2330      	movs	r3, #48	@ 0x30
 800b1ee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b38c <_svfiprintf_r+0x1e4>
 800b1f2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b1f6:	f04f 0901 	mov.w	r9, #1
 800b1fa:	4623      	mov	r3, r4
 800b1fc:	469a      	mov	sl, r3
 800b1fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b202:	b10a      	cbz	r2, 800b208 <_svfiprintf_r+0x60>
 800b204:	2a25      	cmp	r2, #37	@ 0x25
 800b206:	d1f9      	bne.n	800b1fc <_svfiprintf_r+0x54>
 800b208:	ebba 0b04 	subs.w	fp, sl, r4
 800b20c:	d00b      	beq.n	800b226 <_svfiprintf_r+0x7e>
 800b20e:	465b      	mov	r3, fp
 800b210:	4622      	mov	r2, r4
 800b212:	4629      	mov	r1, r5
 800b214:	4638      	mov	r0, r7
 800b216:	f7ff ff6b 	bl	800b0f0 <__ssputs_r>
 800b21a:	3001      	adds	r0, #1
 800b21c:	f000 80a7 	beq.w	800b36e <_svfiprintf_r+0x1c6>
 800b220:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b222:	445a      	add	r2, fp
 800b224:	9209      	str	r2, [sp, #36]	@ 0x24
 800b226:	f89a 3000 	ldrb.w	r3, [sl]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	f000 809f 	beq.w	800b36e <_svfiprintf_r+0x1c6>
 800b230:	2300      	movs	r3, #0
 800b232:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b236:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b23a:	f10a 0a01 	add.w	sl, sl, #1
 800b23e:	9304      	str	r3, [sp, #16]
 800b240:	9307      	str	r3, [sp, #28]
 800b242:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b246:	931a      	str	r3, [sp, #104]	@ 0x68
 800b248:	4654      	mov	r4, sl
 800b24a:	2205      	movs	r2, #5
 800b24c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b250:	484e      	ldr	r0, [pc, #312]	@ (800b38c <_svfiprintf_r+0x1e4>)
 800b252:	f7f4 ffbd 	bl	80001d0 <memchr>
 800b256:	9a04      	ldr	r2, [sp, #16]
 800b258:	b9d8      	cbnz	r0, 800b292 <_svfiprintf_r+0xea>
 800b25a:	06d0      	lsls	r0, r2, #27
 800b25c:	bf44      	itt	mi
 800b25e:	2320      	movmi	r3, #32
 800b260:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b264:	0711      	lsls	r1, r2, #28
 800b266:	bf44      	itt	mi
 800b268:	232b      	movmi	r3, #43	@ 0x2b
 800b26a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b26e:	f89a 3000 	ldrb.w	r3, [sl]
 800b272:	2b2a      	cmp	r3, #42	@ 0x2a
 800b274:	d015      	beq.n	800b2a2 <_svfiprintf_r+0xfa>
 800b276:	9a07      	ldr	r2, [sp, #28]
 800b278:	4654      	mov	r4, sl
 800b27a:	2000      	movs	r0, #0
 800b27c:	f04f 0c0a 	mov.w	ip, #10
 800b280:	4621      	mov	r1, r4
 800b282:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b286:	3b30      	subs	r3, #48	@ 0x30
 800b288:	2b09      	cmp	r3, #9
 800b28a:	d94b      	bls.n	800b324 <_svfiprintf_r+0x17c>
 800b28c:	b1b0      	cbz	r0, 800b2bc <_svfiprintf_r+0x114>
 800b28e:	9207      	str	r2, [sp, #28]
 800b290:	e014      	b.n	800b2bc <_svfiprintf_r+0x114>
 800b292:	eba0 0308 	sub.w	r3, r0, r8
 800b296:	fa09 f303 	lsl.w	r3, r9, r3
 800b29a:	4313      	orrs	r3, r2
 800b29c:	9304      	str	r3, [sp, #16]
 800b29e:	46a2      	mov	sl, r4
 800b2a0:	e7d2      	b.n	800b248 <_svfiprintf_r+0xa0>
 800b2a2:	9b03      	ldr	r3, [sp, #12]
 800b2a4:	1d19      	adds	r1, r3, #4
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	9103      	str	r1, [sp, #12]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	bfbb      	ittet	lt
 800b2ae:	425b      	neglt	r3, r3
 800b2b0:	f042 0202 	orrlt.w	r2, r2, #2
 800b2b4:	9307      	strge	r3, [sp, #28]
 800b2b6:	9307      	strlt	r3, [sp, #28]
 800b2b8:	bfb8      	it	lt
 800b2ba:	9204      	strlt	r2, [sp, #16]
 800b2bc:	7823      	ldrb	r3, [r4, #0]
 800b2be:	2b2e      	cmp	r3, #46	@ 0x2e
 800b2c0:	d10a      	bne.n	800b2d8 <_svfiprintf_r+0x130>
 800b2c2:	7863      	ldrb	r3, [r4, #1]
 800b2c4:	2b2a      	cmp	r3, #42	@ 0x2a
 800b2c6:	d132      	bne.n	800b32e <_svfiprintf_r+0x186>
 800b2c8:	9b03      	ldr	r3, [sp, #12]
 800b2ca:	1d1a      	adds	r2, r3, #4
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	9203      	str	r2, [sp, #12]
 800b2d0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b2d4:	3402      	adds	r4, #2
 800b2d6:	9305      	str	r3, [sp, #20]
 800b2d8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b39c <_svfiprintf_r+0x1f4>
 800b2dc:	7821      	ldrb	r1, [r4, #0]
 800b2de:	2203      	movs	r2, #3
 800b2e0:	4650      	mov	r0, sl
 800b2e2:	f7f4 ff75 	bl	80001d0 <memchr>
 800b2e6:	b138      	cbz	r0, 800b2f8 <_svfiprintf_r+0x150>
 800b2e8:	9b04      	ldr	r3, [sp, #16]
 800b2ea:	eba0 000a 	sub.w	r0, r0, sl
 800b2ee:	2240      	movs	r2, #64	@ 0x40
 800b2f0:	4082      	lsls	r2, r0
 800b2f2:	4313      	orrs	r3, r2
 800b2f4:	3401      	adds	r4, #1
 800b2f6:	9304      	str	r3, [sp, #16]
 800b2f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2fc:	4824      	ldr	r0, [pc, #144]	@ (800b390 <_svfiprintf_r+0x1e8>)
 800b2fe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b302:	2206      	movs	r2, #6
 800b304:	f7f4 ff64 	bl	80001d0 <memchr>
 800b308:	2800      	cmp	r0, #0
 800b30a:	d036      	beq.n	800b37a <_svfiprintf_r+0x1d2>
 800b30c:	4b21      	ldr	r3, [pc, #132]	@ (800b394 <_svfiprintf_r+0x1ec>)
 800b30e:	bb1b      	cbnz	r3, 800b358 <_svfiprintf_r+0x1b0>
 800b310:	9b03      	ldr	r3, [sp, #12]
 800b312:	3307      	adds	r3, #7
 800b314:	f023 0307 	bic.w	r3, r3, #7
 800b318:	3308      	adds	r3, #8
 800b31a:	9303      	str	r3, [sp, #12]
 800b31c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b31e:	4433      	add	r3, r6
 800b320:	9309      	str	r3, [sp, #36]	@ 0x24
 800b322:	e76a      	b.n	800b1fa <_svfiprintf_r+0x52>
 800b324:	fb0c 3202 	mla	r2, ip, r2, r3
 800b328:	460c      	mov	r4, r1
 800b32a:	2001      	movs	r0, #1
 800b32c:	e7a8      	b.n	800b280 <_svfiprintf_r+0xd8>
 800b32e:	2300      	movs	r3, #0
 800b330:	3401      	adds	r4, #1
 800b332:	9305      	str	r3, [sp, #20]
 800b334:	4619      	mov	r1, r3
 800b336:	f04f 0c0a 	mov.w	ip, #10
 800b33a:	4620      	mov	r0, r4
 800b33c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b340:	3a30      	subs	r2, #48	@ 0x30
 800b342:	2a09      	cmp	r2, #9
 800b344:	d903      	bls.n	800b34e <_svfiprintf_r+0x1a6>
 800b346:	2b00      	cmp	r3, #0
 800b348:	d0c6      	beq.n	800b2d8 <_svfiprintf_r+0x130>
 800b34a:	9105      	str	r1, [sp, #20]
 800b34c:	e7c4      	b.n	800b2d8 <_svfiprintf_r+0x130>
 800b34e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b352:	4604      	mov	r4, r0
 800b354:	2301      	movs	r3, #1
 800b356:	e7f0      	b.n	800b33a <_svfiprintf_r+0x192>
 800b358:	ab03      	add	r3, sp, #12
 800b35a:	9300      	str	r3, [sp, #0]
 800b35c:	462a      	mov	r2, r5
 800b35e:	4b0e      	ldr	r3, [pc, #56]	@ (800b398 <_svfiprintf_r+0x1f0>)
 800b360:	a904      	add	r1, sp, #16
 800b362:	4638      	mov	r0, r7
 800b364:	f7fe fb26 	bl	80099b4 <_printf_float>
 800b368:	1c42      	adds	r2, r0, #1
 800b36a:	4606      	mov	r6, r0
 800b36c:	d1d6      	bne.n	800b31c <_svfiprintf_r+0x174>
 800b36e:	89ab      	ldrh	r3, [r5, #12]
 800b370:	065b      	lsls	r3, r3, #25
 800b372:	f53f af2d 	bmi.w	800b1d0 <_svfiprintf_r+0x28>
 800b376:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b378:	e72c      	b.n	800b1d4 <_svfiprintf_r+0x2c>
 800b37a:	ab03      	add	r3, sp, #12
 800b37c:	9300      	str	r3, [sp, #0]
 800b37e:	462a      	mov	r2, r5
 800b380:	4b05      	ldr	r3, [pc, #20]	@ (800b398 <_svfiprintf_r+0x1f0>)
 800b382:	a904      	add	r1, sp, #16
 800b384:	4638      	mov	r0, r7
 800b386:	f7fe fdad 	bl	8009ee4 <_printf_i>
 800b38a:	e7ed      	b.n	800b368 <_svfiprintf_r+0x1c0>
 800b38c:	08022195 	.word	0x08022195
 800b390:	0802219f 	.word	0x0802219f
 800b394:	080099b5 	.word	0x080099b5
 800b398:	0800b0f1 	.word	0x0800b0f1
 800b39c:	0802219b 	.word	0x0802219b

0800b3a0 <__sfputc_r>:
 800b3a0:	6893      	ldr	r3, [r2, #8]
 800b3a2:	3b01      	subs	r3, #1
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	b410      	push	{r4}
 800b3a8:	6093      	str	r3, [r2, #8]
 800b3aa:	da08      	bge.n	800b3be <__sfputc_r+0x1e>
 800b3ac:	6994      	ldr	r4, [r2, #24]
 800b3ae:	42a3      	cmp	r3, r4
 800b3b0:	db01      	blt.n	800b3b6 <__sfputc_r+0x16>
 800b3b2:	290a      	cmp	r1, #10
 800b3b4:	d103      	bne.n	800b3be <__sfputc_r+0x1e>
 800b3b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3ba:	f000 be88 	b.w	800c0ce <__swbuf_r>
 800b3be:	6813      	ldr	r3, [r2, #0]
 800b3c0:	1c58      	adds	r0, r3, #1
 800b3c2:	6010      	str	r0, [r2, #0]
 800b3c4:	7019      	strb	r1, [r3, #0]
 800b3c6:	4608      	mov	r0, r1
 800b3c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3cc:	4770      	bx	lr

0800b3ce <__sfputs_r>:
 800b3ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3d0:	4606      	mov	r6, r0
 800b3d2:	460f      	mov	r7, r1
 800b3d4:	4614      	mov	r4, r2
 800b3d6:	18d5      	adds	r5, r2, r3
 800b3d8:	42ac      	cmp	r4, r5
 800b3da:	d101      	bne.n	800b3e0 <__sfputs_r+0x12>
 800b3dc:	2000      	movs	r0, #0
 800b3de:	e007      	b.n	800b3f0 <__sfputs_r+0x22>
 800b3e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3e4:	463a      	mov	r2, r7
 800b3e6:	4630      	mov	r0, r6
 800b3e8:	f7ff ffda 	bl	800b3a0 <__sfputc_r>
 800b3ec:	1c43      	adds	r3, r0, #1
 800b3ee:	d1f3      	bne.n	800b3d8 <__sfputs_r+0xa>
 800b3f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b3f4 <_vfiprintf_r>:
 800b3f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3f8:	460d      	mov	r5, r1
 800b3fa:	b09d      	sub	sp, #116	@ 0x74
 800b3fc:	4614      	mov	r4, r2
 800b3fe:	4698      	mov	r8, r3
 800b400:	4606      	mov	r6, r0
 800b402:	b118      	cbz	r0, 800b40c <_vfiprintf_r+0x18>
 800b404:	6a03      	ldr	r3, [r0, #32]
 800b406:	b90b      	cbnz	r3, 800b40c <_vfiprintf_r+0x18>
 800b408:	f7fe ff38 	bl	800a27c <__sinit>
 800b40c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b40e:	07d9      	lsls	r1, r3, #31
 800b410:	d405      	bmi.n	800b41e <_vfiprintf_r+0x2a>
 800b412:	89ab      	ldrh	r3, [r5, #12]
 800b414:	059a      	lsls	r2, r3, #22
 800b416:	d402      	bmi.n	800b41e <_vfiprintf_r+0x2a>
 800b418:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b41a:	f7ff f80c 	bl	800a436 <__retarget_lock_acquire_recursive>
 800b41e:	89ab      	ldrh	r3, [r5, #12]
 800b420:	071b      	lsls	r3, r3, #28
 800b422:	d501      	bpl.n	800b428 <_vfiprintf_r+0x34>
 800b424:	692b      	ldr	r3, [r5, #16]
 800b426:	b99b      	cbnz	r3, 800b450 <_vfiprintf_r+0x5c>
 800b428:	4629      	mov	r1, r5
 800b42a:	4630      	mov	r0, r6
 800b42c:	f000 fe8e 	bl	800c14c <__swsetup_r>
 800b430:	b170      	cbz	r0, 800b450 <_vfiprintf_r+0x5c>
 800b432:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b434:	07dc      	lsls	r4, r3, #31
 800b436:	d504      	bpl.n	800b442 <_vfiprintf_r+0x4e>
 800b438:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b43c:	b01d      	add	sp, #116	@ 0x74
 800b43e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b442:	89ab      	ldrh	r3, [r5, #12]
 800b444:	0598      	lsls	r0, r3, #22
 800b446:	d4f7      	bmi.n	800b438 <_vfiprintf_r+0x44>
 800b448:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b44a:	f7fe fff5 	bl	800a438 <__retarget_lock_release_recursive>
 800b44e:	e7f3      	b.n	800b438 <_vfiprintf_r+0x44>
 800b450:	2300      	movs	r3, #0
 800b452:	9309      	str	r3, [sp, #36]	@ 0x24
 800b454:	2320      	movs	r3, #32
 800b456:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b45a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b45e:	2330      	movs	r3, #48	@ 0x30
 800b460:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b610 <_vfiprintf_r+0x21c>
 800b464:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b468:	f04f 0901 	mov.w	r9, #1
 800b46c:	4623      	mov	r3, r4
 800b46e:	469a      	mov	sl, r3
 800b470:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b474:	b10a      	cbz	r2, 800b47a <_vfiprintf_r+0x86>
 800b476:	2a25      	cmp	r2, #37	@ 0x25
 800b478:	d1f9      	bne.n	800b46e <_vfiprintf_r+0x7a>
 800b47a:	ebba 0b04 	subs.w	fp, sl, r4
 800b47e:	d00b      	beq.n	800b498 <_vfiprintf_r+0xa4>
 800b480:	465b      	mov	r3, fp
 800b482:	4622      	mov	r2, r4
 800b484:	4629      	mov	r1, r5
 800b486:	4630      	mov	r0, r6
 800b488:	f7ff ffa1 	bl	800b3ce <__sfputs_r>
 800b48c:	3001      	adds	r0, #1
 800b48e:	f000 80a7 	beq.w	800b5e0 <_vfiprintf_r+0x1ec>
 800b492:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b494:	445a      	add	r2, fp
 800b496:	9209      	str	r2, [sp, #36]	@ 0x24
 800b498:	f89a 3000 	ldrb.w	r3, [sl]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	f000 809f 	beq.w	800b5e0 <_vfiprintf_r+0x1ec>
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b4a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4ac:	f10a 0a01 	add.w	sl, sl, #1
 800b4b0:	9304      	str	r3, [sp, #16]
 800b4b2:	9307      	str	r3, [sp, #28]
 800b4b4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b4b8:	931a      	str	r3, [sp, #104]	@ 0x68
 800b4ba:	4654      	mov	r4, sl
 800b4bc:	2205      	movs	r2, #5
 800b4be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4c2:	4853      	ldr	r0, [pc, #332]	@ (800b610 <_vfiprintf_r+0x21c>)
 800b4c4:	f7f4 fe84 	bl	80001d0 <memchr>
 800b4c8:	9a04      	ldr	r2, [sp, #16]
 800b4ca:	b9d8      	cbnz	r0, 800b504 <_vfiprintf_r+0x110>
 800b4cc:	06d1      	lsls	r1, r2, #27
 800b4ce:	bf44      	itt	mi
 800b4d0:	2320      	movmi	r3, #32
 800b4d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4d6:	0713      	lsls	r3, r2, #28
 800b4d8:	bf44      	itt	mi
 800b4da:	232b      	movmi	r3, #43	@ 0x2b
 800b4dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4e0:	f89a 3000 	ldrb.w	r3, [sl]
 800b4e4:	2b2a      	cmp	r3, #42	@ 0x2a
 800b4e6:	d015      	beq.n	800b514 <_vfiprintf_r+0x120>
 800b4e8:	9a07      	ldr	r2, [sp, #28]
 800b4ea:	4654      	mov	r4, sl
 800b4ec:	2000      	movs	r0, #0
 800b4ee:	f04f 0c0a 	mov.w	ip, #10
 800b4f2:	4621      	mov	r1, r4
 800b4f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4f8:	3b30      	subs	r3, #48	@ 0x30
 800b4fa:	2b09      	cmp	r3, #9
 800b4fc:	d94b      	bls.n	800b596 <_vfiprintf_r+0x1a2>
 800b4fe:	b1b0      	cbz	r0, 800b52e <_vfiprintf_r+0x13a>
 800b500:	9207      	str	r2, [sp, #28]
 800b502:	e014      	b.n	800b52e <_vfiprintf_r+0x13a>
 800b504:	eba0 0308 	sub.w	r3, r0, r8
 800b508:	fa09 f303 	lsl.w	r3, r9, r3
 800b50c:	4313      	orrs	r3, r2
 800b50e:	9304      	str	r3, [sp, #16]
 800b510:	46a2      	mov	sl, r4
 800b512:	e7d2      	b.n	800b4ba <_vfiprintf_r+0xc6>
 800b514:	9b03      	ldr	r3, [sp, #12]
 800b516:	1d19      	adds	r1, r3, #4
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	9103      	str	r1, [sp, #12]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	bfbb      	ittet	lt
 800b520:	425b      	neglt	r3, r3
 800b522:	f042 0202 	orrlt.w	r2, r2, #2
 800b526:	9307      	strge	r3, [sp, #28]
 800b528:	9307      	strlt	r3, [sp, #28]
 800b52a:	bfb8      	it	lt
 800b52c:	9204      	strlt	r2, [sp, #16]
 800b52e:	7823      	ldrb	r3, [r4, #0]
 800b530:	2b2e      	cmp	r3, #46	@ 0x2e
 800b532:	d10a      	bne.n	800b54a <_vfiprintf_r+0x156>
 800b534:	7863      	ldrb	r3, [r4, #1]
 800b536:	2b2a      	cmp	r3, #42	@ 0x2a
 800b538:	d132      	bne.n	800b5a0 <_vfiprintf_r+0x1ac>
 800b53a:	9b03      	ldr	r3, [sp, #12]
 800b53c:	1d1a      	adds	r2, r3, #4
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	9203      	str	r2, [sp, #12]
 800b542:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b546:	3402      	adds	r4, #2
 800b548:	9305      	str	r3, [sp, #20]
 800b54a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b620 <_vfiprintf_r+0x22c>
 800b54e:	7821      	ldrb	r1, [r4, #0]
 800b550:	2203      	movs	r2, #3
 800b552:	4650      	mov	r0, sl
 800b554:	f7f4 fe3c 	bl	80001d0 <memchr>
 800b558:	b138      	cbz	r0, 800b56a <_vfiprintf_r+0x176>
 800b55a:	9b04      	ldr	r3, [sp, #16]
 800b55c:	eba0 000a 	sub.w	r0, r0, sl
 800b560:	2240      	movs	r2, #64	@ 0x40
 800b562:	4082      	lsls	r2, r0
 800b564:	4313      	orrs	r3, r2
 800b566:	3401      	adds	r4, #1
 800b568:	9304      	str	r3, [sp, #16]
 800b56a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b56e:	4829      	ldr	r0, [pc, #164]	@ (800b614 <_vfiprintf_r+0x220>)
 800b570:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b574:	2206      	movs	r2, #6
 800b576:	f7f4 fe2b 	bl	80001d0 <memchr>
 800b57a:	2800      	cmp	r0, #0
 800b57c:	d03f      	beq.n	800b5fe <_vfiprintf_r+0x20a>
 800b57e:	4b26      	ldr	r3, [pc, #152]	@ (800b618 <_vfiprintf_r+0x224>)
 800b580:	bb1b      	cbnz	r3, 800b5ca <_vfiprintf_r+0x1d6>
 800b582:	9b03      	ldr	r3, [sp, #12]
 800b584:	3307      	adds	r3, #7
 800b586:	f023 0307 	bic.w	r3, r3, #7
 800b58a:	3308      	adds	r3, #8
 800b58c:	9303      	str	r3, [sp, #12]
 800b58e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b590:	443b      	add	r3, r7
 800b592:	9309      	str	r3, [sp, #36]	@ 0x24
 800b594:	e76a      	b.n	800b46c <_vfiprintf_r+0x78>
 800b596:	fb0c 3202 	mla	r2, ip, r2, r3
 800b59a:	460c      	mov	r4, r1
 800b59c:	2001      	movs	r0, #1
 800b59e:	e7a8      	b.n	800b4f2 <_vfiprintf_r+0xfe>
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	3401      	adds	r4, #1
 800b5a4:	9305      	str	r3, [sp, #20]
 800b5a6:	4619      	mov	r1, r3
 800b5a8:	f04f 0c0a 	mov.w	ip, #10
 800b5ac:	4620      	mov	r0, r4
 800b5ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5b2:	3a30      	subs	r2, #48	@ 0x30
 800b5b4:	2a09      	cmp	r2, #9
 800b5b6:	d903      	bls.n	800b5c0 <_vfiprintf_r+0x1cc>
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d0c6      	beq.n	800b54a <_vfiprintf_r+0x156>
 800b5bc:	9105      	str	r1, [sp, #20]
 800b5be:	e7c4      	b.n	800b54a <_vfiprintf_r+0x156>
 800b5c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5c4:	4604      	mov	r4, r0
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	e7f0      	b.n	800b5ac <_vfiprintf_r+0x1b8>
 800b5ca:	ab03      	add	r3, sp, #12
 800b5cc:	9300      	str	r3, [sp, #0]
 800b5ce:	462a      	mov	r2, r5
 800b5d0:	4b12      	ldr	r3, [pc, #72]	@ (800b61c <_vfiprintf_r+0x228>)
 800b5d2:	a904      	add	r1, sp, #16
 800b5d4:	4630      	mov	r0, r6
 800b5d6:	f7fe f9ed 	bl	80099b4 <_printf_float>
 800b5da:	4607      	mov	r7, r0
 800b5dc:	1c78      	adds	r0, r7, #1
 800b5de:	d1d6      	bne.n	800b58e <_vfiprintf_r+0x19a>
 800b5e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b5e2:	07d9      	lsls	r1, r3, #31
 800b5e4:	d405      	bmi.n	800b5f2 <_vfiprintf_r+0x1fe>
 800b5e6:	89ab      	ldrh	r3, [r5, #12]
 800b5e8:	059a      	lsls	r2, r3, #22
 800b5ea:	d402      	bmi.n	800b5f2 <_vfiprintf_r+0x1fe>
 800b5ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b5ee:	f7fe ff23 	bl	800a438 <__retarget_lock_release_recursive>
 800b5f2:	89ab      	ldrh	r3, [r5, #12]
 800b5f4:	065b      	lsls	r3, r3, #25
 800b5f6:	f53f af1f 	bmi.w	800b438 <_vfiprintf_r+0x44>
 800b5fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b5fc:	e71e      	b.n	800b43c <_vfiprintf_r+0x48>
 800b5fe:	ab03      	add	r3, sp, #12
 800b600:	9300      	str	r3, [sp, #0]
 800b602:	462a      	mov	r2, r5
 800b604:	4b05      	ldr	r3, [pc, #20]	@ (800b61c <_vfiprintf_r+0x228>)
 800b606:	a904      	add	r1, sp, #16
 800b608:	4630      	mov	r0, r6
 800b60a:	f7fe fc6b 	bl	8009ee4 <_printf_i>
 800b60e:	e7e4      	b.n	800b5da <_vfiprintf_r+0x1e6>
 800b610:	08022195 	.word	0x08022195
 800b614:	0802219f 	.word	0x0802219f
 800b618:	080099b5 	.word	0x080099b5
 800b61c:	0800b3cf 	.word	0x0800b3cf
 800b620:	0802219b 	.word	0x0802219b

0800b624 <malloc>:
 800b624:	4b02      	ldr	r3, [pc, #8]	@ (800b630 <malloc+0xc>)
 800b626:	4601      	mov	r1, r0
 800b628:	6818      	ldr	r0, [r3, #0]
 800b62a:	f000 b825 	b.w	800b678 <_malloc_r>
 800b62e:	bf00      	nop
 800b630:	2000001c 	.word	0x2000001c

0800b634 <sbrk_aligned>:
 800b634:	b570      	push	{r4, r5, r6, lr}
 800b636:	4e0f      	ldr	r6, [pc, #60]	@ (800b674 <sbrk_aligned+0x40>)
 800b638:	460c      	mov	r4, r1
 800b63a:	6831      	ldr	r1, [r6, #0]
 800b63c:	4605      	mov	r5, r0
 800b63e:	b911      	cbnz	r1, 800b646 <sbrk_aligned+0x12>
 800b640:	f000 feac 	bl	800c39c <_sbrk_r>
 800b644:	6030      	str	r0, [r6, #0]
 800b646:	4621      	mov	r1, r4
 800b648:	4628      	mov	r0, r5
 800b64a:	f000 fea7 	bl	800c39c <_sbrk_r>
 800b64e:	1c43      	adds	r3, r0, #1
 800b650:	d103      	bne.n	800b65a <sbrk_aligned+0x26>
 800b652:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800b656:	4620      	mov	r0, r4
 800b658:	bd70      	pop	{r4, r5, r6, pc}
 800b65a:	1cc4      	adds	r4, r0, #3
 800b65c:	f024 0403 	bic.w	r4, r4, #3
 800b660:	42a0      	cmp	r0, r4
 800b662:	d0f8      	beq.n	800b656 <sbrk_aligned+0x22>
 800b664:	1a21      	subs	r1, r4, r0
 800b666:	4628      	mov	r0, r5
 800b668:	f000 fe98 	bl	800c39c <_sbrk_r>
 800b66c:	3001      	adds	r0, #1
 800b66e:	d1f2      	bne.n	800b656 <sbrk_aligned+0x22>
 800b670:	e7ef      	b.n	800b652 <sbrk_aligned+0x1e>
 800b672:	bf00      	nop
 800b674:	200015f0 	.word	0x200015f0

0800b678 <_malloc_r>:
 800b678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b67c:	1ccd      	adds	r5, r1, #3
 800b67e:	f025 0503 	bic.w	r5, r5, #3
 800b682:	3508      	adds	r5, #8
 800b684:	2d0c      	cmp	r5, #12
 800b686:	bf38      	it	cc
 800b688:	250c      	movcc	r5, #12
 800b68a:	2d00      	cmp	r5, #0
 800b68c:	4606      	mov	r6, r0
 800b68e:	db01      	blt.n	800b694 <_malloc_r+0x1c>
 800b690:	42a9      	cmp	r1, r5
 800b692:	d904      	bls.n	800b69e <_malloc_r+0x26>
 800b694:	230c      	movs	r3, #12
 800b696:	6033      	str	r3, [r6, #0]
 800b698:	2000      	movs	r0, #0
 800b69a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b69e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b774 <_malloc_r+0xfc>
 800b6a2:	f000 f915 	bl	800b8d0 <__malloc_lock>
 800b6a6:	f8d8 3000 	ldr.w	r3, [r8]
 800b6aa:	461c      	mov	r4, r3
 800b6ac:	bb44      	cbnz	r4, 800b700 <_malloc_r+0x88>
 800b6ae:	4629      	mov	r1, r5
 800b6b0:	4630      	mov	r0, r6
 800b6b2:	f7ff ffbf 	bl	800b634 <sbrk_aligned>
 800b6b6:	1c43      	adds	r3, r0, #1
 800b6b8:	4604      	mov	r4, r0
 800b6ba:	d158      	bne.n	800b76e <_malloc_r+0xf6>
 800b6bc:	f8d8 4000 	ldr.w	r4, [r8]
 800b6c0:	4627      	mov	r7, r4
 800b6c2:	2f00      	cmp	r7, #0
 800b6c4:	d143      	bne.n	800b74e <_malloc_r+0xd6>
 800b6c6:	2c00      	cmp	r4, #0
 800b6c8:	d04b      	beq.n	800b762 <_malloc_r+0xea>
 800b6ca:	6823      	ldr	r3, [r4, #0]
 800b6cc:	4639      	mov	r1, r7
 800b6ce:	4630      	mov	r0, r6
 800b6d0:	eb04 0903 	add.w	r9, r4, r3
 800b6d4:	f000 fe62 	bl	800c39c <_sbrk_r>
 800b6d8:	4581      	cmp	r9, r0
 800b6da:	d142      	bne.n	800b762 <_malloc_r+0xea>
 800b6dc:	6821      	ldr	r1, [r4, #0]
 800b6de:	1a6d      	subs	r5, r5, r1
 800b6e0:	4629      	mov	r1, r5
 800b6e2:	4630      	mov	r0, r6
 800b6e4:	f7ff ffa6 	bl	800b634 <sbrk_aligned>
 800b6e8:	3001      	adds	r0, #1
 800b6ea:	d03a      	beq.n	800b762 <_malloc_r+0xea>
 800b6ec:	6823      	ldr	r3, [r4, #0]
 800b6ee:	442b      	add	r3, r5
 800b6f0:	6023      	str	r3, [r4, #0]
 800b6f2:	f8d8 3000 	ldr.w	r3, [r8]
 800b6f6:	685a      	ldr	r2, [r3, #4]
 800b6f8:	bb62      	cbnz	r2, 800b754 <_malloc_r+0xdc>
 800b6fa:	f8c8 7000 	str.w	r7, [r8]
 800b6fe:	e00f      	b.n	800b720 <_malloc_r+0xa8>
 800b700:	6822      	ldr	r2, [r4, #0]
 800b702:	1b52      	subs	r2, r2, r5
 800b704:	d420      	bmi.n	800b748 <_malloc_r+0xd0>
 800b706:	2a0b      	cmp	r2, #11
 800b708:	d917      	bls.n	800b73a <_malloc_r+0xc2>
 800b70a:	1961      	adds	r1, r4, r5
 800b70c:	42a3      	cmp	r3, r4
 800b70e:	6025      	str	r5, [r4, #0]
 800b710:	bf18      	it	ne
 800b712:	6059      	strne	r1, [r3, #4]
 800b714:	6863      	ldr	r3, [r4, #4]
 800b716:	bf08      	it	eq
 800b718:	f8c8 1000 	streq.w	r1, [r8]
 800b71c:	5162      	str	r2, [r4, r5]
 800b71e:	604b      	str	r3, [r1, #4]
 800b720:	4630      	mov	r0, r6
 800b722:	f000 f8db 	bl	800b8dc <__malloc_unlock>
 800b726:	f104 000b 	add.w	r0, r4, #11
 800b72a:	1d23      	adds	r3, r4, #4
 800b72c:	f020 0007 	bic.w	r0, r0, #7
 800b730:	1ac2      	subs	r2, r0, r3
 800b732:	bf1c      	itt	ne
 800b734:	1a1b      	subne	r3, r3, r0
 800b736:	50a3      	strne	r3, [r4, r2]
 800b738:	e7af      	b.n	800b69a <_malloc_r+0x22>
 800b73a:	6862      	ldr	r2, [r4, #4]
 800b73c:	42a3      	cmp	r3, r4
 800b73e:	bf0c      	ite	eq
 800b740:	f8c8 2000 	streq.w	r2, [r8]
 800b744:	605a      	strne	r2, [r3, #4]
 800b746:	e7eb      	b.n	800b720 <_malloc_r+0xa8>
 800b748:	4623      	mov	r3, r4
 800b74a:	6864      	ldr	r4, [r4, #4]
 800b74c:	e7ae      	b.n	800b6ac <_malloc_r+0x34>
 800b74e:	463c      	mov	r4, r7
 800b750:	687f      	ldr	r7, [r7, #4]
 800b752:	e7b6      	b.n	800b6c2 <_malloc_r+0x4a>
 800b754:	461a      	mov	r2, r3
 800b756:	685b      	ldr	r3, [r3, #4]
 800b758:	42a3      	cmp	r3, r4
 800b75a:	d1fb      	bne.n	800b754 <_malloc_r+0xdc>
 800b75c:	2300      	movs	r3, #0
 800b75e:	6053      	str	r3, [r2, #4]
 800b760:	e7de      	b.n	800b720 <_malloc_r+0xa8>
 800b762:	230c      	movs	r3, #12
 800b764:	6033      	str	r3, [r6, #0]
 800b766:	4630      	mov	r0, r6
 800b768:	f000 f8b8 	bl	800b8dc <__malloc_unlock>
 800b76c:	e794      	b.n	800b698 <_malloc_r+0x20>
 800b76e:	6005      	str	r5, [r0, #0]
 800b770:	e7d6      	b.n	800b720 <_malloc_r+0xa8>
 800b772:	bf00      	nop
 800b774:	200015f4 	.word	0x200015f4

0800b778 <__sflush_r>:
 800b778:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b77c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b780:	0716      	lsls	r6, r2, #28
 800b782:	4605      	mov	r5, r0
 800b784:	460c      	mov	r4, r1
 800b786:	d454      	bmi.n	800b832 <__sflush_r+0xba>
 800b788:	684b      	ldr	r3, [r1, #4]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	dc02      	bgt.n	800b794 <__sflush_r+0x1c>
 800b78e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b790:	2b00      	cmp	r3, #0
 800b792:	dd48      	ble.n	800b826 <__sflush_r+0xae>
 800b794:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b796:	2e00      	cmp	r6, #0
 800b798:	d045      	beq.n	800b826 <__sflush_r+0xae>
 800b79a:	2300      	movs	r3, #0
 800b79c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b7a0:	682f      	ldr	r7, [r5, #0]
 800b7a2:	6a21      	ldr	r1, [r4, #32]
 800b7a4:	602b      	str	r3, [r5, #0]
 800b7a6:	d030      	beq.n	800b80a <__sflush_r+0x92>
 800b7a8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b7aa:	89a3      	ldrh	r3, [r4, #12]
 800b7ac:	0759      	lsls	r1, r3, #29
 800b7ae:	d505      	bpl.n	800b7bc <__sflush_r+0x44>
 800b7b0:	6863      	ldr	r3, [r4, #4]
 800b7b2:	1ad2      	subs	r2, r2, r3
 800b7b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b7b6:	b10b      	cbz	r3, 800b7bc <__sflush_r+0x44>
 800b7b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b7ba:	1ad2      	subs	r2, r2, r3
 800b7bc:	2300      	movs	r3, #0
 800b7be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b7c0:	6a21      	ldr	r1, [r4, #32]
 800b7c2:	4628      	mov	r0, r5
 800b7c4:	47b0      	blx	r6
 800b7c6:	1c43      	adds	r3, r0, #1
 800b7c8:	89a3      	ldrh	r3, [r4, #12]
 800b7ca:	d106      	bne.n	800b7da <__sflush_r+0x62>
 800b7cc:	6829      	ldr	r1, [r5, #0]
 800b7ce:	291d      	cmp	r1, #29
 800b7d0:	d82b      	bhi.n	800b82a <__sflush_r+0xb2>
 800b7d2:	4a2a      	ldr	r2, [pc, #168]	@ (800b87c <__sflush_r+0x104>)
 800b7d4:	410a      	asrs	r2, r1
 800b7d6:	07d6      	lsls	r6, r2, #31
 800b7d8:	d427      	bmi.n	800b82a <__sflush_r+0xb2>
 800b7da:	2200      	movs	r2, #0
 800b7dc:	6062      	str	r2, [r4, #4]
 800b7de:	04d9      	lsls	r1, r3, #19
 800b7e0:	6922      	ldr	r2, [r4, #16]
 800b7e2:	6022      	str	r2, [r4, #0]
 800b7e4:	d504      	bpl.n	800b7f0 <__sflush_r+0x78>
 800b7e6:	1c42      	adds	r2, r0, #1
 800b7e8:	d101      	bne.n	800b7ee <__sflush_r+0x76>
 800b7ea:	682b      	ldr	r3, [r5, #0]
 800b7ec:	b903      	cbnz	r3, 800b7f0 <__sflush_r+0x78>
 800b7ee:	6560      	str	r0, [r4, #84]	@ 0x54
 800b7f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b7f2:	602f      	str	r7, [r5, #0]
 800b7f4:	b1b9      	cbz	r1, 800b826 <__sflush_r+0xae>
 800b7f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b7fa:	4299      	cmp	r1, r3
 800b7fc:	d002      	beq.n	800b804 <__sflush_r+0x8c>
 800b7fe:	4628      	mov	r0, r5
 800b800:	f000 fe20 	bl	800c444 <_free_r>
 800b804:	2300      	movs	r3, #0
 800b806:	6363      	str	r3, [r4, #52]	@ 0x34
 800b808:	e00d      	b.n	800b826 <__sflush_r+0xae>
 800b80a:	2301      	movs	r3, #1
 800b80c:	4628      	mov	r0, r5
 800b80e:	47b0      	blx	r6
 800b810:	4602      	mov	r2, r0
 800b812:	1c50      	adds	r0, r2, #1
 800b814:	d1c9      	bne.n	800b7aa <__sflush_r+0x32>
 800b816:	682b      	ldr	r3, [r5, #0]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d0c6      	beq.n	800b7aa <__sflush_r+0x32>
 800b81c:	2b1d      	cmp	r3, #29
 800b81e:	d001      	beq.n	800b824 <__sflush_r+0xac>
 800b820:	2b16      	cmp	r3, #22
 800b822:	d11e      	bne.n	800b862 <__sflush_r+0xea>
 800b824:	602f      	str	r7, [r5, #0]
 800b826:	2000      	movs	r0, #0
 800b828:	e022      	b.n	800b870 <__sflush_r+0xf8>
 800b82a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b82e:	b21b      	sxth	r3, r3
 800b830:	e01b      	b.n	800b86a <__sflush_r+0xf2>
 800b832:	690f      	ldr	r7, [r1, #16]
 800b834:	2f00      	cmp	r7, #0
 800b836:	d0f6      	beq.n	800b826 <__sflush_r+0xae>
 800b838:	0793      	lsls	r3, r2, #30
 800b83a:	680e      	ldr	r6, [r1, #0]
 800b83c:	bf08      	it	eq
 800b83e:	694b      	ldreq	r3, [r1, #20]
 800b840:	600f      	str	r7, [r1, #0]
 800b842:	bf18      	it	ne
 800b844:	2300      	movne	r3, #0
 800b846:	eba6 0807 	sub.w	r8, r6, r7
 800b84a:	608b      	str	r3, [r1, #8]
 800b84c:	f1b8 0f00 	cmp.w	r8, #0
 800b850:	dde9      	ble.n	800b826 <__sflush_r+0xae>
 800b852:	6a21      	ldr	r1, [r4, #32]
 800b854:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b856:	4643      	mov	r3, r8
 800b858:	463a      	mov	r2, r7
 800b85a:	4628      	mov	r0, r5
 800b85c:	47b0      	blx	r6
 800b85e:	2800      	cmp	r0, #0
 800b860:	dc08      	bgt.n	800b874 <__sflush_r+0xfc>
 800b862:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b866:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b86a:	81a3      	strh	r3, [r4, #12]
 800b86c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b874:	4407      	add	r7, r0
 800b876:	eba8 0800 	sub.w	r8, r8, r0
 800b87a:	e7e7      	b.n	800b84c <__sflush_r+0xd4>
 800b87c:	dfbffffe 	.word	0xdfbffffe

0800b880 <_fflush_r>:
 800b880:	b538      	push	{r3, r4, r5, lr}
 800b882:	690b      	ldr	r3, [r1, #16]
 800b884:	4605      	mov	r5, r0
 800b886:	460c      	mov	r4, r1
 800b888:	b913      	cbnz	r3, 800b890 <_fflush_r+0x10>
 800b88a:	2500      	movs	r5, #0
 800b88c:	4628      	mov	r0, r5
 800b88e:	bd38      	pop	{r3, r4, r5, pc}
 800b890:	b118      	cbz	r0, 800b89a <_fflush_r+0x1a>
 800b892:	6a03      	ldr	r3, [r0, #32]
 800b894:	b90b      	cbnz	r3, 800b89a <_fflush_r+0x1a>
 800b896:	f7fe fcf1 	bl	800a27c <__sinit>
 800b89a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d0f3      	beq.n	800b88a <_fflush_r+0xa>
 800b8a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b8a4:	07d0      	lsls	r0, r2, #31
 800b8a6:	d404      	bmi.n	800b8b2 <_fflush_r+0x32>
 800b8a8:	0599      	lsls	r1, r3, #22
 800b8aa:	d402      	bmi.n	800b8b2 <_fflush_r+0x32>
 800b8ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b8ae:	f7fe fdc2 	bl	800a436 <__retarget_lock_acquire_recursive>
 800b8b2:	4628      	mov	r0, r5
 800b8b4:	4621      	mov	r1, r4
 800b8b6:	f7ff ff5f 	bl	800b778 <__sflush_r>
 800b8ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b8bc:	07da      	lsls	r2, r3, #31
 800b8be:	4605      	mov	r5, r0
 800b8c0:	d4e4      	bmi.n	800b88c <_fflush_r+0xc>
 800b8c2:	89a3      	ldrh	r3, [r4, #12]
 800b8c4:	059b      	lsls	r3, r3, #22
 800b8c6:	d4e1      	bmi.n	800b88c <_fflush_r+0xc>
 800b8c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b8ca:	f7fe fdb5 	bl	800a438 <__retarget_lock_release_recursive>
 800b8ce:	e7dd      	b.n	800b88c <_fflush_r+0xc>

0800b8d0 <__malloc_lock>:
 800b8d0:	4801      	ldr	r0, [pc, #4]	@ (800b8d8 <__malloc_lock+0x8>)
 800b8d2:	f7fe bdb0 	b.w	800a436 <__retarget_lock_acquire_recursive>
 800b8d6:	bf00      	nop
 800b8d8:	200015ec 	.word	0x200015ec

0800b8dc <__malloc_unlock>:
 800b8dc:	4801      	ldr	r0, [pc, #4]	@ (800b8e4 <__malloc_unlock+0x8>)
 800b8de:	f7fe bdab 	b.w	800a438 <__retarget_lock_release_recursive>
 800b8e2:	bf00      	nop
 800b8e4:	200015ec 	.word	0x200015ec

0800b8e8 <_Balloc>:
 800b8e8:	b570      	push	{r4, r5, r6, lr}
 800b8ea:	69c6      	ldr	r6, [r0, #28]
 800b8ec:	4604      	mov	r4, r0
 800b8ee:	460d      	mov	r5, r1
 800b8f0:	b976      	cbnz	r6, 800b910 <_Balloc+0x28>
 800b8f2:	2010      	movs	r0, #16
 800b8f4:	f7ff fe96 	bl	800b624 <malloc>
 800b8f8:	4602      	mov	r2, r0
 800b8fa:	61e0      	str	r0, [r4, #28]
 800b8fc:	b920      	cbnz	r0, 800b908 <_Balloc+0x20>
 800b8fe:	4b18      	ldr	r3, [pc, #96]	@ (800b960 <_Balloc+0x78>)
 800b900:	4818      	ldr	r0, [pc, #96]	@ (800b964 <_Balloc+0x7c>)
 800b902:	216b      	movs	r1, #107	@ 0x6b
 800b904:	f000 fd6c 	bl	800c3e0 <__assert_func>
 800b908:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b90c:	6006      	str	r6, [r0, #0]
 800b90e:	60c6      	str	r6, [r0, #12]
 800b910:	69e6      	ldr	r6, [r4, #28]
 800b912:	68f3      	ldr	r3, [r6, #12]
 800b914:	b183      	cbz	r3, 800b938 <_Balloc+0x50>
 800b916:	69e3      	ldr	r3, [r4, #28]
 800b918:	68db      	ldr	r3, [r3, #12]
 800b91a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b91e:	b9b8      	cbnz	r0, 800b950 <_Balloc+0x68>
 800b920:	2101      	movs	r1, #1
 800b922:	fa01 f605 	lsl.w	r6, r1, r5
 800b926:	1d72      	adds	r2, r6, #5
 800b928:	0092      	lsls	r2, r2, #2
 800b92a:	4620      	mov	r0, r4
 800b92c:	f000 fd76 	bl	800c41c <_calloc_r>
 800b930:	b160      	cbz	r0, 800b94c <_Balloc+0x64>
 800b932:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b936:	e00e      	b.n	800b956 <_Balloc+0x6e>
 800b938:	2221      	movs	r2, #33	@ 0x21
 800b93a:	2104      	movs	r1, #4
 800b93c:	4620      	mov	r0, r4
 800b93e:	f000 fd6d 	bl	800c41c <_calloc_r>
 800b942:	69e3      	ldr	r3, [r4, #28]
 800b944:	60f0      	str	r0, [r6, #12]
 800b946:	68db      	ldr	r3, [r3, #12]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d1e4      	bne.n	800b916 <_Balloc+0x2e>
 800b94c:	2000      	movs	r0, #0
 800b94e:	bd70      	pop	{r4, r5, r6, pc}
 800b950:	6802      	ldr	r2, [r0, #0]
 800b952:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b956:	2300      	movs	r3, #0
 800b958:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b95c:	e7f7      	b.n	800b94e <_Balloc+0x66>
 800b95e:	bf00      	nop
 800b960:	08022115 	.word	0x08022115
 800b964:	080221a6 	.word	0x080221a6

0800b968 <_Bfree>:
 800b968:	b570      	push	{r4, r5, r6, lr}
 800b96a:	69c6      	ldr	r6, [r0, #28]
 800b96c:	4605      	mov	r5, r0
 800b96e:	460c      	mov	r4, r1
 800b970:	b976      	cbnz	r6, 800b990 <_Bfree+0x28>
 800b972:	2010      	movs	r0, #16
 800b974:	f7ff fe56 	bl	800b624 <malloc>
 800b978:	4602      	mov	r2, r0
 800b97a:	61e8      	str	r0, [r5, #28]
 800b97c:	b920      	cbnz	r0, 800b988 <_Bfree+0x20>
 800b97e:	4b09      	ldr	r3, [pc, #36]	@ (800b9a4 <_Bfree+0x3c>)
 800b980:	4809      	ldr	r0, [pc, #36]	@ (800b9a8 <_Bfree+0x40>)
 800b982:	218f      	movs	r1, #143	@ 0x8f
 800b984:	f000 fd2c 	bl	800c3e0 <__assert_func>
 800b988:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b98c:	6006      	str	r6, [r0, #0]
 800b98e:	60c6      	str	r6, [r0, #12]
 800b990:	b13c      	cbz	r4, 800b9a2 <_Bfree+0x3a>
 800b992:	69eb      	ldr	r3, [r5, #28]
 800b994:	6862      	ldr	r2, [r4, #4]
 800b996:	68db      	ldr	r3, [r3, #12]
 800b998:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b99c:	6021      	str	r1, [r4, #0]
 800b99e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b9a2:	bd70      	pop	{r4, r5, r6, pc}
 800b9a4:	08022115 	.word	0x08022115
 800b9a8:	080221a6 	.word	0x080221a6

0800b9ac <__multadd>:
 800b9ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9b0:	690d      	ldr	r5, [r1, #16]
 800b9b2:	4607      	mov	r7, r0
 800b9b4:	460c      	mov	r4, r1
 800b9b6:	461e      	mov	r6, r3
 800b9b8:	f101 0c14 	add.w	ip, r1, #20
 800b9bc:	2000      	movs	r0, #0
 800b9be:	f8dc 3000 	ldr.w	r3, [ip]
 800b9c2:	b299      	uxth	r1, r3
 800b9c4:	fb02 6101 	mla	r1, r2, r1, r6
 800b9c8:	0c1e      	lsrs	r6, r3, #16
 800b9ca:	0c0b      	lsrs	r3, r1, #16
 800b9cc:	fb02 3306 	mla	r3, r2, r6, r3
 800b9d0:	b289      	uxth	r1, r1
 800b9d2:	3001      	adds	r0, #1
 800b9d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b9d8:	4285      	cmp	r5, r0
 800b9da:	f84c 1b04 	str.w	r1, [ip], #4
 800b9de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b9e2:	dcec      	bgt.n	800b9be <__multadd+0x12>
 800b9e4:	b30e      	cbz	r6, 800ba2a <__multadd+0x7e>
 800b9e6:	68a3      	ldr	r3, [r4, #8]
 800b9e8:	42ab      	cmp	r3, r5
 800b9ea:	dc19      	bgt.n	800ba20 <__multadd+0x74>
 800b9ec:	6861      	ldr	r1, [r4, #4]
 800b9ee:	4638      	mov	r0, r7
 800b9f0:	3101      	adds	r1, #1
 800b9f2:	f7ff ff79 	bl	800b8e8 <_Balloc>
 800b9f6:	4680      	mov	r8, r0
 800b9f8:	b928      	cbnz	r0, 800ba06 <__multadd+0x5a>
 800b9fa:	4602      	mov	r2, r0
 800b9fc:	4b0c      	ldr	r3, [pc, #48]	@ (800ba30 <__multadd+0x84>)
 800b9fe:	480d      	ldr	r0, [pc, #52]	@ (800ba34 <__multadd+0x88>)
 800ba00:	21ba      	movs	r1, #186	@ 0xba
 800ba02:	f000 fced 	bl	800c3e0 <__assert_func>
 800ba06:	6922      	ldr	r2, [r4, #16]
 800ba08:	3202      	adds	r2, #2
 800ba0a:	f104 010c 	add.w	r1, r4, #12
 800ba0e:	0092      	lsls	r2, r2, #2
 800ba10:	300c      	adds	r0, #12
 800ba12:	f7fe fd12 	bl	800a43a <memcpy>
 800ba16:	4621      	mov	r1, r4
 800ba18:	4638      	mov	r0, r7
 800ba1a:	f7ff ffa5 	bl	800b968 <_Bfree>
 800ba1e:	4644      	mov	r4, r8
 800ba20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ba24:	3501      	adds	r5, #1
 800ba26:	615e      	str	r6, [r3, #20]
 800ba28:	6125      	str	r5, [r4, #16]
 800ba2a:	4620      	mov	r0, r4
 800ba2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba30:	08022184 	.word	0x08022184
 800ba34:	080221a6 	.word	0x080221a6

0800ba38 <__hi0bits>:
 800ba38:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	bf36      	itet	cc
 800ba40:	0403      	lslcc	r3, r0, #16
 800ba42:	2000      	movcs	r0, #0
 800ba44:	2010      	movcc	r0, #16
 800ba46:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ba4a:	bf3c      	itt	cc
 800ba4c:	021b      	lslcc	r3, r3, #8
 800ba4e:	3008      	addcc	r0, #8
 800ba50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ba54:	bf3c      	itt	cc
 800ba56:	011b      	lslcc	r3, r3, #4
 800ba58:	3004      	addcc	r0, #4
 800ba5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba5e:	bf3c      	itt	cc
 800ba60:	009b      	lslcc	r3, r3, #2
 800ba62:	3002      	addcc	r0, #2
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	db05      	blt.n	800ba74 <__hi0bits+0x3c>
 800ba68:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ba6c:	f100 0001 	add.w	r0, r0, #1
 800ba70:	bf08      	it	eq
 800ba72:	2020      	moveq	r0, #32
 800ba74:	4770      	bx	lr

0800ba76 <__lo0bits>:
 800ba76:	6803      	ldr	r3, [r0, #0]
 800ba78:	4602      	mov	r2, r0
 800ba7a:	f013 0007 	ands.w	r0, r3, #7
 800ba7e:	d00b      	beq.n	800ba98 <__lo0bits+0x22>
 800ba80:	07d9      	lsls	r1, r3, #31
 800ba82:	d421      	bmi.n	800bac8 <__lo0bits+0x52>
 800ba84:	0798      	lsls	r0, r3, #30
 800ba86:	bf49      	itett	mi
 800ba88:	085b      	lsrmi	r3, r3, #1
 800ba8a:	089b      	lsrpl	r3, r3, #2
 800ba8c:	2001      	movmi	r0, #1
 800ba8e:	6013      	strmi	r3, [r2, #0]
 800ba90:	bf5c      	itt	pl
 800ba92:	6013      	strpl	r3, [r2, #0]
 800ba94:	2002      	movpl	r0, #2
 800ba96:	4770      	bx	lr
 800ba98:	b299      	uxth	r1, r3
 800ba9a:	b909      	cbnz	r1, 800baa0 <__lo0bits+0x2a>
 800ba9c:	0c1b      	lsrs	r3, r3, #16
 800ba9e:	2010      	movs	r0, #16
 800baa0:	b2d9      	uxtb	r1, r3
 800baa2:	b909      	cbnz	r1, 800baa8 <__lo0bits+0x32>
 800baa4:	3008      	adds	r0, #8
 800baa6:	0a1b      	lsrs	r3, r3, #8
 800baa8:	0719      	lsls	r1, r3, #28
 800baaa:	bf04      	itt	eq
 800baac:	091b      	lsreq	r3, r3, #4
 800baae:	3004      	addeq	r0, #4
 800bab0:	0799      	lsls	r1, r3, #30
 800bab2:	bf04      	itt	eq
 800bab4:	089b      	lsreq	r3, r3, #2
 800bab6:	3002      	addeq	r0, #2
 800bab8:	07d9      	lsls	r1, r3, #31
 800baba:	d403      	bmi.n	800bac4 <__lo0bits+0x4e>
 800babc:	085b      	lsrs	r3, r3, #1
 800babe:	f100 0001 	add.w	r0, r0, #1
 800bac2:	d003      	beq.n	800bacc <__lo0bits+0x56>
 800bac4:	6013      	str	r3, [r2, #0]
 800bac6:	4770      	bx	lr
 800bac8:	2000      	movs	r0, #0
 800baca:	4770      	bx	lr
 800bacc:	2020      	movs	r0, #32
 800bace:	4770      	bx	lr

0800bad0 <__i2b>:
 800bad0:	b510      	push	{r4, lr}
 800bad2:	460c      	mov	r4, r1
 800bad4:	2101      	movs	r1, #1
 800bad6:	f7ff ff07 	bl	800b8e8 <_Balloc>
 800bada:	4602      	mov	r2, r0
 800badc:	b928      	cbnz	r0, 800baea <__i2b+0x1a>
 800bade:	4b05      	ldr	r3, [pc, #20]	@ (800baf4 <__i2b+0x24>)
 800bae0:	4805      	ldr	r0, [pc, #20]	@ (800baf8 <__i2b+0x28>)
 800bae2:	f240 1145 	movw	r1, #325	@ 0x145
 800bae6:	f000 fc7b 	bl	800c3e0 <__assert_func>
 800baea:	2301      	movs	r3, #1
 800baec:	6144      	str	r4, [r0, #20]
 800baee:	6103      	str	r3, [r0, #16]
 800baf0:	bd10      	pop	{r4, pc}
 800baf2:	bf00      	nop
 800baf4:	08022184 	.word	0x08022184
 800baf8:	080221a6 	.word	0x080221a6

0800bafc <__multiply>:
 800bafc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb00:	4614      	mov	r4, r2
 800bb02:	690a      	ldr	r2, [r1, #16]
 800bb04:	6923      	ldr	r3, [r4, #16]
 800bb06:	429a      	cmp	r2, r3
 800bb08:	bfa8      	it	ge
 800bb0a:	4623      	movge	r3, r4
 800bb0c:	460f      	mov	r7, r1
 800bb0e:	bfa4      	itt	ge
 800bb10:	460c      	movge	r4, r1
 800bb12:	461f      	movge	r7, r3
 800bb14:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800bb18:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800bb1c:	68a3      	ldr	r3, [r4, #8]
 800bb1e:	6861      	ldr	r1, [r4, #4]
 800bb20:	eb0a 0609 	add.w	r6, sl, r9
 800bb24:	42b3      	cmp	r3, r6
 800bb26:	b085      	sub	sp, #20
 800bb28:	bfb8      	it	lt
 800bb2a:	3101      	addlt	r1, #1
 800bb2c:	f7ff fedc 	bl	800b8e8 <_Balloc>
 800bb30:	b930      	cbnz	r0, 800bb40 <__multiply+0x44>
 800bb32:	4602      	mov	r2, r0
 800bb34:	4b44      	ldr	r3, [pc, #272]	@ (800bc48 <__multiply+0x14c>)
 800bb36:	4845      	ldr	r0, [pc, #276]	@ (800bc4c <__multiply+0x150>)
 800bb38:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bb3c:	f000 fc50 	bl	800c3e0 <__assert_func>
 800bb40:	f100 0514 	add.w	r5, r0, #20
 800bb44:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bb48:	462b      	mov	r3, r5
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	4543      	cmp	r3, r8
 800bb4e:	d321      	bcc.n	800bb94 <__multiply+0x98>
 800bb50:	f107 0114 	add.w	r1, r7, #20
 800bb54:	f104 0214 	add.w	r2, r4, #20
 800bb58:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800bb5c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800bb60:	9302      	str	r3, [sp, #8]
 800bb62:	1b13      	subs	r3, r2, r4
 800bb64:	3b15      	subs	r3, #21
 800bb66:	f023 0303 	bic.w	r3, r3, #3
 800bb6a:	3304      	adds	r3, #4
 800bb6c:	f104 0715 	add.w	r7, r4, #21
 800bb70:	42ba      	cmp	r2, r7
 800bb72:	bf38      	it	cc
 800bb74:	2304      	movcc	r3, #4
 800bb76:	9301      	str	r3, [sp, #4]
 800bb78:	9b02      	ldr	r3, [sp, #8]
 800bb7a:	9103      	str	r1, [sp, #12]
 800bb7c:	428b      	cmp	r3, r1
 800bb7e:	d80c      	bhi.n	800bb9a <__multiply+0x9e>
 800bb80:	2e00      	cmp	r6, #0
 800bb82:	dd03      	ble.n	800bb8c <__multiply+0x90>
 800bb84:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d05b      	beq.n	800bc44 <__multiply+0x148>
 800bb8c:	6106      	str	r6, [r0, #16]
 800bb8e:	b005      	add	sp, #20
 800bb90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb94:	f843 2b04 	str.w	r2, [r3], #4
 800bb98:	e7d8      	b.n	800bb4c <__multiply+0x50>
 800bb9a:	f8b1 a000 	ldrh.w	sl, [r1]
 800bb9e:	f1ba 0f00 	cmp.w	sl, #0
 800bba2:	d024      	beq.n	800bbee <__multiply+0xf2>
 800bba4:	f104 0e14 	add.w	lr, r4, #20
 800bba8:	46a9      	mov	r9, r5
 800bbaa:	f04f 0c00 	mov.w	ip, #0
 800bbae:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bbb2:	f8d9 3000 	ldr.w	r3, [r9]
 800bbb6:	fa1f fb87 	uxth.w	fp, r7
 800bbba:	b29b      	uxth	r3, r3
 800bbbc:	fb0a 330b 	mla	r3, sl, fp, r3
 800bbc0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800bbc4:	f8d9 7000 	ldr.w	r7, [r9]
 800bbc8:	4463      	add	r3, ip
 800bbca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bbce:	fb0a c70b 	mla	r7, sl, fp, ip
 800bbd2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800bbd6:	b29b      	uxth	r3, r3
 800bbd8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bbdc:	4572      	cmp	r2, lr
 800bbde:	f849 3b04 	str.w	r3, [r9], #4
 800bbe2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bbe6:	d8e2      	bhi.n	800bbae <__multiply+0xb2>
 800bbe8:	9b01      	ldr	r3, [sp, #4]
 800bbea:	f845 c003 	str.w	ip, [r5, r3]
 800bbee:	9b03      	ldr	r3, [sp, #12]
 800bbf0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bbf4:	3104      	adds	r1, #4
 800bbf6:	f1b9 0f00 	cmp.w	r9, #0
 800bbfa:	d021      	beq.n	800bc40 <__multiply+0x144>
 800bbfc:	682b      	ldr	r3, [r5, #0]
 800bbfe:	f104 0c14 	add.w	ip, r4, #20
 800bc02:	46ae      	mov	lr, r5
 800bc04:	f04f 0a00 	mov.w	sl, #0
 800bc08:	f8bc b000 	ldrh.w	fp, [ip]
 800bc0c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800bc10:	fb09 770b 	mla	r7, r9, fp, r7
 800bc14:	4457      	add	r7, sl
 800bc16:	b29b      	uxth	r3, r3
 800bc18:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bc1c:	f84e 3b04 	str.w	r3, [lr], #4
 800bc20:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bc24:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bc28:	f8be 3000 	ldrh.w	r3, [lr]
 800bc2c:	fb09 330a 	mla	r3, r9, sl, r3
 800bc30:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800bc34:	4562      	cmp	r2, ip
 800bc36:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bc3a:	d8e5      	bhi.n	800bc08 <__multiply+0x10c>
 800bc3c:	9f01      	ldr	r7, [sp, #4]
 800bc3e:	51eb      	str	r3, [r5, r7]
 800bc40:	3504      	adds	r5, #4
 800bc42:	e799      	b.n	800bb78 <__multiply+0x7c>
 800bc44:	3e01      	subs	r6, #1
 800bc46:	e79b      	b.n	800bb80 <__multiply+0x84>
 800bc48:	08022184 	.word	0x08022184
 800bc4c:	080221a6 	.word	0x080221a6

0800bc50 <__pow5mult>:
 800bc50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc54:	4615      	mov	r5, r2
 800bc56:	f012 0203 	ands.w	r2, r2, #3
 800bc5a:	4607      	mov	r7, r0
 800bc5c:	460e      	mov	r6, r1
 800bc5e:	d007      	beq.n	800bc70 <__pow5mult+0x20>
 800bc60:	4c25      	ldr	r4, [pc, #148]	@ (800bcf8 <__pow5mult+0xa8>)
 800bc62:	3a01      	subs	r2, #1
 800bc64:	2300      	movs	r3, #0
 800bc66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bc6a:	f7ff fe9f 	bl	800b9ac <__multadd>
 800bc6e:	4606      	mov	r6, r0
 800bc70:	10ad      	asrs	r5, r5, #2
 800bc72:	d03d      	beq.n	800bcf0 <__pow5mult+0xa0>
 800bc74:	69fc      	ldr	r4, [r7, #28]
 800bc76:	b97c      	cbnz	r4, 800bc98 <__pow5mult+0x48>
 800bc78:	2010      	movs	r0, #16
 800bc7a:	f7ff fcd3 	bl	800b624 <malloc>
 800bc7e:	4602      	mov	r2, r0
 800bc80:	61f8      	str	r0, [r7, #28]
 800bc82:	b928      	cbnz	r0, 800bc90 <__pow5mult+0x40>
 800bc84:	4b1d      	ldr	r3, [pc, #116]	@ (800bcfc <__pow5mult+0xac>)
 800bc86:	481e      	ldr	r0, [pc, #120]	@ (800bd00 <__pow5mult+0xb0>)
 800bc88:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bc8c:	f000 fba8 	bl	800c3e0 <__assert_func>
 800bc90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bc94:	6004      	str	r4, [r0, #0]
 800bc96:	60c4      	str	r4, [r0, #12]
 800bc98:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bc9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bca0:	b94c      	cbnz	r4, 800bcb6 <__pow5mult+0x66>
 800bca2:	f240 2171 	movw	r1, #625	@ 0x271
 800bca6:	4638      	mov	r0, r7
 800bca8:	f7ff ff12 	bl	800bad0 <__i2b>
 800bcac:	2300      	movs	r3, #0
 800bcae:	f8c8 0008 	str.w	r0, [r8, #8]
 800bcb2:	4604      	mov	r4, r0
 800bcb4:	6003      	str	r3, [r0, #0]
 800bcb6:	f04f 0900 	mov.w	r9, #0
 800bcba:	07eb      	lsls	r3, r5, #31
 800bcbc:	d50a      	bpl.n	800bcd4 <__pow5mult+0x84>
 800bcbe:	4631      	mov	r1, r6
 800bcc0:	4622      	mov	r2, r4
 800bcc2:	4638      	mov	r0, r7
 800bcc4:	f7ff ff1a 	bl	800bafc <__multiply>
 800bcc8:	4631      	mov	r1, r6
 800bcca:	4680      	mov	r8, r0
 800bccc:	4638      	mov	r0, r7
 800bcce:	f7ff fe4b 	bl	800b968 <_Bfree>
 800bcd2:	4646      	mov	r6, r8
 800bcd4:	106d      	asrs	r5, r5, #1
 800bcd6:	d00b      	beq.n	800bcf0 <__pow5mult+0xa0>
 800bcd8:	6820      	ldr	r0, [r4, #0]
 800bcda:	b938      	cbnz	r0, 800bcec <__pow5mult+0x9c>
 800bcdc:	4622      	mov	r2, r4
 800bcde:	4621      	mov	r1, r4
 800bce0:	4638      	mov	r0, r7
 800bce2:	f7ff ff0b 	bl	800bafc <__multiply>
 800bce6:	6020      	str	r0, [r4, #0]
 800bce8:	f8c0 9000 	str.w	r9, [r0]
 800bcec:	4604      	mov	r4, r0
 800bcee:	e7e4      	b.n	800bcba <__pow5mult+0x6a>
 800bcf0:	4630      	mov	r0, r6
 800bcf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcf6:	bf00      	nop
 800bcf8:	08022200 	.word	0x08022200
 800bcfc:	08022115 	.word	0x08022115
 800bd00:	080221a6 	.word	0x080221a6

0800bd04 <__lshift>:
 800bd04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd08:	460c      	mov	r4, r1
 800bd0a:	6849      	ldr	r1, [r1, #4]
 800bd0c:	6923      	ldr	r3, [r4, #16]
 800bd0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bd12:	68a3      	ldr	r3, [r4, #8]
 800bd14:	4607      	mov	r7, r0
 800bd16:	4691      	mov	r9, r2
 800bd18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bd1c:	f108 0601 	add.w	r6, r8, #1
 800bd20:	42b3      	cmp	r3, r6
 800bd22:	db0b      	blt.n	800bd3c <__lshift+0x38>
 800bd24:	4638      	mov	r0, r7
 800bd26:	f7ff fddf 	bl	800b8e8 <_Balloc>
 800bd2a:	4605      	mov	r5, r0
 800bd2c:	b948      	cbnz	r0, 800bd42 <__lshift+0x3e>
 800bd2e:	4602      	mov	r2, r0
 800bd30:	4b28      	ldr	r3, [pc, #160]	@ (800bdd4 <__lshift+0xd0>)
 800bd32:	4829      	ldr	r0, [pc, #164]	@ (800bdd8 <__lshift+0xd4>)
 800bd34:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bd38:	f000 fb52 	bl	800c3e0 <__assert_func>
 800bd3c:	3101      	adds	r1, #1
 800bd3e:	005b      	lsls	r3, r3, #1
 800bd40:	e7ee      	b.n	800bd20 <__lshift+0x1c>
 800bd42:	2300      	movs	r3, #0
 800bd44:	f100 0114 	add.w	r1, r0, #20
 800bd48:	f100 0210 	add.w	r2, r0, #16
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	4553      	cmp	r3, sl
 800bd50:	db33      	blt.n	800bdba <__lshift+0xb6>
 800bd52:	6920      	ldr	r0, [r4, #16]
 800bd54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bd58:	f104 0314 	add.w	r3, r4, #20
 800bd5c:	f019 091f 	ands.w	r9, r9, #31
 800bd60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bd64:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bd68:	d02b      	beq.n	800bdc2 <__lshift+0xbe>
 800bd6a:	f1c9 0e20 	rsb	lr, r9, #32
 800bd6e:	468a      	mov	sl, r1
 800bd70:	2200      	movs	r2, #0
 800bd72:	6818      	ldr	r0, [r3, #0]
 800bd74:	fa00 f009 	lsl.w	r0, r0, r9
 800bd78:	4310      	orrs	r0, r2
 800bd7a:	f84a 0b04 	str.w	r0, [sl], #4
 800bd7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd82:	459c      	cmp	ip, r3
 800bd84:	fa22 f20e 	lsr.w	r2, r2, lr
 800bd88:	d8f3      	bhi.n	800bd72 <__lshift+0x6e>
 800bd8a:	ebac 0304 	sub.w	r3, ip, r4
 800bd8e:	3b15      	subs	r3, #21
 800bd90:	f023 0303 	bic.w	r3, r3, #3
 800bd94:	3304      	adds	r3, #4
 800bd96:	f104 0015 	add.w	r0, r4, #21
 800bd9a:	4584      	cmp	ip, r0
 800bd9c:	bf38      	it	cc
 800bd9e:	2304      	movcc	r3, #4
 800bda0:	50ca      	str	r2, [r1, r3]
 800bda2:	b10a      	cbz	r2, 800bda8 <__lshift+0xa4>
 800bda4:	f108 0602 	add.w	r6, r8, #2
 800bda8:	3e01      	subs	r6, #1
 800bdaa:	4638      	mov	r0, r7
 800bdac:	612e      	str	r6, [r5, #16]
 800bdae:	4621      	mov	r1, r4
 800bdb0:	f7ff fdda 	bl	800b968 <_Bfree>
 800bdb4:	4628      	mov	r0, r5
 800bdb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdba:	f842 0f04 	str.w	r0, [r2, #4]!
 800bdbe:	3301      	adds	r3, #1
 800bdc0:	e7c5      	b.n	800bd4e <__lshift+0x4a>
 800bdc2:	3904      	subs	r1, #4
 800bdc4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdc8:	f841 2f04 	str.w	r2, [r1, #4]!
 800bdcc:	459c      	cmp	ip, r3
 800bdce:	d8f9      	bhi.n	800bdc4 <__lshift+0xc0>
 800bdd0:	e7ea      	b.n	800bda8 <__lshift+0xa4>
 800bdd2:	bf00      	nop
 800bdd4:	08022184 	.word	0x08022184
 800bdd8:	080221a6 	.word	0x080221a6

0800bddc <__mcmp>:
 800bddc:	690a      	ldr	r2, [r1, #16]
 800bdde:	4603      	mov	r3, r0
 800bde0:	6900      	ldr	r0, [r0, #16]
 800bde2:	1a80      	subs	r0, r0, r2
 800bde4:	b530      	push	{r4, r5, lr}
 800bde6:	d10e      	bne.n	800be06 <__mcmp+0x2a>
 800bde8:	3314      	adds	r3, #20
 800bdea:	3114      	adds	r1, #20
 800bdec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bdf0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bdf4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bdf8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bdfc:	4295      	cmp	r5, r2
 800bdfe:	d003      	beq.n	800be08 <__mcmp+0x2c>
 800be00:	d205      	bcs.n	800be0e <__mcmp+0x32>
 800be02:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800be06:	bd30      	pop	{r4, r5, pc}
 800be08:	42a3      	cmp	r3, r4
 800be0a:	d3f3      	bcc.n	800bdf4 <__mcmp+0x18>
 800be0c:	e7fb      	b.n	800be06 <__mcmp+0x2a>
 800be0e:	2001      	movs	r0, #1
 800be10:	e7f9      	b.n	800be06 <__mcmp+0x2a>
	...

0800be14 <__mdiff>:
 800be14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be18:	4689      	mov	r9, r1
 800be1a:	4606      	mov	r6, r0
 800be1c:	4611      	mov	r1, r2
 800be1e:	4648      	mov	r0, r9
 800be20:	4614      	mov	r4, r2
 800be22:	f7ff ffdb 	bl	800bddc <__mcmp>
 800be26:	1e05      	subs	r5, r0, #0
 800be28:	d112      	bne.n	800be50 <__mdiff+0x3c>
 800be2a:	4629      	mov	r1, r5
 800be2c:	4630      	mov	r0, r6
 800be2e:	f7ff fd5b 	bl	800b8e8 <_Balloc>
 800be32:	4602      	mov	r2, r0
 800be34:	b928      	cbnz	r0, 800be42 <__mdiff+0x2e>
 800be36:	4b3f      	ldr	r3, [pc, #252]	@ (800bf34 <__mdiff+0x120>)
 800be38:	f240 2137 	movw	r1, #567	@ 0x237
 800be3c:	483e      	ldr	r0, [pc, #248]	@ (800bf38 <__mdiff+0x124>)
 800be3e:	f000 facf 	bl	800c3e0 <__assert_func>
 800be42:	2301      	movs	r3, #1
 800be44:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800be48:	4610      	mov	r0, r2
 800be4a:	b003      	add	sp, #12
 800be4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be50:	bfbc      	itt	lt
 800be52:	464b      	movlt	r3, r9
 800be54:	46a1      	movlt	r9, r4
 800be56:	4630      	mov	r0, r6
 800be58:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800be5c:	bfba      	itte	lt
 800be5e:	461c      	movlt	r4, r3
 800be60:	2501      	movlt	r5, #1
 800be62:	2500      	movge	r5, #0
 800be64:	f7ff fd40 	bl	800b8e8 <_Balloc>
 800be68:	4602      	mov	r2, r0
 800be6a:	b918      	cbnz	r0, 800be74 <__mdiff+0x60>
 800be6c:	4b31      	ldr	r3, [pc, #196]	@ (800bf34 <__mdiff+0x120>)
 800be6e:	f240 2145 	movw	r1, #581	@ 0x245
 800be72:	e7e3      	b.n	800be3c <__mdiff+0x28>
 800be74:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800be78:	6926      	ldr	r6, [r4, #16]
 800be7a:	60c5      	str	r5, [r0, #12]
 800be7c:	f109 0310 	add.w	r3, r9, #16
 800be80:	f109 0514 	add.w	r5, r9, #20
 800be84:	f104 0e14 	add.w	lr, r4, #20
 800be88:	f100 0b14 	add.w	fp, r0, #20
 800be8c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800be90:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800be94:	9301      	str	r3, [sp, #4]
 800be96:	46d9      	mov	r9, fp
 800be98:	f04f 0c00 	mov.w	ip, #0
 800be9c:	9b01      	ldr	r3, [sp, #4]
 800be9e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bea2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bea6:	9301      	str	r3, [sp, #4]
 800bea8:	fa1f f38a 	uxth.w	r3, sl
 800beac:	4619      	mov	r1, r3
 800beae:	b283      	uxth	r3, r0
 800beb0:	1acb      	subs	r3, r1, r3
 800beb2:	0c00      	lsrs	r0, r0, #16
 800beb4:	4463      	add	r3, ip
 800beb6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800beba:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bebe:	b29b      	uxth	r3, r3
 800bec0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bec4:	4576      	cmp	r6, lr
 800bec6:	f849 3b04 	str.w	r3, [r9], #4
 800beca:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bece:	d8e5      	bhi.n	800be9c <__mdiff+0x88>
 800bed0:	1b33      	subs	r3, r6, r4
 800bed2:	3b15      	subs	r3, #21
 800bed4:	f023 0303 	bic.w	r3, r3, #3
 800bed8:	3415      	adds	r4, #21
 800beda:	3304      	adds	r3, #4
 800bedc:	42a6      	cmp	r6, r4
 800bede:	bf38      	it	cc
 800bee0:	2304      	movcc	r3, #4
 800bee2:	441d      	add	r5, r3
 800bee4:	445b      	add	r3, fp
 800bee6:	461e      	mov	r6, r3
 800bee8:	462c      	mov	r4, r5
 800beea:	4544      	cmp	r4, r8
 800beec:	d30e      	bcc.n	800bf0c <__mdiff+0xf8>
 800beee:	f108 0103 	add.w	r1, r8, #3
 800bef2:	1b49      	subs	r1, r1, r5
 800bef4:	f021 0103 	bic.w	r1, r1, #3
 800bef8:	3d03      	subs	r5, #3
 800befa:	45a8      	cmp	r8, r5
 800befc:	bf38      	it	cc
 800befe:	2100      	movcc	r1, #0
 800bf00:	440b      	add	r3, r1
 800bf02:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bf06:	b191      	cbz	r1, 800bf2e <__mdiff+0x11a>
 800bf08:	6117      	str	r7, [r2, #16]
 800bf0a:	e79d      	b.n	800be48 <__mdiff+0x34>
 800bf0c:	f854 1b04 	ldr.w	r1, [r4], #4
 800bf10:	46e6      	mov	lr, ip
 800bf12:	0c08      	lsrs	r0, r1, #16
 800bf14:	fa1c fc81 	uxtah	ip, ip, r1
 800bf18:	4471      	add	r1, lr
 800bf1a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bf1e:	b289      	uxth	r1, r1
 800bf20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bf24:	f846 1b04 	str.w	r1, [r6], #4
 800bf28:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bf2c:	e7dd      	b.n	800beea <__mdiff+0xd6>
 800bf2e:	3f01      	subs	r7, #1
 800bf30:	e7e7      	b.n	800bf02 <__mdiff+0xee>
 800bf32:	bf00      	nop
 800bf34:	08022184 	.word	0x08022184
 800bf38:	080221a6 	.word	0x080221a6

0800bf3c <__d2b>:
 800bf3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bf40:	460f      	mov	r7, r1
 800bf42:	2101      	movs	r1, #1
 800bf44:	ec59 8b10 	vmov	r8, r9, d0
 800bf48:	4616      	mov	r6, r2
 800bf4a:	f7ff fccd 	bl	800b8e8 <_Balloc>
 800bf4e:	4604      	mov	r4, r0
 800bf50:	b930      	cbnz	r0, 800bf60 <__d2b+0x24>
 800bf52:	4602      	mov	r2, r0
 800bf54:	4b23      	ldr	r3, [pc, #140]	@ (800bfe4 <__d2b+0xa8>)
 800bf56:	4824      	ldr	r0, [pc, #144]	@ (800bfe8 <__d2b+0xac>)
 800bf58:	f240 310f 	movw	r1, #783	@ 0x30f
 800bf5c:	f000 fa40 	bl	800c3e0 <__assert_func>
 800bf60:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bf64:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bf68:	b10d      	cbz	r5, 800bf6e <__d2b+0x32>
 800bf6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bf6e:	9301      	str	r3, [sp, #4]
 800bf70:	f1b8 0300 	subs.w	r3, r8, #0
 800bf74:	d023      	beq.n	800bfbe <__d2b+0x82>
 800bf76:	4668      	mov	r0, sp
 800bf78:	9300      	str	r3, [sp, #0]
 800bf7a:	f7ff fd7c 	bl	800ba76 <__lo0bits>
 800bf7e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bf82:	b1d0      	cbz	r0, 800bfba <__d2b+0x7e>
 800bf84:	f1c0 0320 	rsb	r3, r0, #32
 800bf88:	fa02 f303 	lsl.w	r3, r2, r3
 800bf8c:	430b      	orrs	r3, r1
 800bf8e:	40c2      	lsrs	r2, r0
 800bf90:	6163      	str	r3, [r4, #20]
 800bf92:	9201      	str	r2, [sp, #4]
 800bf94:	9b01      	ldr	r3, [sp, #4]
 800bf96:	61a3      	str	r3, [r4, #24]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	bf0c      	ite	eq
 800bf9c:	2201      	moveq	r2, #1
 800bf9e:	2202      	movne	r2, #2
 800bfa0:	6122      	str	r2, [r4, #16]
 800bfa2:	b1a5      	cbz	r5, 800bfce <__d2b+0x92>
 800bfa4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bfa8:	4405      	add	r5, r0
 800bfaa:	603d      	str	r5, [r7, #0]
 800bfac:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bfb0:	6030      	str	r0, [r6, #0]
 800bfb2:	4620      	mov	r0, r4
 800bfb4:	b003      	add	sp, #12
 800bfb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bfba:	6161      	str	r1, [r4, #20]
 800bfbc:	e7ea      	b.n	800bf94 <__d2b+0x58>
 800bfbe:	a801      	add	r0, sp, #4
 800bfc0:	f7ff fd59 	bl	800ba76 <__lo0bits>
 800bfc4:	9b01      	ldr	r3, [sp, #4]
 800bfc6:	6163      	str	r3, [r4, #20]
 800bfc8:	3020      	adds	r0, #32
 800bfca:	2201      	movs	r2, #1
 800bfcc:	e7e8      	b.n	800bfa0 <__d2b+0x64>
 800bfce:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bfd2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bfd6:	6038      	str	r0, [r7, #0]
 800bfd8:	6918      	ldr	r0, [r3, #16]
 800bfda:	f7ff fd2d 	bl	800ba38 <__hi0bits>
 800bfde:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bfe2:	e7e5      	b.n	800bfb0 <__d2b+0x74>
 800bfe4:	08022184 	.word	0x08022184
 800bfe8:	080221a6 	.word	0x080221a6

0800bfec <__sread>:
 800bfec:	b510      	push	{r4, lr}
 800bfee:	460c      	mov	r4, r1
 800bff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bff4:	f000 f9c0 	bl	800c378 <_read_r>
 800bff8:	2800      	cmp	r0, #0
 800bffa:	bfab      	itete	ge
 800bffc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bffe:	89a3      	ldrhlt	r3, [r4, #12]
 800c000:	181b      	addge	r3, r3, r0
 800c002:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c006:	bfac      	ite	ge
 800c008:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c00a:	81a3      	strhlt	r3, [r4, #12]
 800c00c:	bd10      	pop	{r4, pc}

0800c00e <__swrite>:
 800c00e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c012:	461f      	mov	r7, r3
 800c014:	898b      	ldrh	r3, [r1, #12]
 800c016:	05db      	lsls	r3, r3, #23
 800c018:	4605      	mov	r5, r0
 800c01a:	460c      	mov	r4, r1
 800c01c:	4616      	mov	r6, r2
 800c01e:	d505      	bpl.n	800c02c <__swrite+0x1e>
 800c020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c024:	2302      	movs	r3, #2
 800c026:	2200      	movs	r2, #0
 800c028:	f000 f994 	bl	800c354 <_lseek_r>
 800c02c:	89a3      	ldrh	r3, [r4, #12]
 800c02e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c032:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c036:	81a3      	strh	r3, [r4, #12]
 800c038:	4632      	mov	r2, r6
 800c03a:	463b      	mov	r3, r7
 800c03c:	4628      	mov	r0, r5
 800c03e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c042:	f000 b9bb 	b.w	800c3bc <_write_r>

0800c046 <__sseek>:
 800c046:	b510      	push	{r4, lr}
 800c048:	460c      	mov	r4, r1
 800c04a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c04e:	f000 f981 	bl	800c354 <_lseek_r>
 800c052:	1c43      	adds	r3, r0, #1
 800c054:	89a3      	ldrh	r3, [r4, #12]
 800c056:	bf15      	itete	ne
 800c058:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c05a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c05e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c062:	81a3      	strheq	r3, [r4, #12]
 800c064:	bf18      	it	ne
 800c066:	81a3      	strhne	r3, [r4, #12]
 800c068:	bd10      	pop	{r4, pc}

0800c06a <__sclose>:
 800c06a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c06e:	f000 b93f 	b.w	800c2f0 <_close_r>

0800c072 <_realloc_r>:
 800c072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c076:	4680      	mov	r8, r0
 800c078:	4615      	mov	r5, r2
 800c07a:	460c      	mov	r4, r1
 800c07c:	b921      	cbnz	r1, 800c088 <_realloc_r+0x16>
 800c07e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c082:	4611      	mov	r1, r2
 800c084:	f7ff baf8 	b.w	800b678 <_malloc_r>
 800c088:	b92a      	cbnz	r2, 800c096 <_realloc_r+0x24>
 800c08a:	f000 f9db 	bl	800c444 <_free_r>
 800c08e:	2400      	movs	r4, #0
 800c090:	4620      	mov	r0, r4
 800c092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c096:	f000 fa31 	bl	800c4fc <_malloc_usable_size_r>
 800c09a:	4285      	cmp	r5, r0
 800c09c:	4606      	mov	r6, r0
 800c09e:	d802      	bhi.n	800c0a6 <_realloc_r+0x34>
 800c0a0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c0a4:	d8f4      	bhi.n	800c090 <_realloc_r+0x1e>
 800c0a6:	4629      	mov	r1, r5
 800c0a8:	4640      	mov	r0, r8
 800c0aa:	f7ff fae5 	bl	800b678 <_malloc_r>
 800c0ae:	4607      	mov	r7, r0
 800c0b0:	2800      	cmp	r0, #0
 800c0b2:	d0ec      	beq.n	800c08e <_realloc_r+0x1c>
 800c0b4:	42b5      	cmp	r5, r6
 800c0b6:	462a      	mov	r2, r5
 800c0b8:	4621      	mov	r1, r4
 800c0ba:	bf28      	it	cs
 800c0bc:	4632      	movcs	r2, r6
 800c0be:	f7fe f9bc 	bl	800a43a <memcpy>
 800c0c2:	4621      	mov	r1, r4
 800c0c4:	4640      	mov	r0, r8
 800c0c6:	f000 f9bd 	bl	800c444 <_free_r>
 800c0ca:	463c      	mov	r4, r7
 800c0cc:	e7e0      	b.n	800c090 <_realloc_r+0x1e>

0800c0ce <__swbuf_r>:
 800c0ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0d0:	460e      	mov	r6, r1
 800c0d2:	4614      	mov	r4, r2
 800c0d4:	4605      	mov	r5, r0
 800c0d6:	b118      	cbz	r0, 800c0e0 <__swbuf_r+0x12>
 800c0d8:	6a03      	ldr	r3, [r0, #32]
 800c0da:	b90b      	cbnz	r3, 800c0e0 <__swbuf_r+0x12>
 800c0dc:	f7fe f8ce 	bl	800a27c <__sinit>
 800c0e0:	69a3      	ldr	r3, [r4, #24]
 800c0e2:	60a3      	str	r3, [r4, #8]
 800c0e4:	89a3      	ldrh	r3, [r4, #12]
 800c0e6:	071a      	lsls	r2, r3, #28
 800c0e8:	d501      	bpl.n	800c0ee <__swbuf_r+0x20>
 800c0ea:	6923      	ldr	r3, [r4, #16]
 800c0ec:	b943      	cbnz	r3, 800c100 <__swbuf_r+0x32>
 800c0ee:	4621      	mov	r1, r4
 800c0f0:	4628      	mov	r0, r5
 800c0f2:	f000 f82b 	bl	800c14c <__swsetup_r>
 800c0f6:	b118      	cbz	r0, 800c100 <__swbuf_r+0x32>
 800c0f8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800c0fc:	4638      	mov	r0, r7
 800c0fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c100:	6823      	ldr	r3, [r4, #0]
 800c102:	6922      	ldr	r2, [r4, #16]
 800c104:	1a98      	subs	r0, r3, r2
 800c106:	6963      	ldr	r3, [r4, #20]
 800c108:	b2f6      	uxtb	r6, r6
 800c10a:	4283      	cmp	r3, r0
 800c10c:	4637      	mov	r7, r6
 800c10e:	dc05      	bgt.n	800c11c <__swbuf_r+0x4e>
 800c110:	4621      	mov	r1, r4
 800c112:	4628      	mov	r0, r5
 800c114:	f7ff fbb4 	bl	800b880 <_fflush_r>
 800c118:	2800      	cmp	r0, #0
 800c11a:	d1ed      	bne.n	800c0f8 <__swbuf_r+0x2a>
 800c11c:	68a3      	ldr	r3, [r4, #8]
 800c11e:	3b01      	subs	r3, #1
 800c120:	60a3      	str	r3, [r4, #8]
 800c122:	6823      	ldr	r3, [r4, #0]
 800c124:	1c5a      	adds	r2, r3, #1
 800c126:	6022      	str	r2, [r4, #0]
 800c128:	701e      	strb	r6, [r3, #0]
 800c12a:	6962      	ldr	r2, [r4, #20]
 800c12c:	1c43      	adds	r3, r0, #1
 800c12e:	429a      	cmp	r2, r3
 800c130:	d004      	beq.n	800c13c <__swbuf_r+0x6e>
 800c132:	89a3      	ldrh	r3, [r4, #12]
 800c134:	07db      	lsls	r3, r3, #31
 800c136:	d5e1      	bpl.n	800c0fc <__swbuf_r+0x2e>
 800c138:	2e0a      	cmp	r6, #10
 800c13a:	d1df      	bne.n	800c0fc <__swbuf_r+0x2e>
 800c13c:	4621      	mov	r1, r4
 800c13e:	4628      	mov	r0, r5
 800c140:	f7ff fb9e 	bl	800b880 <_fflush_r>
 800c144:	2800      	cmp	r0, #0
 800c146:	d0d9      	beq.n	800c0fc <__swbuf_r+0x2e>
 800c148:	e7d6      	b.n	800c0f8 <__swbuf_r+0x2a>
	...

0800c14c <__swsetup_r>:
 800c14c:	b538      	push	{r3, r4, r5, lr}
 800c14e:	4b29      	ldr	r3, [pc, #164]	@ (800c1f4 <__swsetup_r+0xa8>)
 800c150:	4605      	mov	r5, r0
 800c152:	6818      	ldr	r0, [r3, #0]
 800c154:	460c      	mov	r4, r1
 800c156:	b118      	cbz	r0, 800c160 <__swsetup_r+0x14>
 800c158:	6a03      	ldr	r3, [r0, #32]
 800c15a:	b90b      	cbnz	r3, 800c160 <__swsetup_r+0x14>
 800c15c:	f7fe f88e 	bl	800a27c <__sinit>
 800c160:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c164:	0719      	lsls	r1, r3, #28
 800c166:	d422      	bmi.n	800c1ae <__swsetup_r+0x62>
 800c168:	06da      	lsls	r2, r3, #27
 800c16a:	d407      	bmi.n	800c17c <__swsetup_r+0x30>
 800c16c:	2209      	movs	r2, #9
 800c16e:	602a      	str	r2, [r5, #0]
 800c170:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c174:	81a3      	strh	r3, [r4, #12]
 800c176:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c17a:	e033      	b.n	800c1e4 <__swsetup_r+0x98>
 800c17c:	0758      	lsls	r0, r3, #29
 800c17e:	d512      	bpl.n	800c1a6 <__swsetup_r+0x5a>
 800c180:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c182:	b141      	cbz	r1, 800c196 <__swsetup_r+0x4a>
 800c184:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c188:	4299      	cmp	r1, r3
 800c18a:	d002      	beq.n	800c192 <__swsetup_r+0x46>
 800c18c:	4628      	mov	r0, r5
 800c18e:	f000 f959 	bl	800c444 <_free_r>
 800c192:	2300      	movs	r3, #0
 800c194:	6363      	str	r3, [r4, #52]	@ 0x34
 800c196:	89a3      	ldrh	r3, [r4, #12]
 800c198:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c19c:	81a3      	strh	r3, [r4, #12]
 800c19e:	2300      	movs	r3, #0
 800c1a0:	6063      	str	r3, [r4, #4]
 800c1a2:	6923      	ldr	r3, [r4, #16]
 800c1a4:	6023      	str	r3, [r4, #0]
 800c1a6:	89a3      	ldrh	r3, [r4, #12]
 800c1a8:	f043 0308 	orr.w	r3, r3, #8
 800c1ac:	81a3      	strh	r3, [r4, #12]
 800c1ae:	6923      	ldr	r3, [r4, #16]
 800c1b0:	b94b      	cbnz	r3, 800c1c6 <__swsetup_r+0x7a>
 800c1b2:	89a3      	ldrh	r3, [r4, #12]
 800c1b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c1b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c1bc:	d003      	beq.n	800c1c6 <__swsetup_r+0x7a>
 800c1be:	4621      	mov	r1, r4
 800c1c0:	4628      	mov	r0, r5
 800c1c2:	f000 f83f 	bl	800c244 <__smakebuf_r>
 800c1c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1ca:	f013 0201 	ands.w	r2, r3, #1
 800c1ce:	d00a      	beq.n	800c1e6 <__swsetup_r+0x9a>
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	60a2      	str	r2, [r4, #8]
 800c1d4:	6962      	ldr	r2, [r4, #20]
 800c1d6:	4252      	negs	r2, r2
 800c1d8:	61a2      	str	r2, [r4, #24]
 800c1da:	6922      	ldr	r2, [r4, #16]
 800c1dc:	b942      	cbnz	r2, 800c1f0 <__swsetup_r+0xa4>
 800c1de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c1e2:	d1c5      	bne.n	800c170 <__swsetup_r+0x24>
 800c1e4:	bd38      	pop	{r3, r4, r5, pc}
 800c1e6:	0799      	lsls	r1, r3, #30
 800c1e8:	bf58      	it	pl
 800c1ea:	6962      	ldrpl	r2, [r4, #20]
 800c1ec:	60a2      	str	r2, [r4, #8]
 800c1ee:	e7f4      	b.n	800c1da <__swsetup_r+0x8e>
 800c1f0:	2000      	movs	r0, #0
 800c1f2:	e7f7      	b.n	800c1e4 <__swsetup_r+0x98>
 800c1f4:	2000001c 	.word	0x2000001c

0800c1f8 <__swhatbuf_r>:
 800c1f8:	b570      	push	{r4, r5, r6, lr}
 800c1fa:	460c      	mov	r4, r1
 800c1fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c200:	2900      	cmp	r1, #0
 800c202:	b096      	sub	sp, #88	@ 0x58
 800c204:	4615      	mov	r5, r2
 800c206:	461e      	mov	r6, r3
 800c208:	da0d      	bge.n	800c226 <__swhatbuf_r+0x2e>
 800c20a:	89a3      	ldrh	r3, [r4, #12]
 800c20c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c210:	f04f 0100 	mov.w	r1, #0
 800c214:	bf14      	ite	ne
 800c216:	2340      	movne	r3, #64	@ 0x40
 800c218:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c21c:	2000      	movs	r0, #0
 800c21e:	6031      	str	r1, [r6, #0]
 800c220:	602b      	str	r3, [r5, #0]
 800c222:	b016      	add	sp, #88	@ 0x58
 800c224:	bd70      	pop	{r4, r5, r6, pc}
 800c226:	466a      	mov	r2, sp
 800c228:	f000 f872 	bl	800c310 <_fstat_r>
 800c22c:	2800      	cmp	r0, #0
 800c22e:	dbec      	blt.n	800c20a <__swhatbuf_r+0x12>
 800c230:	9901      	ldr	r1, [sp, #4]
 800c232:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c236:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c23a:	4259      	negs	r1, r3
 800c23c:	4159      	adcs	r1, r3
 800c23e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c242:	e7eb      	b.n	800c21c <__swhatbuf_r+0x24>

0800c244 <__smakebuf_r>:
 800c244:	898b      	ldrh	r3, [r1, #12]
 800c246:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c248:	079d      	lsls	r5, r3, #30
 800c24a:	4606      	mov	r6, r0
 800c24c:	460c      	mov	r4, r1
 800c24e:	d507      	bpl.n	800c260 <__smakebuf_r+0x1c>
 800c250:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c254:	6023      	str	r3, [r4, #0]
 800c256:	6123      	str	r3, [r4, #16]
 800c258:	2301      	movs	r3, #1
 800c25a:	6163      	str	r3, [r4, #20]
 800c25c:	b003      	add	sp, #12
 800c25e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c260:	ab01      	add	r3, sp, #4
 800c262:	466a      	mov	r2, sp
 800c264:	f7ff ffc8 	bl	800c1f8 <__swhatbuf_r>
 800c268:	9f00      	ldr	r7, [sp, #0]
 800c26a:	4605      	mov	r5, r0
 800c26c:	4639      	mov	r1, r7
 800c26e:	4630      	mov	r0, r6
 800c270:	f7ff fa02 	bl	800b678 <_malloc_r>
 800c274:	b948      	cbnz	r0, 800c28a <__smakebuf_r+0x46>
 800c276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c27a:	059a      	lsls	r2, r3, #22
 800c27c:	d4ee      	bmi.n	800c25c <__smakebuf_r+0x18>
 800c27e:	f023 0303 	bic.w	r3, r3, #3
 800c282:	f043 0302 	orr.w	r3, r3, #2
 800c286:	81a3      	strh	r3, [r4, #12]
 800c288:	e7e2      	b.n	800c250 <__smakebuf_r+0xc>
 800c28a:	89a3      	ldrh	r3, [r4, #12]
 800c28c:	6020      	str	r0, [r4, #0]
 800c28e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c292:	81a3      	strh	r3, [r4, #12]
 800c294:	9b01      	ldr	r3, [sp, #4]
 800c296:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c29a:	b15b      	cbz	r3, 800c2b4 <__smakebuf_r+0x70>
 800c29c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2a0:	4630      	mov	r0, r6
 800c2a2:	f000 f847 	bl	800c334 <_isatty_r>
 800c2a6:	b128      	cbz	r0, 800c2b4 <__smakebuf_r+0x70>
 800c2a8:	89a3      	ldrh	r3, [r4, #12]
 800c2aa:	f023 0303 	bic.w	r3, r3, #3
 800c2ae:	f043 0301 	orr.w	r3, r3, #1
 800c2b2:	81a3      	strh	r3, [r4, #12]
 800c2b4:	89a3      	ldrh	r3, [r4, #12]
 800c2b6:	431d      	orrs	r5, r3
 800c2b8:	81a5      	strh	r5, [r4, #12]
 800c2ba:	e7cf      	b.n	800c25c <__smakebuf_r+0x18>

0800c2bc <memmove>:
 800c2bc:	4288      	cmp	r0, r1
 800c2be:	b510      	push	{r4, lr}
 800c2c0:	eb01 0402 	add.w	r4, r1, r2
 800c2c4:	d902      	bls.n	800c2cc <memmove+0x10>
 800c2c6:	4284      	cmp	r4, r0
 800c2c8:	4623      	mov	r3, r4
 800c2ca:	d807      	bhi.n	800c2dc <memmove+0x20>
 800c2cc:	1e43      	subs	r3, r0, #1
 800c2ce:	42a1      	cmp	r1, r4
 800c2d0:	d008      	beq.n	800c2e4 <memmove+0x28>
 800c2d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c2d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c2da:	e7f8      	b.n	800c2ce <memmove+0x12>
 800c2dc:	4402      	add	r2, r0
 800c2de:	4601      	mov	r1, r0
 800c2e0:	428a      	cmp	r2, r1
 800c2e2:	d100      	bne.n	800c2e6 <memmove+0x2a>
 800c2e4:	bd10      	pop	{r4, pc}
 800c2e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c2ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c2ee:	e7f7      	b.n	800c2e0 <memmove+0x24>

0800c2f0 <_close_r>:
 800c2f0:	b538      	push	{r3, r4, r5, lr}
 800c2f2:	4d06      	ldr	r5, [pc, #24]	@ (800c30c <_close_r+0x1c>)
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	4604      	mov	r4, r0
 800c2f8:	4608      	mov	r0, r1
 800c2fa:	602b      	str	r3, [r5, #0]
 800c2fc:	f7f5 fbf0 	bl	8001ae0 <_close>
 800c300:	1c43      	adds	r3, r0, #1
 800c302:	d102      	bne.n	800c30a <_close_r+0x1a>
 800c304:	682b      	ldr	r3, [r5, #0]
 800c306:	b103      	cbz	r3, 800c30a <_close_r+0x1a>
 800c308:	6023      	str	r3, [r4, #0]
 800c30a:	bd38      	pop	{r3, r4, r5, pc}
 800c30c:	200015f8 	.word	0x200015f8

0800c310 <_fstat_r>:
 800c310:	b538      	push	{r3, r4, r5, lr}
 800c312:	4d07      	ldr	r5, [pc, #28]	@ (800c330 <_fstat_r+0x20>)
 800c314:	2300      	movs	r3, #0
 800c316:	4604      	mov	r4, r0
 800c318:	4608      	mov	r0, r1
 800c31a:	4611      	mov	r1, r2
 800c31c:	602b      	str	r3, [r5, #0]
 800c31e:	f7f5 fbeb 	bl	8001af8 <_fstat>
 800c322:	1c43      	adds	r3, r0, #1
 800c324:	d102      	bne.n	800c32c <_fstat_r+0x1c>
 800c326:	682b      	ldr	r3, [r5, #0]
 800c328:	b103      	cbz	r3, 800c32c <_fstat_r+0x1c>
 800c32a:	6023      	str	r3, [r4, #0]
 800c32c:	bd38      	pop	{r3, r4, r5, pc}
 800c32e:	bf00      	nop
 800c330:	200015f8 	.word	0x200015f8

0800c334 <_isatty_r>:
 800c334:	b538      	push	{r3, r4, r5, lr}
 800c336:	4d06      	ldr	r5, [pc, #24]	@ (800c350 <_isatty_r+0x1c>)
 800c338:	2300      	movs	r3, #0
 800c33a:	4604      	mov	r4, r0
 800c33c:	4608      	mov	r0, r1
 800c33e:	602b      	str	r3, [r5, #0]
 800c340:	f7f5 fbea 	bl	8001b18 <_isatty>
 800c344:	1c43      	adds	r3, r0, #1
 800c346:	d102      	bne.n	800c34e <_isatty_r+0x1a>
 800c348:	682b      	ldr	r3, [r5, #0]
 800c34a:	b103      	cbz	r3, 800c34e <_isatty_r+0x1a>
 800c34c:	6023      	str	r3, [r4, #0]
 800c34e:	bd38      	pop	{r3, r4, r5, pc}
 800c350:	200015f8 	.word	0x200015f8

0800c354 <_lseek_r>:
 800c354:	b538      	push	{r3, r4, r5, lr}
 800c356:	4d07      	ldr	r5, [pc, #28]	@ (800c374 <_lseek_r+0x20>)
 800c358:	4604      	mov	r4, r0
 800c35a:	4608      	mov	r0, r1
 800c35c:	4611      	mov	r1, r2
 800c35e:	2200      	movs	r2, #0
 800c360:	602a      	str	r2, [r5, #0]
 800c362:	461a      	mov	r2, r3
 800c364:	f7f5 fbe3 	bl	8001b2e <_lseek>
 800c368:	1c43      	adds	r3, r0, #1
 800c36a:	d102      	bne.n	800c372 <_lseek_r+0x1e>
 800c36c:	682b      	ldr	r3, [r5, #0]
 800c36e:	b103      	cbz	r3, 800c372 <_lseek_r+0x1e>
 800c370:	6023      	str	r3, [r4, #0]
 800c372:	bd38      	pop	{r3, r4, r5, pc}
 800c374:	200015f8 	.word	0x200015f8

0800c378 <_read_r>:
 800c378:	b538      	push	{r3, r4, r5, lr}
 800c37a:	4d07      	ldr	r5, [pc, #28]	@ (800c398 <_read_r+0x20>)
 800c37c:	4604      	mov	r4, r0
 800c37e:	4608      	mov	r0, r1
 800c380:	4611      	mov	r1, r2
 800c382:	2200      	movs	r2, #0
 800c384:	602a      	str	r2, [r5, #0]
 800c386:	461a      	mov	r2, r3
 800c388:	f7f5 fb8d 	bl	8001aa6 <_read>
 800c38c:	1c43      	adds	r3, r0, #1
 800c38e:	d102      	bne.n	800c396 <_read_r+0x1e>
 800c390:	682b      	ldr	r3, [r5, #0]
 800c392:	b103      	cbz	r3, 800c396 <_read_r+0x1e>
 800c394:	6023      	str	r3, [r4, #0]
 800c396:	bd38      	pop	{r3, r4, r5, pc}
 800c398:	200015f8 	.word	0x200015f8

0800c39c <_sbrk_r>:
 800c39c:	b538      	push	{r3, r4, r5, lr}
 800c39e:	4d06      	ldr	r5, [pc, #24]	@ (800c3b8 <_sbrk_r+0x1c>)
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	4604      	mov	r4, r0
 800c3a4:	4608      	mov	r0, r1
 800c3a6:	602b      	str	r3, [r5, #0]
 800c3a8:	f7f5 fbce 	bl	8001b48 <_sbrk>
 800c3ac:	1c43      	adds	r3, r0, #1
 800c3ae:	d102      	bne.n	800c3b6 <_sbrk_r+0x1a>
 800c3b0:	682b      	ldr	r3, [r5, #0]
 800c3b2:	b103      	cbz	r3, 800c3b6 <_sbrk_r+0x1a>
 800c3b4:	6023      	str	r3, [r4, #0]
 800c3b6:	bd38      	pop	{r3, r4, r5, pc}
 800c3b8:	200015f8 	.word	0x200015f8

0800c3bc <_write_r>:
 800c3bc:	b538      	push	{r3, r4, r5, lr}
 800c3be:	4d07      	ldr	r5, [pc, #28]	@ (800c3dc <_write_r+0x20>)
 800c3c0:	4604      	mov	r4, r0
 800c3c2:	4608      	mov	r0, r1
 800c3c4:	4611      	mov	r1, r2
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	602a      	str	r2, [r5, #0]
 800c3ca:	461a      	mov	r2, r3
 800c3cc:	f7f4 fe8c 	bl	80010e8 <_write>
 800c3d0:	1c43      	adds	r3, r0, #1
 800c3d2:	d102      	bne.n	800c3da <_write_r+0x1e>
 800c3d4:	682b      	ldr	r3, [r5, #0]
 800c3d6:	b103      	cbz	r3, 800c3da <_write_r+0x1e>
 800c3d8:	6023      	str	r3, [r4, #0]
 800c3da:	bd38      	pop	{r3, r4, r5, pc}
 800c3dc:	200015f8 	.word	0x200015f8

0800c3e0 <__assert_func>:
 800c3e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c3e2:	4614      	mov	r4, r2
 800c3e4:	461a      	mov	r2, r3
 800c3e6:	4b09      	ldr	r3, [pc, #36]	@ (800c40c <__assert_func+0x2c>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	4605      	mov	r5, r0
 800c3ec:	68d8      	ldr	r0, [r3, #12]
 800c3ee:	b954      	cbnz	r4, 800c406 <__assert_func+0x26>
 800c3f0:	4b07      	ldr	r3, [pc, #28]	@ (800c410 <__assert_func+0x30>)
 800c3f2:	461c      	mov	r4, r3
 800c3f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c3f8:	9100      	str	r1, [sp, #0]
 800c3fa:	462b      	mov	r3, r5
 800c3fc:	4905      	ldr	r1, [pc, #20]	@ (800c414 <__assert_func+0x34>)
 800c3fe:	f000 f885 	bl	800c50c <fiprintf>
 800c402:	f000 f8a2 	bl	800c54a <abort>
 800c406:	4b04      	ldr	r3, [pc, #16]	@ (800c418 <__assert_func+0x38>)
 800c408:	e7f4      	b.n	800c3f4 <__assert_func+0x14>
 800c40a:	bf00      	nop
 800c40c:	2000001c 	.word	0x2000001c
 800c410:	08022446 	.word	0x08022446
 800c414:	08022418 	.word	0x08022418
 800c418:	0802240b 	.word	0x0802240b

0800c41c <_calloc_r>:
 800c41c:	b570      	push	{r4, r5, r6, lr}
 800c41e:	fba1 5402 	umull	r5, r4, r1, r2
 800c422:	b93c      	cbnz	r4, 800c434 <_calloc_r+0x18>
 800c424:	4629      	mov	r1, r5
 800c426:	f7ff f927 	bl	800b678 <_malloc_r>
 800c42a:	4606      	mov	r6, r0
 800c42c:	b928      	cbnz	r0, 800c43a <_calloc_r+0x1e>
 800c42e:	2600      	movs	r6, #0
 800c430:	4630      	mov	r0, r6
 800c432:	bd70      	pop	{r4, r5, r6, pc}
 800c434:	220c      	movs	r2, #12
 800c436:	6002      	str	r2, [r0, #0]
 800c438:	e7f9      	b.n	800c42e <_calloc_r+0x12>
 800c43a:	462a      	mov	r2, r5
 800c43c:	4621      	mov	r1, r4
 800c43e:	f7fd ffc3 	bl	800a3c8 <memset>
 800c442:	e7f5      	b.n	800c430 <_calloc_r+0x14>

0800c444 <_free_r>:
 800c444:	b538      	push	{r3, r4, r5, lr}
 800c446:	4605      	mov	r5, r0
 800c448:	2900      	cmp	r1, #0
 800c44a:	d041      	beq.n	800c4d0 <_free_r+0x8c>
 800c44c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c450:	1f0c      	subs	r4, r1, #4
 800c452:	2b00      	cmp	r3, #0
 800c454:	bfb8      	it	lt
 800c456:	18e4      	addlt	r4, r4, r3
 800c458:	f7ff fa3a 	bl	800b8d0 <__malloc_lock>
 800c45c:	4a1d      	ldr	r2, [pc, #116]	@ (800c4d4 <_free_r+0x90>)
 800c45e:	6813      	ldr	r3, [r2, #0]
 800c460:	b933      	cbnz	r3, 800c470 <_free_r+0x2c>
 800c462:	6063      	str	r3, [r4, #4]
 800c464:	6014      	str	r4, [r2, #0]
 800c466:	4628      	mov	r0, r5
 800c468:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c46c:	f7ff ba36 	b.w	800b8dc <__malloc_unlock>
 800c470:	42a3      	cmp	r3, r4
 800c472:	d908      	bls.n	800c486 <_free_r+0x42>
 800c474:	6820      	ldr	r0, [r4, #0]
 800c476:	1821      	adds	r1, r4, r0
 800c478:	428b      	cmp	r3, r1
 800c47a:	bf01      	itttt	eq
 800c47c:	6819      	ldreq	r1, [r3, #0]
 800c47e:	685b      	ldreq	r3, [r3, #4]
 800c480:	1809      	addeq	r1, r1, r0
 800c482:	6021      	streq	r1, [r4, #0]
 800c484:	e7ed      	b.n	800c462 <_free_r+0x1e>
 800c486:	461a      	mov	r2, r3
 800c488:	685b      	ldr	r3, [r3, #4]
 800c48a:	b10b      	cbz	r3, 800c490 <_free_r+0x4c>
 800c48c:	42a3      	cmp	r3, r4
 800c48e:	d9fa      	bls.n	800c486 <_free_r+0x42>
 800c490:	6811      	ldr	r1, [r2, #0]
 800c492:	1850      	adds	r0, r2, r1
 800c494:	42a0      	cmp	r0, r4
 800c496:	d10b      	bne.n	800c4b0 <_free_r+0x6c>
 800c498:	6820      	ldr	r0, [r4, #0]
 800c49a:	4401      	add	r1, r0
 800c49c:	1850      	adds	r0, r2, r1
 800c49e:	4283      	cmp	r3, r0
 800c4a0:	6011      	str	r1, [r2, #0]
 800c4a2:	d1e0      	bne.n	800c466 <_free_r+0x22>
 800c4a4:	6818      	ldr	r0, [r3, #0]
 800c4a6:	685b      	ldr	r3, [r3, #4]
 800c4a8:	6053      	str	r3, [r2, #4]
 800c4aa:	4408      	add	r0, r1
 800c4ac:	6010      	str	r0, [r2, #0]
 800c4ae:	e7da      	b.n	800c466 <_free_r+0x22>
 800c4b0:	d902      	bls.n	800c4b8 <_free_r+0x74>
 800c4b2:	230c      	movs	r3, #12
 800c4b4:	602b      	str	r3, [r5, #0]
 800c4b6:	e7d6      	b.n	800c466 <_free_r+0x22>
 800c4b8:	6820      	ldr	r0, [r4, #0]
 800c4ba:	1821      	adds	r1, r4, r0
 800c4bc:	428b      	cmp	r3, r1
 800c4be:	bf04      	itt	eq
 800c4c0:	6819      	ldreq	r1, [r3, #0]
 800c4c2:	685b      	ldreq	r3, [r3, #4]
 800c4c4:	6063      	str	r3, [r4, #4]
 800c4c6:	bf04      	itt	eq
 800c4c8:	1809      	addeq	r1, r1, r0
 800c4ca:	6021      	streq	r1, [r4, #0]
 800c4cc:	6054      	str	r4, [r2, #4]
 800c4ce:	e7ca      	b.n	800c466 <_free_r+0x22>
 800c4d0:	bd38      	pop	{r3, r4, r5, pc}
 800c4d2:	bf00      	nop
 800c4d4:	200015f4 	.word	0x200015f4

0800c4d8 <__ascii_mbtowc>:
 800c4d8:	b082      	sub	sp, #8
 800c4da:	b901      	cbnz	r1, 800c4de <__ascii_mbtowc+0x6>
 800c4dc:	a901      	add	r1, sp, #4
 800c4de:	b142      	cbz	r2, 800c4f2 <__ascii_mbtowc+0x1a>
 800c4e0:	b14b      	cbz	r3, 800c4f6 <__ascii_mbtowc+0x1e>
 800c4e2:	7813      	ldrb	r3, [r2, #0]
 800c4e4:	600b      	str	r3, [r1, #0]
 800c4e6:	7812      	ldrb	r2, [r2, #0]
 800c4e8:	1e10      	subs	r0, r2, #0
 800c4ea:	bf18      	it	ne
 800c4ec:	2001      	movne	r0, #1
 800c4ee:	b002      	add	sp, #8
 800c4f0:	4770      	bx	lr
 800c4f2:	4610      	mov	r0, r2
 800c4f4:	e7fb      	b.n	800c4ee <__ascii_mbtowc+0x16>
 800c4f6:	f06f 0001 	mvn.w	r0, #1
 800c4fa:	e7f8      	b.n	800c4ee <__ascii_mbtowc+0x16>

0800c4fc <_malloc_usable_size_r>:
 800c4fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c500:	1f18      	subs	r0, r3, #4
 800c502:	2b00      	cmp	r3, #0
 800c504:	bfbc      	itt	lt
 800c506:	580b      	ldrlt	r3, [r1, r0]
 800c508:	18c0      	addlt	r0, r0, r3
 800c50a:	4770      	bx	lr

0800c50c <fiprintf>:
 800c50c:	b40e      	push	{r1, r2, r3}
 800c50e:	b503      	push	{r0, r1, lr}
 800c510:	4601      	mov	r1, r0
 800c512:	ab03      	add	r3, sp, #12
 800c514:	4805      	ldr	r0, [pc, #20]	@ (800c52c <fiprintf+0x20>)
 800c516:	f853 2b04 	ldr.w	r2, [r3], #4
 800c51a:	6800      	ldr	r0, [r0, #0]
 800c51c:	9301      	str	r3, [sp, #4]
 800c51e:	f7fe ff69 	bl	800b3f4 <_vfiprintf_r>
 800c522:	b002      	add	sp, #8
 800c524:	f85d eb04 	ldr.w	lr, [sp], #4
 800c528:	b003      	add	sp, #12
 800c52a:	4770      	bx	lr
 800c52c:	2000001c 	.word	0x2000001c

0800c530 <__ascii_wctomb>:
 800c530:	4603      	mov	r3, r0
 800c532:	4608      	mov	r0, r1
 800c534:	b141      	cbz	r1, 800c548 <__ascii_wctomb+0x18>
 800c536:	2aff      	cmp	r2, #255	@ 0xff
 800c538:	d904      	bls.n	800c544 <__ascii_wctomb+0x14>
 800c53a:	228a      	movs	r2, #138	@ 0x8a
 800c53c:	601a      	str	r2, [r3, #0]
 800c53e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c542:	4770      	bx	lr
 800c544:	700a      	strb	r2, [r1, #0]
 800c546:	2001      	movs	r0, #1
 800c548:	4770      	bx	lr

0800c54a <abort>:
 800c54a:	b508      	push	{r3, lr}
 800c54c:	2006      	movs	r0, #6
 800c54e:	f000 f82b 	bl	800c5a8 <raise>
 800c552:	2001      	movs	r0, #1
 800c554:	f7f5 fa9c 	bl	8001a90 <_exit>

0800c558 <_raise_r>:
 800c558:	291f      	cmp	r1, #31
 800c55a:	b538      	push	{r3, r4, r5, lr}
 800c55c:	4605      	mov	r5, r0
 800c55e:	460c      	mov	r4, r1
 800c560:	d904      	bls.n	800c56c <_raise_r+0x14>
 800c562:	2316      	movs	r3, #22
 800c564:	6003      	str	r3, [r0, #0]
 800c566:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c56a:	bd38      	pop	{r3, r4, r5, pc}
 800c56c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c56e:	b112      	cbz	r2, 800c576 <_raise_r+0x1e>
 800c570:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c574:	b94b      	cbnz	r3, 800c58a <_raise_r+0x32>
 800c576:	4628      	mov	r0, r5
 800c578:	f000 f830 	bl	800c5dc <_getpid_r>
 800c57c:	4622      	mov	r2, r4
 800c57e:	4601      	mov	r1, r0
 800c580:	4628      	mov	r0, r5
 800c582:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c586:	f000 b817 	b.w	800c5b8 <_kill_r>
 800c58a:	2b01      	cmp	r3, #1
 800c58c:	d00a      	beq.n	800c5a4 <_raise_r+0x4c>
 800c58e:	1c59      	adds	r1, r3, #1
 800c590:	d103      	bne.n	800c59a <_raise_r+0x42>
 800c592:	2316      	movs	r3, #22
 800c594:	6003      	str	r3, [r0, #0]
 800c596:	2001      	movs	r0, #1
 800c598:	e7e7      	b.n	800c56a <_raise_r+0x12>
 800c59a:	2100      	movs	r1, #0
 800c59c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c5a0:	4620      	mov	r0, r4
 800c5a2:	4798      	blx	r3
 800c5a4:	2000      	movs	r0, #0
 800c5a6:	e7e0      	b.n	800c56a <_raise_r+0x12>

0800c5a8 <raise>:
 800c5a8:	4b02      	ldr	r3, [pc, #8]	@ (800c5b4 <raise+0xc>)
 800c5aa:	4601      	mov	r1, r0
 800c5ac:	6818      	ldr	r0, [r3, #0]
 800c5ae:	f7ff bfd3 	b.w	800c558 <_raise_r>
 800c5b2:	bf00      	nop
 800c5b4:	2000001c 	.word	0x2000001c

0800c5b8 <_kill_r>:
 800c5b8:	b538      	push	{r3, r4, r5, lr}
 800c5ba:	4d07      	ldr	r5, [pc, #28]	@ (800c5d8 <_kill_r+0x20>)
 800c5bc:	2300      	movs	r3, #0
 800c5be:	4604      	mov	r4, r0
 800c5c0:	4608      	mov	r0, r1
 800c5c2:	4611      	mov	r1, r2
 800c5c4:	602b      	str	r3, [r5, #0]
 800c5c6:	f7f5 fa53 	bl	8001a70 <_kill>
 800c5ca:	1c43      	adds	r3, r0, #1
 800c5cc:	d102      	bne.n	800c5d4 <_kill_r+0x1c>
 800c5ce:	682b      	ldr	r3, [r5, #0]
 800c5d0:	b103      	cbz	r3, 800c5d4 <_kill_r+0x1c>
 800c5d2:	6023      	str	r3, [r4, #0]
 800c5d4:	bd38      	pop	{r3, r4, r5, pc}
 800c5d6:	bf00      	nop
 800c5d8:	200015f8 	.word	0x200015f8

0800c5dc <_getpid_r>:
 800c5dc:	f7f5 ba40 	b.w	8001a60 <_getpid>

0800c5e0 <_init>:
 800c5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5e2:	bf00      	nop
 800c5e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5e6:	bc08      	pop	{r3}
 800c5e8:	469e      	mov	lr, r3
 800c5ea:	4770      	bx	lr

0800c5ec <_fini>:
 800c5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5ee:	bf00      	nop
 800c5f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5f2:	bc08      	pop	{r3}
 800c5f4:	469e      	mov	lr, r3
 800c5f6:	4770      	bx	lr
